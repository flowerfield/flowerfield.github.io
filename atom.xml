<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2019-07-25T13:18:37.258Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端框架系列-动态响应和绑定</title>
    <link href="https://weibo.com/u/3800117445/2019/07/23/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97%20%E5%8A%A8%E6%80%81%E5%93%8D%E5%BA%94%E5%92%8C%E7%BB%91%E5%AE%9A/"/>
    <id>https://weibo.com/u/3800117445/2019/07/23/前端框架系列 动态响应和绑定/</id>
    <published>2019-07-22T16:00:00.000Z</published>
    <updated>2019-07-25T13:18:37.258Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将继续讨论 <code>前端框架\模板中</code> 文本插值的实现方案，主要关注当数据变化后页面标签也实时更新功能，以及典型属性绑定方案的实现(譬如 <code>v-for</code>和<code>v-bind</code>等指令)，需要指出的是本文面向的是初学者的入门级文章仅仅从<a href=""> ( 结果 )…( 实现<br>) </a>的角度来讨论解决问题的过程，侧重点并不在于技术的深度也不探讨框架的内部架构和实现原理。</div><p class="titleX"><strong>数据和标签的动态响应</strong></p><p>在<a href=""> 上文中..文本插值 </a>我们已经讨论过如何把数据映射到页面标签的问题，并且给出了简陋的Class结构，对于前端框架来说标签中插值部分能够跟随数据实时动态更新是标配的功能，现在我们来考虑下这个功能要如何来实现。下面是<a href=""> Vue官网 </a>对<strong>响应式</strong>渲染的说明。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们已经成功创建了第一个 Vue 应用！</span><br><span class="line">看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。</span><br><span class="line">现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？</span><br><span class="line">打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改app.message的值，你将看到上例相应地更新。</span><br></pre></td></tr></table></figure><p>简单点说，我们现在要考虑的是当数据(<code>data的成员</code>)发生变化的时候，页面挂载标签中对应的部分也要能够实时更新。如何实现呢？<span style="color:red">自然而然的我们能够想到 —— 监听数据的变化，当数据变化的时候通知更新UI ( 重新计算和渲染 ) 即可。</span> </p><p class="titleX"><strong>监听对象成员的读写操作</strong></p><p>如何监听数据的变化呢？要知道数据都作为实例对象的成员(属性)而存在的。监听对象(对象属性)的读写操作以利用Object的静态方法<code>Object.defineProperty</code>来实现，下面简单介绍其基本使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>: <span class="string">"wendingding"</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"name"</span>, &#123;</span><br><span class="line">    value: <span class="string">"文顶顶"</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.name); <span class="comment">//"文顶顶"</span></span><br></pre></td></tr></table></figure><p><strong>❏</strong> <code>语法</code>：<code>Object.defineProperty(target,key,options)</code><br><strong>❏</strong> <code>参数</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* target   目标对象</span><br><span class="line">* key      对象(成员)属性名称</span><br><span class="line">* options  对象属性描述对象</span><br></pre></td></tr></table></figure></p><p><strong>❏</strong> <code>用途</code>：更细粒度的定义对象以控制指定属性的值、是否可配置(删除)、是否可枚举以及是否可写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"name"</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"监听到-执行读取操作"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    set(newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"监听到-执行写入操作"</span>, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(o.name); <span class="comment">//监听到-执行读取操作</span></span><br><span class="line">o.name = <span class="string">"夏"</span>; <span class="comment">//监听到-执行写入操作 夏</span></span><br></pre></td></tr></table></figure></p><p>当我们试图访问对象属性的时候可以在<code>get</code>方法中拦截，当尝试设置对象属性的时候能够在<code>set</code>方法中拦截，到这里我们已经掌握了一种可以监听对象中属性读写操作的方式。<code>Object.defineProperty</code>方法只能够对对象中的单个标签进行监听，而我们框架的响应模型中需要对对象中的多个数据(<code>构造函数参数对象中data的所有成员</code>)的写操作进行监听，怎么处理呢？且看下面的实现代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>: <span class="string">"xx"</span>,<span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">"女"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">definePropertyReact</span>(<span class="params">o, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 定义目标对象的单个属性：(读 | 写) 监听 */</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(o, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"监听到读取操作"</span>, key);</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newVal) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"监听到设置操作"</span>, key, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 迭代对象的成员，为每个数据属性都监听监听 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> o) &#123; definePropertyReact(o, key, o[key]) &#125;</span><br></pre></td></tr></table></figure></p><p>当程序运行后，我们可以在控制台通过o.name的方式访问和修改属性的值，下面是执行的结果。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/vue003.png?raw=true" height="200px"></p><p class="titleX"><strong>动态响应的代码实现</strong></p><p>现在我们已经解决了对象属性<strong><code>写操作</code></strong>监听的问题，剩下的就是当对象中指定属性的<code>写操作</code>被触发时通知让UI更新即可，下面给出完整的Manager实现和演示代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 12px;color:#195;margin:10px 30px"</span>&gt;</span> &#123;&#123;author&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;textA&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;textB&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JS代码部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Class的写法 */</span></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">constructor</span>(o) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/*  根据传入的el来获取页面中挂载的标签 */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(o.el);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.rootInnerHTMLCopy = <span class="keyword">this</span>.el.innerHTML;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 存data属性中所有的属性名 */</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 给data属性中所有数据添加读写操作监听 */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.keys = [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o.data) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.keys.push(key);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.definePropertyReact(<span class="keyword">this</span>, key, o.data[key])</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 第一次渲染 */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.ObserverPropertyChange();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        definePropertyReact(o, key, val) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 定义目标对象的单个属性：(读 | 写) 监听 */</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">Object</span>.defineProperty(o, key, &#123;</span></span><br><span class="line"><span class="javascript">                configurable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                enumerable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                get() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> val;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                set(newVal) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"监听到设置操作"</span>, key, newVal);</span></span><br><span class="line"><span class="undefined">                    val = newVal;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">/* 当修改数据的时候通知UI重新渲染 */</span></span></span><br><span class="line"><span class="undefined">                    self.ObserverPropertyChange();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        ObserverPropertyChange() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.el.innerHTML = <span class="keyword">this</span>.rootInnerHTMLCopy;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.keys.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`&#123;&#123;2&#125;\\s*<span class="subst">$&#123;ele&#125;</span>\\s*&#125;&#123;2&#125;`</span>, <span class="string">"g"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.el.innerHTML = <span class="keyword">this</span>.el.innerHTML.replace(reg, <span class="keyword">this</span>[ele]);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* 初始化：传入配置对象创建实例对象 */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Manager(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">"沐春风"</span>,</span></span><br><span class="line"><span class="javascript">            textA: <span class="string">"白马秋风塞上"</span>,</span></span><br><span class="line"><span class="javascript">            textB: <span class="string">"杏花烟雨江南"</span>,</span></span><br><span class="line"><span class="javascript">            author: <span class="string">"文顶顶"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/xxxxx.gif?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将继续讨论 &lt;code&gt;前端框架\模板中&lt;/code&gt; 文本插值的实现方案，主要关注当数据变化后页面标签也实时更新功能，以及典型属性绑定方案的实现(譬如 &lt;code&gt;v-for&lt;/code&gt;和&lt;code&gt;v-bind&lt;/code&gt;等指令)，需
      
    
    </summary>
    
    
      <category term="前端框架系列" scheme="https://weibo.com/u/3800117445/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>前端框架系列-文本插值</title>
    <link href="https://weibo.com/u/3800117445/2019/07/22/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97%20%E6%96%87%E6%9C%AC%E6%8F%92%E5%80%BC/"/>
    <id>https://weibo.com/u/3800117445/2019/07/22/前端框架系列 文本插值/</id>
    <published>2019-07-21T16:00:00.000Z</published>
    <updated>2019-07-25T08:06:54.888Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文讨论 <code>前端框架\模板中</code> 文本插值的实现方案，本文将会主要以<a href="">Vue</a>框架作为参考讨论文本插值语法的具体实现和推导方案，并补充相关的技术细节。</div><p class="titleX"><strong>文本插值</strong></p><p>在Vue官网文档的第一部分( <a href="https://cn.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">声明式渲染</a> )我们可以看到下面一段描述。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: 'Hello Vue!'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">我们已经成功创建了第一个 Vue 应用！</span><br><span class="line">看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。</span><br><span class="line">现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？</span><br><span class="line">打开你的浏览器的JavaScript控制台，并修改 app.message 的值，你将看到上例相应地更新。</span><br></pre></td></tr></table></figure></p><p>在Vue官网的另一部分(<a href="https://cn.vuejs.org/v2/guide/syntax.html" target="_blank" rel="noopener">模板语法-插值</a>)说明了<span style="color:red">“ Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析 ”。</span></p><p>我们知道，在Vue框架中数据绑定的插值语法使用的是<code>Mustache语法 (双大括号)</code> ，而这篇短小的文章将简单讨论其内部的实现机制。</p><p class="titleX"><strong>Class-实例的构建初步</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 标签部分</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 引入框架文件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 创建Vue实例</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: 'Hello Vue!'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在Vue框架中我们总是会通过上面的方式来创建并得到一个实例对象，在调用的时候我们传递了一个对象作为构造函数(class)的参数，在该对象中我们设置了<code>挂载的标签(el属性)</code>、<code>实例数据(data属性)</code>等信息。这里，我们先提供一个<a href=""> 构造函数 或者是 Class </a>来模拟这个整体的结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Class的写法 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(o) &#123;</span><br><span class="line">        <span class="comment">/*  根据传入的el来获取页面中挂载的标签 */</span></span><br><span class="line">        <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(o.el);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 把对象参数中的data成员(数据)添加到实例对象 */</span></span><br><span class="line">        <span class="comment">/* 在访问的时候可以直接通过(new Manager()).xx访问 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o.data) &#123;</span><br><span class="line">            <span class="keyword">this</span>[key] = o.data[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 初始化：传入配置对象创建实例对象 */</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Manager(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">"Hello 文顶顶!"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/flowerField/Source/master/Blog/vue001.png" height="150px"></p><p>在开始的时候，[ 构造函数 \ Class ]的样子可能可能是像上面这样的，先尝试获取参数对象中<code>el</code>的值以获取实例在页面中挂载的标签，然后通过一个循环结构来把<code>data</code>中的数据都直接添加到实例对象，这种处理将允许我们直接以<code>app.message</code>的方式来操作数据。</p><p class="titleX"><strong>数据和标签的渲染关系</strong></p><p>设计出基本结构后，现在我们可以开始考虑如果需要把<code>data</code>中的数据渲染(绑定)到页面的标签，那该如何实现？ 简单思考一秒钟后，我们似乎可以尝试以下的实践策略：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 在初始化的操作中先获取挂载标签的属性节点(这很容易办到，使用innerHTML就可以)。</span><br><span class="line">(2) 在innerHTML中寻找类类似于&#123;&#123;message&#125;&#125;的结构，如果找到那么抠出双括号中的字段-message</span><br><span class="line">(3) 在实例对象中获取-message字段对应的value值，使用该值来替换&#123;&#123;message&#125;&#125;部分。</span><br><span class="line">(!) 因为标签中可能存在多个插值代码，因此可能需要循环处理，在寻找插值代码的时候使用正则匹配或许会比较合适。</span><br></pre></td></tr></table></figure></p><p>下面试着给出用正则来匹配标签内容并进行替换的核心代码，正则表达式的结果可以参考下面的注释，用于匹配<a href="">  </a>的特定结构，<code>\s*</code>表示可以允许存在空格，<code>\\s</code>表示对<code>\</code>进行转义处理，参数<code>g</code>用以表示应用全局匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`&#123;&#123;2&#125;\\s*msg\\s*&#125;&#123;2&#125;`</span>, <span class="string">"g"</span>);</span><br><span class="line"><span class="comment">/* /&#123;&#123;2&#125;\s*msg\s*&#125;&#123;2&#125;/g  */</span></span><br><span class="line"><span class="keyword">this</span>.el.innerHTML = <span class="keyword">this</span>.el.innerHTML.replace(reg, <span class="string">"文顶顶"</span>);</span><br></pre></td></tr></table></figure><p>考虑到在参数对象的<code>data</code>中可能会有多个数据(<code>键值对</code>)，且执行文本插值的时候某个数据可能会出现在标签的多个位置，因此需要通过循环的方式来检查 <a href="">innerTTML</a> 字段中每个数据的情况。我们可以通过 <code>Object.keys()</code>方法来获取所有的属性名(<code>key的集合</code>)，然后遍历该数组并执行正则替换操作。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123; message &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JS代码部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* Class的写法 */</span></span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">constructor</span>(o) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/*  根据传入的el来获取页面中挂载的标签 */</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(o.el);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">/* 把对象参数中的data成员(数据)添加到实例对象 */</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">/* 在访问的时候可以直接通过(new Manager()).xx访问 */</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o.data) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>[key] = o.data[key];</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/* 获取data数据中所有的key */</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">/* 根据data中的属性集合来遍历渲染页面中指定的内容 */</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">Object</span>.keys(o.data).forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`&#123;&#123;2&#125;\\s*<span class="subst">$&#123;ele&#125;</span>\\s*&#125;&#123;2&#125;`</span>, <span class="string">"g"</span>);</span></span><br><span class="line"><span class="javascript">                     <span class="comment">/*  /&#123;&#123;2&#125;\s*message\s*&#125;&#123;2&#125;/g */</span></span></span><br><span class="line"><span class="javascript">                     <span class="comment">/*  /&#123;&#123;2&#125;\s*msg\s*&#125;&#123;2&#125;/g     */</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.el.innerHTML, reg);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.el.innerHTML = <span class="keyword">this</span>.el.innerHTML.replace(reg, <span class="keyword">this</span>[ele]);</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* 初始化：传入配置对象创建实例对象 */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Manager(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">"文顶顶"</span>,</span></span><br><span class="line"><span class="javascript">                msg: <span class="string">"米桃儿"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当代码执行的时候，可以看到下面的效果。</p><p><img src="https://raw.githubusercontent.com/flowerField/Source/master/Blog/vue002.png" height="300px"></p><p>至此，便简单了实现了数据-标签渲染的功能。如果数据发生变化后标签中对应的内容也要随之变化，这种数据驱动UI的结构最核心之处在于<code>监听数据的变化并通知给UI视图</code>，具体实现可以参考下一篇文章。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文讨论 &lt;code&gt;前端框架\模板中&lt;/code&gt; 文本插值的实现方案，本文将会主要以&lt;a href=&quot;&quot;&gt;Vue&lt;/a&gt;框架作为参考讨论文本插值语法的具体实现和推导方案，并补充相关的技术细节。&lt;/div&gt;

&lt;p class=&quot;titleX&quot;
      
    
    </summary>
    
    
      <category term="前端框架系列" scheme="https://weibo.com/u/3800117445/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>网络编程系列 store</title>
    <link href="https://weibo.com/u/3800117445/2019/05/31/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>https://weibo.com/u/3800117445/2019/05/31/网络编程系列 数据存储/</id>
    <published>2019-05-30T16:00:00.000Z</published>
    <updated>2019-06-13T06:06:47.777Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX"><strong>数据存储技术(Cookie)简单介绍</strong></div><p>web存储相关的技术：<code>cookie | sessionStorage | localStorage | 应用缓存</code><br>cookie是一种会话跟踪技术，用于在进行网页访问的时候，存储页面中的某些数据信息。</p><p><strong>cookie的使用注意点</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">001 使用cookie来进行数据存储的大小有限制，4KB</span><br><span class="line">002 每个网页中存储cookie的个数（最多50）和每个网站中存储cookie的个数都有限制（200）</span><br><span class="line">003 各个不同的浏览器对cookie的数量也不相同</span><br><span class="line"></span><br><span class="line">    IE6.0：每个域为20个，大小为4095个字节</span><br><span class="line">    IE7.0/8.0：每个域为50个 ，大小为4095个字节</span><br><span class="line">    Opera：每个域为30个 ，4096个字节</span><br><span class="line">    FF：每个域为50个  ，大小为4097个字节</span><br><span class="line">    Safari：没有个数限制，大小为4097个字节</span><br><span class="line">    Chrome：每个域为53个，大小为4097个字节</span><br><span class="line">    总结：在进行页面cookie操作的时候，应该尽量保证cookie个数小于20个，总大小 小于4KB</span><br><span class="line"></span><br><span class="line">004 cookie数据的过期时间</span><br><span class="line"></span><br><span class="line">    1）默认情况下，cookie存储的内容是一次性的，它的有效期间是当前会话（需要把整个浏览器都关闭会话就结束）</span><br><span class="line">    2）设置过期时间：通过expires=time;的格式来进行指定设置之后没超过过期时间则数据一直在。</span><br><span class="line"></span><br><span class="line">005 cookie是不可以跨浏览器的(在IE中保存的cookie, 不可以在火狐中使用)</span><br><span class="line"></span><br><span class="line">006 cookie是不可以跨域的(跨域名)</span><br><span class="line">    示例：127.0.0.1/code/test.html 和127.0.0.1/code/test1.html可以访问</span><br><span class="line"></span><br><span class="line">    网络请求的常见路径：</span><br><span class="line">        http://www.baidu.com:80/资源</span><br><span class="line">        协议://域名.后缀:端口号/资源</span><br><span class="line"></span><br><span class="line">    不能跨域的含义：就是只有 （协议+域名+后缀+端口）号都相同才能相互访问</span><br><span class="line"></span><br><span class="line">        http://www.baidu.com:80/a.html</span><br><span class="line">        http://www.baidu.com:80/b.html  能</span><br><span class="line"></span><br><span class="line">        http://www.baidu.com:81/a.html</span><br><span class="line">        http://www.baidu.com:80/b.html 不能（端口号不相同）</span><br><span class="line"></span><br><span class="line">        http://mp3.baidu.com:80/a.html</span><br><span class="line">        http://map.baidu.com:80/b.html 不能（二级域名不相同）</span><br><span class="line"></span><br><span class="line">        https://www.baidu.com:80/a.html</span><br><span class="line">        http://www.baidu.com:80/b.html 不能（协议不相同）</span><br><span class="line"></span><br><span class="line">        http://www.bdu.com:80/a.html</span><br><span class="line">        http://www.dbu.com:80/b.html 不能（以及域名不相同）</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>Cookie的设置和使用</strong></div><p> <strong>设置方法</strong></p><p>设置cookie数据：<code>document.cookie = &quot;name=zhangsan&quot;;</code><br>设置cookie数据和过期的时间：<code>document.cookie = &quot;name=zhangsan; expires=&quot;+date+&quot;;&quot;;</code><br>过期7天的设置：<code>var date = new Date();</code> // date.setDate(date.getDate() + 7);</p><p><strong>使用注意</strong></p><p>在设置cookie的时候，一次只能设置一个数据（一个键值对），不能进行批量设置<br>错误的演示：<code>window.cookie = &quot;name=zhangsan&amp;age=18&quot;;</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//设置三个cookie的值，默认的过期时间是seesion（会话内）</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">"name=wendingding"</span>;</span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">"age=18"</span>;</span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">"des=12345"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置cookie的值，并指定过期的时间</span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    date.setDate(date.getDate() + <span class="number">3</span>);   <span class="comment">//3天的过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：在设置过期时间的时候，中间使用；分隔开发</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">"color=red;expires="</span>+date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除cookie</span></span><br><span class="line">    <span class="comment">//删除cookie的原理：只要过期时间超过了当前的时间, 数据就会被删除</span></span><br><span class="line">    date.setDate(date.getDate() + <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">"age=18; expires="</span>+date+<span class="string">";"</span>;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><p><strong>Cookie操作的封装</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Cookie = &#123;</span><br><span class="line">        getItem(name) &#123;</span><br><span class="line">            <span class="keyword">let</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">"; "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> arr = cookies[i].split(<span class="string">"="</span>);</span><br><span class="line">                <span class="keyword">if</span> (name == arr[<span class="number">0</span>]) <span class="keyword">return</span> arr[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        setItem(name, value, days) &#123;</span><br><span class="line">            <span class="keyword">if</span> (days) &#123;</span><br><span class="line">                <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                date.setDate(date.getDate() + days);</span><br><span class="line">                <span class="built_in">document</span>.cookie = <span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;value&#125;</span>;expires=<span class="subst">$&#123;date&#125;</span>`</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">document</span>.cookie = <span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        removeItem(name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setItem(name, <span class="literal">null</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        hasItem(name) &#123;</span><br><span class="line">            <span class="keyword">let</span> keys = <span class="keyword">this</span>.keys();</span><br><span class="line">            <span class="keyword">let</span> flas = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (keys) &#123;</span><br><span class="line">                flas = keys.includes(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flas;</span><br><span class="line">        &#125;,</span><br><span class="line">        clear() &#123;</span><br><span class="line">            <span class="keyword">let</span> keys = <span class="keyword">this</span>.keys();</span><br><span class="line">            keys.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.removeItem(ele);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        keys() &#123;</span><br><span class="line">            <span class="keyword">let</span> result = [];</span><br><span class="line">            <span class="keyword">let</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">"; "</span>);</span><br><span class="line">            cookies.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> arr = ele.split(<span class="string">"="</span>);</span><br><span class="line">                result.push(arr[<span class="number">0</span>]);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>sessionStorage技术简单介绍</strong></div><p>（1）在存储用户数据的时候，因为cookie可以存储的数据比较小才4KB左右，所以也可以考虑使用<code>sessionStorage</code>来存储，大小限制为2M左右<br>（2）该技术和localStorage是h5推出的，因此在使用的时候，需要考虑到兼容性的问题<br>（3）相关资料：<a href="http://www.w3school.com.cn/html5/html_5_webstorage.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/html5/html_5_webstorage.asp</a><br>（4）简单介绍和使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">001 sessionStorage：会话存储技术（session-会话）</span><br><span class="line">002 该技术和cookie一样，一样浏览器退出了，那么保存的数据就会</span><br><span class="line">003 sessionStorage技术的相关操作：添加|获取|更新|删除|清空</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn1"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn2"</span>&gt;</span>获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn3"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn4"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn5"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">"age"</span>,<span class="string">"18"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">"des"</span>,<span class="string">"no des"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oInput = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.querySelector(<span class="string">".btn1"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    oBtn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">"name"</span>,oInput.value);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.querySelector(<span class="string">".btn2"</span>);</span></span><br><span class="line"><span class="javascript">    oBtn2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.sessionStorage.getItem(<span class="string">"name"</span>));</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn3 = <span class="built_in">document</span>.querySelector(<span class="string">".btn3"</span>);</span></span><br><span class="line"><span class="javascript">    oBtn3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//更新操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">"name"</span>,oInput.value);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn4 = <span class="built_in">document</span>.querySelector(<span class="string">".btn4"</span>);</span></span><br><span class="line"><span class="javascript">    oBtn4.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.removeItem(<span class="string">"name"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn5 = <span class="built_in">document</span>.querySelector(<span class="string">".btn5"</span>);</span></span><br><span class="line"><span class="javascript">    oBtn5.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//清空操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.clear();</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>localStorage技术简单介绍</strong></div><p>（1）简单对比：保存在本地 + 没有时间限制<br>（2）大小比较：4K(cookie) - 5M(sessionStorage) - 20M(localStorage)<br>（3）使用方式和sessionStorage相同<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn1"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn2"</span>&gt;</span>获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn3"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn4"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn5"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.localStorage.setItem(<span class="string">"age"</span>,<span class="string">"18"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.localStorage.setItem(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.localStorage.setItem(<span class="string">"des"</span>,<span class="string">"no des"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oInput = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.querySelector(<span class="string">".btn1"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    oBtn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.localStorage.setItem(<span class="string">"name"</span>,oInput.value);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.querySelector(<span class="string">".btn2"</span>);</span></span><br><span class="line"><span class="javascript">    oBtn2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.localStorage.getItem(<span class="string">"name"</span>));</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn3 = <span class="built_in">document</span>.querySelector(<span class="string">".btn3"</span>);</span></span><br><span class="line"><span class="javascript">    oBtn3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//更新操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.localStorage.setItem(<span class="string">"name"</span>,oInput.value);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn4 = <span class="built_in">document</span>.querySelector(<span class="string">".btn4"</span>);</span></span><br><span class="line"><span class="javascript">    oBtn4.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.localStorage.removeItem(<span class="string">"name"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBtn5 = <span class="built_in">document</span>.querySelector(<span class="string">".btn5"</span>);</span></span><br><span class="line"><span class="javascript">    oBtn5.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//清空操作</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.localStorage.clear();</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>应用程序缓存简单介绍</strong></div><p><strong>简单介绍</strong>：h5推出的应用程序缓存，可以对Web页面进行缓存，并且可以在没有网络的情况下进行访问，所有主流浏览器均支持应用程序缓存，除了 Internet Explorer，主要优点<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）支持离线浏览（没有网络的情况下依然可以查看）</span><br><span class="line">2）速度更快，性能更好（使用缓存文件可以提高访问的速度）</span><br><span class="line">3）减轻服务器端的压力 - 浏览器将只从服务器下载更新过或更改过的资源</span><br></pre></td></tr></table></figure></p><p><strong>代码和配置文件演示</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1）在页面中加载资源文件（图片），调试工具窗口选择（none network）表示网络无法连接</span><br><span class="line">2）新创建xx.appcache文件，在该文件配置要缓存的内容</span><br><span class="line">3）设置html页面中的manifest属性为配置文件路径</span><br><span class="line"></span><br><span class="line">    CACHE MANIFEST</span><br><span class="line"> </span><br><span class="line">    CACHE:</span><br><span class="line">    # 需要缓存的列表</span><br><span class="line">    0.jpg</span><br><span class="line"> </span><br><span class="line">    NETWORK:</span><br><span class="line">    # 不需要缓存的</span><br><span class="line">    1.jpg</span><br><span class="line"> </span><br><span class="line">    FALLBACK:</span><br><span class="line">    # 访问缓存失败后，备用访问的资源</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;数据存储技术(Cookie)简单介绍&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;web存储相关的技术：&lt;code&gt;cookie | sessionStorage | localStorage | 应用缓存&lt;/code&gt;&lt;br&gt;c
      
    
    </summary>
    
    
      <category term="数据安全系列" scheme="https://weibo.com/u/3800117445/tags/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [29]-RegExp</title>
    <link href="https://weibo.com/u/3800117445/2019/05/11/javaScript%E7%B3%BB%E5%88%97%20%5B29%5D-RegExp/"/>
    <id>https://weibo.com/u/3800117445/2019/05/11/javaScript系列 [29]-RegExp/</id>
    <published>2019-05-10T16:23:18.000Z</published>
    <updated>2019-06-11T01:32:06.867Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍RegExp相关的知识点，包括正则表达式的创建、匹配规则等内容。</div><br><div class="titleX"><strong>RegExp简单介绍</strong></div><br><strong>正则表达式</strong><a href=""> Regular Expression </a>是描述字符模式的对象，在JavaScript语言中提供了内置的 RegExp 来处理正则。正则表达式能够进行强大的<code>模式匹配</code>和<code>文本检索与替换</code>功能，在前端开发中往往有大量的表单数据校验的工作，使用正则表达式可以减少数据校验的工作量。<br><br>在JavaScript语言中，除 RegExp 内置构造函数外，字符串操作中也有很多操作涉及到正则，包括字符串的<code>macth()</code>、<code>search()</code>、<code>split()</code>以及<code>replace()</code>等方法都接受正则表达式作为参数，而这也为我们操作字符串提供了更强大的功能。<br><br><div class="titleX"><strong>正则表达式的创建</strong></div><p>正则表达式的创建支持两种形式，一种是直接字面量方式创建，一种是使用 RegExp 构造函数方式创建，两种创建方式得到的正则实例是等价的。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">① 字面量</span></p><p>字面量创建正则的语法 <span style="color:#195;font-family:Georgia">var reg = / pattern / flags;</span> 其中 pattern(模式) 部分可以是任何简单或复杂的正则表达式，而 flags(参数) 部分支持三种匹配模式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g: global              表示全局匹配</span><br><span class="line">i: case-insensitive    表示忽略大小写</span><br><span class="line">m: multiline           表示多行匹配,影响^，$的匹配结果</span><br></pre></td></tr></table></figure></p><p>JavaScript语言在字面量创建正则的语法中，模式部分可以直接写特定的字符串文本，也可以使用正则元字符，需要注意的是因为这些元字符在正则表达式中都有一种或者多种特殊的用途，因此如果想要匹配字符串中包含的这些字符，那么就必须对它们进行转义操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-字面量的方式创建*/</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/文顶顶/g</span>;                  <span class="comment">/*匹配文顶顶文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/[a-zA-Z0-9]\d&#123;3&#125;/g</span>;       <span class="comment">/*匹配以字母和数字开头后面跟3个数字的文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/^javaScript/g</span>;            <span class="comment">/*匹配以JavaScript开头的文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/^javaScript/gm</span>;           <span class="comment">/*匹配以JavaScript开头或作为行首的文本，全局多行匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg5 = <span class="regexp">/[xm]xia/i</span>;                <span class="comment">/*匹配xxia或者mxia文本，不区分大小写*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*.是正则中的元字符,代表除了换行外的所有字符*/</span></span><br><span class="line"><span class="keyword">var</span> reg6 = <span class="regexp">/.com/gi</span>;                  <span class="comment">/*匹配所有以com结尾的4个字符，不区分大小写*/</span></span><br><span class="line"><span class="keyword">var</span> reg7 = <span class="regexp">/\.com/gi</span>;                 <span class="comment">/*匹配所有.com文本，不区分大小写*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-正则测试*/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">"你好，文顶顶！"</span>));    <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"a123"</span>));           <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"5123"</span>));           <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"-123"</span>));           <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"java\njavaScript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(str));              <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg3));             <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg4));             <span class="comment">//["javaScript"]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xxiao"</span>));          <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"MxiAo"</span>));          <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xiongXxiao"</span>));     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xiaoxiao"</span>));       <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg6.test(<span class="string">"baiducom"</span>));       <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg7.test(<span class="string">"baiducom"</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg7.test(<span class="string">"wendingding.com"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">② 构造函数</span></p><p>RegExp 构造函数创建正则实例的语法  <span style="color:#195;font-family:Georgia">var reg = new RegExp( pattern , flags ) ;</span>其中 pattern(模式) 部分可以是任何简单或复杂的正则表达式(直接写字符串规则即可)，而 flags(参数) 部分和字面量方式一样也支持三种匹配模式。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-构造函数创建正则表达式*/</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"文顶顶"</span>,<span class="string">"g"</span>);            <span class="comment">/*匹配文顶顶文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[a-zA-Z0-9]\\d&#123;3&#125;"</span>,<span class="string">"g"</span>) <span class="comment">/*匹配字母和数字开头后跟3个数字的文本全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^javaScript"</span>,<span class="string">"g"</span>);  <span class="comment">/*匹配以JavaScript开头的文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg4 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^javaScript"</span>,<span class="string">"gm"</span>); <span class="comment">/*匹配以JavaScript开头或作为行首的文本全局多行匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg5 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[xm]xia"</span>,<span class="string">"i"</span>);      <span class="comment">/*匹配xxia或者mxia文本，不区分大小写*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*.是正则中的元字符,代表除了换行外的所有字符*/</span></span><br><span class="line"><span class="keyword">var</span> reg6 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">".com"</span>,<span class="string">"gi"</span>);        <span class="comment">/*匹配所有以com结尾的4个字符，不区分大小写*/</span></span><br><span class="line"><span class="keyword">var</span> reg7 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\.com"</span>,<span class="string">"gi"</span>);      <span class="comment">/*匹配所有.com文本，不区分大小写*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*02-正则测试*/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">"hello，文顶顶！"</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"a123"</span>));           <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"5123"</span>));           <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"-123"</span>));           <span class="comment">//false</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"java\njavaScript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(str));              <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg3));             <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg4));             <span class="comment">//["javaScript"]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xxiao"</span>));          <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"MxiAo"</span>));          <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xiongXxiao"</span>));     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xiaoxiao"</span>));       <span class="comment">//false</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(reg6.test(<span class="string">"baiducom"</span>));       <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg7.test(<span class="string">"baiducom"</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg7.test(<span class="string">"wendingding.com"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>RegExp基本使用</strong></div><p><strong>字符串方法</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str.search()</span><br><span class="line">    返回第一次匹配时所在的索引值,如果匹配不到则返回-1</span><br><span class="line">str.match()</span><br><span class="line">    - 默认匹配字符串，返回一个数组</span><br><span class="line">        + 0:所匹配的字符</span><br><span class="line">        + index:匹配第一个字符所在的索引</span><br><span class="line">        + input:对字符串的引用</span><br><span class="line">    - 全局匹配(g)，返回一个匹配所有字符串数组</span><br><span class="line">    - 如果匹配不到则返回null</span><br><span class="line">str.replace()  利用正则匹配来替换字符串</span><br><span class="line">str.split()    利用正则匹配来切割字符串</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-replace方法的基本使用*/</span></span><br><span class="line"><span class="comment">/*01-1 清空字符串前面和后面的N个空格(实现字符串trim方法功能)*/</span></span><br><span class="line"><span class="comment">//var reg1   = /^\s+|\s+$/g;</span></span><br><span class="line"><span class="keyword">var</span> reg1     = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^\\s+|\\s+$"</span>,<span class="string">"g"</span>)</span><br><span class="line"><span class="keyword">var</span> result   = <span class="string">" trim test   "</span>.replace(reg1,<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);                            <span class="comment">//trim test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-2 处理字符串中的敏感词*/</span></span><br><span class="line"><span class="keyword">var</span>  world = <span class="string">"华为荣耀"</span>;</span><br><span class="line"><span class="keyword">var</span>  reg2  = <span class="keyword">new</span> <span class="built_in">RegExp</span>(world,<span class="string">"g"</span>);</span><br><span class="line"><span class="keyword">var</span>  str   = <span class="string">"华为公司今天宣布旗下手机华为荣耀正式上市，华为荣耀价格感人只卖998"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg2, <span class="string">"****"</span>));</span><br><span class="line"><span class="comment">/*华为公司今天宣布旗下手机****正式上市，****价格感人只卖998*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-match方法的基本使用*/</span></span><br><span class="line"><span class="comment">/*02-1 默认匹配*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/华为荣耀/</span>));</span><br><span class="line"><span class="comment">//["华为荣耀", index: 13, input: "华为公司今天宣布旗下手机华为荣耀正式上市，华为荣耀价格感人只卖998"</span></span><br><span class="line"><span class="comment">//groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-2 全局匹配*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/华为荣耀/g</span>));  <span class="comment">/*["华为荣耀", "华为荣耀"]*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-3 匹配失败*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/苹果/</span>));      <span class="comment">/*null*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-search方法的基本使用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/华为荣耀/</span>));  <span class="comment">/*13*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/苹果/</span>));     <span class="comment">/*-1*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-split方法的基本使用*/</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"2019-05-20"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"熊大  ,熊二 ，光头强，  毛毛， 吉吉&gt;凯特"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">"-"</span>));        <span class="comment">//["2019", "05", "20"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="string">","</span>));        <span class="comment">//["熊大", "熊二，光头强，  毛毛， 吉吉&gt;凯特"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="regexp">/\s*[,，&gt;]\s*/g</span>));<span class="comment">//["熊大", "熊二", "光头强", "毛毛", "吉吉", "凯特"]</span></span><br></pre></td></tr></table></figure><p><strong>RegExp的核心成员</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">regExp.test() 测试正则表达式用test方法,返回布尔值</span><br><span class="line">    - 格式：正则表达式.test(字符串)</span><br><span class="line">    - 用<span class="tag">&lt;<span class="name">正则表达式</span>&gt;</span>测试<span class="tag">&lt;<span class="name">字符串</span>&gt;</span>是否匹配,返回true/false</span><br><span class="line">regExp.exec() 测试正则表达式exec方法</span><br><span class="line">    - 格式：/xx/.exec(字符串)</span><br><span class="line">global        是否应用g</span><br><span class="line">ignoreCase    是否忽略大小写模式</span><br><span class="line">multiline     是否应用多行匹配模式</span><br><span class="line">source        包含正则表达式文本的字符串</span><br><span class="line">lastIndex     整数，如果正则中应用了g全局匹配，则保存下一次开始检索的位置，在exec和test方法中会被用到</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/小青蛙/gi</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.global);      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.ignoreCase);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);   <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.multiline);   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.source);      <span class="comment">//小青蛙</span></span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>RegExp匹配规则</strong></div><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">001 所有字母和数字都是按照字面量进行匹配,和字符串匹配等效 如/good/gi</span><br><span class="line">002 字符类（只记小写字母即可）</span><br><span class="line">    - `. ` : 除换行以外的字符</span><br><span class="line">    - \w : 代表数字或字母或下划线</span><br><span class="line">    - \W : 非数字字母和下划线字符</span><br><span class="line">    - \d : 数字</span><br><span class="line">    - \D : 非数字</span><br><span class="line">    - \s : 代表一个空格</span><br><span class="line">    - \S : 空格以外的字符</span><br><span class="line">    注意：以上所有字符类都只是匹配“一个”字符</span><br><span class="line">    </span><br><span class="line">003 边界处理</span><br><span class="line">    - \b : 匹配一个单词边界，也就是指单词和空格间的位置</span><br><span class="line">    - \B : 匹配非单词边界。</span><br><span class="line"></span><br><span class="line">004 特殊符号</span><br><span class="line">    &gt;^  $  .  *  +  ?  =  !  :  |  \  /  ()  []  &#123;&#125;</span><br><span class="line">    - []: 代表任意“单个字符” ,里面的内容表示“或”的关系</span><br><span class="line">        + -: 代表范围</span><br><span class="line">        + ^: 代表非</span><br><span class="line"></span><br><span class="line">    - (): 表示分组（n是以最左边括号出现的顺序排列）</span><br><span class="line">        + $1: 表示第一个分组</span><br><span class="line">        + $n: 表示第n个分组（不能写在正则表达式里）</span><br><span class="line">        + \n: 在正则分组后面使用，表示对第n个分组的引用(一定要写在正则表达式里)</span><br><span class="line">        建议：编写的正则分组数量越少越好</span><br><span class="line"></span><br><span class="line">    - |:  表示或者</span><br><span class="line"></span><br><span class="line">    - 锚点定位</span><br><span class="line">        + ^: 表示以什么开头</span><br><span class="line">        + $: 表示以什么结尾</span><br><span class="line"></span><br><span class="line">    - 表示数量，对前一个字符计数，</span><br><span class="line">        + *: 代表0个或0个以上  &#123;0,&#125;</span><br><span class="line">        + +: 代表1个或1个以上  &#123;1,&#125;</span><br><span class="line">        + ?: 代表0个或1个     &#123;0,1&#125;</span><br><span class="line">        + &#123;&#125;:</span><br><span class="line">            \d&#123;5&#125;: 匹配5个数字</span><br><span class="line">            \d&#123;5,10&#125;: 匹配5个到10个数字</span><br><span class="line">            \d&#123;5,&#125;: 匹配5个或5个以上的数字</span><br><span class="line">        说明:</span><br><span class="line">            1）数量词*,+,&#123;5,&#125;，会尽可能多的去匹配结果（贪婪）</span><br><span class="line">            2）在后面加一个?表示尽可能少的去匹配结果（非贪婪）</span><br><span class="line">                google,goooogle ==&gt; /go+/</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍RegExp相关的知识点，包括正则表达式的创建、匹配规则等内容。&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;RegExp简单介绍&lt;/strong&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;正则表达式&lt;/stron
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [28]-Event</title>
    <link href="https://weibo.com/u/3800117445/2019/05/01/javaScript%E7%B3%BB%E5%88%97%20%5B28%5D-Event/"/>
    <id>https://weibo.com/u/3800117445/2019/05/01/javaScript系列 [28]-Event/</id>
    <published>2019-04-30T16:23:18.000Z</published>
    <updated>2019-06-11T01:32:06.883Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍JavaScript事件相关的知识点，主要包括事件流、事件处理程序、事件对象(event)以及常见事件类型和事件委托等相关内容。</div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base45.png?raw=true"></p><p>在网页开发涉及的三种基础技术(<a href=""> HTML \ CSS \ JavaScript </a>)中，JavaScript主要负责处理页面的<code>行为</code>，而所谓行为大多指的是<code>交互行为</code>。<strong>JavaScript和HTML间的交互通过事件来实现</strong>，换句话来说事件其实就是页面文档或浏览器窗口中发生的特定交互，譬如页面中的按钮标签被点击我们称之为按钮的点击(<code>click</code>)事件，类似的还有页面加载事件、鼠标的移入移除等等。</p><p>通常,我们在开发中对事件的操作(处理)主要由两部分组成，即<code>事件注册</code>和<code>事件函数</code>。我们总是需要先通过特定的方式来给标签添加(注册)事件监听，当事件发生时事件函数将得以调用执行。本文以<strong>能够清晰明确的把事件的传递过程、事件注册的方式、事件对象以及常见的事件类型讲解清楚</strong>为目标。</p><p class="titleX"><strong>事件流</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base47.png?raw=true"></p><p><strong>事件流</strong> 描述的其实是事件内在的传递过程(顺序)。</p><p>我们的开发经验是，当我们给某些标签注册(绑定)了事件后，该事件被触发就会执行对应的事件处理函数。这似乎是一个顺理成章的经验，但事件到底是如何传递的呢 ？我们知道在网页中有很多的Node节点，而Node节点之间是复杂的树结构，事件在接收、传递和处理的时候，是按照<code>目标节点-&gt;上层节点-&gt;根节点</code>还是<code>根节点-&gt;下层节点-&gt;目标节点</code>的顺序传递的呢？ 不管它们是按照什么样的顺序来传递接收的，事件在传递的时候都会形成一个流式的传递结构，这就是所谓的事件流。</p><p>关于事件流的处理最早由<a href=""> IE4 </a>和 <a href=""> Netscape Communicator 4 </a>两个浏览器开发团队提出具体方案，有意思的是它们在处理这个相同问题的时候居然提出了两种完全相反的事件流方案。其中，<a href=""> IE </a>的事件流是<strong>事件冒泡流</strong>，而 <a href=""> Netscape Communicator 4 </a>的事件流是<strong>事件捕获流</strong>。如果再加上<code>DOM2级事件规定的事件流</code>，那么意味着我们将要学习<code>三种不同事件流</code>，感觉有些棘手但好在它们本身并不复杂。下面我们将从IE的冒泡事件流开始介绍。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base48.png?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195">事件冒泡流</span></p><p><strong>事件冒泡<a href=""> event bubbling </a></strong> 指的是事件开始时由最具体的元素接收，然后逐级向上传递到文档。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195">事件捕获流</span></p><p><strong>事件捕获<a href=""> event capturing </a></strong> 指的是由页面文档先接收事件，然后逐级向下传递到最具体的元素。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base50.png?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195">DOM事件流</span></p><p><strong>DOM2级事件</strong> 规定的事件流包括三个阶段：<a href="">事件捕获阶段</a>、<a href="">处于目标阶段</a> 和 <a href="">事件冒泡阶段</a>。事件捕获会首先发生，其为截获事件提供了机会，然后是实际的目标接收到事件，最后会对事件进行冒泡，可以在事件冒泡阶段对事件作出响应。</p><p><strong>事件流的浏览器支持情况</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(一)事件冒泡流</span><br><span class="line">所有现代浏览器都支持事件冒泡，在具体实现的时候存在差异。</span><br><span class="line">IE5-的事件冒泡会跳过html标签，而IE9+、Firefox、Chrome 和 Safari 则将事件一直冒泡到 window 对象。</span><br><span class="line"></span><br><span class="line">(二)事件捕获流</span><br><span class="line">IE9+、Firefox、Chrome、Safari 和 Opera等浏览器均支持事件捕获流，它们均从 window 对象开始捕获事件。</span><br><span class="line">因为老版本的浏览器不支持，因此很少有人使用事件捕获流(只在特殊需要的时候)。</span><br><span class="line"></span><br><span class="line">(三)DOM事件流</span><br><span class="line">IE9+、Firefox、Chrome、Safari 和 Opera等浏览器均支持DOM事件流，IE8-则不支持。</span><br></pre></td></tr></table></figure></p><p class="titleX"><strong>事件处理程序(函数)</strong></p><p>事件指的是用户或浏览器自身执行的某种动作，譬如点击、拖拽、滚动等都是事件，在JavaScript中每种事件都有自己对应的名字，我们需要先通过特定的形式来给标签注册(绑定)事件，等事件被触发后进行响应，这个用来响应某个具体事件的函数我们称之为<code>事件处理函数</code>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base52.png?raw=true"></p><p>在网页开发中，我们为标签事件指定事件处理函数的方式有多种，下面分别介绍。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">① 在html标签中添加事件处理函数</span></p><p>我们可以直接在标签身上以<code>属性节点</code>的形式来添加事件处理函数，这个属性节点的值要求是能够执行的JavaScript代码，可以是弹出框、函数调用等等形式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--弹出消息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert('点击了按钮')"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制台输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"showMsg()"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--弹出消息(事件的类型-click)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"alert(event.type)"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--弹出消息(输入框的值-文顶顶)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"alert(this.value)"</span> <span class="attr">value</span>=<span class="string">"文顶顶"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--弹出消息(输入框的值-文顶顶)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"alert(value)"</span> <span class="attr">value</span>=<span class="string">"文顶顶"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--弹出消息(引用了表单中user输入框元素并访问其值-文顶顶)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"文顶顶"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击输出用户名"</span> <span class="attr">onclick</span>=<span class="string">"alert(user.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--鼠标的移入事件演示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:200px;height:50px;background:red"</span> <span class="attr">onmouseenter</span>=<span class="string">"showLog()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"我是按钮点击事件的响应函数"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">showLog</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"鼠标移入div标签"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在以这种方式处理的事件函数中有权访问全局作用域中的任何代码，而且在执行的代码中可以直接(不用自己定义或者是从函数形参中读取)通过<code>event</code>变量来访问事件对象，在函数内部<code>this</code>的值则指向事件的目标元素。此外，还有一个比较特殊的地方是它内部扩展作用域的方式，简单说就是在事件函数内部可以像访问局部变量一样来访问document和该元素本身的成员。</p><p class="tip"><strong>注意</strong> 我们在开发中应该尽量避免使用直接以属性节点的方式来处理标签的事件，因为它内在的作用域扩展机制在不同的浏览器中可能会产生不同的结果，而且这种方式让<code>JavaScript</code>和<code>HTML</code>代码交织在一起，耦合太过紧密不便于维护且违背代码分离的原则。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">② 通过标签的事件属性添加事件处理函数</span></p><p>我们也可以先通过DOM操作获取页面中指定的标签，然后通过把事件处理函数赋值给标签事件属性的方式来绑定事件。这种事件处理方式，因为其简单和跨浏览器的优势从第四代浏览器开始一直沿用至今。DOM中所有的元素(<a href=""> window \ document \ body \ div 等</a>)都拥有自己的事件处理属性，这些属性通常均为<code>on + 事件类型</code>的形式，全部小写且<span style="color:f05">每个事件支持一个事件处理函数</span>。</p><p>我们为标签(元素)注册(绑定)事件只需要把事件处理函数赋值给元素的事件属性即可，标签常用的事件属性有<code>onclick</code>、<code>onmouseenter</code>和<code>onkeydown</code>等，使用时形如<code>oBtn.onclick = function(){...}</code> ，如果需要将标签上绑定的事件移除则只需要把事件属性赋值为<code>null</code>即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btnID"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divID"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 50px;background: #195"</span>&gt;</span>我是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"inputID"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入..."</span> <span class="attr">value</span>=<span class="string">"文顶顶"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*01-获取页面中指定的标签*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btnID"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"divID"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oIpt = <span class="built_in">document</span>.getElementById(<span class="string">"inputID"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-给按钮注册点击事件*/</span></span></span><br><span class="line"><span class="javascript">  oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>,event.type);          <span class="comment">//按钮被点击了 click</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*03-给div注册鼠标移入移出事件*/</span></span></span><br><span class="line"><span class="undefined">  oDiv.onmouseenter = enter;</span></span><br><span class="line"><span class="undefined">  oDiv.onmouseleave = leave;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">enter</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"鼠标移入div标签"</span>, event.currentTarget);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">leave</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"鼠标移出div标签"</span>, event.currentTarget);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*04-给input标签注册监听事件*/</span></span></span><br><span class="line"><span class="javascript">  oIpt.oninput = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"监听input事件"</span>,<span class="keyword">this</span>.value);      <span class="comment">//实时获取文本输入框的值并打印</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*05-演示删除事件*/</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//oBtn.onclick = null;    打开后按钮的点击事件将失效</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p class="tip">因为在这种处理方式中，事件函数被认为是标签(元素)的方法，因此函数中的<code>this</code>引用当前的标签(元素)，可以在事件处理函数中直接通过<code>this</code>来访问当前标签(元素)的任何属性和方法。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">③ 在JavaScript代码中为标签注册事件监听</span></p><p>我们还可以直接调用<code>addEventListener()</code>方法来给标签注册事件监听，同时支持为标签注册(<code>addEventListener</code>)和移除(<code>removeEventListener</code>)事件监听。所有的DOM节点都包含这两个方法，功能强大，唯一需要考虑的就是IE9-的兼容性问题。</p><p><strong><code>语法</code></strong> <code>ele.addEventListener(type,handle,bool)</code>  | <code>ele.removeEventListener(type,handle,bool)</code><br><strong><code>参数</code></strong> <code>type</code>表示要处理的事件名(类型)，<code>handle</code>是事件处理函数，<code>bool</code>控制调用事件函数的阶段，如果值为false(默认)则表示在冒泡阶段调用，值为true则表示在捕获阶段调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-获取页面中指定的标签*/</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-给按钮绑定(注册)点击事件*/</span></span><br><span class="line"><span class="comment">/*02-A  捕获阶段调用事件函数*/</span></span><br><span class="line">oBtn.addEventListener(<span class="string">"click"</span>,listener, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">/*02-B1 冒泡阶段调用事件函数*/</span></span><br><span class="line">oBtn.addEventListener(<span class="string">"click"</span>,listener1, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">/*02-B2 冒泡阶段调用事件函数*/</span></span><br><span class="line">oBtn.addEventListener(<span class="string">"click"</span>,listener2, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*具体的-事件处理函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"点击了按钮-A-捕获阶段"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"点击了按钮-B1-冒泡阶段"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"点击了按钮-B2-冒泡阶段"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*点击按钮后的执行情况*/</span></span><br><span class="line"><span class="comment">// 点击了按钮-A-捕获阶段</span></span><br><span class="line"><span class="comment">// 点击了按钮-B1-冒泡阶段</span></span><br><span class="line"><span class="comment">// 点击了按钮-B2-冒泡阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-删除按钮的点击事件*/</span></span><br><span class="line">oBtn.removeEventListener(<span class="string">"click"</span>,listener2, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>区别于<code>onclick</code>的方式，<code>addEventListener()</code>支持为标签绑定多个同类型的事件处理函数而且不存在覆盖的问题，当标签的事件被触发时绑定的事件处理函数会按照添加的顺序依次触发，需要注意的是在使用<code>removeEventListener()</code>方法移除标签的某个事件监听时，要求传入的函数同注册事件监听时的函数一致。此外，在IE9-的版本中，这两个方法不可用需考虑兼容性，在IE中我们可以使用<code>attachEvent</code>和<code>detachEvent</code>这两个方法来替代。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-获取页面中指定的标签*/</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*IE8以及更早版本中注册事件监听的方式*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-给按钮注册事件监听*/</span></span><br><span class="line">oBtn.attachEvent(<span class="string">"onclick"</span>,listener1);</span><br><span class="line">oBtn.attachEvent(<span class="string">"onclick"</span>,listener2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"点击了按钮-A-冒泡阶段"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"点击了按钮-B-冒泡阶段"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);       <span class="comment">//事件处理函数在全局作用域中运行(this-&gt;window)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*备注：如果给标签注册了多个事件监听，那么会以相反的顺序触发*/</span></span><br><span class="line"><span class="comment">//点击了按钮-B-冒泡阶段</span></span><br><span class="line"><span class="comment">//点击了按钮-A-冒泡阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-演示移除事件处理程序的情况*/</span></span><br><span class="line">oBtn.detachEvent(<span class="string">"onclick"</span>,listener2);</span><br></pre></td></tr></table></figure><p></p><p class="tip">因为IE8及更早的版本只支持事件冒泡，因为通过<code>attachEvent()</code>方法添加的事件处理程序都会被添加到事件冒泡阶段，且事件函数中的this指向的并非事件标签而是<code>window</code>。</p>`<div class="titleX"><strong>常用的事件类型</strong></div><p></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base46.png?raw=true"></p><p>Web浏览器中可能发生的事件有很多种类型，如果是按照<code>DOM3级事件</code>的规定那么大概可以划分为UI事件、焦点和鼠标事件、文本和键盘事件以及变动事件等几种类型。因为涉及到的事件众多且用法各异，因此本节将只会简单罗列它们。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195">常用事件列表</span><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">UI事件</span><br><span class="line">load :  当页面完全加载后(包括页面中所有图像、JavaScript和CSS文件等资源)触发window上面的load事件。</span><br><span class="line">unload: 当页面被完全卸载后触发window上面的unload事件，常用于清除引用以避免内存泄露。</span><br><span class="line">resize: 当浏览器窗口被调整时会触发window上面的resize事件，该事件不同浏览器触发机制不同(FireFox)。</span><br><span class="line">scroll: 当页面文档滚动的时候会触发window上面的scroll方法。</span><br><span class="line">        我们可以通过scrollLeft和scrollTop来监控该变化，需要注意标准和混杂模式下的差别。</span><br><span class="line">        </span><br><span class="line">焦点事件</span><br><span class="line">blur:   当元素失去焦点的时候触发。</span><br><span class="line">focus:  当元素获得焦点的时候触发。</span><br><span class="line"></span><br><span class="line">鼠标和滚轮事件</span><br><span class="line">click:      当被点击(或者按下键盘回车键)的时候触发。</span><br><span class="line">dbclick:    当被双击的时候触发。</span><br><span class="line">mousedown:  当用户按下任意鼠标键的时候触发。</span><br><span class="line">mouseup:    当用户释放鼠标按钮的时候触发。</span><br><span class="line">mouseenter: 当鼠标移入到元素范围内的时候触发，该事件不冒泡且对后代元素没影响。</span><br><span class="line">mouseleave: 当鼠标移出到元素范围内的时候触发，该事件不冒泡且对后代元素没影响。</span><br><span class="line">mousemove:  当鼠标在元素内部移动时重复触发。</span><br><span class="line">mouseover:  当鼠标移入到元素范围内的时候触发，对后代元素有影响。</span><br><span class="line">mouseout:   当鼠标移出到元素范围内的时候触发，对后代元素有影响。</span><br><span class="line">mousewheel: 当用户通过鼠标滚轮与页面交互滚动页面的时候触发。</span><br><span class="line"></span><br><span class="line">说明1：在一个元素中相继触发mousedown和mouseup事件后会自动触发click事件</span><br><span class="line">说明2：在一个元素中相继触发两次click事件则会自动触发dbclick事件。</span><br><span class="line"></span><br><span class="line">键盘和文本事件</span><br><span class="line">keydown:    当用户按下键盘上的任意键时触发，按住不放则重复触发。</span><br><span class="line">keypress:   当用户按下键盘上的字符键的时候触发，按住不放则重复触发。</span><br><span class="line">keyup:      当用户释放键盘上按键的时候触发。</span><br><span class="line">input:      在文本插入文本框之前触发input事件，是对keypress的补充。</span><br><span class="line">change:     在文本框内容改变(敲击回车键)的时候触发。</span><br><span class="line">select:     在文本被选中的时候触发。</span><br><span class="line">reset:      当点击重置按钮的时候被触发。</span><br><span class="line">submit:     表单提交的时候被触发。</span><br><span class="line"></span><br><span class="line">说明1：键盘和文本事件常用于用户通过文本框输入文本的时候。</span><br><span class="line">说明2：当用户按下键盘上字符键的时候首先触发keydown事件，然后是keypress事件最后触发keyup(后)事件。</span><br><span class="line">说明3：当用户按下键盘上非字符键的时候首先触发keydown事件，然后keyup(后)事件。</span><br><span class="line">说明4：任何可以获得焦点的元素都能够触发keypress事件，而只有可编辑区域才能触发textInput事件。</span><br><span class="line"></span><br><span class="line">DOM节点事件</span><br><span class="line">DOMSubtreeModified:     DOM结构发生任何变化都会触发。</span><br><span class="line">DOMNodeInserted:        当某个节点被插入到另一个节点中时被触发。</span><br><span class="line">DOMNodeRemoved:         当某个节点被从其父节点中删除时会被触发。</span><br><span class="line">DOMNodeInsertedIntoDocument: 当某个节点被插入到文档后会被触发。</span><br><span class="line">DOMNodeRemovedFromDocument:  当某个节点被从文档中删除后被触发。</span><br><span class="line">DOMAttrModified:             当属性节点被修改后被触发。</span><br><span class="line">DOMCharacterDataModified:    当文本节点值发生变化时被触发。</span><br><span class="line"></span><br><span class="line">注意：IE8及更早版本不支持任何DOM事件。</span><br><span class="line"></span><br><span class="line">HTML5事件</span><br><span class="line">contextmenu:      该事件用于控制显示自定义的上下文菜单。</span><br><span class="line">beforeunload:     该事件在页面卸载前触发，通常表现为弹出对话框提示用户是否确认离开页面。</span><br><span class="line">DOMContentLoaded: 当DOM树构造完成后触发，先于load，我们可以通过document来监听。</span><br><span class="line">readystatechange: 当文档状态发生改变时触发，支持该事件的对象均拥有readyState属性来获取当前状态。</span><br><span class="line">    uninitialized(未初始化)：对象存在但尚未初始化。</span><br><span class="line">    loading(正在加载)：      对象正在加载数据。</span><br><span class="line">    loaded(加载完毕)：       对象加载数据完成。</span><br><span class="line">    interactive(交互)：     可以交互操作对象，但还没有完全加载完毕。</span><br><span class="line">    complete(完成)：        对象已经加载完毕。</span><br><span class="line">。</span><br></pre></td></tr></table></figure></p><p>通常，我们总是把JavaScript的代码写到<code>window.onload</code>函数中以保证在执行JavaScript代码的时候页面和所有资源均以加载完毕。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;body onload="alert('页面加载完毕')"&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span> <span class="attr">id</span>=<span class="string">"inputID"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*01-演示常见的UI事件*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"页面所有资源都加载完毕--onload"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">"页面被卸载---onunload"</span>)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"浏览器窗口大小被调整--onresize"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"监听到页面滚动----onscroll"</span>)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-获取页面中对应的标签*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oInput = <span class="built_in">document</span>.getElementById(<span class="string">"inputID"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*键盘回车执行一次*/</span></span></span><br><span class="line"><span class="javascript">  oInput.onchange = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"输入框的值发生了变化--change"</span>,<span class="keyword">this</span>.value);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*只要输入框的值发生变化就会执行一次*/</span></span></span><br><span class="line"><span class="javascript">  oInput.oninput  = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"输入框的值发生了变化--oninput"</span>,<span class="keyword">this</span>.value);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  oInput.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"输入框获得焦点--onfocus"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  oInput.onblur = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"输入框失去焦点--onblur"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 页面所有资源都加载完毕--onload</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 输入框获得焦点--onfocus</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 输入框的值发生了变化--oninput w</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 输入框的值发生了变化--oninput we</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 输入框的值发生了变化--oninput wen</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 输入框的值发生了变化--change wen</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 输入框失去焦点--onblur</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>事件对象</strong></div><p>事件对象记录着当事件发生时与该事件相关的所有必要信息，包括<code>事件的目标对象</code>、<code>事件的类型</code>等等，通常我们总是使用<code>event</code>或者<code>e</code>来表示事件对象。所有的浏览器都支持事件对象，但支持方式不同。兼容DOM的浏览器总是会将事件对象(<code>event</code>)作为第一个参数传入到事件处理函数中，而在IE8-版本的浏览器中事件对象作为window的属性存在，因此我们在具体写代码的时候需要考虑兼容问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*演示在事件处理函数中获取事件对象*/</span></span><br><span class="line">  <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line">  oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="built_in">console</span>.dir(e);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>我们可以通过上面这一小段代码的运行结果来讨论事件对象的核心成员，具体参考下面的结果以及给出的标准。需要说明的是，下面列出的是常用的<code>click事件</code>中事件对象的成员，并非所有事件的<code>event</code>对象都长这样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">MouseEvent</span><br><span class="line">    altKey: false             //当事件被触发时，"ALT" 是否被按下</span><br><span class="line">    bubbles: true             //表明事件是否冒泡</span><br><span class="line">    button: 0                 //返回当事件被触发时，哪个鼠标按钮被点击。</span><br><span class="line">    buttons: 0</span><br><span class="line">    cancelBubble: false      //表明是否阻止事件冒泡     </span><br><span class="line">    cancelable: true         //表明是否可以取消事件的默认行为</span><br><span class="line">    clientX: 33              //事件发生位置的X坐标，参考页面的可视区域</span><br><span class="line">    clientY: 26              //事件发生位置的Y坐标</span><br><span class="line">    composed: true</span><br><span class="line">    ctrlKey: false           //当事件被触发时，"CTRL" 键是否被按下</span><br><span class="line">    currentTarget: null      //事件处理程序当前正在处理的那个元素</span><br><span class="line">    defaultPrevented: false  //表示是否已经调用了preventDefault()方法禁止默认行为</span><br><span class="line">    detail: 1                //与事件相关的细节信息</span><br><span class="line">    eventPhase: 0            //调用事件处理程序的阶段,1-捕获，2-目标，3-冒泡</span><br><span class="line">    fromElement: null</span><br><span class="line">    isTrusted: true</span><br><span class="line">    layerX: 33               //视图位置的X坐标</span><br><span class="line">    layerY: 26               //视图位置的Y坐标</span><br><span class="line">    metaKey: false           //返回当事件被触发时，"meta" 键是否被按下。</span><br><span class="line">    movementX: 0</span><br><span class="line">    movementY: 0</span><br><span class="line">    offsetX: 24              //发生事件的地点在事件源元素的坐标系统中的 x 坐标</span><br><span class="line">    offsetY: 15              //发生事件的地点在事件源元素的坐标系统中的 y 坐标</span><br><span class="line">    pageX: 33                //页面位置的X坐标,页面没有滚动情况下等价于clientX</span><br><span class="line">    pageY: 26                //页面位置的Y坐标,页面没有滚动情况下等价于clientY</span><br><span class="line">    path: (5) [button, body, html, document, Window]  //DOM数的路径</span><br><span class="line">    relatedTarget: null      //返回与事件的目标节点相关的节点</span><br><span class="line">    returnValue: true        //默认未true,设置未false表示取消事件的默认行为</span><br><span class="line">    screenX: 89              //事件的屏幕(相对于电脑屏幕)位置X坐标</span><br><span class="line">    screenY: 189             //事件的屏幕(相对于电脑屏幕)位置Y坐标</span><br><span class="line">    shiftKey: false          //当事件被触发时，"SHIFT" 键是否被按下。</span><br><span class="line">    sourceCapabilities: InputDeviceCapabilities &#123;firesTouchEvents: false&#125;</span><br><span class="line">    srcElement: button       //事件的目标，同target保持一致</span><br><span class="line">    target: button           //事件作用于哪个标签</span><br><span class="line">    timeStamp: 2490.9807     //从启动到事件发生间的时间戳</span><br><span class="line">    toElement: button        //对于鼠标移入和移出事件，该属性引用移入鼠标的元素</span><br><span class="line">    type: "click"            //事件的类型</span><br><span class="line">    view: Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span><br><span class="line">    which: 1        //对于keypress事件，该属性声明被敲击的键生成的 Unicode 字符码。</span><br><span class="line">    x: 33                     //事件发生的位置的 x 坐标</span><br><span class="line">    y: 26                     //事件发生的位置的 y 坐标</span><br></pre></td></tr></table></figure><p><strong>位置说明</strong> 下图说明了事件对象中<code>offsetX/Y</code>和<code>ScreenX/Y</code>以及<code>clientX/Y</code>的关系。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base51.png?raw=true"></p><p><strong>事件对象的兼容性问题</strong> DOM和IE中的事件对象有很多不同之处，下面简单列出对比。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1] event                    window.event               获取事件对象 </span><br><span class="line">[2] event.target             event.srcElement           获取事件目标对象</span><br><span class="line">[3] event.preventDefault();  event.returnValue = false; 禁止标签默认行为</span><br><span class="line">[4] event.stopPropagation(); event.cancelBubble = true; 禁止事件冒泡</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>事件冒泡 | 默认行为 | 事件委托</strong></div><p><strong>事件冒泡</strong> 当我们在某个标签节点上触发某类事件时(譬如<code>click点击事件</code>)，该事件会沿着DOM树向上层节点逐级传播直到最顶层，在向上传播的过程中如果该节点注册了同类型的事件，那么这些事件也会被触发。</p><p><strong><code>注意[1]</code></strong> 绝大部分的事件都能冒泡，除<a href=""> blur、focus、load、unload </a>几个特殊的事件外。<br><strong><code>注意[2]</code></strong> 事件冒泡到最顶层的目标不同，大部分浏览器到window对象，IE8-到document对象。<br><strong><code>注意[3]</code></strong> 开发中我们可以在事件函数中调用<code>event.stopPropagation()方法</code>来阻止事件冒泡，如果是<a href="">IE8-</a>浏览器则需要通过<code>event.cancelBubble = true</code>代码设置。</p><p><strong>默认行为</strong>  HTML页面中的很多标签都存在默认行为，譬如超连接点击的时候会自动跳转到目标页面，表单点击提交后会把内容提交到action指定的页面，还有右键菜单以及文本选择等等。在开发中，我们如果需要阻止这些标签的默认行为，那么可以使用<code>event.preventDefault()方法</code>，如果是<a href="">E8-</a>浏览器则需要通过<code>event.returnValue = false</code>代码设置。</p><p><strong>事件委托</strong> 事件委托是一种用来解决<code>页面中事件处理函数过多</code>问题的方案，它利用事件冒泡只指定一个事件处理函数就能够管理某一类型的所有事件，恰当的利用事件委托，可以节省内存空间，有效的提升程序的整体性能。 </p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍JavaScript事件相关的知识点，主要包括事件流、事件处理程序、事件对象(event)以及常见事件类型和事件委托等相关内容。&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Sou
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [27]-DOM</title>
    <link href="https://weibo.com/u/3800117445/2019/04/18/javaScript%E7%B3%BB%E5%88%97%20%5B27%5D-DOM/"/>
    <id>https://weibo.com/u/3800117445/2019/04/18/javaScript系列 [27]-DOM/</id>
    <published>2019-04-17T16:23:18.000Z</published>
    <updated>2019-06-11T01:32:07.216Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/flowerField/Source/blob/master/Blog/tree_02.png?raw=true" height="250px"></p><div class="tip">本文将详细介绍DOM相关的知识点，包括但不限于Document文档结构、Node节点、Node节点的类型、Node节点的关系以及DOM的基本操作( <code>节点的获取</code>、<code>节点的创建</code>、<code>节点的插入</code>、<code>节点的克隆</code>和<code>删除</code>等 )等内容，在文章的最后还以附录的形式列出了DOM相关的所有属性和方法，需要指出的是本文不包含任何浏览器历史、内核以及页面渲染的内容，如有需要请参考 <a href="http://wendingding.com/2018/06/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20%E6%B5%8F%E8%A7%88%E5%99%A8%E3%80%81HTML%E5%92%8C%E5%86%85%E6%A0%B8(%E5%BC%95%E6%93%8E" target="_blank" rel="noopener"> 浏览器、内核和引擎 </a>和<a href="http://wendingding.com/2018/06/11/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20HTML%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%87%E7%A8%8B/" target="_blank" rel="noopener"> HTML页面渲染的基本过程 </a>这两篇文章。</div><h3 id="1-0-关于DOM"><a href="#1-0-关于DOM" class="headerlink" title="1.0  关于DOM"></a>1.0  关于DOM</h3><p><strong>简单介绍</strong></p><p>DOM（全称为Document Object Model）即<strong><code>文档对象模型</code></strong>，<span style="color:#195">是用于表示和操作HTML或XML文档内容的一套基础API( <code>Application Programming Interface</code>)。</span>DOM把整个页面映射为一个多层节点结构，HTML 或 XML页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。当网页被加载时，浏览器会内部的引擎会根据DOM模型，将结构化文档（比如HTML和XML）解析成一系列的节点，再由这些节点构建出一种树状结构（DOM Tree）。</p><div class="tip"><br>✧ 有时候我们可能会看到DHTML这个专业术语：<span style="color:#195">DHTML是动画HTML的简称</span>，其并不是一项新的技术，而是描述HTML CSS JavaScript技术组合的术语。它曾被认为是HTML/XHTML CSS和JavaScript相结合的产物，像今天的HTML5，但真正凝聚它们的是DOM。<br></div><p>下面给出一段简单的HTML示例代码和对应的DOM树结构图。图示中的的方框代表着文档中的一个个节点，每个方框（节点）暨一个Node对象，所有这些节点组成了DOM树。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM树演示代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"className"</span>&gt;</span>Hi! 文顶顶<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.wendingding.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/dom1.png?raw=true"></p><p><strong>节点的类型</strong></p><p>HTML页面中拥有众多类型的节点，不同类型的节点其表示和操作的方式有很大的差异，下面分别列出：</p><blockquote><p>❏ Text：标签之间或标签包含的文本内容<br>❏ Comment：HTML或XML中的注释<br>❏ Element：网页的各种HTML标签，如a标签 div标签等<br>❏ Document：整个DOM树的根，代表整个文档<br>❏ Attribute：网页元素的属性节点<br>❏ DocumentType：文档类型（doctype）标签<br>❏ DocumentFragment：文档的片段，如果感觉费解请移步<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment" target="_blank" rel="noopener">MDN-DocumentFragment</a></p></blockquote><p>尽管在HTML页面中存在着如此众多类型的节点，但我们真正需要关注的主要还是：<strong><code>元素节点</code></strong>、<strong><code>属性节点</code></strong>和<strong><code>文本节点</code></strong>。在(HTML|XHTML)文档中，文本节点总是被包含在元素节点的内部，属性节点用来对元素做出更具体的描述。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/dom2.png?raw=true"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在上面的图示中，我们提供了一个div标签，该标签拥有“上坡和下坡不就是同一条路吗”文本内容和两个属性节点。</span><br><span class="line">① 个div标签由开始标签和结尾标签组成，本身是Element类型的。</span><br><span class="line">② “上坡和下坡不就是同一条路吗”作为div标签的文本内容，本身是Text类型的。</span><br><span class="line">③ div标签中的class和title是属性节点(key-value)，本身是Attribute类型的。</span><br></pre></td></tr></table></figure><p><strong>节点关系</strong></p><p>DOM中节点的关系主要有<strong><code>子节点</code></strong> <strong><code>父节点</code></strong> <strong><code>后代节点(子孙节点)</code></strong> <strong><code>祖先节点</code></strong> <strong><code>兄弟节点</code></strong>这几种情况，我们可以通过下面的示意图先对DOM中的节点关系有一个简单的认识。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base41.png?raw=true"></p><p><strong>DOM标准</strong></p><p>从 IE4 和 Netscape Navigator4 开始，它们开始分别支持不同形式的DHTML(<code>Dynamic HTML</code>)为Web技术的发展带来了很大的便利，但是也因为微软和 Netscape 在DHTML的技术发展方面各持己见，导致编写的网页如果要同时运行在它们的浏览器上面需要做大量的适配工作，它们甚至互不兼容。因此，负责制定Web通信标准的 W3C(<code>World Wide Web Consortium</code>)开始着手规划DOM规范，DOM规范有DOM0、DOM1、DOM2和DOM3等4个级别，具体范围可以参考下图。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base44.png?raw=true"></p><p><strong>规范说明</strong> </p><p>目前DOM规范的0级、1级和2级基本上已经被主流浏览器全部支持，DOM3级被部分支持( <code>IE9+已经全部支持DOM1、2、3</code>)。此外需说明的是除DOM规范外还存在一些扩展性的规范，比如<code>HTML5</code>、<code>Selectors API</code>和<code>Element Traversal</code>以及<code>SVG ( Scalable Vector Graphic)</code>规范等，在支持(兼容)这些规范的浏览器中都可以使用它们提供的标准API。下面给出相关规范的文档地址，详情请自行查阅。</p><p><a href="https://www.w3.org/TR/REC-DOM-Level-1/" target="_blank" rel="noopener">DOM1 规范</a><br><a href="https://www.w3.org/TR/DOM-Level-2/" target="_blank" rel="noopener">DOM 2规范</a><br><a href="https://www.w3.org/TR/DOM-Level-3-Core/" target="_blank" rel="noopener"> DOM 3 规范 </a><br><a href="https://www.w3.org/TR/selectors-api/" target="_blank" rel="noopener"> Selectors API规范文档 </a><br><a href="https://www.w3.org/TR/html/" target="_blank" rel="noopener"> HTML5 规范文档</a><br><a href="">Element Traversal 规范文档</a><br><a href="https://www.w3.org/TR/SVG2/" target="_blank" rel="noopener">Scalable Vector Graphic规范</a><br><a href="http://www.ecma-international.org/ecma-262/9.0/index.html" target="_blank" rel="noopener">ECMAScript-262/2018/6</a></p><h3 id="2-0-Node-amp-amp-Element-amp-amp-nodeType"><a href="#2-0-Node-amp-amp-Element-amp-amp-nodeType" class="headerlink" title="2.0 Node &amp;&amp; Element &amp;&amp; nodeType"></a>2.0 Node &amp;&amp; Element &amp;&amp; nodeType</h3><p><span style="color:red">Node（节点）和 Element（元素节点）是严格区分的</span>。也就是说Node和Element不能简单的混为一谈，因为很多人都搞不清楚它们的关系，所以这里单独拿出来讨论。</p><p><strong><code>Node</code></strong> 节点，表示构成DOM树的最小组成部分。换句话来说，在页面中不论是元素节点、文本节点还是注释或者别的东西本质上都是Node节点。</p><p><strong><code>Element</code></strong>元素节点，是Node节点中的一种类型。</p><p>通俗的来讲，node节点就像人一样，是一种基本的类型。（大哲学家柏拉图对人的定义是：人是两腿无毛会直立行走的动物  <span style="color:#0b0">：）</span> 而人这种基本类型中，又存在着小孩、中年人、老年人、学生、教师、司机、男人、女人等种种具体的类型。</p><p>对应到这里的关系，那么Element其实是node的一种更具体的类型。不止Element，像Text、Comment以及Attribute等等这些其实都是特殊的Node，它们拥有自己的类型常量（<span style="color:#f88">TEXT_NODE、COMMENT_NODE以及ATTRIBUTE_NODE</span>）用于区分彼此。文档中所有的node节点都拥有nodeType属性，我们可以通过该属性的值来确定节点的具体类型，下面列出对应关系。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base40.png?raw=true"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 可以直接在开发者工具的控制台中像下面这样检测和验证节点的类型</span><br><span class="line">document.body.nodeType     //输出结果为1</span><br><span class="line">document.body.ELEMENT_NODE                           //输出结果为1</span><br><span class="line">document.body.ELEMENT_NODE == document.body.nodeType //输出结果为true</span><br><span class="line"></span><br><span class="line"># 需要注意的是ELEMENT_NODE是常量</span><br></pre></td></tr></table></figure><p><strong>NodeList 和 HTMLCollection类型</strong></p><p>相信很多开发者都有这样的经验，<strong><span style="color:red">“我们通过节点的childNodes属性获取的结果和children属性获取的结果是不一样的”</span></strong>。下面我们通过一段简短的代码来说明它们的不同。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demoID"</span>&gt;</span></span><br><span class="line">    我是测试的文字---A！！</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"className"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注释的内容:后面跟span标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    我是测试的文字---B！！</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"demoID"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"元素节点的children属性 == HTMLCollection类型"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oDiv.children);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oDiv.children.length);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"元素节点的childNodes属性 ==  NodeList类型"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oDiv.childNodes);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oDiv.childNodes.length);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/dom5.png?raw=true"></p><p>通过代码的执行情况可以发现，元素节点(这里为id为demoID的div元素)的children属性得到的是HTMLCollection类型的伪数组，而childNodes属性得到的是NodeList型的伪数组。[<code>注意：它们是伪数组的结构，可以遍历但非真正意义上的数组</code>]。</p><p><span style="color:#195">NodeList是Node集合，而HTMLCollection可以认为是Element的集合。NodeList、NameNodeMap和HTMLCollection它们的结构类似，保存的都是基于DOM结构动态查询的结果，而非快照，故而在执行遍历操作的时候需要注意无限循环的问题。</span></p><div class="tip">通常来说<span style="color:#195">Document和HTMLDocument</span>以及<span style="color:#195">Element类型与和HTMLElement类型</span>是严格区分的。Document类型代表一个HTML或XML文档，Element类型代表该文档中的一个元素。而HTMLDocument和HTMLElement通常只针对HTML文档和其元素。</div><h3 id="3-0-DOM操作基础"><a href="#3-0-DOM操作基础" class="headerlink" title="3.0 DOM操作基础"></a>3.0 DOM操作基础</h3><p></p><p class="titleX"><strong>节点基本操作</strong></p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">节点的获取</span><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>测试1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span>box1-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"formTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  /*获取元素节点的方法</span></span><br><span class="line"><span class="javascript">  * [<span class="number">1</span>] <span class="built_in">document</span>.getElementById(id)     通过id来获取标签(<span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">  * [2] getElementsByTagName(tagname)   通过标签名称来获取标签(n)</span></span><br><span class="line"><span class="javascript">  * [<span class="number">3</span>] getElementsByClassName()        通过<span class="class"><span class="keyword">class</span>来获取标签(<span class="title">n</span>)</span></span></span><br><span class="line"><span class="javascript">  * [<span class="number">4</span>] <span class="built_in">document</span>.getElementsByName()    通过name属性节点来获取标签(n)</span></span><br><span class="line"><span class="undefined">  * */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDiv  = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);           <span class="comment">//div#box</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDivs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box1"</span>);  <span class="comment">//[box1,box1]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*提示：直接在已有标签内部查找，速度更快*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oLis  = oDiv.getElementsByTagName(<span class="string">"li"</span>);          <span class="comment">//[li,li]</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDivN = <span class="built_in">document</span>.getElementsByName(<span class="string">"test"</span>)        <span class="comment">//[div.box1]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>说明</strong> 上面代码中展示了获取节点的常用方式，此外<a href="https://www.w3.org/TR/selectors-api/" target="_blank" rel="noopener"> Selectors API </a>标准还为我们提供了两个非常强大的基于CSS选择器查询DOM节点的方法。它们分别是<code>querySelector()</code>和<code>querySelectorAll()</code>方法，均接收一个CSS选择器作为参数，目前<code>IE8+\Firefox 3.5+\ Safari 3.1+\Chrome和Opera 10+</code>均支持它们。 </p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">节点的属性</span></p><p><code>nodeType</code> 获取节点的类型，元素为1，属性为2，文本为3<br><code>nodeName</code> 获取节点的名称，元素节点返回大写标签名，属性节点返回属性名，文本节点返回#text<br><code>nodeValue</code>获取节点的值，元素节点固定返回 <code>null</code>，属性节点返回属性值，文本节点直接返回内容</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">节点的创建和插入</span><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*节点创建的相关方法</span></span><br><span class="line"><span class="comment"> * [1] document.createElement(type)          创建元素节点</span></span><br><span class="line"><span class="comment"> * [2] document.createTextNode(text)         创建文本节点</span></span><br><span class="line"><span class="comment"> * [3] document.createAttribute()            创建属性节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 节点插入的相关方法</span></span><br><span class="line"><span class="comment"> * [1]  ele.appendChild(node)              把node插入到ele子节点的末尾</span></span><br><span class="line"><span class="comment"> * [2]  ele.insertBefore(newNode,node)     在ele的子节点node前插入新的子节点newNode</span></span><br><span class="line"><span class="comment"> * [3]  ele.setAttributeNode(attrNode)     在指定元素中插入属性节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*01-创建div标签并插入到页面中*/</span></span><br><span class="line"> <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*02-给div创建文本节点*/</span></span><br><span class="line"> <span class="keyword">var</span> oText = <span class="built_in">document</span>.createTextNode(<span class="string">"滴答滴答~"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*03-把文本节点插入到div中*/</span></span><br><span class="line"> oDiv.appendChild(oText);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*04-创建test属性节点*/</span></span><br><span class="line"> <span class="keyword">var</span> oAttr = <span class="built_in">document</span>.createAttribute(<span class="string">"test"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*05-设置属性节点的值*/</span></span><br><span class="line"> oAttr.nodeValue = <span class="string">"test的value"</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*06-把属性节点设置到div标签中*/</span></span><br><span class="line"> oDiv.setAttributeNode(oAttr);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*07-创建span元素节点*/</span></span><br><span class="line"> <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*08-把span标签插入到oDiv里文本节点的前面*/</span></span><br><span class="line"> oDiv.insertBefore(oSpan,oText);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*09-把div标签插入到body子节点的末尾*/</span></span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(oDiv);</span><br><span class="line"> <span class="built_in">console</span>.log(oDiv);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*备注：测试各种类型node的nodeType、nodeName和nodeValue属性*/</span></span><br><span class="line"> <span class="comment">/*备注：nodeName和tagName是等价的，均为全部大写的标签名(类型)*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"元素节点-oSpan.nodeType = "</span> +oSpan.nodeType);  <span class="comment">//oSpan.nodeType = 1</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"属性节点-oAttr.nodeType = "</span> +oAttr.nodeType);  <span class="comment">//oAttr.nodeType = 2</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"文本节点-oText.nodeType = "</span> +oText.nodeType);  <span class="comment">//oText.nodeType = 3</span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"元素节点-oSpan.nodeName = "</span> +oSpan.nodeName);  <span class="comment">//oSpan.nodeName = SPAN</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"属性节点-oAttr.nodeType = "</span> +oAttr.nodeName);  <span class="comment">//oAttr.nodeType = test</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"文本节点-oText.nodeName = "</span> +oText.nodeName);  <span class="comment">//oText.nodeName = #text</span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"元素节点-oSpan.nodeValue ="</span> +oSpan.nodeValue);<span class="comment">//oSpan.nodeValue = null</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"属性节点-oAttr.nodeValue ="</span> +oAttr.nodeValue);<span class="comment">//oAttr.nodeValue = test的value</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"文本节点-oText.nodeValue ="</span> +oText.nodeValue);<span class="comment">//oText.nodeValue = 滴答滴答~</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base39.png?raw=true"></p><p><strong>说明</strong> 上面的代码中我分别演示了创建元素节点(<code>createElement</code>)、文本节点(<code>createTextNode</code>)以及属性节点(<code>createAttribute</code>)的相关方法，在创建节点后对它们执行了插入操作，主要用到了<code>appendChild</code>和<code>insertBefore</code>方法。这里需要说明的是，上面的代码仅供方法演示用，在实际的开发中用上面的这种方式来处理未免太过麻烦和复杂。通常我们会有更简单的方式来操作<code>文本节点</code>和<code>属性节点</code>，下面以渐进的方式给出两种更简单的实现方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-创建div标签并插入到页面中*/</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-创建文本节点并插入*/</span></span><br><span class="line">oDiv.innerText = <span class="string">"滴滴答答~"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-创建属性及节点并设置后插入*/</span></span><br><span class="line">oDiv.setAttribute(<span class="string">"test"</span>,<span class="string">"test的value值"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-创建span元素节点*/</span></span><br><span class="line"><span class="keyword">var</span> oSpen = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*05-把span标签插入到div中文本节点前*/</span></span><br><span class="line">oDiv.insertBefore(oSpen,oDiv.childNodes[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*06-把div标签插入到body子节点的末尾*/</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</span><br><span class="line"><span class="built_in">console</span>.log(oDiv);</span><br></pre></td></tr></table></figure><p><strong>说明</strong> 上面的代码中我们通过 <code>innerText</code>属性来简化了创建文本节点并插入的操作，且使用了更方便直接的<code>setAttribute</code>方法来简化了<a href=""> 创建属性节点 - 设置 - 插入到标签 </a>的过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-创建div标签并插入到页面中*/</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-设置标签的节点和属性内容*/</span></span><br><span class="line">oDiv.innerHTML = <span class="string">"&lt;span&gt;&lt;/span&gt;滴滴答答~"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-设置div标签的属性节点*/</span></span><br><span class="line">oDiv.setAttribute(<span class="string">"test"</span>,<span class="string">"test的value值"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-把div标签插入到body子节点的末尾*/</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</span><br><span class="line"><span class="built_in">console</span>.log(oDiv);</span><br></pre></td></tr></table></figure><p><strong>说明</strong> 上面的代码中我们使用<code>innerHTML</code>属性来完成了设置div标签子节点工作，该属性和<code>innerText</code>很相像，区别在于<code>innerHTML</code>在解析的时候会解析元素节点而<code>innerText</code>则解析为纯文本形态。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">基于节点关系的操作</span><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是spanA<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span-class"</span>&gt;</span>我是spanB<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  我是div标签的文本</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是spanC<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"> /* 父节点：parentNode</span></span><br><span class="line"><span class="undefined">  * 父元素：parentElement</span></span><br><span class="line"><span class="undefined">  *</span></span><br><span class="line"><span class="undefined">  * 子节点：childNodes firstChild          lastChild</span></span><br><span class="line"><span class="undefined">  * 子元素：children   firstElementChild   lastElementChild</span></span><br><span class="line"><span class="undefined">  *</span></span><br><span class="line"><span class="undefined">  * 兄弟节点：previousSibling           nextSibling</span></span><br><span class="line"><span class="undefined">  * 兄弟元素：previousElementSibling    nextElementSibling</span></span><br><span class="line"><span class="undefined">  */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*01-获取外层的div标签*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDiv  = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-对比子节点和子元素*/</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oDiv.childNodes);          <span class="comment">//NodeList(7)</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oDiv.children);            <span class="comment">//HTMLCollection(3)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oDiv.firstChild);          <span class="comment">//#text</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oDiv.firstElementChild);   <span class="comment">//&lt;span&gt;我是spanA&lt;/span&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oDiv.lastChild);           <span class="comment">//#text</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oDiv.lastElementChild);    <span class="comment">//&lt;span&gt;我是spanC&lt;/span&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="comment">/*03-对比兄弟节点和兄弟元素*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"span-class"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oSpan.previousSibling);          <span class="comment">//#text</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oSpan.previousElementSibling);   <span class="comment">//&lt;span&gt;我是spanA&lt;/span&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oSpan.nextSibling);              <span class="comment">//我是div标签的文本</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(oSpan.nextElementSibling);       <span class="comment">//&lt;span&gt;我是spanC&lt;/span&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 上面代码中简单介绍了基于节点关系来操作标签的代码，我们能看到的是DOM它为我们提供了两套方法，分别是基于<code>所有node类型</code>的方法和基于<code>ElementNode类型</code>的方法，在开发中具体使用的时候后者居多，且因为我们在操作的时候得到的返回值很多情况下都是<code>伪数组</code>结构，因此直接使用<code>[ ]</code>语法通过下标( <code>索引</code> )方式引用子元素( <code>节点</code> )会更方便些。</p><div class="tip">DOM提供两套节点关系API是因为在<code>IE9-的版本</code>中childNodes属性不会返回文本标签间的空格(文本节点)和其他的浏览器中则会返回，它们的实现存在较大的差异性。DOM标准为规范元素遍历故而新增了<code>firstElementChild</code>、<code>lastElementChild</code>、<code>previousElementSibling</code>、<code>nextElementSibling</code>以及<code>childElementCount</code>这5个API，<code>children</code>的情况类似。</div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"> 复制 | 删除 | 检查 | 替换</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是spanA<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是spanB<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /*</span></span><br><span class="line"><span class="javascript">  * cloneNode()               克隆(复制)节点，接收布尔值参数，<span class="literal">true</span>表示深复制，默认为<span class="literal">false</span>。</span></span><br><span class="line"><span class="undefined">  * hasChildNodes()           判断当前节点是否拥有子节点,返回布尔值。</span></span><br><span class="line"><span class="undefined">  * removeChild(ele)          删除（并返回）当前节点指定子节点ele</span></span><br><span class="line"><span class="javascript">  * replaceChild(<span class="keyword">new</span>,old)     使用新的节点来替换旧的子节点   </span></span><br><span class="line"><span class="undefined">  */</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDiv  = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.hasChildNodes());              <span class="comment">//true 检查div标签是否存在子节点</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oSpanA = oDiv.children[<span class="number">0</span>];                  <span class="comment">//获取spanA标签</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oSpanB = oDiv.children[<span class="number">1</span>];                  <span class="comment">//获取spanB标签</span></span></span><br><span class="line"><span class="javascript">  oDiv.appendChild(oSpanA.cloneNode(<span class="literal">true</span>));       <span class="comment">//复制spanA标签并插入到div标签末尾</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.removeChild(oSpanB));          <span class="comment">//&lt;span&gt;我是spanB&lt;/span&gt;</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oSpanA.hasChildNodes());            <span class="comment">//true  检查spanA是否存在子节点</span></span></span><br><span class="line"><span class="javascript">  oSpanA.replaceChild(oSpanB,oSpanA.firstChild);  <span class="comment">//替换操作</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"> CSS样式相关的操作 </span></p><p>如果要通过JavaScript代码来操作标签的样式，可以在获取指定的DOM标签后直接通过style属性来获取和设置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#0f0f0f</span>;<span class="attribute">padding</span>: <span class="number">10px</span>&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background: #efefef"</span>&gt;</span>凉风有信，秋月无边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*A 操作标签的内联样式*/</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*01-读取标签的样式*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.style.background);                 <span class="comment">//rgb(239, 239, 239)</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.style.border);                     <span class="comment">//" "</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-设置标签的样式*/</span></span></span><br><span class="line"><span class="javascript">  oDiv.style.color = <span class="string">"red"</span>;                           <span class="comment">//设置标签内文字颜色(前景色)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*B 操作标签的样式(包括内联样式)*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle(oDiv).border);  <span class="comment">//1px solid rgb(15, 15, 15)</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle(oDiv).color);   <span class="comment">//rgb(255, 0, 0)</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 在上面代码中我们用到了<code>getComputedStyle(ele,pseudo)</code>方法来获取元素的样式，其中<code>ele</code>表示要获取样式的元素，而<code>pseudo</code>参数是一个可选的伪元素样式字符串。此外，该方法在<code>IE8-</code>中存在兼容性问题，可以使用<code>currentStyle</code>处理兼容处理。</p><div class="titleX"><strong>属性和属性节点</strong></div><blockquote><p>实话说<code>属性和属性节点</code>这是一对很难描述清楚的概念，因此我将在接下来章节花很多心思来重点讲解它们并对对比。需要明确的是它们完全是两个不同的概念，只是大多数人在大多数情况下总是把它们混为一谈，甚至搞不清楚所以然，所以就有了这么一个章节。</p></blockquote><p><strong>属性</strong> 我们把变量封装到对象中就成了属性。因此在讨论属性的时候，必须先把对象的问题搞清楚，因为<code>所谓属性只能是某个对象的属性</code>。那谁是对象呢？其实我们在讨论DOM的时候，DOM树的每个<code>node节点</code>都是对象。对象的特点是什么? 对象是键值对的集合，以<code>key-value</code>的特定形式展示，对象是有类型的，譬如Object类型的对象、Array类型的数组对象等。如何检测对象的类型？可以通过<code>typeof</code>关键字查看其返回值是否是<code>object</code>,也可以直接调用<code>Object.prototype.toString()</code>方法来认祖归宗，确认其真实类型。</p><p>那么，请看DOM节点的对象特征。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">title</span>=<span class="string">"我是标题"</span> <span class="attr">xxx</span>=<span class="string">"我是xxx"</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> obj  = &#123;<span class="attr">name</span>:<span class="string">"文顶顶"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*01-检查对象类型-typeof*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj,<span class="keyword">typeof</span> arr, <span class="keyword">typeof</span> oDiv);  <span class="comment">//object object object</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-检查对象类型-toString()   返回值 [对象类型  构造函数]*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(&#123;&#125;.toString.call(obj));               <span class="comment">//[object Object]</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(&#123;&#125;.toString.call(arr));               <span class="comment">//[object Array]</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(&#123;&#125;.toString.call(oDiv));              <span class="comment">//[object HTMLDivElement]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*03-对象的访问 增删改查操作*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.wendingding);                    <span class="comment">//undefined</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*03-A 添加*/</span></span></span><br><span class="line"><span class="javascript">  oDiv.wendingding = <span class="string">"文顶顶"</span>;                       <span class="comment">//增加wendingding属性</span></span></span><br><span class="line"><span class="javascript">  oDiv.name     = <span class="string">"测试的名字"</span>;                       <span class="comment">//增加logName属性</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*03-B 查询*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.wendingding);                    <span class="comment">//"文顶顶"</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*03-C 修改*/</span></span></span><br><span class="line"><span class="javascript">  oDiv.wendingding = <span class="string">"光头强"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.wendingding);                    <span class="comment">//光头强</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*03-D 删除*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="keyword">delete</span> oDiv.wendingding);             <span class="comment">//true</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.wendingding);                    <span class="comment">//undefined</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*03-E 在div对象身上添加并调用方法*/</span></span></span><br><span class="line"><span class="javascript">  oDiv.logName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"logName() =&gt; "</span> + <span class="keyword">this</span>.name);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  oDiv.logName();                                   <span class="comment">//"logName() =&gt;测试的名字"</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看到这儿，我想你已经清楚了事实。<br>需要说明的是，通常我们在开发中很少会像上面这样来进行操作，而且上面代码中的<code>name</code>、<code>logName</code>以及<code>wendingding</code>均不会出现在div的标签结构中，而是作为对象的属性和方法直接保存。下面简单列出在DOM对象上常用的属性。<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tagName      获取元素元素的标签名</span><br><span class="line">id           设置/获取元素id属性</span><br><span class="line">name         设置/获取元素name属性</span><br><span class="line">style        设置/获取元素的内联样式</span><br><span class="line">className    设置/获取元素的class属性</span><br><span class="line">innerHTML    设置/获取元素的内容（包含html代码）</span><br><span class="line">outerHTML    设置或获取元素及其内容（包含html代码）</span><br><span class="line">innerText    设置或获取位于元素标签内的文本</span><br><span class="line">outerText    设置(包括标签)或获取(不包括标签)元素的文本</span><br><span class="line"></span><br><span class="line">offsetTop    当前元素离<span class="tag">&lt;<span class="name">定位父级</span>&gt;</span>元素顶部的距离(如果没定位的父级，则相对于根元素html的距离)</span><br><span class="line">offsetLeft   当前元素离<span class="tag">&lt;<span class="name">定位父级</span>&gt;</span>元素左边的距离(如果没定位的父级，则相对于根元素html的距离)</span><br><span class="line">offsetWidth  当前元素的宽度（border + padding + content）</span><br><span class="line">offsetHeight 当前元素的高度（border + padding + content）</span><br></pre></td></tr></table></figure></p><p><strong>属性节点</strong> 的内容和我上文介绍的概念保持一致，我们可以下面的示例图来进行区分。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base43.png?raw=true"></p><div class="tip"><strong>属性节点</strong>区别于<strong>属性</strong>，它们被保存在元素节点( <code>标签</code> )对象的<code>attributes属性下</code>，该属性对应的是一个对象，里面保存着属性节点的键值对(<code>key-value</code>)信息。</div> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">title</span>=<span class="string">"我是标题"</span> <span class="attr">xxx</span>=<span class="string">"我是xxx"</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*属性节点的相关操作*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="comment">/*01-获取所有的属性节点*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.attributes);             <span class="comment">//NamedNodeMap["class","title","xxx"]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-属性节点的访问*/</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-A 查询*/</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">"class"</span>));  <span class="comment">//"box"</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">"xxx"</span>));    <span class="comment">//"我是标题"</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">"title"</span>));  <span class="comment">//"我是xxx"</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-B 添加*/</span></span></span><br><span class="line"><span class="javascript">  oDiv.setAttribute(<span class="string">"test"</span>,<span class="string">"test对应的值"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">"test"</span>));   <span class="comment">// "test对应的值"</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-C 修改*/</span></span></span><br><span class="line"><span class="javascript">  oDiv.setAttribute(<span class="string">"xxx"</span>,<span class="string">"阿鲁巴"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">"xxx"</span>));    <span class="comment">//"阿鲁巴"</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv[<span class="string">"xxx"</span>]);                 <span class="comment">//undefined 注意：自定义的属性节点不支持这样访问</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-D 删除*/</span></span></span><br><span class="line"><span class="javascript">  oDiv.removeAttribute(<span class="string">"xxx"</span>)               <span class="comment">//删除标签中的"xxx"属性节点</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">"xxx"</span>));    <span class="comment">//null</span></span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  /*备注</span></span><br><span class="line"><span class="javascript">  * 创建属性节点 <span class="keyword">var</span> attr = createAttribute(attr-key); </span></span><br><span class="line"><span class="undefined">  * 设置属性节点 attr.value = attr-value; ele.setAttributeNode(attr)</span></span><br><span class="line"><span class="undefined">  * 获取属性节点 </span></span><br><span class="line"><span class="undefined">  * [1] ele.attributes[attr-key].value</span></span><br><span class="line"><span class="undefined">  * [2] ele.getAttributeNode[attr-key].value</span></span><br><span class="line"><span class="undefined">  * [3] ele.getAttribute(attr-key)</span></span><br><span class="line"><span class="undefined">  * */</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中展示了操作属性节点的相关方法，当然除了这些方法外，其实我们还可以通过<code>attributes</code>的方法来对它们进行操作，标签的<code>attributes</code>属性对应的是一个<code>NamesNodeMap</code>类型的对象，它本质上同 NodeList 和 HTMLCollection 类型一样，是一个动态的集合。需说明的是，虽然标签的attributes属性提供了<code>getNameItem( )</code>、<code>removeNameItem( )</code>、<code>setNameItem( )</code>以及<code>item( )</code>等方法也能操作属性节点，但是因为操作不是很方便因此很少使用。</p><div class="tip">关于属性和属性节点，在著名的<a href="http://jquery.com/" target="_blank" rel="noopener"> jQuery </a>框架中封装了两对方法来分别进行处理，其中<code>prop()和removeProp()</code>方法专门用于对属性进行操作，而<code>attr()和removeAttr()</code>方法则用于操作属性节点。此外，对DOM对象而言，有时候我们也可以直接通过属性来操作属性节点(如<code>id、value 和 className</code>等)，可以认为这是为方便操作而提供的<code>天桥</code>。虽然在写代码时能快速安全的完成功能即可，但有些时候能够正确的区分对象属性和属性节点是意义重大的。</div><p>通常，标签身上的标准属性节点都会有一个与之对应的属性，譬如<code>id</code>和<code>class</code>( 对应className )等，但非标准的属性节点则并非如此。另外，HTML5标准建议我们在给标签(<code>ElementNode</code>)添加非标准属性的时候总是添加<code>data-前缀</code>，用于说明这些这些非标准属性提供的是与渲染无关的信息。在使用<code>data-</code>前缀的方式给标签添加了自定义属性后，我们可以通过标签的<code>dataset</code>属性来访问它们，该属性是一个<code>DOMStringMap</code>的实例对象，维护着一个<code>key-value</code>的映射。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*&lt;idv id="myDiv" data-info="信息" data-index="2"&gt;&lt;/idv&gt;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*00-获取页面中指定的div标签*/</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-读取自定义属性节点的值*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.dataset);        <span class="comment">//DOMStringMap &#123;index: "2",info: "信息"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.dataset.index);  <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.dataset.info);   <span class="comment">//"信息"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-设置|修改自定义属性节点的值*/</span></span><br><span class="line">oDiv.dataset.index = <span class="number">10</span>;          <span class="comment">//修改</span></span><br><span class="line">oDiv.dataset.des   = <span class="string">"描述信息"</span>;</span><br><span class="line"><span class="comment">/*&lt;idv id="myDiv" data-info="信息" data-index="10" data-des='描述信息'&gt;&lt;/idv&gt;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-其他操作属性节点的方式(对比)*/</span></span><br><span class="line"><span class="comment">/*03-A getAttribute()*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">"info"</span>));         <span class="comment">//null  注意不能生了data-前缀</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">"data-info"</span>));    <span class="comment">//"信息"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-B attributes*/</span></span><br><span class="line"><span class="comment">/*说明：使用nodeName和name可以访问属性名，使用nodeValue和value访问属性值*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.attributes.getNamedItem(<span class="string">"data-info"</span>).nodeName); <span class="comment">//"data-info"</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.attributes.getNamedItem(<span class="string">"data-info"</span>).nodeValue);<span class="comment">//"信息"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-C getAttributeNode()*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.getAttributeNode(<span class="string">"data-info"</span>));                 <span class="comment">//data-info="信息"</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.getAttributeNode(<span class="string">"data-info"</span>).name);            <span class="comment">//data-info</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.getAttributeNode(<span class="string">"data-info"</span>).value);           <span class="comment">//信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-补充：获取元素所有属性节点名称数组*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.getAttributeNames());  <span class="comment">//["id", "data-info", "data-index", "data-des"]</span></span><br></pre></td></tr></table></figure><p><strong>classList</strong> HTML5新增了一种操作元素类名的方式，即给每个标签都提供<code>classList属性</code>，该属性的值是<code>DOMTokenList</code>类型的实例，通过该属性来操作标签的类名更简单也更安全。<code>classList</code>实例对象拥有<code>add()</code>、<code>contains()</code>、<code>remove()</code>和<code>toggle()</code>等方法来操作具体的class，如果要访问某个具体的class当然也可以通过<code>[ ]</code>语法或者是<code>item( index )</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*&lt;div class="box test active" id="divDemo"&gt;&lt;/div&gt;*/</span></span><br><span class="line"><span class="comment">/*00-获取页面中指定的元素*/</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"divDemo"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(oDiv.classList);            <span class="comment">//DOMTokenList(3) ["box", "test", "active"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-读取元素的class*/</span></span><br><span class="line"><span class="comment">/*[ ]语法来读取指定的class*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.classList[<span class="number">0</span>]);         <span class="comment">//"box"</span></span><br><span class="line"><span class="comment">/*item(index)方法来读取指定的class*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.classList.item(<span class="number">1</span>));    <span class="comment">//"test"</span></span><br><span class="line"><span class="comment">/*使用className属性来读取元素的全部class*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.className);            <span class="comment">//box test active</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.className.split(<span class="string">" "</span>)); <span class="comment">//["box", "test", "active"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-添加class*/</span></span><br><span class="line">oDiv.classList.add(<span class="string">"box"</span>);              <span class="comment">//如class已经存在则不做任何处理</span></span><br><span class="line">oDiv.classList.add(<span class="string">"test2"</span>);            <span class="comment">//若class尚不存在则添加</span></span><br><span class="line"><span class="comment">/*&lt;div class="box test active test2" id="divDemo"&gt;&lt;/div&gt;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-检查是否存在指定的class,如果存在那么就返回true,否则返回false*/</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.classList.contains(<span class="string">"box"</span>));    <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(oDiv.classList.contains(<span class="string">"haha"</span>));   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-删除class*/</span></span><br><span class="line">oDiv.classList.remove(<span class="string">"test"</span>);</span><br><span class="line"><span class="comment">/*05-切换class 如果存在那么就删除，否则就添加*/</span></span><br><span class="line">oDiv.classList.toggle(<span class="string">"box"</span>);                   <span class="comment">//删除</span></span><br><span class="line">oDiv.classList.toggle(<span class="string">"box2"</span>);                  <span class="comment">//添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*&lt;div class="active test2 box2" id="divDemo"&gt;&lt;/div&gt;*/</span></span><br></pre></td></tr></table></figure><h3 id="4-0-案例"><a href="#4-0-案例" class="headerlink" title="4.0 案例"></a>4.0 案例</h3><p><strong>案例</strong> 动态创建表格并设置隔行变色<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">table&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="undefined">border-collapse: collapse;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="undefined">margin-top: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">td&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:3px</span> 5<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.odd</span>&#123;<span class="attribute">background-color</span>: <span class="number">#199</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"row"</span>&gt;</span>请输入行数：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"col"</span>&gt;</span>请输入列数：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"col"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>动态生成表格<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*00-监听页面的加载*/</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*01-获取页面中指定的元素*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oRow   = <span class="built_in">document</span>.getElementById(<span class="string">'row'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oCol   = <span class="built_in">document</span>.getElementById(<span class="string">'col'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oOutput     = <span class="built_in">document</span>.getElementById(<span class="string">'output'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oBtn   = output.previousElementSibling;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*02-注册按钮的点击事件*/</span></span></span><br><span class="line"><span class="javascript">  oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">/*03-获取用户输入的行-列信息*/</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> _row = oRow.value,_col = oCol.value;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*04-创建表格标签*/</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">'table'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> tbody = <span class="built_in">document</span>.createElement(<span class="string">'tbody'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*05-根据行数来动态的创建tr标签并添加到tbody标签中*/</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;_row;i++)&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*设置隔行换色*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(i%<span class="number">2</span> === <span class="number">0</span>) tr.className = <span class="string">'odd'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  tbody.appendChild(tr);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*06-根据列数来动态创建rd标签并添加到tr标签中*/</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;_col;j++)&#123;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);</span></span><br><span class="line"><span class="javascript"> td.innerHTML = <span class="string">'单元格 - '</span> + i + j;</span></span><br><span class="line"><span class="undefined"> tr.appendChild(td);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*07-把表格插入到页面中显示出来*/</span></span></span><br><span class="line"><span class="undefined">table.appendChild(tbody);</span></span><br><span class="line"><span class="javascript">oOutput.innerHTML = <span class="string">''</span>;       <span class="comment">// 添加前先清空#output</span></span></span><br><span class="line"><span class="undefined">oOutput.appendChild(table);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base42.png?raw=true"></p><h3 id="5-0-附录"><a href="#5-0-附录" class="headerlink" title="5.0 附录"></a>5.0 附录</h3><p><strong>Node（节点）的属性和方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">------------------------</span><br><span class="line">####  Node节点的主要属性</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">baseURI    <span class="comment">// 当前网页的绝对路径</span></span><br><span class="line">children  <span class="comment">// 指定节点的所有Element子节点</span></span><br><span class="line">childNodes           <span class="comment">// 当前节点的所有子节点</span></span><br><span class="line">childElementCount          <span class="comment">// 当前节点所有Element子节点的数量</span></span><br><span class="line"></span><br><span class="line">nodeName   <span class="comment">// 节点名称[只读]</span></span><br><span class="line">nodeType   <span class="comment">// 节点类型的常数值[只读]</span></span><br><span class="line">nodeValue  <span class="comment">// Text或Comment节点的文本值[只读]</span></span><br><span class="line">innerText<span class="comment">// 节点的文本内容</span></span><br><span class="line">nextSibling          <span class="comment">// 紧跟在当前节点后面的第一个兄弟节点</span></span><br><span class="line">isConnected<span class="comment">// 布尔类型的值，用于检查当前节点与DOM树是否连接[只读]</span></span><br><span class="line">textContent          <span class="comment">// 当前节点和它的所有后代节点的文本内容</span></span><br><span class="line">ownerDocument          <span class="comment">// 当前节点所在的顶层文档对象，即Document</span></span><br><span class="line"></span><br><span class="line">previousSibling          <span class="comment">// 当前节点的前一个兄弟节点</span></span><br><span class="line">parentNode           <span class="comment">// 当前节点的父节点</span></span><br><span class="line">parentElement          <span class="comment">// 当前节点的父Element节点</span></span><br><span class="line">firstChild          <span class="comment">// 当前节点的第一个子节点</span></span><br><span class="line">firstElementChild          <span class="comment">// 当前节点的第一个Element子节点</span></span><br><span class="line">lastChild           <span class="comment">// 当前节点的最后一个子节点</span></span><br><span class="line">lastElementChild           <span class="comment">// 当前节点的最后一个Element子节点</span></span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">####  Node节点的主要方法</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">cloneNode(<span class="keyword">true</span>);  <span class="comment">// 克隆节点，参数传递布尔类型的值（默认为false）</span></span><br><span class="line">hasChildNodes()   <span class="comment">// 布尔类型的值，表示当前节点是否有子节点</span></span><br><span class="line">appendChild(node)           <span class="comment">// 追加新的节点到当前节点中（插入后作为最后一个节点）</span></span><br><span class="line">removeChild(node)  <span class="comment">// 删除指定的子节点</span></span><br><span class="line">isEqualNode(noe)  <span class="comment">// 布尔类型的值，用于检查两个节点是否（完全）相等</span></span><br><span class="line">contains(node)  <span class="comment">// 布尔类型的值，用于判断参数节点是否为当前节点的后代节点</span></span><br><span class="line">normalize()   <span class="comment">// 清理当前节点内的所有Text节点，将去除空的文本节点并合并文本。</span></span><br><span class="line"></span><br><span class="line">insertBefore(newNode,oldNode)  <span class="comment">// 在指定子节点之前插入新的子节点</span></span><br><span class="line">replaceChild(newChild,oldChild) <span class="comment">// 替换节点</span></span><br><span class="line">compareDocumentPosition(node)   <span class="comment">// 比较当前节点与指定节点的位置关系，返回不同的掩码。</span></span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">####  ChildNode相关的方法</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">ChildNode.replace()         <span class="comment">// 替换节点</span></span><br><span class="line">ChildNode.remove()          <span class="comment">// 将ChildNode从其父节点的子节点列表中移除</span></span><br><span class="line">ChildNode.before()          <span class="comment">// 在当前标签(节点)的前面插入新的节点</span></span><br><span class="line">ChildNode.after()           <span class="comment">// 在当前标签(节点)的后面插入新的节点</span></span><br></pre></td></tr></table></figure></p><p><strong>Element（元素节点）的属性和方法</strong></p><p><div class="tip">元素节点继承了Node的所有属性和方法，Element本身也作为通用的基类来使用。</div>下面列出元素节点的主要属性和方法，如果没有特别标注为[读写]的，那么默认为只读。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">------------------------</span><br><span class="line">####  Element主要的属性</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">id  <span class="comment">// 指定元素的id属性[读写]</span></span><br><span class="line">attributes          <span class="comment">// 指定元素节点相关的所有属性集合(映射)</span></span><br><span class="line">tagName  <span class="comment">// 指定元素节点的标签名（大写）</span></span><br><span class="line">innerHTML           <span class="comment">// 指定元素节点包含的节点内容[读写]，区别于innerText</span></span><br><span class="line">outerHTML  <span class="comment">// 指定元素节点的所有HTML代码，包括它自身和包含的的所有子元素[读写]</span></span><br><span class="line">className  <span class="comment">// 元素节点的class属性值[读写]</span></span><br><span class="line">classList  <span class="comment">// 元素节点所有的class属性。</span></span><br><span class="line">dataset   <span class="comment">// 元素节点中所有的data-*属性。</span></span><br><span class="line">localName<span class="comment">// 元素名称本地化的结果</span></span><br><span class="line">clientTop           <span class="comment">// 元素节点距离它顶部边界的高度</span></span><br><span class="line">clientLeft           <span class="comment">// 元素节点距离它左边界的宽度</span></span><br><span class="line">clientHeight           <span class="comment">// 元素节点内部(相对于外层元素)的高度</span></span><br><span class="line">clientWidth           <span class="comment">// 元素节点内部(相对于外层元素)的宽度</span></span><br><span class="line"></span><br><span class="line">style  <span class="comment">// 元素节点的行内样式</span></span><br><span class="line">scrollHeight          <span class="comment">// 元素节点滚动视图的高度</span></span><br><span class="line">scrollWidth          <span class="comment">// 元素节点滚动视图的宽度</span></span><br><span class="line">scrollLeft           <span class="comment">// 元素节点横向滚动条距离左端的位移[读写]</span></span><br><span class="line">scrollTop           <span class="comment">// 元素节点纵向滚动条距离顶部的位移[读写]</span></span><br><span class="line">offsetHeight           <span class="comment">// 元素节点相对于版面或由父坐标 offsetParent 指定的父坐标的高度</span></span><br><span class="line">offsetWidth            <span class="comment">// 元素节点相对于版面或由父坐标 offsetParent指定的父坐标的宽度</span></span><br><span class="line">offsetLeft            <span class="comment">// 元素节点相对于版面或由父坐标 offsetParent指定的父坐标的左侧位移</span></span><br><span class="line">offsetTop           <span class="comment">// 元素节点相对于版面或由父坐标 offsetParent指定的父坐标的顶部位移</span></span><br><span class="line"></span><br><span class="line">firstElementChild<span class="comment">// 获取元素节点的第一个子元素</span></span><br><span class="line">lastElementChild <span class="comment">// 获取元素节点的最后一个子元素</span></span><br><span class="line">nextElementSibling <span class="comment">// 获取元素节点的下一个兄弟节点</span></span><br><span class="line">previousElementSibling        <span class="comment">// 获取元素节点的上一个兄弟节点</span></span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">####  Element主要的方法</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">[⦿] 操作属性节点相关的方法</span><br><span class="line">getAttribute()<span class="comment">// 读取指定属性</span></span><br><span class="line">setAttribute()<span class="comment">// 设置指定属性</span></span><br><span class="line">hasAttribute()<span class="comment">// 返回布尔类型的值，检查当前元素节点中是否有指定的属性</span></span><br><span class="line">removeAttribute()<span class="comment">// 移除指定属性</span></span><br><span class="line"></span><br><span class="line">[⦿] 选择器相关方法</span><br><span class="line">querySelector()  <span class="comment">// 根据参数获取选中的所有标签中的第一个返回</span></span><br><span class="line">querySelectorAll()          <span class="comment">// 根据参数获取选中的所有标签返回</span></span><br><span class="line">getElementsByTagName()          <span class="comment">// 根据标签名来获取指定的标签返回</span></span><br><span class="line">getElementsByClassName()        <span class="comment">// 根据class的名称来获取指定的标签返回</span></span><br><span class="line"></span><br><span class="line">[⦿] 事件相关方法</span><br><span class="line">addEventListener()<span class="comment">// 添加事件监听的回调函数</span></span><br><span class="line">removeEventListener()        <span class="comment">// 移除事件监听函数</span></span><br><span class="line">dispatchEvent()<span class="comment">// 触发事件</span></span><br><span class="line">attachEvent()<span class="comment">// 添加事件监听的回调函数(IE 9-)</span></span><br><span class="line">detachEvent()                   <span class="comment">// 移除事件监听函数（IE 9-）</span></span><br><span class="line">insertAdjacentHTML()        <span class="comment">// 指定的文本解析为HTML或XML，并将结果节点插入到DOM树中的指定位置</span></span><br></pre></td></tr></table></figure><p><strong>Document（文档）的属性和方法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">------------------------</span><br><span class="line">####  Document的主要属性</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body   <span class="comment">// 当前文档的&lt;body&gt;节点</span></span><br><span class="line"><span class="built_in">document</span>.head   <span class="comment">// 当前文档的&lt;head&gt;节点</span></span><br><span class="line"><span class="built_in">document</span>.defaultView           <span class="comment">// 当前文档对象所在的window对象</span></span><br><span class="line"><span class="built_in">document</span>.doctype   <span class="comment">// 当前文档关联的文档类型定义(DTD)</span></span><br><span class="line"><span class="built_in">document</span>.documentElement                <span class="comment">// 当前文档的根节点</span></span><br><span class="line"><span class="built_in">document</span>.activeElement          <span class="comment">// 当前文档中获得焦点的那个元素。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.links  <span class="comment">// 当前文档的所有连接集合</span></span><br><span class="line"><span class="built_in">document</span>.forms  <span class="comment">// 页面中所有表单元素的集合</span></span><br><span class="line"><span class="built_in">document</span>.images  <span class="comment">// 页面中所有图片元素的集合</span></span><br><span class="line"><span class="built_in">document</span>.embeds  <span class="comment">// 网页中所有嵌入对象的集合</span></span><br><span class="line"><span class="built_in">document</span>.scripts  <span class="comment">// 当前文档的所有脚本的集合</span></span><br><span class="line"><span class="built_in">document</span>.styleSheets          <span class="comment">// 当前网页的所有样式表的集合</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.URL  <span class="comment">// 当前文档的URL地址</span></span><br><span class="line"><span class="built_in">document</span>.cookie   <span class="comment">// 用来操作Cookie[读写]</span></span><br><span class="line"><span class="built_in">document</span>.title    <span class="comment">// 当前文档的标题</span></span><br><span class="line"><span class="built_in">document</span>.domain  <span class="comment">// 当前文档的域名</span></span><br><span class="line"><span class="built_in">document</span>.referrer  <span class="comment">// 当前文档的访问来源</span></span><br><span class="line"><span class="built_in">document</span>.location  <span class="comment">// 获取location对象，提供与URL相关的信息</span></span><br><span class="line"><span class="built_in">document</span>.readyState          <span class="comment">// 当前文档的状态</span></span><br><span class="line"><span class="built_in">document</span>.designMode          <span class="comment">// 控制当前文档是否可编辑[读写]</span></span><br><span class="line"><span class="built_in">document</span>.compatMode          <span class="comment">// 返回浏览器处理文档的模式</span></span><br><span class="line"><span class="built_in">document</span>.documentURI          <span class="comment">// 当前文档的URI地址</span></span><br><span class="line"><span class="built_in">document</span>.lastModified          <span class="comment">// 当前文档最后修改的时间戳</span></span><br><span class="line"><span class="built_in">document</span>.characterSet                   <span class="comment">// 当前文档的字符集，比如UTF-8等</span></span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">####  Document的主要方法</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.open()           <span class="comment">// 用于新建并打开一个文档</span></span><br><span class="line"><span class="built_in">document</span>.close()           <span class="comment">// 不安比open方法所新建的文档</span></span><br><span class="line"><span class="built_in">document</span>.write()           <span class="comment">// 用于向当前文档写入内容</span></span><br><span class="line"><span class="built_in">document</span>.writeIn()                  <span class="comment">// 用于向当前文档写入内容，尾部添加换行符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.createEvent(type)   <span class="comment">// 创建事件对象</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener()  <span class="comment">// 注册事件监听</span></span><br><span class="line"><span class="built_in">document</span>.removeEventListener()  <span class="comment">// 注销事件</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event)  <span class="comment">// 触发事件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.createElement(tagName)   <span class="comment">// 创建元素节点</span></span><br><span class="line"><span class="built_in">document</span>.createTextNode(text)     <span class="comment">// 创建文本节点</span></span><br><span class="line"><span class="built_in">document</span>.createAttribute(name)    <span class="comment">// 创建属性节点</span></span><br><span class="line"><span class="built_in">document</span>.createDocumentFragment()       <span class="comment">// 生成一个DocumentFragment对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(id)           <span class="comment">// 根据id值获取指定ID的元素节点返回</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(selectors)   <span class="comment">// 根据选择器参数获取指定的所有标签中的第一个返回</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(selectors)    <span class="comment">// 根据选择器参数获取指定的所有标签返回</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(tagName)  <span class="comment">// 根据标签名称获取指定的所有标签返回</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(className)      <span class="comment">// 根据class名称获取指定的所有标签返回</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(name)           <span class="comment">// 根据name获取拥有指定name属性的元素节点返回</span></span><br><span class="line"><span class="built_in">document</span>.elementFromPoint(x,y)         <span class="comment">// 返回位于页面指定位置最上层的Element子节点</span></span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/tree_02.png?raw=true&quot; height=&quot;250px&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;本文将详细介绍DOM相关的
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [26]-BOM</title>
    <link href="https://weibo.com/u/3800117445/2019/04/18/javaScript%E7%B3%BB%E5%88%97%20%5B26%5D-BOM/"/>
    <id>https://weibo.com/u/3800117445/2019/04/18/javaScript系列 [26]-BOM/</id>
    <published>2019-04-17T16:22:18.000Z</published>
    <updated>2019-06-11T01:32:07.079Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍BOM相关的知识点，介绍的重点在于BOM核心Window对象的成员细节。</div><p class="titleX"><strong>BOM简单介绍</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base36.png?raw=true" height="100px"></p><p>我们已经知道JavaScript的范围包括<code>ECMAScript(语言核心) + DOM(文档对象模型) + BOM(浏览器对象模型)</code>。</p><p>BOM 是 <a href=""> Browser Object Model（浏览器对象模型）</a>的缩写，它提供了独立于内容 而与浏览器窗口进行交互的对象。由于BOM主要用于管理窗口与窗口之间的通讯，因此其核心对象是window，它表示流浏览器的一个实例。BOM由一系列相关的对象构成，并且每个对象都提供了很多方法与属性，window作为最顶层的对象，BOM中所有的对象都是通过它延伸出来的。</p><p><strong>标准化</strong> JavaScript语法的标准化组织是ECMA，DOM的标准化组织是W3C, 而BOM因为缺乏标准，BOM最初其实是Netscape浏览器标准的一部分，而这也正是各种浏览器不兼容的根源所在。此外需要指出的是，W3C为了把浏览器中JavaScript最基本的部分标准化，已经将BOM的主要方面纳入了HTML5的规范中。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base37.png?raw=true"></p><p class="titleX"><strong>window和全局作用域</strong></p><p> 在浏览器中，window对象拥有着双重的角色，它既是通过JavaScript访问浏览器窗口的接口，也是ECMAScript规定中的Global全局对象。因此，所有在全局作用域中声明的变量、函数都会自动成为window对象的属性和方法。</p><p> <span style="border:1px solid #ccc;padding:2px 10px;color:#666">全局作用域</span></p><blockquote><p>✧ 定义在全局环境下的变量和函数都会成为 <code>window</code> 对象的成员(属性和方法)<br>✧ 编码的时候应该尽可能少的使用全局变量，以避免污染全局环境<br>✧ 没有用var声明的变量会成为全局变量，即 <code>window</code> 对象的属性<br>✧ 在编码时<code>window</code> 前缀可以被省略，如 <code>window.console.log()</code> 通常写成 <code>console.log()</code>;</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-全局作用域示例*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age);        <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age, <span class="built_in">window</span>.age);   <span class="comment">//12 12  age自动成为window的属性</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.arr);        <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"T"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr == <span class="built_in">window</span>.arr); <span class="comment">//true</span></span><br><span class="line">arr.push(<span class="string">"V"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.arr);        <span class="comment">//[1,2,3,"T","V"];</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>));         <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.sum(<span class="number">1</span>, <span class="number">3</span>));  <span class="comment">//4</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*02-没有使用var声明的变量默认成为全局变量*/</span></span><br><span class="line">address = <span class="string">"北京市海淀区"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.address);   <span class="comment">//"北京市海淀区";</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">"我是a"</span>;</span><br><span class="line">      b = <span class="string">"我是b"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">f();                          <span class="comment">/*调用函数f，执行函数体中的代码*/</span></span><br><span class="line"><span class="comment">//console.log(a);             //报错 无法访问变量a 因为a是f函数中的局部变量</span></span><br><span class="line"><span class="built_in">console</span>.log(b);               <span class="comment">//"我是b"  b默认成为全局变量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);        <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);        <span class="comment">//"我是b"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-省略window前缀*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.console == <span class="built_in">console</span>);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p> 因为全局作用域中声明的所有变量都会自动成为window的属性，而实际的开发中代码量可能是巨大的，且项目可能是由很N多人一起维护的，因此应该尽可能的减少全局变量的数量，以防止污染全局环境。</p><p> 关于这个问题的解决方案可以有两种，一种是根据具体的业务和功能将部分代码<code>封装到匿名函数(闭包)中</code>保持独立性，一种是把很多变量和函数<code>封装到特定的对象中</code>处理。当然，更成熟的方案是使用 <a href="">模块化</a> 的方式来组织项目和代码结构，其实模块化的开发方式也是使用匿名函数封装的一种变形，在这里我们暂不作具体的展开。</p><p><strong>注意</strong> <code>delete</code> 用于删除对象的属性，需注意虽然使用<code>delete</code>关键字可以删除直接定义在 <code>window</code> 上面的属性，但却无法直接删除用 <code>var</code> 声明的全局变量(在严格模式下不能禁止使用 <code>delete</code> 来删除遍历，错误信息为 <span style="color:red"> Uncaught SyntaxError: Delete of an unqualified identifier in strict mode. </span>)。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*测试1：使用delete删除对象的属性*/</span></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;<span class="attr">id</span>:<span class="string">"1001"</span>&#125;;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">delete</span> obj.id);           <span class="comment">//true</span></span><br><span class="line"> <span class="built_in">console</span>.log(obj.id);                  <span class="comment">//undefined</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*测试2：使用delete删除全局变量的属性*/</span></span><br><span class="line"> <span class="keyword">var</span> className = <span class="string">'H5-1904'</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">delete</span> className);        <span class="comment">//false</span></span><br><span class="line"> <span class="built_in">console</span>.log(className);               <span class="comment">//"H5-1904"</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">delete</span> <span class="built_in">window</span>.className); <span class="comment">//false</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.className);        <span class="comment">//"H5-1904"</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*测试3：使用delete删除直接定义在window对象上面的属性*/</span></span><br><span class="line"> <span class="built_in">window</span>.test = <span class="string">"测试的属性"</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">delete</span> <span class="built_in">window</span>.test);      <span class="comment">//true</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.test);             <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p class="titleX"><strong>window核心成员详解</strong></p><p>接下来，我将分门别类的讲解浏览器窗口的大小、滚动、导航、打开、弹窗、位置操作、历史记录以及事件处理等内容，所以这些功能都通过 <code>window</code>的核心成员来提供和实现。</p><p> <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base38.png?raw=true"></p><p> <span style="border:1px solid #ccc;padding:2px 10px;color:#666">window的 location 对象</span></p><p> <code>location</code>对象是window中最有用最重要的对象之一，它提供了与当前窗口中加载的文档有关的信息，而且它非常特殊，它既是<code>window</code>的属性也是<code>document</code>的属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">location 对象的主要属性</span><br><span class="line"></span><br><span class="line">hash     设置/返回从井号 (#) 开始的 URL（锚点）==&gt;哈希值。</span><br><span class="line">href     设置/返回完整的 URL。</span><br><span class="line">search   设置/返回从问号 (?) 开始的 URL（参数部分）。</span><br><span class="line">host     服务器名称和端口号</span><br><span class="line">hostname 服务器名称</span><br><span class="line">pathname URL中的目录和文件名</span><br><span class="line">port     返回指定的端口号，如果没有指定则返回空字符串</span><br><span class="line">protocol 返回网络协议</span><br><span class="line"></span><br><span class="line">location 对象的主要方法</span><br><span class="line">assign()            加载新的页面</span><br><span class="line">reload()            重新加载(刷新)</span><br><span class="line">replace(newurl)     使用新的页面来替换当前页面</span><br></pre></td></tr></table></figure></p><p><code>url</code>的组成<code>http://www.baidu.com:10086/api/reg.php?username=zs&amp;password=123&amp;age=18#123</code><br><strong><code>协议</code></strong>：http<br><strong><code>域名</code></strong>：baidu.com<br><strong><code>端口</code></strong>：10086 (默认:80)<br><strong><code>路径</code></strong>：/api/<br><strong><code>参数</code></strong>：username=zs&amp;password=123&amp;age=18<br><strong><code>哈希</code></strong>：#123</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">窗口的主要属性</span></p><p>跨浏览器确定窗口的大小可以使用window的<code>innerWidth</code>、<code>innerHeight</code>、<code>outerWidth</code>和<code>outerHeight</code>四个属性，它们分别对应的是页面视图容器的宽高和浏览器窗口本身的尺寸。需要注意的是，这几个属性存在兼容性问题，在IE8-中需要通过DOM来获取大小信息。</p><blockquote><p><strong>页面视图容器</strong>也称为浏览器的视口(<code>viewport</code>),相比窗口本身来说它不包括工具栏和滚动条。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-获取页面可视区域的大小(宽 | 高)*/</span></span><br><span class="line">  <span class="keyword">var</span> w =<span class="built_in">window</span>.innerWidth</span><br><span class="line">      || <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">      || <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> h =<span class="built_in">window</span>.innerHeight</span><br><span class="line">      || <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">      || <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*兼容IE8-</span></span><br><span class="line"><span class="comment">  * 如果是标准模式则使用document.documentElement.clientWidth，</span></span><br><span class="line"><span class="comment">  * 如果是混杂模式则使用document.body.clientWidth</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line">  <span class="built_in">console</span>.log(w);                 <span class="comment">//877   可视区域的宽度</span></span><br><span class="line">  <span class="built_in">console</span>.log(h);                 <span class="comment">//410   可视区域的高度</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*02-获取window窗口本身的大小*/</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.outerWidth); <span class="comment">//877   窗口的宽度</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.outerHeight);<span class="comment">//778   窗口的高度</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*03-获取滚动条位置相关的信息*/</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.scrollX);    <span class="comment">//水平滚动条滚动过的距离（只读）</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.scrollY);    <span class="comment">//垂直滚动条滚动过的距离（只读）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*04-操作滚动的相关方法*/</span></span><br><span class="line">  <span class="built_in">window</span>.scrollTo(<span class="number">100</span>,<span class="number">100</span>);       <span class="comment">//指定滚动位置</span></span><br><span class="line">  <span class="built_in">window</span>.scrollBy(<span class="number">-100</span>,<span class="number">100</span>);      <span class="comment">//设置基于当前位置的滚动距离</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">窗口的打开和关闭</span></p><p><strong><code>语法</code></strong> <code>window.open([ URL ],[ name ],[ features ],[ replace ])</code><br><strong><code>作用</code></strong> <code>open()</code>方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 作用：打开新的窗口</span></span><br><span class="line"><span class="comment"> * 语法：window.open(URL,name,features,replace)</span></span><br><span class="line"><span class="comment"> * 参数：</span></span><br><span class="line"><span class="comment"> *   URL   打开指定页面的URL，没有指定则打开空白窗口。</span></span><br><span class="line"><span class="comment"> *   name  指定target属性或窗口的名称。</span></span><br><span class="line"><span class="comment"> *      _blank  - 在新的窗口加载页面(默认)</span></span><br><span class="line"><span class="comment">        _parent - 在窗口中加载页面</span></span><br><span class="line"><span class="comment">        _self   - 在当前窗口中加载页面(替换)</span></span><br><span class="line"><span class="comment">        _top    - URL替换任何可加载的框架集</span></span><br><span class="line"><span class="comment">        name    - 窗口名称</span></span><br><span class="line"><span class="comment">    features  可选的字符串，声明了新窗口要显示的标准浏览器的特征</span></span><br><span class="line"><span class="comment">    replace   可选的布尔值，设置浏览历史的处理(true表示替换当前条目，false表示新建条目)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*01-打开空白窗口*/</span></span><br><span class="line"> <span class="built_in">window</span>.open();</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*02-打开新的标签页，加载www.wendingding.com站点*/</span></span><br><span class="line"> <span class="built_in">window</span>.open(<span class="string">"http://www.wendingding.com"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*03-打开新的窗口并控制窗口的外观*/</span></span><br><span class="line"> <span class="comment">//toolbar     浏览器工具栏是否显示</span></span><br><span class="line"> <span class="comment">//location    是否显示地址字段</span></span><br><span class="line"> <span class="comment">//directories 是否添加目录按钮(IE)</span></span><br><span class="line"> <span class="comment">//status      是否添加状态栏</span></span><br><span class="line"> <span class="comment">//menubar     是否显示菜单栏</span></span><br><span class="line"> <span class="comment">//scrollbars  是否显示滚动条</span></span><br><span class="line"> <span class="comment">//resizable   窗口是否可调节尺寸</span></span><br><span class="line"> <span class="comment">//width       窗口的宽度</span></span><br><span class="line"> <span class="comment">//height      窗口的高度</span></span><br><span class="line"> <span class="built_in">window</span>.open(<span class="string">"http://www.wendingding.com"</span>,<span class="string">"_blank"</span>,<span class="string">"toolbar=yes, location=yes, "</span> +</span><br><span class="line">  <span class="string">"directories=no, status=no, menubar=yes, scrollbars=yes, "</span> +</span><br><span class="line">   <span class="string">"resizable=no,width=400, height=400"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*04-关闭当前窗口*/</span></span><br><span class="line"> <span class="built_in">window</span>.close();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*05-该方法用来调出打印窗口*/</span></span><br><span class="line"> <span class="built_in">window</span>.print();</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">系统弹框</span></p><p><span class="spaceX" style="width:100px">alert( ) </span>             弹出对话框(确定)<br><span class="spaceX" style="width:100px">confirm( )</span>           弹出警告框，返回布尔值（确定&amp;取消）<br><span class="spaceX" style="width:100px">prompt( ) </span>    弹出输入框，返回消息或 null<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.log(alert("确定"));             /*提示框 该方法没有返回值*/</span></span><br><span class="line"><span class="comment">//console.log(confirm("确定删除吗?"));;    /*警示窗 确定返回true,取消返回false*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = prompt(<span class="string">"好汉请留下尊姓大名"</span>,<span class="string">"座山雕"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果点击了取消那么就返回null</span></span><br><span class="line"><span class="comment">//如果点击了确定那么就返回输入框的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">window的 history 对象</span></p><p>window对象中有一个<code>history</code>属性，它本身也是一个对象保存着网页的历史记录(从窗口打开时计算)。出于安全方面的考虑，开发人员无法得知用户浏览过的URL详情，但却可以利用<code>history</code>对象来实现前进和后退的功能。</p><p><code>history</code>对象通过内部的<code>length</code>属性来记录浏览历史的数量，该数据包含了向前和向后的所有浏览记录，默认加载到窗口的第一个页面其<code>history.length</code>的值为0。</p><p><span class="spaceX" style="width:100px">go( ) </span>             跳转到任意的浏览历史记录，负数表示后退。<br><span class="spaceX" style="width:100px">back( )</span>           后退一页<br><span class="spaceX" style="width:100px">forward( ) </span>       前进一页<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方法演示  下面代码中的window前缀可以省略*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.history.length);   <span class="comment">//获取历史记录长度</span></span><br><span class="line"><span class="built_in">window</span>.history.go(<span class="number">1</span>);                 <span class="comment">//前进1页</span></span><br><span class="line"><span class="built_in">window</span>.history.go(<span class="number">-1</span>);                <span class="comment">//后退1页</span></span><br><span class="line"><span class="built_in">window</span>.history.back();                <span class="comment">//回退</span></span><br><span class="line"><span class="built_in">window</span>.history.forward();            <span class="comment">//前进</span></span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">window的事件补充</span></p><p><code>onresize</code> 事件会在窗口大小调整的时候被触发。<br><code>onscroll</code> 事件在页面滚动条滚动的时候会被触发。<br><code>onload</code> 事件会在页面加载完成(HTML+CSS+其它资源)后触发。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍BOM相关的知识点，介绍的重点在于BOM核心Window对象的成员细节。&lt;/div&gt;

&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;BOM简单介绍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [25]-Date</title>
    <link href="https://weibo.com/u/3800117445/2019/04/17/javaScript%E7%B3%BB%E5%88%97%20%5B25%5D-JavaScript%E7%9A%84Date%E5%AF%B9%E8%B1%A1/"/>
    <id>https://weibo.com/u/3800117445/2019/04/17/javaScript系列 [25]-JavaScript的Date对象/</id>
    <published>2019-04-16T16:22:18.000Z</published>
    <updated>2019-06-11T01:32:07.269Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/flowerField/Source/blob/master/Blog/time_05.jpeg?raw=true" height="200px"></p><div class="tip">本文介绍JavaScript中的内置对象Date，时间相关的基本常识，以及Date的常用方法，此外还简单介绍了定时器的相关知识点。</div><p class="titleX"><strong>日期类型Date简单介绍</strong></p><p><a href="">Date对象</a>是JavaScript语言中内置的数据类型，日期实例对象通常都通过Date构造函数来创建。</p><p>[Date对象]相关的方法非常多，但总体来说这些方法大概可以分成两类，即对( 日期 )时间进行设置和读取操作，具体的操作则会涉及到时间的<code>年-月-日 时-分-秒-毫秒以及星期</code>等维度。因为在编码中操作的时间可能是本地时间或<a href="">UTC世界时间(GMT)</a>，因此Date对象几乎提供了两套相同用处的方法( <code>方法名中有UTC的表示操作的是世界时间，没有UTC的表示操作的是本地时间</code> )。</p><p>本文会先简单列出Date对象的相关方法，然后再具体讲解日期对象的创建、开发中常见的处理场景以及核心方法的使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Date</span>) </span><br><span class="line">ƒ <span class="built_in">Date</span>()</span><br><span class="line">    UTC: ƒ UTC()                  <span class="comment">/*将Date转换为毫秒格式 参照1970-01-01午夜(GMT)*/</span></span><br><span class="line">    <span class="built_in">arguments</span>: (...)</span><br><span class="line">    caller: (...)</span><br><span class="line">    length: <span class="number">7</span>                     <span class="comment">/*Date构造函数的形参个数*/</span></span><br><span class="line">    name: <span class="string">"Date"</span>                  <span class="comment">/*Date构造函数的名字*/</span></span><br><span class="line">    now: ƒ now()                  <span class="comment">/*以毫秒形式返回当前时间*/</span></span><br><span class="line">    parse: ƒ parse()              <span class="comment">/*解析一个日期/时间字符串*/</span></span><br><span class="line">    prototype:                    <span class="comment">/*Date构造函数原型对象的成员*/</span></span><br><span class="line">        <span class="keyword">constructor</span>: ƒ Date()</span><br><span class="line">        getDate: ƒ getDate()                      /*返回日期值*/</span><br><span class="line">        getDay: ƒ getDay()                        /*返回星期值*/</span><br><span class="line">        getFullYear: ƒ getFullYear()              /*返回年份值*/</span><br><span class="line">        getHours: ƒ getHours()                    /*返回小时值*/</span><br><span class="line">        getMilliseconds: ƒ getMilliseconds()      /*返回毫秒值*/</span><br><span class="line">        getMinutes: ƒ getMinutes()                /*返回分钟值*/</span><br><span class="line">        getMonth: ƒ getMonth()                    /*返回月份值*/</span><br><span class="line">        getSeconds: ƒ getSeconds()                /*返回秒钟值*/</span><br><span class="line">        getTime: ƒ getTime()                      /*返回时间戳(毫秒形式的时间)*/</span><br><span class="line">        getTimezoneOffset: ƒ getTimezoneOffset()  /*返回与GMT的时间差*/</span><br><span class="line">        getUTCDate: ƒ getUTCDate()                /*返回日期值(全球时间)*/</span><br><span class="line">        getUTCDay: ƒ getUTCDay()                  /*返回星期值(全球时间)*/</span><br><span class="line">        getUTCFullYear: ƒ getUTCFullYear()        /*返回年份值(全球时间)*/</span><br><span class="line">        getUTCHours: ƒ getUTCHours()              /*返回小时值(全球时间)*/</span><br><span class="line">        getUTCMilliseconds: ƒ getUTCMilliseconds()/*返回毫秒值(全球时间)*/</span><br><span class="line">        getUTCMinutes: ƒ getUTCMinutes()          /*返回分钟值(全球时间)*/</span><br><span class="line">        getUTCMonth: ƒ getUTCMonth()              /*返回月份值(全球时间)*/</span><br><span class="line">        getUTCSeconds: ƒ getUTCSeconds()          /*返回秒钟值(全球时间)*/</span><br><span class="line">        getYear: ƒ getYear()                      /*返回年份值 = 当前年份-1900*/</span><br><span class="line">        setDate: ƒ setDate()                      /*设置日期*/</span><br><span class="line">        setFullYear: ƒ setFullYear()              /*设置年份、可选的月份和日期*/</span><br><span class="line">        setHours: ƒ setHours()                    /*设置时间的小时，可选的分钟、秒以及毫秒*/</span><br><span class="line">        setMilliseconds: ƒ setMilliseconds()      /*设置时间的毫秒值*/</span><br><span class="line">        setMinutes: ƒ setMinutes()                /*设置时间的分钟、可选的秒钟以及毫秒*/</span><br><span class="line">        setMonth: ƒ setMonth()                    /*设置时间的月份和日期*/</span><br><span class="line">        setSeconds: ƒ setSeconds()                /*设置时间的秒钟和可选的毫秒*/</span><br><span class="line">        setTime: ƒ setTime()                      /*使用毫秒值来设置时间*/</span><br><span class="line">        setUTCDate: ƒ setUTCDate()                /*设置日期值(全球时间)*/</span><br><span class="line">        setUTCFullYear: ƒ setUTCFullYear()        /*设置年，可选的月份和日期(全球时间)*/</span><br><span class="line">        setUTCHours: ƒ setUTCHours()              /*设置小时，可选的分钟、秒钟和毫秒(全球时间)*/</span><br><span class="line">        setUTCMilliseconds: ƒ setUTCMilliseconds()/*设置毫秒值(全球时间)*/</span><br><span class="line">        setUTCMinutes: ƒ setUTCMinutes()          /*设置分钟、可选的秒钟和毫秒(全球时间)*/</span><br><span class="line">        setUTCMonth: ƒ setUTCMonth()              /*设置月份和日期(全球时间)*/</span><br><span class="line">        setUTCSeconds: ƒ setUTCSeconds()          /*设置秒钟和毫秒(全球时间)*/</span><br><span class="line">        setYear: ƒ setYear()                      /*设置年份*/</span><br><span class="line">        toDateString: ƒ toDateString()            /*以字符串的形式返回日期*/</span><br><span class="line">        toGMTString: ƒ toUTCString()              /*转换为全球时间表示的字符串*/</span><br><span class="line">        toISOString: ƒ toISOString()              /*转换为ISO-8601格式的字符串*/</span><br><span class="line">        toJSON: ƒ toJSON()                        /*JSON序列化日期对象*/</span><br><span class="line">        toLocaleDateString: ƒ toLocaleDateString()/*返回本地格式的日期字符*/</span><br><span class="line">        toLocaleString: ƒ toLocaleString()        /*转换为本地格式的字符串*/</span><br><span class="line">        toLocaleTimeString: ƒ toLocaleTimeString()/*转换为本地格式表示的Date时间部分*/</span><br><span class="line">        toString: ƒ toString()                    /*转换为字符串*/</span><br><span class="line">        toTimeString: ƒ toTimeString()            /*以字符串形式返回date的时间部分*/</span><br><span class="line">        toUTCString: ƒ toUTCString()              /*转换为字符串(全球时间)*/</span><br><span class="line">        valueOf: ƒ valueOf()                      /*获取日期的时间戳 等价于getTime()*/</span><br><span class="line">        Symbol(Symbol.toPrimitive): ƒ [Symbol.toPrimitive]()</span><br><span class="line">        __proto__: Object</span><br><span class="line">    __proto__: ƒ ()</span><br><span class="line">    [[Scopes]]: Scopes[0]</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>日期类型Date的基本使用</strong></div><br><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#F95">创建Date实例对象</span></p><p>通常我们使用构造函数Date来获取日期(时间)实例对象，在调用构造函数的时候有多种传参方式。</p><p><code>new Date()</code>             根据当前时间来创建Date实例。<br><code>new Date(milliseconds)</code> 根据 <a href="">时间戳</a> (毫秒计数的纯数字)来创建Date实例。<br><code>new Date(dateString)</code>   根据特殊格式的日期字符串也能创建Date实例。<br><code>new Date(year,month,[day],[hours],[minutes],[seconds],[ms])</code> 根据年月日时分秒来创建实例。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*日期Date实例的创建的N种方式*/</span></span><br><span class="line"><span class="comment">/*01-获取当前时间*/</span></span><br><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-根据时间戳来创建Date对象*/</span></span><br><span class="line"><span class="keyword">var</span> milliseconds = time1.getTime();</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(milliseconds);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-传入7个参数(年月日时分秒和毫秒创建)*/</span></span><br><span class="line"><span class="keyword">var</span> time3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-根据固定格式的日期字符串来创建*/</span></span><br><span class="line"><span class="keyword">var</span> dateString1 = <span class="string">"2019-09-01"</span>;</span><br><span class="line"><span class="keyword">var</span> dateString2 = <span class="string">"2019/09/02"</span>;</span><br><span class="line"><span class="keyword">var</span> dateString3 = <span class="string">"October 13, 1975 11:13:00"</span>;</span><br><span class="line"><span class="keyword">var</span> time4 = <span class="keyword">new</span> <span class="built_in">Date</span>(dateString1);</span><br><span class="line"><span class="keyword">var</span> time5 = <span class="keyword">new</span> <span class="built_in">Date</span>(dateString2);</span><br><span class="line"><span class="keyword">var</span> time6 = <span class="keyword">new</span> <span class="built_in">Date</span>(dateString3)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*05-Date在调用的时候可以缺省new关键字*/</span></span><br><span class="line"><span class="keyword">var</span> time7 = <span class="built_in">Date</span>();     <span class="comment">//获取的是当前的时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*日期对象中包含的信息主要有：年、月、日、时、分、秒、毫秒、星期和时区*/</span></span><br><span class="line"><span class="built_in">console</span>.log(time1);     <span class="comment">//Wed Apr 17 2019 10:54:24 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(time2);     <span class="comment">//Wed Apr 17 2019 10:54:24 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(time3);     <span class="comment">//Thu Jun 20 2019 01:03:01 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(time4);     <span class="comment">//Sun Sep 01 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(time5);     <span class="comment">//Mon Sep 02 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(time6);     <span class="comment">//Mon Oct 13 1975 11:13:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(time7);     <span class="comment">//Wed Apr 17 2019 11:04:59 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*把本地时间转换为GMT全球时间格式打印*/</span></span><br><span class="line">time5.toUTCString();    <span class="comment">//"Sun, 01 Sep 2019 16:00:00 GMT"</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#F95">获取并格式化时间</span></p><p>在开发中我们经常需要以特定的格式来表示时间，譬如<code>2008-08-08 08：08：08</code> 或者是<code>2008/08/08</code>。其实参考上文的代码，我们发现Date对象为我们提供了一大堆方法来获取Date实例中具体的年月日时分秒等数值，通过调用这些方法我们可以把日期格式化成任何我们想要的形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-获取当前的Date时间对象*/</span></span><br><span class="line"><span class="keyword">var</span> date  = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-获取具体的每个值*/</span></span><br><span class="line"><span class="keyword">var</span> year  = date.getFullYear();       <span class="comment">/*年*/</span></span><br><span class="line"><span class="keyword">var</span> month = date.getMonth()+<span class="number">1</span>;        <span class="comment">/*月*/</span></span><br><span class="line"><span class="keyword">var</span> day   = date.getDate();           <span class="comment">/*日*/</span></span><br><span class="line"><span class="keyword">var</span> hour  = date.getHours();          <span class="comment">/*时*/</span></span><br><span class="line"><span class="keyword">var</span> min   = date.getMinutes();        <span class="comment">/*分*/</span></span><br><span class="line"><span class="keyword">var</span> sec   = date.getSeconds();        <span class="comment">/*秒*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-按照固定的格式拼接*/</span></span><br><span class="line"><span class="keyword">var</span> res = year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + min + <span class="string">':'</span> + sec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2019-4-17 11:31:18*/</span></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><p> 在上面的代码中，我们把当前的日期对象转换成了固定格式的字符串<code>2019-4-17 11:31:18</code>，其实除了像上面那样拼接外我们还可以简单的通过数组的<code>join()</code>方法来执行格式化操作。此外，有时候我们可能需要保证年月日时分秒等占两位，即上面的时间应该表示为<code>2019-04-17 11:31:18</code>，那么可能还需要对某些数据执行 <a href="">补零操作</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*00-封装补零的方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefixInteger</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">Array</span>(<span class="number">2</span>).join(<span class="string">'0'</span>) + num).slice(<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-获取当前的Date时间对象*/</span></span><br><span class="line"><span class="keyword">var</span> date  = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-获取具体的每个值*/</span></span><br><span class="line"><span class="keyword">var</span> year  = date.getFullYear();       <span class="comment">/*年*/</span></span><br><span class="line"><span class="keyword">var</span> month = prefixInteger(date.getMonth()+<span class="number">1</span>);        <span class="comment">/*月*/</span></span><br><span class="line"><span class="keyword">var</span> day   = prefixInteger(date.getDate());           <span class="comment">/*日*/</span></span><br><span class="line"><span class="keyword">var</span> hour  = prefixInteger(date.getHours());          <span class="comment">/*时*/</span></span><br><span class="line"><span class="keyword">var</span> min   = prefixInteger(date.getMinutes());        <span class="comment">/*分*/</span></span><br><span class="line"><span class="keyword">var</span> sec   = prefixInteger(date.getSeconds());        <span class="comment">/*秒*/</span></span><br><span class="line"><span class="keyword">var</span> week  = date.getDay();                            <span class="comment">/*星期 0~6*/</span></span><br><span class="line"><span class="keyword">var</span> weStr = <span class="string">'日一二三四五六'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-按照固定的格式拼接*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.push(year + <span class="string">"-"</span>);</span><br><span class="line">arr.push(month + <span class="string">"-"</span>);</span><br><span class="line">arr.push(day + <span class="string">" "</span>);</span><br><span class="line">arr.push(hour + <span class="string">":"</span>);</span><br><span class="line">arr.push(min + <span class="string">":"</span>);</span><br><span class="line">arr.push(sec + <span class="string">" "</span>);</span><br><span class="line">arr.push(<span class="string">"星期"</span>+ weStr[week]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = arr.join(<span class="string">""</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res);       <span class="comment">/*2019-04-17 11:56:12 星期三*/</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#F95">Date对象的常用方法</span></p><p><code>toUTCString()</code> 方法把时间转换成UTC时间。</p><p><code>Date.now()</code> 方法返回执行这行代码时距 1970-01-01 0点的毫秒数。</p><p><code>Date.parse()</code> 返回指定日期距1970-01-01 0点的毫秒数，默认支持<code>年-月-日</code>或<code>年/月/日</code>格式。</p><p><code>toLocaleDateString()</code> 方法以特定的地区格式显示年、月、日。</p><p><code>getTime() | setTime()</code> 方法用来获取 | 修改某个日期自1970年1月1日0时以来的毫秒数(时间戳)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取当前时间*/</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*傻傻分不清楚的时间字符串*/</span></span><br><span class="line"><span class="built_in">console</span>.log(date);                     <span class="comment">//Wed Apr 17 2019 15:19:03 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toDateString());       <span class="comment">//Wed Apr 17 2019</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toISOString());        <span class="comment">//2019-04-17T07:19:03.303Z</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleTimeString()); <span class="comment">//下午3:19:03</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleDateString()); <span class="comment">//2019/4/17</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取时间戳*/</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getTime());            <span class="comment">//1555485543303</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(<span class="string">"2008-08-08"</span>));  <span class="comment">//1218153600000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(<span class="string">"2008/08/08"</span>));  <span class="comment">//1218124800000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*把时间戳转换为时间字符串格式*/</span></span><br><span class="line"><span class="keyword">var</span> resDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">"2008/08/08"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(resDate);                   <span class="comment">//Fri Aug 08 2008 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><p><strong><code>示例</code></strong> 给定两个日期，计算它们之间间隔的天数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-提供两个时间(注意格式)*/</span></span><br><span class="line"><span class="keyword">var</span> start = <span class="string">"2019-04-01"</span>;</span><br><span class="line"><span class="keyword">var</span> end   = <span class="string">"2019-04-22"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-计算两个时间见的差值 毫秒数据*/</span></span><br><span class="line"><span class="keyword">var</span> offset = <span class="built_in">Date</span>.parse(end) - <span class="built_in">Date</span>.parse(start);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-把差值转换为天数*/</span></span><br><span class="line"><span class="keyword">var</span> days = <span class="built_in">Math</span>.ceil(offset/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-拼接并输出*/</span></span><br><span class="line"><span class="keyword">var</span> res = start +<span class="string">' 至 '</span>+ end + <span class="string">' 还差：'</span> + days + <span class="string">"天"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//2019-04-01 至 2019-04-22 还差：21天</span></span><br></pre></td></tr></table></figure><p class="titleX"><strong>定时器和延迟执行</strong></p><p>JavaScript中提供了专门的定时器和延迟执行的方法，我们简单介绍下它们的基本语法。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#F95">延迟执行函数</span></p><p><strong><code>语法</code></strong> <code>setTimeout(code,millisec)</code><br><strong><code>作用</code></strong> <code>setTimeout()</code>方法用于在指定的毫秒数后调用函数或计算表达式<br><strong><code>说明</code></strong> <code>setTimeout()</code>方法只会执行 code 一次。<br><strong><code>取消</code></strong> 当延迟执行函数启动后可以通过调用对应的<code>clearTimeOut()</code>方法传入参数来关闭定时器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-延迟执行函数的基本使用*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"start"</span>,<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"> setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">/*1秒钟后才执行回调函数中的代码*/</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"task"</span>,<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"> &#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"end"</span>,<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"></span><br><span class="line"> <span class="comment">//start Wed Apr 17 2019 14:49:38 GMT+0800 (中国标准时间)</span></span><br><span class="line"> <span class="comment">//end   Wed Apr 17 2019 14:49:38 GMT+0800 (中国标准时间)</span></span><br><span class="line"> <span class="comment">//task  Wed Apr 17 2019 14:49:39 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><p><strong><code>示例</code></strong> 演示如果使用<code>setTimeout()</code>延迟执行函数来实现时钟的功能。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"startTime()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">startTime</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*01-获取当前的时间*/</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*02-获取时分秒等信息并格式化*/</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h    = checkTime(date.getHours());</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m    = checkTime(date.getMinutes());</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s    = checkTime(date.getSeconds());</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*03-输出到页面中显示出来*/</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).innerHTML=h+<span class="string">":"</span>+m+<span class="string">":"</span>+s</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*04-延迟执行 设置500毫秒后重新调用startTime方法 */</span></span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="string">'startTime()'</span>,<span class="number">500</span>)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*用来保证时分秒占2位，不足则补零 */</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">checkTime</span>(<span class="params">i</span>)</span></span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (i&lt;<span class="number">10</span>) i=<span class="string">"0"</span> + i</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> i</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#F95">定时器函数</span></p><p><strong><code>语法</code></strong> <code>setInterval(code,millisec[,&quot;lang&quot;])</code><br><strong><code>作用</code></strong> <code>setInterval()</code>方法会按照指定的周期（以毫秒计）来调用函数或计算表达式。<br><strong><code>说明</code></strong> <code>setInterval()</code>方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。<br><strong><code>取消</code></strong> 当定时器开启后可以通过调用对应的<code>clearInterval()</code>方法传入参数来关闭定时器。<br><strong><code>场景</code></strong> 定时器函数常被用来处理一些需要长时间执行的重复性工作，譬如轮播图。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*开启定时器*/</span></span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"--滴答--滴答--！"</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*取消定时器*/</span></span><br><span class="line"><span class="comment">// clearInterval(timer);</span></span><br><span class="line"><span class="comment">// 说明 上面的代码执行后每隔1秒就打印一次 "--滴答--滴答--！"</span></span><br></pre></td></tr></table></figure><p class="titleX"><strong>附录：时间有关的常识</strong></p><p><span class="prop" style="width:80px;background:#298;color:#fff">纪元</span> 纪元时间(<code>UNIX TIME</code>)指的是 1970-01-01 00:00:00 </p><p><span class="prop" style="width:80px;background:#295;color:#fff">GMT</span>格林尼治标准时间 (<code>Greenwich Mean Time</code>)，俗称“天文学时间”</p><p> 它根据地球的自转和公转来计算时间，也就是太阳每天经过位于英国伦敦郊区的皇家格林尼治天文台的时间就是中午12点，而地球的自转正在缓速变慢，所以时间误差比较大。<br><span class="prop" style="width:80px;background:#795;color:#fff">UTC</span> 世界协调时间 (<code>Universal Time Coordinated</code>)，又称为“原子物理时间”。</p><p>世界协调时间更加精确，50亿年才误差1秒。</p><p><span class="prop" style="width:80px;background:#198;color:#fff">闰年</span> 四年一闰，百年不闰，四百年再闰 </p><p> 闰年的作用是为了修正计时的偏差，地球绕太阳一周的准确时间是365天5小时48分46秒，用小数表示即365.24219天，为了方便我们平时计算一年使用的是365天，这样实际每年就会多出0.24219天，四年就多了一天，如果按四年年一润的算法，100年总共有25个闰年，但实际100年只多出24.219天，所以就有了百年不润的说法；因此，我们在判断闰年的法则为 <span style="color:red">① 能被4整除且不能被100整除的为闰年 ② 能被400整除的是闰年。</span></p><p><span class="prop" style="width:80px;background:#595;color:#fff">时区</span> 全球共被划分为24个时区，我们使用的是北京时间(东八区) </p><p> 为了克服时间上的混乱，1884年在华盛顿召开的一次国际经度会议（<code>国际子午线会议</code>）上，规定将全球划分为24个时区（东西各12个时区）。规定英国（格林尼治天文台旧址）为中时区（零时区）、东1-12区，西1-12区。每个时区横跨经度15度，时间正好是1小时</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/time_06.png?raw=true" height="400px"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/time_05.jpeg?raw=true&quot; height=&quot;200px&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;本文介绍JavaScri
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [24]-Math</title>
    <link href="https://weibo.com/u/3800117445/2019/04/16/javaScript%E7%B3%BB%E5%88%97%20%5B24%5D-JavaScript%E5%86%85%E7%BD%AEMath/"/>
    <id>https://weibo.com/u/3800117445/2019/04/16/javaScript系列 [24]-JavaScript内置Math/</id>
    <published>2019-04-16T15:22:17.000Z</published>
    <updated>2019-06-11T01:32:07.086Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍JavaScript中的内置对象Math，以及Math的常用方法。</div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/Rafael-Araujo.jpg?raw=true" height="300px"></p><p class="titleX"><strong>Math简单介绍</strong></p><p>ECMAScript为我们提供了一个专门处理数学计算的内置对象——<a href="">Math对象</a>。Math对象提供了很多数学专业计算中可能会用到的特殊值(譬如 <code>π</code>)常量，以及封装好的工具函数(<code>譬如 求N个数最大值、最小值、随机数、绝对值、平方根以及正玄和反余值等</code>)。</p><p>这里先通过<code>console.dir()</code>方法打印Math对象的所有成员，我们可以通过下面列出的打印信息对Math对象有一个简单的了解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Math</span>);</span><br><span class="line"><span class="built_in">Math</span></span><br><span class="line">    E: <span class="number">2.718281828459045</span>            <span class="comment">//自然对数的底数，常量e的值</span></span><br><span class="line">    LN2: <span class="number">0.6931471805599453</span>         <span class="comment">//2的自然对数</span></span><br><span class="line">    LN10: <span class="number">2.302585092994046</span>         <span class="comment">//10的自然对数</span></span><br><span class="line">    LOG2E: <span class="number">1.4426950408889634</span>       <span class="comment">//以2为底e的对数</span></span><br><span class="line">    LOG10E: <span class="number">0.4342944819032518</span>      <span class="comment">//以10为底e的对数</span></span><br><span class="line">    PI: <span class="number">3.141592653589793</span>           <span class="comment">//π的值</span></span><br><span class="line">    SQRT1_2: <span class="number">0.7071067811865476</span>     <span class="comment">//1/2的平方根(2的平方根的倒数)</span></span><br><span class="line">    SQRT2: <span class="number">1.4142135623730951</span>       <span class="comment">//2的平方根</span></span><br><span class="line">    abs: ƒ abs()                    <span class="comment">//求参数的绝对值</span></span><br><span class="line">    acos: ƒ acos()                  <span class="comment">//返回参数的反余弦值</span></span><br><span class="line">    acosh: ƒ acosh()                </span><br><span class="line">    asin: ƒ asin()                  <span class="comment">//返回参数的反正玄值</span></span><br><span class="line">    asinh: ƒ asinh()          </span><br><span class="line">    atan: ƒ atan()                  <span class="comment">//返回参数的反正切值</span></span><br><span class="line">    atan2: ƒ atan2()                <span class="comment">//Math.atan2(y,x) 返回y/x的反正切值</span></span><br><span class="line">    atanh: ƒ atanh()          </span><br><span class="line">    cbrt: ƒ cbrt()                  </span><br><span class="line">    ceil: ƒ ceil()                  <span class="comment">//执行向上舍入(将数值向上舍入为最接近的整数)</span></span><br><span class="line">    clz32: ƒ clz32()</span><br><span class="line">    cos: ƒ cos()                    <span class="comment">//返回参数余弦值</span></span><br><span class="line">    cosh: ƒ cosh()    </span><br><span class="line">    exp: ƒ exp()                    <span class="comment">//返回Math.E的参数次幂</span></span><br><span class="line">    expm1: ƒ expm1()</span><br><span class="line">    floor: ƒ floor()                <span class="comment">//执行向下舍入(将数值向下舍入为最接近的整数)</span></span><br><span class="line">    fround: ƒ fround()</span><br><span class="line">    hypot: ƒ hypot()</span><br><span class="line">    imul: ƒ imul()</span><br><span class="line">    log: ƒ log()                    <span class="comment">//返回参数的自然对数</span></span><br><span class="line">    log1p: ƒ log1p()</span><br><span class="line">    log2: ƒ log2()</span><br><span class="line">    log10: ƒ log10()</span><br><span class="line">    max: ƒ max()                    <span class="comment">//返回参数列表中的最大值</span></span><br><span class="line">    min: ƒ min()                    <span class="comment">//返回参数列表中的最小值</span></span><br><span class="line">    pow: ƒ pow()                    <span class="comment">//Math.pow(n,p) 返回n的p次幂</span></span><br><span class="line">    random: ƒ random()              <span class="comment">//返回0~1之间的随机数</span></span><br><span class="line">    round: ƒ round()                <span class="comment">//执行标准的舍入(数学意义的舍入规则)</span></span><br><span class="line">    sign: ƒ sign()</span><br><span class="line">    sin: ƒ sin()                    <span class="comment">//返回参数的正弦值</span></span><br><span class="line">    sinh: ƒ sinh()                  </span><br><span class="line">    sqrt: ƒ sqrt()                  <span class="comment">//返回参数的平方根</span></span><br><span class="line">    tan: ƒ tan()                    <span class="comment">//返回参数的正切值</span></span><br><span class="line">    tanh: ƒ tanh()</span><br><span class="line">    trunc: ƒ trunc()</span><br><span class="line">    <span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.toStringTag): <span class="string">"Math"</span></span><br><span class="line">    __proto__: <span class="built_in">Object</span></span><br></pre></td></tr></table></figure><p class="titleX"><strong>Math常用方法</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base34.png?raw=true"></p><p><code>Math.abs()</code>方法返回参数值的绝对值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">16</span>));              <span class="comment">//16</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-6</span>));              <span class="comment">//6</span></span><br></pre></td></tr></table></figure></p><p><code>Math.max()</code>方法返回参数之中最大的那个值，<code>Math.min()</code>返回参数列表中最小的那个值。如果参数为空, Math.min返回Infinity, Math.max返回-Infinity。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-求参数列表的最大值和最小值*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">2</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">18</span>));    <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">2</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">21</span>));    <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-测试参数列表为空的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min());                <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max());                <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure></p><p><code>Math.pow(x,y)</code>方法返回以第一个参数为底数、第二个参数为幂的指数值，即求x的y次幂。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">3</span>));   <span class="comment">//8     2的3次幂</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-1</span>));  <span class="comment">//0.5   2的-1次幂 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算 圆的面积 = πr的平方*/</span></span><br><span class="line"><span class="keyword">var</span> radius = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> area = <span class="built_in">Math</span>.PI * <span class="built_in">Math</span>.pow(radius, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p><code>Math.round</code>方法用于执行四舍五入操作。<br><code>Math.ceil()</code>方法用于返回大于参数值的最小整数（天花板值）。<br><code>Math.floor()</code>方法用于返回大于参数值的最大整数（地板值）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-Math.round() 执行正常的四舍五入操作*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">0.1</span>));     <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">0.5</span>));     <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">0.6</span>));     <span class="comment">// 1</span></span><br><span class="line"><span class="comment">/*负值的处理*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">-1.1</span>));    <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">-1.5</span>));    <span class="comment">// -1 注意特殊情况</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">-1.7</span>));    <span class="comment">// -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-Math.ceil() 大于参数值的最小整数*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">3.1</span>));      <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">3.5</span>));      <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">3.9</span>));      <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">-3.1</span>));     <span class="comment">//-3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">-3.5</span>));     <span class="comment">//-3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">-3.9</span>));     <span class="comment">//-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-Math.floor() 小于参数值的最大整数*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">3.1</span>));     <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">3.5</span>));     <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">3.9</span>));     <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">-3.1</span>));    <span class="comment">//-4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">-3.5</span>));    <span class="comment">//-4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">-3.9</span>));    <span class="comment">//-4</span></span><br></pre></td></tr></table></figure><p><code>Math.sqrt()</code>方法返回参数值的平方根，如果参数是一个负值，则返回NaN。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sqrt(<span class="number">4</span>));          <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sqrt(<span class="number">-4</span>));         <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sqrt(<span class="number">9</span>));          <span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p><code>Math.random()</code>方法返回0到1之间的一个伪随机数，取值区间为<code>[ 0 , 1 )</code> 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());   <span class="comment">//0.6260459147033315</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());   <span class="comment">//0.5273094529873636</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*封装两个生成随机数的方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (max - min) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getRandom(<span class="number">1</span>, <span class="number">8</span>)         <span class="comment">// 6.919178146646834</span></span><br><span class="line">getRandomInt(<span class="number">1</span>, <span class="number">8</span>)      <span class="comment">// 5</span></span><br><span class="line"><span class="comment">/*如果需要对结果取整，那么使用Math.floor或者是parseInt函数处理*/</span></span><br></pre></td></tr></table></figure></p><p>Math对象除了上述工具函数外，还提供一系列的三角函数方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.sin()：返回参数的正弦      （参数为弧度值）</span></span><br><span class="line"><span class="comment">//Math.cos()：返回参数的余弦      （参数为弧度值）</span></span><br><span class="line"><span class="comment">//Math.tan()：返回参数的正切      （参数为弧度值）</span></span><br><span class="line"><span class="comment">//Math.asin()：返回参数的反正弦   （返回值为弧度值）</span></span><br><span class="line"><span class="comment">//Math.acos()：返回参数的反余弦   （返回值为弧度值）</span></span><br><span class="line"><span class="comment">//Math.atan()：返回参数的反正切   （返回值为弧度值）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sin(<span class="number">0</span>));              <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.cos(<span class="number">0</span>));              <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.tan(<span class="number">0</span>));              <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">2</span>));    <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍JavaScript中的内置对象Math，以及Math的常用方法。&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/Rafael-Ara
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [23]-基本包装类型</title>
    <link href="https://weibo.com/u/3800117445/2019/04/16/javaScript%E7%B3%BB%E5%88%97%20%5B23%5D-JavaScript%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/"/>
    <id>https://weibo.com/u/3800117445/2019/04/16/javaScript系列 [23]-JavaScript包装类型/</id>
    <published>2019-04-16T15:22:16.000Z</published>
    <updated>2019-06-11T01:32:07.331Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文主要介绍JavaScript中的基本包装类型以及使用注意点。</div><p class="titleX"><strong>基本包装类型介绍</strong></p><blockquote><p><strong>基本(简单)数据类型</strong> <code>字符串 + 数值 + null + undefined + 布尔值</code></p></blockquote><p>为了便于操作基本类型，ECMAScript提供了三个特殊的引用类型：<code>Boolean</code>、<code>Number</code>以及<code>String</code>类型，它们的结构与其他的引用类型(<code>譬如 Array Object</code>)类似。它们具备与各自的基本类型相应的特殊行为，每当我们读取一个基本类型的值的时候，后台就会创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'测试字符串'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);            <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>));      <span class="comment">//字符串</span></span><br></pre></td></tr></table></figure></p><p>在这里我们需要思考一个非常严肃而重要的问题 ，那就是<span style="color:#f03">属性和方法本是对象的特征，字符串如何能够拥有 <code>length</code>属性以及其他类似 <code>subString</code>等方法，内部怎么实现的？</span> </p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wenhao.png?raw=true" height="150px" style="margin=20px"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 我们知道基本类型值它们本身并不是对象，因此从逻辑上讨论他们不应该有属性和方法。</span><br><span class="line"> 它们能够访问属性和方法的原理是在执行相关代码的时候，内部会执行下面的操作：</span><br><span class="line"> </span><br><span class="line">（1）创建String类型的一个实例对象</span><br><span class="line">（2）在实例对象上面读取指定的属性（length）,调用指定的方法（subString）</span><br><span class="line">（3）销毁该对象</span><br></pre></td></tr></table></figure><p class="titleX"><strong>基本包装类型的成员</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-创建Number类型的对象*/</span> </span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-创建String类型的对象*/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello World'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-创建Boolean类型的对象*/</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><span class="prop" style="width:200px">String</span> String 是与字符串(<code>string</code>)相对应的对象类型。<br><span class="prop" style="width:200px">Number</span> Number 是与数字值(<code>number</code>)相对应的对象类型。<br><span class="prop" style="width:200px">Boolean</span> Boolean 是与布尔值(<code>boolean</code>)相对应的对象类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 String</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'测试字符串'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);            <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>));      <span class="comment">//字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 Number</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num);                   <span class="comment">//Number &#123;[[PrimitiveValue]]: 10&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);            <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">10</span>);             <span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//003 Boolean</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bool);                  <span class="comment">//Boolean &#123;[[PrimitiveValue]]: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> bool);           <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);           <span class="comment">//boolean</span></span><br></pre></td></tr></table></figure><p class="titleX"><strong>基本包装类型的注意点</strong></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">① 区分对象和基本值</span></p><p><strong><code>对象</code></strong> 通过 new 调用构造函数(String、Boolean和Number)创建出来的是对象。<br><strong><code>基本值</code></strong> 直接通过字面量方式赋值 或者 通过省略new关键字直接调用构造函数方式创建的基本值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>);</span><br><span class="line"> <span class="keyword">var</span> str2 = <span class="string">'hello'</span>;</span><br><span class="line"> <span class="keyword">var</span> str3 = <span class="built_in">String</span>(<span class="string">'hello'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*说明：str1是对象，而str2和str3是字符串（基本数据类型值）*/</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">② 相等问题</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'这是一个字符串'</span>;               <span class="comment">//基本数据类型</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="built_in">String</span>(<span class="string">'这是一个字符串'</span>);       <span class="comment">//基本数据类型</span></span><br><span class="line"><span class="built_in">console</span>.log(str1 == str2);              <span class="comment">//true 相等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'这是一个字符串'</span>);   <span class="comment">//引用类型-对象</span></span><br><span class="line"><span class="built_in">console</span>.log(str1 == str3);    <span class="comment">//true    //值相等</span></span><br><span class="line"><span class="built_in">console</span>.log(str2 == str3);    <span class="comment">//true    //值相等</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1 === str3);    <span class="comment">//false  //值相等,但是引用不相等</span></span><br><span class="line"><span class="built_in">console</span>.log(str2 === str3);    <span class="comment">//false  //值相等,但是引用不相等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断下面的变量是否相等*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;                          <span class="comment">//基本数据类型</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);              <span class="comment">//对象</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 == num2);              <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 ===  num2);            <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bool1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> bool2 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bool1 == bool2);            <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(bool1 === bool2);           <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><span class="prop" style="width:200px">基本类型值相等</span> =&gt; <strong><code>值相等</code></strong><br><span class="prop" style="width:200px">引用类型值相等</span>  =&gt; <strong><code>值相等且引用相等</code></strong></p><p class="tip">对象是引用类型，因此在判断相等的时候有诸多的注意点和容易出错的地方。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文主要介绍JavaScript中的基本包装类型以及使用注意点。&lt;/div&gt;

&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;基本包装类型介绍&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本(简单)数据类型
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [22]-引用类型</title>
    <link href="https://weibo.com/u/3800117445/2019/04/15/javaScript%E7%B3%BB%E5%88%97%20%5B22%5D-JavaScript%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>https://weibo.com/u/3800117445/2019/04/15/javaScript系列 [22]-JavaScript引用类型/</id>
    <published>2019-04-15T15:22:16.000Z</published>
    <updated>2019-06-11T01:32:07.196Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍JavaScript中值类型和引用类型，两种类型的区别以及编码时候的注意点。</div><p class="titleX"><strong>值类型和引用类型介绍</strong></p><blockquote><p>在<a href="http://wendingding.com/2019/04/09/javaScript%E7%B3%BB%E5%88%97%20[16]-JavaScript%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/" target="_blank" rel="noopener"> javaScript语言基础 </a>这篇文章中已经简单介绍了JavaScript中的数据类型可以分成基本数据类型和复杂数据类型两大类。如果我们按照某个变量保存的内容类型来分类的话，那么JavaScript中的变量可以分成<code>值类型</code>和<code>引用类型</code>两种，其中<code>值类型</code>表示该表示保存的是<code>值</code>，而<code>引用类型</code>的数据表示保存的是<code>指向值的引用(地址)</code>，下面给出对应的具体数据类型。</p></blockquote><p><strong>值类型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数值 (number)</span><br><span class="line">字符串 (string)</span><br><span class="line">布尔类型 (boolean)</span><br></pre></td></tr></table></figure></p><p><strong>引用类型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对象（Object类型）</span><br><span class="line">数组（Array）</span><br><span class="line">函数 (Function)</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><p><span class="spaceX" style="background:#195;color:#fff">值类型</span><code>保存为简单的数据值，赋值只是简单的数据值的复制</code>。<br><span class="spaceX" style="background:#195;color:#fff">引用类型</span><code>保存为对象，其本质是指向内存位置的引用(地址)，赋值是对地址的复制</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：值类型</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;    <span class="comment">//把num1的值复制一份给num2,num1和num2的值相等,除此之外没有任何其他关系</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1,num2);     <span class="comment">//10,10</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 == num2);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">num2 = <span class="number">20</span>;          <span class="comment">//修改num2的值为20,不会对num1产生任何的影响</span></span><br><span class="line"><span class="built_in">console</span>.log(num1,num2);     <span class="comment">//10,20</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 == num2);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：引用类型</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);             <span class="comment">//[1,2,3],[1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1 == arr2);          <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr3);                  <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1 == arr3,arr2 == arr3); <span class="comment">//false,false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码说明:</span></span><br><span class="line"><span class="comment"> * arr1和arr2在比较的时候,值相等(都是[1,2,3]),且引用相等(都指向堆中同一块数据),因此arr1和arr2相等</span></span><br><span class="line"><span class="comment"> * arr3和arr1以及arr2比较的时候,值相等([1,2,3]),但是引用不相等(arr3指向的是堆中另外一块数据),因此不等</span></span><br><span class="line"><span class="comment"> * 总结:引用类型在比较相等的时候,只有值和引用都相等才相等</span></span><br><span class="line"><span class="comment"> * */</span></span><br></pre></td></tr></table></figure><p class="titleX"><strong>值类型和引用类型的赋值</strong></p><p><strong><code>赋值操作</code></strong> 把当前变量存储的值复制一份给接收的变量。</p><p><span class="spaceX" style="background:#196;color:#fff">值类型的赋值</span>把当前变量存储的值(<code>具体的数据</code>)复制一份给接收的变量<br><span class="spaceX" style="background:#196;color:#fff">引用类型赋值</span>把当前变量存储的值(<code>具体数据的引用即地址</code>)复制一份给接收的变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用类型使用注意</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);         <span class="comment">//[1,2,3],[1,2,3];</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1 == arr2);      <span class="comment">//true</span></span><br><span class="line">arr1.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);         <span class="comment">//[1,2,3,4],[1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码说明:因为arr1和arr2内部的引用指向的是同一块数据,所以修改了arr1会对arr2也产生影响</span></span><br><span class="line"><span class="comment"> * */</span></span><br></pre></td></tr></table></figure></p><p><strong>值类型和引用类型作为函数参数处理</strong></p><p><span class="prop">形参</span> 占位用的参数，用来接收数据的参数而已<br><span class="prop">实参</span> 实际传递的参数<br><span class="prop">函数的调用</span> 在函数调用的时候，函数默认会把实参的值赋值给形参<br><span class="prop">值类型参数</span> 在函数内部对形参变量进行修改不会影响到实参的值<br><span class="prop">引用类型参数</span> 在函数内部对形参变量进行修改会影响到实参的值，因为他们的引用指向同一个对象</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">基本类型的赋值</span><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hi 文顶顶！"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = str1;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/object_01.png?raw=true" height="100px"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">引用类型的结构和赋值</span><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">    color:<span class="string">"红色"</span>,</span><br><span class="line">    number:<span class="string">"B99"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1 = &#123;</span><br><span class="line">    name:<span class="string">"文顶顶"</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    car:car</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/object_02.png?raw=true" height="200px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name:<span class="string">"文顶顶"</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/object_03.png?raw=true" height="100px"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍JavaScript中值类型和引用类型，两种类型的区别以及编码时候的注意点。&lt;/div&gt;

&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;值类型和引用类型介绍&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在&lt;a h
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [21]-Array</title>
    <link href="https://weibo.com/u/3800117445/2019/04/14/javaScript%E7%B3%BB%E5%88%97%20%5B21%5D-JavaScript%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80/"/>
    <id>https://weibo.com/u/3800117445/2019/04/14/javaScript系列 [21]-JavaScript数组基础/</id>
    <published>2019-04-14T15:22:16.000Z</published>
    <updated>2019-06-11T01:32:07.026Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍JavaScript语言中的数组，全文内容包括但不限于数组的简单介绍、数组的创建、数组中元素的访问、数组的类型以及数组相关的核心方法等内容，需要指出的是<code>ES6 +</code>的数组相关特性并没有被纳入到本文的讨论范围中，它们将在单独的篇章中被介绍。</div><p class="titleX"><strong>数组核心概念</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base30.png?raw=true"></p><blockquote><p>在JavaScript语言中，数组的构造函数为<code>Array</code>，如果我们使用<code>typeof</code>关键字来检查数组的类型会得到<code>object</code>的结果，这也从侧面说明了数组本质上是Object对象类型的数据，可以认为数组是特殊的对象(关于这一点，这篇文章将不做展开)。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">90</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr);  <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);         <span class="comment">// [1, 2, 3, 90]</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base32.png?raw=true"></p><p><strong>数组</strong>  数组是值的有序集合<a href=""> 譬如：[1,3,5,7,9] </a>，数组中的每个值称为元素。<br><strong>索引</strong>  每个元素在数组中都有一个位置，用数字表示称为索引，索引值默认从 0 开始依次递增。<br><strong>类型</strong>  JavaScript中的数组是<code>无类型的</code>( 数组元素可以是任意类型且允许存在不同类型的元素 )。<br><strong>动态</strong>  JavaScript中的数组是<code>动态的</code>，会根据需要增长或缩减，无需提前声明大小且不用关心空间分配。<br><strong>长度</strong> JavaScript中每个数组都拥有<a href=""> length属性</a>，通常该属性的值为数组的长度。<br><strong>备注</strong>  <code>JavaScript中的数组是对象的特殊形式</code>，但通常数组的实现是经过优化的，性能更好。</p><p class="titleX"><strong>数组的创建</strong></p><p>通常，创建数组有两种方式，一种是直接通过字面量的方式创建，一种是通过Array构造函数的方式创建，在具体写代码的时候又有一些注意点。</p><p><span class="spaceT backColorT" style="width:160px">① 字面量方式创建数组</span> </p><p>字面量(直接量)创建数组是最简单的方式，只需要直接使用<code>[ ]</code>并在中括号中设置数组元素即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> empty  = [];                                 <span class="comment">//没有元素的空数组</span></span><br><span class="line"><span class="keyword">var</span> ages   = [<span class="number">12</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">88</span>,<span class="number">101</span>];                  <span class="comment">//有五个元素的数字数组</span></span><br><span class="line"><span class="keyword">var</span> books  = [<span class="string">"老虎老虎"</span>,<span class="string">"你好，忧愁"</span>,<span class="string">"兄弟"</span>,<span class="string">"或者"</span>]; <span class="comment">//有四个元素的字符串数组</span></span><br><span class="line"><span class="keyword">var</span> music  = [<span class="string">"那个女孩"</span>,<span class="string">"take me to your heart"</span>]; <span class="comment">//有两个元素的字符串数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*稍微复杂的数组：该数组拥有6个元素，包含字符串、数值、数组、对象和布尔值等类型的元素*/</span></span><br><span class="line"><span class="keyword">var</span> dataArr1 = [<span class="string">"前端开发"</span>,<span class="number">5</span>,<span class="string">"1904"</span>,<span class="literal">true</span>,[<span class="string">"张三"</span>,<span class="string">"李四"</span>],&#123;<span class="string">"address"</span>:<span class="string">"广州市天河区"</span>,<span class="string">"num"</span>:<span class="number">88</span>&#125;];</span><br><span class="line"><span class="comment">/*数组直接量中的值(元素)不一定非的是常量，可以是任意的表达式(变量)*/</span></span><br><span class="line"><span class="keyword">var</span> dataArr2 = [ages, books,&#123;<span class="attr">name</span>:<span class="string">"zs"</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> dataArr3 = [<span class="number">10</span>,,<span class="number">30</span>];</span><br><span class="line"><span class="built_in">console</span>.log(dataArr3.length,dataArr3[<span class="number">1</span>]);   <span class="comment">//3，undefined</span></span><br><span class="line"><span class="keyword">var</span> dataArr4 = [,,];</span><br><span class="line"><span class="built_in">console</span>.log(dataArr4.length,dataArr4);      <span class="comment">//2,[undefined,undefined]</span></span><br></pre></td></tr></table></figure></p><p><span class="spaceT backColorT" style="width:180px">② 使用构造函数创建数组</span><br>调用构造函数Array是创建数组的第二种方法，在调用构造函数的时候可以有多种方式。</p><p><strong>语法</strong> <code>new Array()</code> <code>new Array(length)</code> <code>new Array(ele1,ele2,..)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*使用构造函数Array来创建数组实例*/</span></span><br><span class="line">  <span class="comment">/*01-不传递任何参数 初始化空数组*/</span></span><br><span class="line">  <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>();     <span class="comment">//空数组 等价于 var arr1 = [];</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr1.length);   <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*02-传递数组的长度参数*/</span></span><br><span class="line">  <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr2.length);   <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*03-传递数组的元素*/</span></span><br><span class="line">  <span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"demoString"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr3);          <span class="comment">//[3,4,5,"demoString"]</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr3.length);   <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*其它用法*/</span></span><br><span class="line">  <span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="built_in">Array</span>;      <span class="comment">//空数组 当Array构造函数没有参数时可以省略()</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr4.length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr5 = <span class="built_in">Array</span>(<span class="string">"demo1"</span>,<span class="string">"demo2"</span>,<span class="literal">true</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr5);                  <span class="comment">//["demo1", "demo2", true]</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr5));   <span class="comment">//检查是否是数组 true</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr5.length);           <span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 在使用Array构造函数来创建数组的时候，<code>如果没有传递参数，那么()可以被省略</code>，这种情况下会初始化得到一个空的数组，如果仅仅传递一个参数且该参数是数值那么将会初始化得到一个指定长度的空数组(数组中每个元素值均为<code>undefined</code>)，<a href="">调用构造函数Array的时候，new关键字可以省略</a>。 </p><p class="titleX"><strong>数组的访问以及length属性</strong></p><p>数组其实就是一组数据，我们对数组的可以有很多操作(添加、移除、排序、翻转、遍历等)，这些操作主要通过对应的方法和结构来实现，这里先简单介绍数组的<code>length属性</code>、<code>索引下标访问</code>。</p><p>我们可以直接通过下标(索引)来操作数组，这些操作包括添加、修改和读取。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*演示通过[下标]索引操作数组*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"苹果"</span>,<span class="string">"西瓜"</span>,<span class="string">"橘子"</span>,<span class="string">"晓夏"</span>,<span class="string">"描夏"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过索引访问指定元素  索引范围[0 , length - 1]*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);              <span class="comment">//苹果</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[arr.length - <span class="number">1</span>]); <span class="comment">//描夏</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[arr.length]);     <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过索引修改指定元素*/</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"百香果"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);               <span class="comment">//["百香果","西瓜","橘子","晓夏","描夏"];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过索引来添加指定元素*/</span></span><br><span class="line">arr[arr.length] = <span class="string">"米桃儿"</span>;</span><br><span class="line">arr[arr.length] = <span class="string">"香蕉"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);               <span class="comment">//["百香果", "西瓜", "橘子", "晓夏", "描夏", "米桃儿", "香蕉"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);        <span class="comment">//7</span></span><br></pre></td></tr></table></figure></p><p>在数组中<span style="color:red"> length 是一个可读可写的属性。</span>当我们读取某个数组的length属性时，表示获取数组的长度(最大索引，特殊情况除外)。当我们对数组的length属性进行写操作的时候，会影响数组的结构。下面简单总结为两点：</p><blockquote><p> ❏ 为数组元素赋值的时候，如果它的索引i大于或等于当前长度，那么length值将设置为i + 1 ;<br> ❏ 设置length属性小于当前长度的非负整数时，数组中那些索引值超出的元素将被删除。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-第一种情况 索引 &gt;= 数组.length*/</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">123</span>,<span class="string">"string"</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.length);         <span class="comment">//数组的长度为3</span></span><br><span class="line">arr1[<span class="number">5</span>] = <span class="string">"测试元素"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);                <span class="comment">// [123, "string", true, empty × 2, "测试元素"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.length);         <span class="comment">//6 数组的长度被设置为 5 + 1 == 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-第二种情况 设置length的值 &lt; 数组.length*/</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"苹果"</span>,<span class="string">"西瓜"</span>,<span class="string">"香蕉"</span>,<span class="string">"橙子"</span>,<span class="string">"橘子"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr2.length);         <span class="comment">//5</span></span><br><span class="line">arr2.length = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);                <span class="comment">// ["苹果", "西瓜", "香蕉"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.length);         <span class="comment">//3 数组中超出的元素被删除</span></span><br></pre></td></tr></table></figure><p></p><p class="titleX"><strong>数组常用方法</strong></p><br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base35.png?raw=true"><p></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">添加 | 移除 | 合并 | 截取操作</span></p><p><strong>数组的合并方法 concat( )</strong></p><p><strong><code>语法</code></strong> <code>array.concat(value1,...)</code><br><strong><code>作用</code></strong> <code>concat()</code>方法用来衔接(拼接合并)数组，会将合并后的新数组返回。<br><strong><code>参数</code></strong> <code>concat()</code>方法的参数非常灵活可以是N个普通元素或者是数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.concat(<span class="number">4</span>);            <span class="comment">//返回[1,2,3,4];</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);         <span class="comment">//[1,2,3]  注意arr数组本身并没有被修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>, <span class="number">5</span>));        <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>, <span class="number">5</span>]));      <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>, <span class="number">5</span>],<span class="number">6</span>));    <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>, <span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>]));<span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>,[<span class="number">5</span> ,[<span class="number">6</span>,<span class="number">7</span>]]));<span class="comment">//[1,2,3,4,5,[6,7]];</span></span><br></pre></td></tr></table></figure></p><p><strong>数组元素的添加 push( )和unshift( )</strong></p><p><strong><code>语法</code></strong> <code>array.push(value,...)</code> <code>array.unshift(value,...)</code><br><strong><code>说明</code></strong> <code>push()</code>和<code>unshift()</code>这两个方法，它们均直接修改当前数组本身并返回最新的数组长度。<br><strong><code>作用</code></strong> <code>unshift()</code>方法把元素插入到开头原本元素顺次后移，<code>push()</code>方法把元素追加到数组的屁股。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*数组的添加(插入操作)*/</span></span><br><span class="line"><span class="comment">/*01-push() 追加到数组末尾*/</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"苹果"</span>,<span class="string">"橙子"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.push(<span class="number">123</span>));          <span class="comment">//3   把123追到到数组末尾并更新length值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);                    <span class="comment">//["苹果", "橙子", 123]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.length)              <span class="comment">//3</span></span><br><span class="line"><span class="comment">/*多个参数值的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.push(<span class="string">"猴子"</span>,<span class="string">"斑马"</span>));  <span class="comment">//5   追加数据 + 更新length值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);                    <span class="comment">//["苹果", "橙子", 123, "猴子", "斑马"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-unshift() 插入到数组开头*/</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"苹果"</span>,<span class="string">"橙子"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);</span><br><span class="line">arr2.unshift(<span class="string">"老虎"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr2.length);</span><br><span class="line"><span class="comment">/*多个参数值的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.unshift(<span class="number">100</span>, <span class="string">"犀牛"</span>));  <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);                      <span class="comment">//[100, "犀牛", "老虎", "苹果", "橙子"]</span></span><br></pre></td></tr></table></figure><p><strong>数组元素的移除 pop( )和shift( )</strong></p><p><strong><code>语法</code></strong> <code>array.pop()</code> <code>array.shift()</code><br><strong><code>作用</code></strong> <code>array.pop()</code>和<code>array.shift()</code>方法方法删除数组的最后一个(第一个)元素并返回删除项。<br><strong><code>说明</code></strong> 如果数组为空，那么它们不会修改数组本身而是直接返回undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"苹果"</span>,<span class="string">"橙子"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());     <span class="comment">//"橙子" 删除最后一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);           <span class="comment">//["苹果"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());     <span class="comment">//"苹果"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);           <span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());     <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">/*操作arr数组*/</span></span><br><span class="line">arr.push(<span class="string">"百香果"</span>,<span class="string">"哈密瓜"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);           <span class="comment">//["百香果","哈密瓜"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.shift());   <span class="comment">//"百香果"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);           <span class="comment">//["哈密瓜"]</span></span><br></pre></td></tr></table></figure><p><strong>数组的截取方法 slice( )</strong></p><p><strong><code>语法</code></strong> <code>array.slice( start,end )</code><br><strong><code>作用</code></strong> <code>slice()</code>方法截取数组中指定的元素并保存到新数组中返回。<br><strong><code>说明</code></strong> <code>start</code>和<code>end</code>参数均可以接收负数值(表示倒数)，<code>end</code>缺省表示默认截取到数组末尾。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr1 = [<span class="number">18</span>,<span class="string">"文顶顶"</span>,<span class="string">"广州市"</span>,<span class="string">"0415"</span>,<span class="literal">true</span>];</span><br><span class="line"> <span class="keyword">var</span> arr2 = [<span class="number">18</span>,<span class="string">"wendingding"</span>,<span class="string">"广州市"</span>,<span class="string">"0415"</span>,<span class="literal">true</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">console</span>.log(arr1.slice(<span class="number">2</span>, <span class="number">4</span>));    <span class="comment">// ["广州市", "0415"]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr1);                <span class="comment">// [18,"文顶顶","广州市","0415",true];</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr1.slice(<span class="number">2</span>));       <span class="comment">// ["广州市","0415",true]</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">/*参数是负数的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.slice(<span class="number">2</span>, <span class="number">-1</span>));   <span class="comment">//["广州市", "0415"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.slice(<span class="number">2</span>, <span class="number">-2</span>));   <span class="comment">//["广州市"]</span></span><br></pre></td></tr></table></figure></p><p><strong>数组的插入、删除和替换方法 splice( )</strong> </p><p><strong><code>语法</code></strong> <code>array.splice( start,deleteCount,value,...)</code><br><strong><code>作用</code></strong> <code>splice()</code>将删除从start索引开始的零个或多个元素并使用参数列表中的值来替换它们。<br><strong><code>说明</code></strong> 在有必要时，数组中所有的元素都会移动以保持连续性，该方法修改的是数组本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">18</span>,<span class="string">"文顶顶"</span>,<span class="string">"广州市"</span>,<span class="string">"0415"</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="comment">/* 删除数组中的数据</span></span><br><span class="line"><span class="comment"> * 参数1：从索引为1的位置开始</span></span><br><span class="line"><span class="comment"> * 参数3：删除3个元素</span></span><br><span class="line"><span class="comment"> * 返回值：把删除的元素保存到新数组中返回</span></span><br><span class="line"><span class="comment"> * 原数组：移除指定的元素(其它的元素会移动等)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>, <span class="number">3</span>));    <span class="comment">//["文顶顶","广州市","0415"]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr);                 <span class="comment">//[18,true]</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*插入(新增)数组中的数据*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"demoA"</span>, <span class="string">"demoB"</span>, <span class="string">"北京市"</span>)); <span class="comment">//[]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr);         <span class="comment">//[18, "demoA", "demoB", "北京市", true]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>备注</strong> <code>splice()</code>方法在使用的时候，如果传递的第二个参数值为0，那么表示插入操作。具体执行的时候，会把参数列表中的数据依次插入到指定索引位置，数组中已有的元素则顺序后移。</p></blockquote><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组转换为字符串的操作</span></p><p>JavaScript中数组转换为字符串的相关方法主要有<code>toString()</code>、<code>toLocaleString()</code>以及<code>join()</code>，前两个方法用来把数组转换为字符串形式输出，<code>join()</code>方法把数组的元素按既定格式拼接后输出。</p><p><strong><code>语法</code></strong> <code>array.toString()</code> <code>array.toLocaleString()</code> <code>array.join([separator])</code><br><strong><code>说明</code></strong> <code>toString()</code>方法在执行的时候内部会分别拿到每个元素来调用toString方法，然后把结果以逗号的形式拼接成字符串返回，<code>toLocaleString()</code>方法和<code>toString()</code>用法一样，而且大多数情况下得到的结果是一致的，区别在于它每个元素调用的是toLocaleString方法。<code>join()</code>方法会先将数组的每个元素都转换为字符串，并通过在中间插入的 separator 字符串将它们衔接起来最后返回。<br><strong><code>注意</code></strong> <a href="">如果<code>join()</code>方法的<code>separator</code>参数缺省，那么默认为逗号和toString方法等价</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*数组中的每个元素本身就是字符串 这种情况直接衔接*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"广东省"</span>,<span class="string">"广州市"</span>,<span class="string">"天河区"</span>,<span class="string">"体育中心"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString());        <span class="comment">//"广东省","广州市","天河区","体育中心"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.toLocaleString());  <span class="comment">//"广东省","广州市","天河区","体育中心"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*参数缺省的情况，分隔符默认为逗号*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join());            <span class="comment">//"广东省","广州市","天河区","体育中心"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"-"</span>));         <span class="comment">//"广东省"-"广州市"-"天河区"-"体育中心"</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>数组的遍历和计算等操作</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base33.png?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组的遍历</span></p><p>JavaScript中数组的遍历有多种方式，我们可以用 <code>for循环结构</code> 来遍历数组，也可以使用专门遍历对象的 <code>for..in结构</code>，当然还有ES5推出的 <code>forEach方法</code> ，下面将通过代码的方式一一介绍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-for循环结构遍历数组*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">18</span>,<span class="string">"wendingding"</span>,<span class="string">"广州"</span>,<span class="string">"0408"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,len = arr.length;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-for..in循环结构遍历数组*/</span></span><br><span class="line"><span class="keyword">for</span> (index <span class="keyword">in</span> arr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*index 当前的key即索引值 对应的是0，1，2，3...*/</span></span><br><span class="line">  <span class="comment">/*arr   遍历的数组对象*/</span></span><br><span class="line">  <span class="built_in">console</span>.log(index, arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-forEach方法遍历数组*/</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,arrT</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*index 索引值*/</span></span><br><span class="line">  <span class="comment">/*value 当前索引值对应的数组元素*/</span></span><br><span class="line">  <span class="comment">/*arrT  其实就是遍历的数组本身，在这里其实就是arr的引用*/</span></span><br><span class="line">  <span class="built_in">console</span>.log(index, value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历的结果</span></span><br><span class="line"><span class="comment">// 0 18</span></span><br><span class="line"><span class="comment">// 1 "wendingding"</span></span><br><span class="line"><span class="comment">// 2 "广州"</span></span><br><span class="line"><span class="comment">// 3 "0408"</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong> 上面介绍了遍历数组的三种方法，在开发中具体使用的时候具体选择使用哪种方式需要看特定的业务场景，需要注意的是<span style="color:#f08">在遍历数组的时候不建议使用 for..in 循环，这是因为 for..in 在使用的时候会枚举从原型中继承来的成员</span>。 <code>forEach()</code>方法会按照索引从小到大来遍历数组，并对数组中的每一个元素调用一次回调函数。每次在调用回调函数的时候，带有三个参数<code>可以简单表示为f(arr[i],i,arr)</code>,回调函数的返回值都会被忽略。此外，<code>forEach()</code>方法的语法有两种形式，这里列出。</p><p><strong><code>语法</code></strong> <code>array.forEach(f)</code> <code>array.forEach(f,o)</code></p><blockquote><p>如果在调用forEach()方法的时候指定了第二个参数<code>o</code>，那么调用的时候函数的this将被绑定给<code>o</code>,若未指定第二个参数，那么回调函数中的this默认指向全局对象，在严格模式下this指向的是null。</p></blockquote><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组的过滤和映射</span></p><p><strong><code>语法</code></strong> <code>array.filter(predicate)</code> <code>array.filter(predicate,o)</code></p><p>数组的<code>filter()</code>方法用来对数组进行过滤，该方法返回一个只包含通过<code>断言</code>元素的新数组。<br><code>filter()</code>方法在执行的时候会按照索引从小到大的顺序来遍历数组，并对数组的每个元素都调用一次<code>predicate</code>断言函数。当每次调用该函数的时候，<code>predicate</code>断言函数都可以带有三个参数<code>可以简单表示为predicate(arr[i],i,arr)</code>，若函数返回真值，那么当前元素就会被添加到新创建的数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">18</span>,<span class="number">5</span>,<span class="string">"广州"</span>,<span class="string">"0408"</span>,<span class="number">101</span>,<span class="number">9</span>,<span class="number">21</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,arrT</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*index 当前的索引*/</span></span><br><span class="line">  <span class="comment">/*value 当前索引对应的元素*/</span></span><br><span class="line">  <span class="comment">/*arrT  遍历的数组其实就是arr*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value == <span class="string">"number"</span> &amp;&amp; value &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[18,5,"广州","0408",101,9,21];</span></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//[18, 101, 21]</span></span><br></pre></td></tr></table></figure><p><strong><code>语法</code></strong> <code>array.map(f)</code> <code>array.map(f,o)</code></p><p>数组的<code>map()</code>方法会根据f函数来计算每个元素并把它们返回组成一个新的数组，通常我们把这个方法称为数组映射方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">18</span>,<span class="number">5</span>,<span class="string">"广州"</span>,<span class="string">"0408"</span>,<span class="number">101</span>,<span class="number">9</span>,<span class="number">21</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, arrT</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index,value);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*检查当前元素是否是数字，如果是那么就放大一倍*/</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value == <span class="string">"number"</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*如果没有显示的return，那么默认的返回值为undefined*/</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 18</span></span><br><span class="line"><span class="comment">// 1 5</span></span><br><span class="line"><span class="comment">// 2 "广州"</span></span><br><span class="line"><span class="comment">// 3 "0408"</span></span><br><span class="line"><span class="comment">// 4 101</span></span><br><span class="line"><span class="comment">// 5 9</span></span><br><span class="line"><span class="comment">// 6 21</span></span><br><span class="line"><span class="comment">// [36, 10, undefined, undefined, 202, 18, 42]</span></span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组计算的相关方法</span></p><p>这里将一起介绍数组中计算相关的四个方法，其中<code>every()</code>方法和<code>some()</code>方法用于对数组元素进行断言测试，而<code>reduce()</code>方法和<code>reduceRight()</code>方法则用于计算数组元素的值，它们常用于数值数组。</p><p><code>every()</code>方法测试断言函数是否对每个元素均为真，<code>some()</code>方法测试是否有元素满足断言函数，这两个函数返回的结果为布尔类型值的 true 或 false , <code>every()</code>函数要求如果所有的元素都满足断言函数的测试条件，那么就返回true , 而<code>some()</code>方法只要有一个元素满足测试条件，那就返回 true 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAllEvenNumber1 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>].every(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,arrT</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*index 当前的索引*/</span></span><br><span class="line">  <span class="comment">/*value 当前的元素*/</span></span><br><span class="line">  <span class="comment">/*arrT  操作的数组对象 [2,4,6,8,10]*/</span></span><br><span class="line">  <span class="built_in">console</span>.log(index, value, arrT);</span><br><span class="line">  <span class="keyword">return</span> value % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isAllEvenNumber2 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>].every(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,arrT</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isHasEvenNumber = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">10</span>].some(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,arrT</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isAllEvenNumber1);   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isAllEvenNumber2);   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(isHasEvenNumber);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p><strong><code>语法</code></strong> <code>array.reduce(f,[inital])</code> <code>array.reduceRight(f,[inital])</code><br><strong><code>参数</code></strong> 参数<code>f</code>是一个函数，用于把两个值合并缩减为一个新值， 可选的<code>inital</code>是缩减的初始值。<br><strong><code>返回</code></strong> 返回的是数组的化简值，也就是最后一次调用f函数时的返回值。<br><strong><code>对比</code></strong> <code>reduceRight()</code>方法在于它在进行缩减计算的时候按照索引从大到小的顺序执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*01-reduce方法演示*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x,y,i,arrT</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*x    和 y 分别是当前计算的两个元素 按索引从小到大*/</span></span><br><span class="line">  <span class="comment">/*i    对应的是y这个元素的索引*/</span></span><br><span class="line">  <span class="comment">/*arrT 对应的是计算的数组，在这里其实就是arr*/</span></span><br><span class="line">  <span class="keyword">return</span> x *y;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//24 计算方式(((1 * 2) *3) *4)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 第一次计算的时候x = 1,y = 2 x * y 得到的结果2 该值又作为下一次计算的x值</span></span><br><span class="line"><span class="comment">* 第二次计算的时候x = 2,y = 3 x * y 得到的结果6 该值又作为下一次计算的x值</span></span><br><span class="line"><span class="comment">* 第三次计算的时候x = 6,y = 4 x * y 得到的结果24</span></span><br><span class="line"><span class="comment">* 因为已经是最后一次调用，把24这个结果返回</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;, <span class="number">20</span>));</span><br><span class="line"><span class="comment">// (((20 + 2) + 4) + 8) = 34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*案例：计算数组元素的累加和*/</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 累加和为46</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*02-reduceRight方法演示*/</span></span><br><span class="line"> <span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduceRight(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line"> &#125;, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算方式:((((2 * 4) * 3) *2) *1) == 48</span></span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组的排序和翻转</span></p><p>JavaScript中的<code>reverse()</code>方法用于将数组的顺序颠倒过来，该方法操作的是原数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr1.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">//[4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"demoA"</span>,<span class="string">"demoB"</span>,<span class="literal">true</span>,<span class="number">18</span>];</span><br><span class="line">arr2.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr2);      <span class="comment">//[18, true, "demoB", "demoA"]</span></span><br></pre></td></tr></table></figure></p><p>如果需要对数组进行排序，那么可以使用<code>sort()</code>方法。<code>sort()</code>方法会在原数组中对数组元素进行排序而不创建新数组，<code>sort()</code>方法默认按照字符编码的顺序对元素进行排序，当然也可以提供比较函数来指定排序的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">33</span>,<span class="number">4</span>,<span class="number">1111</span>,<span class="number">22</span>,<span class="number">100</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"f"</span>,<span class="string">"e"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>];</span><br><span class="line"><span class="comment">/*默认按照字符编码顺序排序*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.sort());   <span class="comment">//[100, 1111, 22, 33, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.sort());   <span class="comment">//["a", "b", "c", "d", "e", "f"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">12</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">101</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">//排序1 [5, 12, 20, 32, 101]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">12</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">101</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">//排序2 [101, 32, 20, 12, 5]</span></span><br></pre></td></tr></table></figure><p><strong>排序函数</strong> 排序函数接收两个参数，这里是 a 和 b 它们依据函数的返回值来确定是升序还是降序排列。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组元素的搜索</span></p><p><strong>搜索说明</strong> 同string字符串类型一样，数组也提供了<code>indexOf()</code>和<code>lastIndexOf()</code>方法来实现元素的查找功能，它们的区别在于一个从前往后查找一个从后往前查找，如果在数组中找到指定的元素那么就返回对应的索引，如果没有找到那么就返回 <code>-1</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">18</span>,<span class="string">"文顶顶"</span>,<span class="string">"北京市"</span>,<span class="string">"Node"</span>,<span class="number">18</span>];</span><br><span class="line"><span class="comment">/*indexOf     从左往右搜索*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">"文顶顶"</span>));        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">18</span>));             <span class="comment">//0</span></span><br><span class="line"><span class="comment">/*lastIndexOf 从右往左搜索*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">"北京市"</span>));    <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">18</span>));         <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">"天津"</span>));         <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">"天津"</span>));     <span class="comment">//-1</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>数组的类型</strong></div><p>在ES5之前，要通过代码判断一个数据是否是数组可能会比较麻烦。我们知道typeof关键字可用于检查数据的类型，譬如得到的是结果如果是 <a href="">string</a>那我们就能知道该数据是字符串，如果结果是 <a href="">number</a>那这个数据自然就是数字。</p><p>我们并不能通过 <code>typeof 数组实例</code>的方式来判断数组，因为你得到的结果将会是<code>object</code>，值得庆幸的是在ES5中，Array提供了isArray()函数来检查数组实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01- typeof*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr);                          <span class="comment">//object  无法检查数组的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02- 调用Object.prototype.toString()方法来检测*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(arr)); <span class="comment">//"[object Array]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03- isArray()方法*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));                  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍JavaScript语言中的数组，全文内容包括但不限于数组的简单介绍、数组的创建、数组中元素的访问、数组的类型以及数组相关的核心方法等内容，需要指出的是&lt;code&gt;ES6 +&lt;/code&gt;的数组相关特性并没有被纳入到本文的讨论范围中，它
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [20]-严格模式</title>
    <link href="https://weibo.com/u/3800117445/2019/04/14/javaScript%E7%B3%BB%E5%88%97%20%5B20%5D-JavaScript%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weibo.com/u/3800117445/2019/04/14/javaScript系列 [20]-JavaScript严格模式/</id>
    <published>2019-04-14T00:22:16.000Z</published>
    <updated>2019-06-11T01:32:06.931Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将重点介绍ES5中严格模式相关的知识点，包括但不限于严格模式的介绍、写法、严格模式和非严格模式使用对比等内容。</div><p class="titleX"><strong>严格模式简单介绍</strong></p><p>在<code>JavaScript</code>中有严格模式和非严格模式两种运行环境。</p><blockquote><p><strong>严格模式的主要特点</strong><br>❏ 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;<br>❏ 消除代码运行的一些不安全之处，保证代码运行的安全；<br>❏ 提高编译器效率，增加运行速度；<br>❏ 为未来新版本的Javascript做好铺垫。</p></blockquote><p><strong>严格模式</strong> 体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它。此外，同样的代码在严格模式中，可能会有不一样的运行结果甚至是无法运行。掌握严格模式相关的内容有助于更细致深入地理解Javascript，让你变成一个更好的程序员，而<strong>实现严格模式</strong> 只需要在脚本代码中添加上下面介绍的关键字即可。 </p><p><strong>关键字</strong> <code>“use strict”;</code><br><strong>关键字具体说明</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1) 注意区分大小写，必须全部都是小写的</span><br><span class="line">(2) 注意空格，整个字符串总共10个字符</span><br><span class="line">(3) 单引号和双引号无所谓，但是需要有引号</span><br><span class="line">(4) 必须写在作用域的最顶部，注意其具体的位置</span><br><span class="line">(5) 可以加分号，也可以不加，但是必须是一个字符串</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong> 下面的关键字写法均是错误的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"USE strict";</span><br><span class="line">" use strict ";</span><br><span class="line">"("USE strict").toLowerCase();"</span><br></pre></td></tr></table></figure></p><p class="titleX"><strong>严格模式使用注意点</strong></p><blockquote><p><strong>➥ 严格模式使用注意</strong></p><p>〇 修正this的值<br>① 所有的变量必须使用var 关键字声明<br>② 不能使用<code>delete</code>关键字删除全局变量<br>③ 在对象中不允许有同名的属性<br>④ 函数的参数必须唯一(不能出现同名的参数)<br>⑤ <code>arguments</code>对象的行为不同，严格模式下和实参相对独立<br>⑥ 禁用了<code>argument.callee</code>和<code>caller函数</code><br>⑦ 不能在if语句中声明函数<br>⑧ 禁止使用<code>eval</code>和<code>argument</code>作为标识符<br>⑨ 禁用了<code>with</code>语句和八进制字面量</p></blockquote><p><strong>001 所有的变量都必须使用var关键字声明</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>;             <span class="comment">//错误的演示</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p><strong>002 不能使用delete关键字删除全局变量</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在非严格模式下,删除失败(静默失败)   失败了不吭声,严格模式下直接报错</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></p><p><strong>003 在对象中不允许有同名的属性</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在非严格模式下,会使用后面的属性赋值作为最终值,在严格模式下则直接报错</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    name:<span class="string">"李四"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></p><p><strong>004 函数的参数必须唯一(不能出现同名的参数)</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在非严格模式下,如果函数在定义的时候,使用了多个同名的参数,则在函数内部形参的实际值为最后一个传入的实参值</span></span><br><span class="line"><span class="comment">//在严格模式下,直接报错</span></span><br><span class="line"><span class="comment">//    function func(a,a,a) &#123;</span></span><br><span class="line"><span class="comment">//        console.log(a);</span></span><br><span class="line"><span class="comment">//        console.log(arguments);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p><strong>005 arguments对象的行为不同</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）严格模式下,在函数内部修改了对象的指向,对arguments的值不会产生影响</span><br><span class="line">（2）在严格模式下,形参的值和arguments的值是相互独立的,在函数内部修改了形参的值对arguments不受影响</span><br><span class="line">（3）在非严格模式下，修改了形参的值，arguments中的数据会跟着改变</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试引用类型的值作为函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在函数内部修改形参的值</span></span><br><span class="line">    obj = &#123;<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcName(&#123;<span class="attr">name</span>:<span class="string">"张三"</span>&#125;);</span><br><span class="line"><span class="comment">//测试基本类型数据作为函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="string">"hi"</span>);</span><br></pre></td></tr></table></figure><p><strong>006 禁用了argument.callee和caller函数</strong></p><p><code>argument.callee</code>是对函数自身的引用 <code>argument.calller</code>是对调用函数的引用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n ==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>) + n;</span><br><span class="line">&#125;)(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num);       <span class="comment">//55</span></span><br></pre></td></tr></table></figure></p><p><strong>007 不能在if语句中声明函数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果在if语句中声明函数，则会产生语法错误</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"________"</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"呵呵呵呵"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        demo();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>008 禁止使用eval和argument作为标识符</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span> = <span class="string">"测试的字符串"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">arguments</span> = <span class="string">"参数列表"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure></p><p><strong>009 修正this的值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在严格模式下,函数<span class="keyword">this</span>的值始终是指定的值,无论指定的是什么值</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"测试的name"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在非严格模式下,打印出来的this为全局的对象window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//在严格模式下打印出来的this为undefined</span></span><br><span class="line">&#125;</span><br><span class="line">demoTest();</span><br></pre></td></tr></table></figure></p><p><strong>010 禁用了with语句</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>:<span class="string">"暂时干"</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line">  <span class="keyword">with</span>(o)</span><br><span class="line">  &#123;</span><br><span class="line">      name = <span class="string">"lisi"</span>;</span><br><span class="line">      age = <span class="number">48</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure></p><p><strong>11 禁用了八进制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以0开头的数据常常引起混乱</span></span><br><span class="line"><span class="comment">//var num = 023;     //2*8 + 3 ==&gt; 19</span></span><br><span class="line"><span class="comment">//console.log(num); //19</span></span><br></pre></td></tr></table></figure></p><p class="titleX"><strong>严格模式书写格式和作用范围</strong></p><p><strong>严格模式书写格式</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">01 必须使用单引号或者是双引号括住字符串</span><br><span class="line">02 必须使用小写,不能出现大写字符</span><br><span class="line">03 必须是10个字符，不能多和也不能少</span><br><span class="line">04 字符串后面的分号可以省略</span><br><span class="line">05 必须写在当前作用域的最顶上</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//"use strict";   //正确写法</span></span><br><span class="line"><span class="comment">//"use strict"    //正确写法     分号可以省略</span></span><br><span class="line"><span class="comment">//'use strict';   //正确写法     可以使用单引号</span></span><br><span class="line"><span class="comment">//"use  strict";    //错误写法   必须是10个字符</span></span><br><span class="line"><span class="comment">//"use Strict";     //错误写法   所有的字符都必须小写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//  "use strict";           //错误写法 </span></span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><strong>作用范围</strong></p><p><span style="color:#195">① 函数的顶部(只对当前的函数有效)</span><br><span style="color:#195">② script标签的顶部,只对当前的标签有效,对页面中其他的script无效</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//位置01       对func01和func02都有效</span></span><br><span class="line"><span class="comment">//"use strict";</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func01</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//位置02   对func01有效,对func02无效</span></span><br><span class="line">    <span class="comment">//"use strict";</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func02</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//位置03 对func02有效,但对func01无效</span></span><br><span class="line">   <span class="comment">//"use strict";</span></span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func01();</span><br><span class="line">func02();</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将重点介绍ES5中严格模式相关的知识点，包括但不限于严格模式的介绍、写法、严格模式和非严格模式使用对比等内容。&lt;/div&gt;

&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;严格模式简单介绍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [19]-string</title>
    <link href="https://weibo.com/u/3800117445/2019/04/13/javaScript%E7%B3%BB%E5%88%97%20%5B19%5D-JavaScript%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://weibo.com/u/3800117445/2019/04/13/javaScript系列 [19]-JavaScript的字符串/</id>
    <published>2019-04-13T00:22:16.000Z</published>
    <updated>2019-06-11T01:32:06.966Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将重点介绍javaScript语言中字符串，操作字符串的常见方法以及具体的代码实现等。</div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base26.png?raw=true"></p><div class="titleX"><strong>字符串简单介绍</strong></div><blockquote><p>关于字符串(类型)，其实在我的<a href="http://wendingding.com/2019/04/09/javaScript%E7%B3%BB%E5%88%97%20[16]-JavaScript%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/" target="_blank" rel="noopener">另一篇文章中 JavaScript语言基础 </a>已经有过下面这段简单介绍。</p></blockquote><p><strong><code>定义</code></strong> 由〇个或多个16位Unicode字符组成的字符序列。<br><strong><code>表示</code></strong> 字符串可以由双引号或单引号表示。<br><strong><code>操作</code></strong> 可以通过length属性来获取字符串的长度，且多个字符串之间可以通过 + 来进行拼接。<br><strong><code>注意</code></strong> JavaScript中的字符串是<code>不可变的</code>，即改变某个变量保存的字符串需先销毁然后再重新填充。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hi ~"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Wendingding!"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = str1 + <span class="string">" "</span> +str2;    <span class="comment">/*字符串的拼接 */</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);              <span class="comment">/*输出结果：Hi ~ Wendingding!*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.length);       <span class="comment">/*输出结果：17 */</span></span><br></pre></td></tr></table></figure></p><p>其实，掌握了上面这些知识点就已经对JavaScript语言中的字符串有了一个七七八八的概念了，需要注意的是，本文的核心是在此基础上讲清楚<code>字符串操作(大小写转换、搜索、拼接、查找等)相关的知识点</code>，因为这涉及到一大堆的方法(函数)，因此要解释清楚它们这将会是庞大艰难的任务，下面我将先列出JavaScript语言中String相关的所有操作然后再分门别类的进行介绍。</p><p><div class="titleX"><strong>字符串核心方法</strong></div><br>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base28.png?raw=true"><br><strong>字符串的拼接</strong></p><blockquote><p>JavaScript提供了<code>concat()</code>方法来进行字符串的拼接。</p></blockquote><p><strong><code>语法</code></strong> <code>string.concat(value,...)</code><br><strong><code>说明</code></strong> <code>concat()</code>方法可以接受N(一个或多个)个待连接的字符串，它的作用是将每个参数都转换为字符串(若不是字符串则内部会自动转换)，并将它们按顺序追加到当前字符串的末尾并返回最后的结果。<br><strong><code>备注</code></strong> <code>concat()</code>方法更简单的写法是直接使用符号 <code>+</code> 来实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 第一种拼接的方式 使用+*/</span></span><br><span class="line"><span class="comment">/*02 第二种拼接的方式 使用concat方法*/</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hello "</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"wendingding"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1 + str2 + <span class="string">"!"</span>);       <span class="comment">//Hello wendingding !</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.concat(str2 + <span class="string">"?"</span>)); <span class="comment">//Hello wendingding?</span></span><br><span class="line"><span class="comment">/*备注：需要注意concat方法并不会修改拼接的字符串本身而是把结果作为返回值*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);                    <span class="comment">//Hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);                    <span class="comment">//Hello</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.concat(<span class="string">"world"</span>, <span class="string">"!"</span>,<span class="string">" Nice to"</span>, <span class="string">"meet u"</span>));</span><br><span class="line"><span class="comment">//Hello world ! Nice tomeet u  演示接收多个参数的情况</span></span><br></pre></td></tr></table></figure></p><p><strong>字符串的大小写转换</strong></p><blockquote><p>JavaScript提供了专门处理大小写字符转换的方法,它们分别是<code>toLowerCase()</code>、<code>toUpperCase()</code>、<code>toLocaleUpperCase()</code>以及<code>toLocaleLowerCase()</code>四个方法，其中后面的两个方法在进行大小写转换的时候需要考虑当前本地化语言环境的大小写映射，大多数情况下它们和前两个方法保持一致。</p></blockquote><p><span class="spaceT backColorT" style="width:280px">toLowerCase( ) 和 toLocaleLowerCase( )</span> 将字符串转换为小写<br><span class="spaceT backColorT" style="width:280px">toUpperCase( ) 和 toLocaleUpperCase( )</span> 将字符串转换为大写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hi! Nice to meet u"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase());       <span class="comment">//hi! nice to meet u</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase()); <span class="comment">//hi! nice to meet u</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());       <span class="comment">//HI! NICE TO MEET U</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleUpperCase()); <span class="comment">//HI! NICE TO MEET U</span></span><br></pre></td></tr></table></figure><p><strong>字符串的子串搜索</strong></p><p>在开发中有时候我们需要检查某个字符串中是否存在指定的字符或者是子字符串，这时候就需要用到JavaScript提供的子串搜索方法，它们是<code>indexOf()</code>和<code>lastIndexOf()</code>方法。这两个方法的核心区分在于 <code>indexOf()</code> 方法从前往后搜索而 <code>lastIndexOf()</code> 方法从后往前搜索。</p><p><strong><code>语法</code></strong> <code>string.indexOf(substring,[start])</code>  <code>string.lastIndexOf(substring,[start])</code><br><strong><code>参数</code></strong> <code>substring</code>表示要搜索的字符(子字符串)。<br><strong><code>参数</code></strong> <code>start</code> 是可选的整数值用来指定开始搜索的位置，合法值为 <a href="">0 ~ string.length-1</a>。<br><strong><code>说明</code></strong> <code>indexOf()方法</code>默认从第一个字符开始搜索，<code>lastIndexOf()方法</code>则默认从最后一个字符开始。<br><strong><code>结果</code></strong> 若没有找到指定字符(子串)就返回-1，否则就返回找到的子串中第一个字符的位置。<br><strong><code>备注</code></strong> 在字符串中第一个字符的位置为 0，最后一个字符的位置为string.length -1 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello ! Hello wendingding."</span>;</span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="string">"ding"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(sub1));     <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(sub1)); <span class="comment">//8</span></span><br><span class="line"><span class="comment">/*indexOf 前——&gt;后   lastIndexOf 后--&gt;前*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(sub2));     <span class="comment">//17</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(sub2)); <span class="comment">//21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*测试第二个参数[start]的使用情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(sub1,<span class="number">2</span>));   <span class="comment">//8 查找的范围缩小为"llo ! Hello wendingding."</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"123456"</span>.lastIndexOf(<span class="string">"3"</span>,<span class="number">1</span>));  <span class="comment">//-1 查找范围为"12"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"123456"</span>.lastIndexOf(<span class="string">"3"</span>,<span class="number">4</span>)); <span class="comment">//2 查找范围为"12345"</span></span><br></pre></td></tr></table></figure></p><p><strong>字符串的子串切割</strong></p><p>JavaScript字符串提供了<code>split()</code>方法来将一个字符串切割为数组。</p><p><strong><code>语法</code></strong> <code>string.split(delimiter,limit)</code><br><strong><code>参数</code></strong> <code>delimiter</code>是用来切割(分割)的字符串或正则表达式，<code>limit</code>用于指定数组长度(默认不限制)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"苹果,香蕉,橙子,榴莲,水蜜桃"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"javaScript ios java go python perl"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-以逗号来分隔切割字符串为数组*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">","</span>));      <span class="comment">//["苹果", "香蕉", "橙子", "榴莲", "水蜜桃"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-以特殊字符来切割*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a|b|c|d"</span>.split(<span class="string">"|"</span>)); <span class="comment">//["a","b","c","d"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:2:3:4"</span>.split(<span class="string">":"</span>)); <span class="comment">//["1","2","3","4"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-对比参数是字符串和正则表达式的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="string">" "</span>));     <span class="comment">//["javaScript","ios","java","go","python","perl"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="regexp">/\s+/</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-以空字符串分隔切割字符串为数组，每个字符都切割*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">""</span>));</span><br><span class="line"><span class="comment">//["苹", "果", ",", "香", "蕉", ",", "橙", "子", ",", "榴", "莲", ",", "水", "蜜", "桃"]</span></span><br><span class="line"><span class="comment">/*说明：这种方式常用来把完整的单词切割成字符*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.split(<span class="string">""</span>));   <span class="comment">//["h","e","l","l","o"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*05-limit参数的使用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.split(<span class="string">""</span>,<span class="number">3</span>)); <span class="comment">//["h","e","l"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">","</span>,<span class="number">3</span>));   <span class="comment">//["苹果", "香蕉", "橙子"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*06-匹配的分隔符在开头或者结尾*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.split(<span class="string">"he"</span>)); <span class="comment">//["","llo"];</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.split(<span class="string">"lo"</span>)); <span class="comment">//["hel",""];</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"helohe"</span>.split(<span class="string">"he"</span>));<span class="comment">//["","lo",""];</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>  <code>split()</code>方法常用来处理高度结构化的字符串，在开发中经常使用。<a href="">在使用split()来切割字符串的时候，得到的数组中每个元素都是字符串类型(得到的一定是字符串数组)，且指定的分隔符不可能出现在数组元素中</a>。如果分隔符匹配给定字符串的开头或者是结尾内容，那么返回数组的第一个元素和最后一个元素将是空字符串(参考上文代码的06)。</p><p><strong>获取字符串的指定字符(编码)</strong></p><p>JavaScript语言提供了<code>charAt()</code>和<code>charCodeAt()</code>方法来获取字符串中的指定字符或字符编码。</p><p><strong><code>语法</code></strong> <code>string.charAt(n)</code> <code>string.charCodeAt(n)</code><br><strong><code>作用</code></strong>  <code>charAt()</code>用于获取字符串中的第<code>n个字</code> ，<code>charCodeAt()</code>方法获取的是第<code>n个字符的编码</code>。<br><strong><code>说明</code></strong> 字符串的第一个字符的索引编号为0，长度为<a href=""> string.length - </a>。<br><strong><code>备注</code></strong> JavaScript中并没有字符数据类型，所以返回的<code>某个字符</code>其实是一个长度为1的字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;hello world&quot;;</span><br><span class="line">/*charAt方法返回的是指定位置(索引)的字符*/</span><br><span class="line">console.log(str[0]);                    //&quot;h&quot; 也可以直接使用索引下标访问</span><br><span class="line">console.log(str.charAt(0));             //&quot;h&quot;</span><br><span class="line">console.log(str.charAt(1));             //&quot;e&quot;</span><br><span class="line">console.log(str.charAt(str.length -1)); //&quot;d&quot;</span><br><span class="line"></span><br><span class="line">/*注意：如果charAt的参数不在 0 ~ length-1范围内，则返回空字符串*/</span><br><span class="line">console.log(str.charAt(-1));            //&quot;&quot;</span><br><span class="line">console.log(str.charAt(str.length));    //&quot;&quot;</span><br><span class="line"></span><br><span class="line">/*charCodeAt方法返回的是指定位置(索引)字符对应的字符编码*/</span><br><span class="line">console.log(str.charCodeAt(0));         //104</span><br><span class="line">/*注意：如果charCodeAt的参数不在 0 ~ length-1范围内，则返回NaN*/</span><br><span class="line">console.log(str.charCodeAt(-1));        //NaN</span><br><span class="line">console.log(str.charCodeAt(str.length));//NaN</span><br></pre></td></tr></table></figure></p><p><strong>编码</strong> <code>charCodeAt()</code>方法返回的字符编码指的是<code>Unicode编码</code>，为16位整数，取值在0~65535之间。</p><blockquote><p>有时候我们需要根据Unicode编码来创建字符串，因此JavaScript提供了和<code>charCodeAt()</code>相反的方法<code>fromCharCode()</code>，该方法定义在String构造函数身上是一个静态方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法：String.fromCharCode(c1,c2,c3,...)*/</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">String</span>.fromCharCode(<span class="number">104</span>,<span class="number">105</span>,<span class="number">32</span>,<span class="number">44</span>,<span class="number">32</span>,<span class="number">88</span>,<span class="number">105</span>,<span class="number">97</span>,<span class="number">32</span>,<span class="number">33</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);                    <span class="comment">//hi , Xia !</span></span><br></pre></td></tr></table></figure><p><strong>字符串的截取</strong></p><p>字符串截取是编程中经常用到的操作，JavaScript提供了<code>slice()</code>、<code>substr()</code>和<code>substring()</code>三个方法来实现字符串的截取操作，这三个方法在使用的时候<span style="color:#f08"> 很像但是又不太一样</span>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base29.png?raw=true"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*截取字符串的方法比较*/</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="string">"hi 文顶顶"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-如果只传递一个参数，表现一致*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">3</span>));     <span class="comment">//文顶顶 默认截取 3 ~ test.length-1的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">3</span>));    <span class="comment">//文顶顶</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">3</span>)); <span class="comment">//文顶顶</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-传递第二个参数</span></span><br><span class="line"><span class="comment">* slice(start,end)     (开始截取的位置，结束截取的位置[不包含])</span></span><br><span class="line"><span class="comment">* substr(start,length) (开始截取的位置，截取的长度)</span></span><br><span class="line"><span class="comment">* substring(from,to)   (开始位置，结束位置)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">3</span>,<span class="number">4</span>));     <span class="comment">//文</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">3</span>,<span class="number">4</span>));    <span class="comment">//文顶顶</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">//文</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong> 我们在给这些截取字符串的方法传递参数的时候，是可以传递负值的，如果传递的值是负数那么这三个方法将表现出巨大的差异，在使用的时候要注意区分。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">"hi 文顶顶"</span>;</span><br><span class="line"><span class="comment">/*01-参数为负数的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">-2</span>));              <span class="comment">//"顶顶" 倒数第三个(索引值为 -2 + test.length-1)</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">-2</span> + test.length));<span class="comment">//"顶顶"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">-2</span>));             <span class="comment">//"顶顶"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*substring方法的参数不能为负数，如果是负数那么默认转换为0*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">-2</span>));          <span class="comment">//"hi 文顶顶"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-更复杂(两个参数)的情况*/</span></span><br><span class="line"><span class="comment">/*slice方法中第二个参数为负数，那么将 + string.length*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">3</span>,<span class="number">-1</span>));           <span class="comment">//"文顶"  等价于slice(3,5)</span></span><br><span class="line"><span class="comment">/*substr方法中第二个参数为负数，那么转换为0*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">3</span>,<span class="number">-1</span>));          <span class="comment">//""     等价于substr(3,0)</span></span><br><span class="line"><span class="comment">/*substring方法中第二个参数为负数，会先转换为0，然后比较两个参数的大小再调整*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">3</span>,<span class="number">-1</span>));       <span class="comment">//"hi "  等价于test.substring(0,3)</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">3</span>,<span class="number">1</span>));        <span class="comment">//"i "   等价于test.substring(1,3)</span></span><br></pre></td></tr></table></figure></p><p><strong>备注</strong> <code>substring()</code>方法会将两个参数中较小的数值作为开始位置，将较大的数值作为结束位置，因此像上面示例代码中的<code>test.substring(3,1)</code>这行代码，相当于调用了<code>test.substring(1,3)</code>。</p><blockquote><p><code>substring()</code>方法的参数不接受负值，如果传递了负值那么总是会被转换为0。<code>substr()</code>方法已经不再在ECMAScript的内容，已经被弃用。</p></blockquote><p><strong>清除字符串前后空格</strong></p><p>在早期的时候，JavaScript中并没有专门用来清除字符串前后N各空格的方法可以使用。但是，在开发中又确实有这样的需求，譬如我们在获取用户的表单输入后往往需要先做清空格处理和校验之后才提交给服务器端，以前在处理这种开发场景的时候可能需要自己来封装一个专门的方法或者直接使用jQuery框架中的<code>$.trim()</code>方法。庆幸的是在ES5中，JavaScript为我们提供了这样一个trim方法，它的使用方式非常简单直接调用即可，作用是<a href=""> 清除字符串前后的1个或多个空格</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testStr = <span class="string">" abc def  "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(testStr);         <span class="comment">//" abc def  "</span></span><br><span class="line"><span class="built_in">console</span>.log(testStr.trim());  <span class="comment">//"abc def"</span></span><br></pre></td></tr></table></figure><p class="titleX"><strong>字符串其它说明</strong></p><p>在JavaScript中字符串除了上述介绍的这些方法外，其实还有一些内容。譬如<code>String()函数</code>用来把数字、布尔值等数据转换为字符串，<code>localeCompare()</code>方法用于比较两个字符串的顺序，<code>toString()</code>和<code>valueOf()</code>方法对于字符串而言很少使用,<code>search()</code>、<code>match()</code>以及<code>replace()</code>方法用来进行字符串的模式匹配，因为它们或多或少的涉及到正则表达式的知识点所以此文不再额外扩展。</p><p>当然，字符串知识模块还有一些内容没有讲解，譬如构造函数以及String对象类型甚至ES6新增的字符串模板等，我并没有把它们纳入到本文的范围中，大家可以自行查阅相关资料和扩展。</p><p><code>string</code>是JavaScript中的一种原始(简单|基本)数据类型，字符串中的length属性指定该字符串中字符的个数(长度)，上文中介绍了字符串操作的诸多常用方法。需要重申的是：<span style="color:red">JavaScript中的字符串是不可变的</span>，文中介绍的所有方法都不允许改变当前字符串的的内容，它们做的只是返回一个全新的字符串，并没有修改原始字符串。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将重点介绍javaScript语言中字符串，操作字符串的常见方法以及具体的代码实现等。&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/js
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [18]-流程控制</title>
    <link href="https://weibo.com/u/3800117445/2019/04/12/javaScript%E7%B3%BB%E5%88%97%20%5B18%5D-JavaScript%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://weibo.com/u/3800117445/2019/04/12/javaScript系列 [18]-JavaScript流程控制/</id>
    <published>2019-04-12T00:22:16.000Z</published>
    <updated>2019-06-11T01:32:06.892Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍javaScript语言中流程控制语句，包括顺序、选择和循环三种控制结构以及具体的控制语句如if else 、while等的基本使用。</div><div class="titleX"><strong>流程控制语句简单介绍</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base17.png?raw=true"></p><p>JavaScript程序是一系列可执行语句的集合。</p><p>默认情况下，JavaScript解释器依照语句的编写顺序从头到尾，从上到下的依次执行，这种默认执行代码的结构其实就是 <strong>顺序结构</strong>。而除了顺序结构外，JavaScript中还有一些特定的控制语句能够改变代码的默认(顺序)执行方式，这些特定的控制语句总体上可以分成 <strong>条件语句</strong>、<strong>循环语句</strong>和<strong>跳转语句</strong>。</p><p>以上，根据它们的执行特点我们可以总结出JavaScript中的流程控制结构有三种，分别是<strong><code>顺序结构</code></strong>、<strong><code>选择结构</code></strong> 和 <strong><code>循环结构</code></strong>。 JavaScript程序在执行的时候默认就是 <strong>顺序结构</strong>，因此下文将主要讲解其它两种流程控制结构和基本用法。</p><div class="titleX"><strong>选择控制结构</strong></div><p>JavaScript中选择控制语句主要有<code>单分支(if)</code>、<code>双分支(if..else)</code>、<code>多分支(if..else if...)</code>和<code>多值选择(switch)</code>等，接下来分别对它们进行介绍。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">① 单分支结构</span></p><p> javaScript语言中的单分支选择结构主要使用if语句来实现。</p><p><strong>单分支选择结构流程图</strong><br> <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base18.png?raw=true" height="250px"></p><p><strong>语法示例</strong></p><pre>      if ( condition ) {           expression1;      }</pre> <p> 在上面的语法结构中，if后面的圆括号( <code>condition</code> )编写是判断的条件(通常是条件表达式)，条件表达式的结果应该为布尔类型值(<a href="">如果不是布尔值则会调用Boolean函数转换为布尔值</a>)，在单分支结构语句中，当条件为“真”的时候，执行if里面的代码，当条件为“假”的时候，那么不执行if里面的代码，而会执行 if 语句后面的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*演示 单分支if语句的基本使用*/</span></span><br><span class="line"><span class="comment">/*01 满足条件执行一条语句 &#123;&#125; 可以省略*/</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"-----"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"---end---"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----</span></span><br><span class="line"><span class="comment">//---end---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 满足条件执行代码块*/</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hi,你已经是成年了~"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"该自己对自己负责了。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"---end---"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hi,你已经是成年了~</span></span><br><span class="line"><span class="comment">//该自己对自己负责了。</span></span><br><span class="line"><span class="comment">//---end---</span></span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">② 双分支结构</span></p><p>双分支选择结构主要用<code>if-else</code>语句来实现，在双分支结构中，当条件为“真”的时候执行if语句后面的代码，当条件为“假”的时候执行else后面的代码。</p><p><strong>双分支选择结构流程图</strong></p><p> <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base19.png?raw=true" height="250px"></p><p><strong>语法示例</strong></p><pre>     if ( condition ) {           expression1;      }else {            expression2;      }      expression3;</pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*演示：双分支选择结构的代码示例*/</span></span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">15</span>;</span><br><span class="line"> <span class="keyword">if</span> (age &gt;= <span class="number">18</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"测试结果：成年人"</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"测试结果：未成年人"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"___end____"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//测试结果：未成年人</span></span><br><span class="line"> <span class="comment">//---end---</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">③ 多分支结构</span></p><p>多分支选择结构主要用<code>if-else if-else</code>语句来写，在多分支结构中，当前面的条件为“真”的时候，将不会判断后面的条件，当前面的条件为“假”的时候，会继续判断后面的条件，直到符合条件为止继而执行相应的代码块。</p><p><strong>多分支选择结构流程图</strong><br> <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base20.png?raw=true" height="250px"></p><p><strong>语法示例</strong> </p><pre>     if ( condition1 ) {           expression1;      }else if( condition2 ) {            expression2;      }else if( condition3 ) {            expression3;      }else {            expression4;      }      expression5;</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="number">98</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">60</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"测试成绩：不及格"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &lt;= <span class="number">75</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"测试成绩：良好"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &lt;= <span class="number">85</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"测试成绩：优秀"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"测试成绩：优秀+"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"___end____"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试成绩：优秀+</span></span><br><span class="line"><span class="comment">//___end____"</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong> 在多分支语句中，当条件表达式满足前面的条件时，会执行前面的语句，尽管布尔语句同时也满足后面的条件，但并不会再执行后面的分支语句。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">④ 多值选择结构</span></p><p> 多值选择结构主要通过<code>switch-case</code>语句来实现。</p><p><strong>多值选择结构流程图</strong><br>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base21.png?raw=true" height="300px"></p><p><strong>多值选择结构语法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:           <span class="comment">//如果n==1,那么从此处开始执行</span></span><br><span class="line">        <span class="comment">//执行代码块1</span></span><br><span class="line">        <span class="keyword">break</span>;        <span class="comment">//停止执行switch语句</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:           <span class="comment">//如果n==2,那么从此处开始执行</span></span><br><span class="line">        <span class="comment">//执行代码块2</span></span><br><span class="line">        <span class="keyword">break</span>;        <span class="comment">//停止执行switch语句</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:           <span class="comment">//如果n==3,那么从此处开始执行</span></span><br><span class="line">        <span class="comment">//执行代码块3</span></span><br><span class="line">        <span class="keyword">break</span>;        <span class="comment">//停止执行switch语句</span></span><br><span class="line">    <span class="keyword">default</span>:          <span class="comment">//如果n的值非1\2\3，那么执行下面的代码</span></span><br><span class="line">        <span class="comment">//执行代码块4</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 当switch后面圆括号()中表达式的值与某个case后面的值匹配时，则执行这个case后面的语句。在匹配的时候会按照从上之下的顺序依次执行，<a href="">如果表达式的值与所有case后面的值都不匹配，则执行default后面的语句</a>。</p><p> 语句中的 <code>break</code> 用于结束多值选择结构语句，如果没有 <code>break</code> 则会从满足条件的case开始顺序执行完整个switch语句(这种情况被称之为case穿透)，直到遇到break为止。<span style="color:#f08">在大多数情况下，我们都应该使用 break 语句来终止每个 case 语句块</span>。</p><blockquote><p>ECMAScript标准允许每个case关键字跟随任意的表达式。在执行的时候，会先计算switch后面()中的表达式，然后按照从上到下的顺序来计算每个case后面的表达式，直到case表达式的值和switch后面表达式的值匹配位置。需要注意的是，<code>它们在进行匹配的时候实际上使用的是全等判断</code>(即不会进行有任何类型的转换）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> day=<span class="keyword">new</span> <span class="built_in">Date</span>().getDay();</span><br><span class="line"><span class="keyword">switch</span> (day)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  x=<span class="string">"Today it's Sunday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  x=<span class="string">"Today it's Monday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  x=<span class="string">"Today it's Tuesday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  x=<span class="string">"Today it's Wednesday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">  x=<span class="string">"Today it's Thursday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">  x=<span class="string">"Today it's Friday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">  x=<span class="string">"Today it's Saturday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class="tip"><strong>备注</strong> 虽然我们在开发中大多数情况下，<code>default</code> 语句都是出现在switch结构的末尾，位于所有case的后面，但实际上 default 可以被卸载switch语句内的任何位置。</p><div class="titleX"><strong>循环控制结构</strong></div><p>和大多数编程语言一样，JavaScript语言中的循环控制结构也无非<code>while</code>、<code>do-while</code>以及<code>for</code>循环三种。<a href=""><strong>说明</strong> JavaScript中主要用来枚举对象的 for..in 、数组的 forEach 方法、map 方法以及新标准中的 for..of 等循环遍历方法，在此处暂不做介绍</a>。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">while循环结构</span></p><p>执行 <code>while循环结构</code> 语句的时候，先判断while后面的条件是否为“真”，如果为“真”那么就执行一遍循环体，然后继续检查条件是否为“真”，重复这个过程，直到while条件为“假”时停止。</p><p>如果条件一直为“真”，循环体中又没有结束循环的语句时，代码就会陷入到死循环。</p><p><strong>while循环流程图</strong></p><p>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base22.png?raw=true" height="300px"></p><p><strong>while循环语法和代码示例</strong></p><pre>    while(condition)    {        expression;    }</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"第"</span>+(i + <span class="number">1</span>)+<span class="string">"次打印，大家好，我是陆超！真好 "</span>);</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第1次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第2次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第3次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第4次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第5次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第6次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第7次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第8次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第9次打印，大家好，我是陆超！真好</span></span><br><span class="line"><span class="comment">第10次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">do-while循环结构</span></p><p><strong>do-while循环流程图</strong><br>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base23.png?raw=true" height="300px"></p><p><strong>do-while循环语法和代码示例</strong></p><pre>    do{        expression;    }while(condition);</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"The number is "</span> + i);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i&lt;<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"循环结束后i的值为,"</span>,i);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The number is 0</span></span><br><span class="line"><span class="comment">The number is 1</span></span><br><span class="line"><span class="comment">The number is 2</span></span><br><span class="line"><span class="comment">The number is 3</span></span><br><span class="line"><span class="comment">The number is 4</span></span><br><span class="line"><span class="comment">循环结束后i的值为, 5</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><code>do/while循环</code>和<code>while循环</code>非常相似，它们的区别在于<code>do-while循环</code>是在循环的尾部而不是顶部检测循环表达式是否满足条件，这也意味着<code>do-while循环</code>的循环体将至少会执行一次。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">for循环结构</span></p><p><strong>for循环</strong> 提供了一种更方便的循环控制结构，它在while/do-while循环模式的基础上进行了简化。<strong>for循环语句</strong> 直接将<span style="color:#f08">循环条件的初始化、检测和更新</span>三步操作明确的声明为语法的一部分，更直接简洁。</p><p><strong>for循环流程图</strong><br>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base24.png?raw=true" height="350px"></p><p><strong>for循环语法</strong></p><pre>    for(initialization; condition; increnment){        expression;    }</pre><p>在 for 循环中，<code>initialization</code>(初始化表达式); <code>condition</code>(循环条件表达式); <code>increnment</code>(计数器变量更新)三个表达式之间需要使用分号来进行分隔，它们分别负责计数器的初始化操作、循环条件判断以及循环计数器变量的更新操作。接下来，简单说明for循环的工作机制。</p><p>在整个for循环结构中，<a href=""><code>initialization</code> 初始化表达式只会在循环开始前执行一次，然后检查<code>condition</code> 循环条件表达式的值是否为”真”，如果为”真”那么就执行循环体中的代码，最后执行<code>increnment</code> 计数器变量更新表达式。然后，接着检查循环条件的值是否为”真”，如果为”真”那么就执行循环体，重复这个过程</a>，直到循环条件的值为”假”或者在循环体中遇到break语句才会结束循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*嵌套for循环实现打印99乘法表*/</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;table&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j&lt;= i; j++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;td&gt;"</span>+j+<span class="string">"x"</span>+i+<span class="string">"="</span>+i*j+<span class="string">"&lt;/td &gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/table&gt;"</span>);</span><br></pre></td></tr></table></figure><p><strong>打印九九乘法表</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base25.png?raw=true"></p><p class="tip"><strong>备注</strong> 在 for 循环中的三个表达式中任何一个都可以忽略，省略三个都可以忽略，但至少要保持其结构的完整性(即不能省略两个分号)，最简单形式是<code>for( ; ; ){ ... }</code>，不过这将构成一个死循环同 <code>while(true){...}</code>一样。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍javaScript语言中流程控制语句，包括顺序、选择和循环三种控制结构以及具体的控制语句如if else 、while等的基本使用。&lt;/div&gt;

&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;流程控制语句简单介绍&lt;/str
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [17]-运算符</title>
    <link href="https://weibo.com/u/3800117445/2019/04/10/javaScript%E7%B3%BB%E5%88%97%20%5B17%5D-JavaScript%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://weibo.com/u/3800117445/2019/04/10/javaScript系列 [17]-JavaScript的运算符/</id>
    <published>2019-04-10T00:22:16.000Z</published>
    <updated>2019-06-11T01:32:07.355Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍javaScript语言中的运算符(<code>operator</code>)，包括但不限于算术运算符、逻辑运算符、关系运算符以及赋值运算符等内容，而对于位运算符及关键字运算符则仅会做简单说明。</div><div class="titleX"><strong>运算符简介</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base12.png?raw=true"></p><p>JavaScript语言中的运算符如果按照<code>符号</code>来划分那么总体可以分成<strong>标点符号所表示的运算符</strong>和<strong>关键字运算符</strong>两大类，其中前者指代的是类似于<code>+</code>、<code>*</code>、<code>&amp;&amp;</code>、<code>==</code>等运算符，而后者指代的是类似于<code>in</code>、<code>delete</code>、<code>typeof</code>以及<code>instanceof</code>的运算符。需要说明的是，本文只介绍前者，也就是所谓<strong>标点符号所表示的运算符</strong>。</p><p>其实，如果按照运算符的作用和具体使用方式来划分，又可以分成如上图所示的<strong>基本算术运算符</strong>、<strong>逻辑运算符</strong>、<strong>关系运算符</strong>、<strong>赋值运算符</strong>等几种，而这也是开发中习惯的分类方式。听上去感觉非常繁杂甚至让人害怕，其实 enmmm ~ 大可不必 <a href=""><strong> : )</strong></a></p><div class="titleX"><strong>运算符基本使用</strong></div><p>接下来，我将分别介绍JavaScript中各种类型的运算符，包括它们都有哪些具体的运算符，应该如何使用，使用的示例代码以及额外的注意点等(位运算符不在本文说明的范围，有兴趣的朋友可以参考<a href="http://wendingding.com/2018/08/03/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20XOR/" target="_blank" rel="noopener"> 数据安全系列 XOR </a>这篇文章。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">基本算术运算符</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base14.png?raw=true"></p><p>在这里我们先介绍基本的算术运算符，它们是 <a href="">*(乘法)、/(除法)、+(加法)、-(减法)和 %(求余|模运算)</a>。这些运算符中，除了<code>+(加法)</code>稍微复杂点外，其余的四种运算符都很简单，就是简单的求积、求商、差以及余数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">8</span>,num2 = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基本的算术运算符*/</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 + num2);     <span class="comment">//34</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 - num1);     <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 - num2);     <span class="comment">//-18</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 * num2);     <span class="comment">//208</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 / num2);     <span class="comment">//0.3076923076923077</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 / num1);     <span class="comment">//3.25</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 % num1);     <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 % num2);     <span class="comment">//8</span></span><br></pre></td></tr></table></figure><p><strong>算术运算符的使用注意点说明</strong></p><blockquote><p>① 除加法外，其他运算符在必要时会将操作数转换为数字，如<code>无法转换则结果为NaN</code>。<br>② 除数为0的结果为正无穷大或者是负无穷大，而<code>0/0的结果是NaN</code>。<br>③ 模(%)运算中，计算的结果和第一个操作数的符号保持一致，且模运算也适用于整数和浮点数。<br>④ 加法(+)可以对两个数字做加法，也可以用来连接字符串，具体的情况可以参考下面的示例代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*算术运算符的使用注意点*/</span></span><br><span class="line"><span class="comment">/*01 默认把非数字转换为数字，如果无法转换则转换为NaN,最终结果为NaN*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> - <span class="number">3</span>);            <span class="comment">//9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> / <span class="number">3</span>);            <span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12a"</span>* <span class="number">3</span>);            <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 考虑0作为除数的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> / <span class="number">0</span>);            <span class="comment">//Infinity   无穷大</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-12</span>  / <span class="number">0</span>);            <span class="comment">//-Infinity  负无穷大</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span>   / <span class="number">0</span>);            <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 模运算的符号问题，以及在浮点数中的应用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span>  % <span class="number">1</span>  );         <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-12"</span> % <span class="number">5</span>  );         <span class="comment">//-2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-12"</span> % <span class="number">-5</span> );         <span class="comment">//-2  模运算结果的符号只和第一个操作数相关</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">6.5</span>  % <span class="number">2.1</span>);         <span class="comment">//0.19999999999999973</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04 加法用来拼接字符串的用法和注意点*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">2</span>);               <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hi"</span> + <span class="string">" XiaoXia"</span>);   <span class="comment">//"Hi XiaoXia"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>  + <span class="string">"3"</span>);          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>  +  <span class="number">3</span> );          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">2</span>   + <span class="string">"3"</span>);          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   + <span class="number">2</span> + <span class="string">"Nice"</span> );  <span class="comment">//"3Nice"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   + (<span class="number">2</span> + <span class="string">"Nice"</span>)); <span class="comment">//"12Nice"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Nice"</span> + <span class="number">1</span> + <span class="number">2</span>);      <span class="comment">//"Nice12"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">true</span>);         <span class="comment">//2 布尔类型的值转换为数字1后再做加法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">false</span>);        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">41</span>   + <span class="literal">null</span>);         <span class="comment">//41  null转换为数字0后再做加法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">41</span>   + <span class="literal">undefined</span>);    <span class="comment">//NaN undefined转换为数字(NaN)后做加法</span></span><br></pre></td></tr></table></figure><p><strong>特别说明</strong> 处理+运算符的时候，如果操作数都是数字那就做加法计算，如果都是字符串那就拼接，如果是此外的其他情况，那运算是默认会执行必要的类型转换，而运算符的行为依赖于类型转换的结果，<span style="color:#f08">加号的转换规则需要优先考虑字符串连接</span>。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">关系运算符</span><br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base15.png?raw=true"></p><p><strong>关系运算符</strong> 用于测试两个值之间的关系,比如”相等”、”大于”等，根据关系是否存在(成立)而返回 <code>true</code> 或者是 <code>false</code>。<a href="">关系表达式总是返回一个布尔值</a>,通常用在if、while以及for语句中用于控制程序的执行流程。下面将依次介绍关系运算符中的比较运算符(<code>&lt;、&lt;=、&gt;、&gt;=</code>) 和 (不)相(全)等运算符。</p><p><strong>比较运算符</strong> 用来检测两个操作数的大小关系(<a href="">数值大小或者字母表的顺序</a>)。需要注意JavaScript字符串是一个由16位整数值组成的序列，字符串的比较本质上是对两个字符串中的字符对应的数值进行比较，而且字符串比较是区分大小写的，所有的大写的ASCII字母都”小于”小写的ASCII字母，<a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">点击查看ASCII表</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*比较运算符的简单使用：返回值均为布尔值*/</span></span><br><span class="line"><span class="comment">/*01-两个操作符都是数字的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>  &lt;  <span class="number">3</span> );        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span> &lt;  <span class="number">4</span> );        <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>  &lt;= <span class="number">3</span> );        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">65</span> &gt;  <span class="number">41</span>);        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">65</span> &gt;= <span class="number">41</span>);        <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-两个操作符都是字符串的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &lt;  <span class="string">"b"</span>  );   <span class="comment">//true  "a"-97 "b"-98</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &lt;  <span class="string">"ba"</span> );   <span class="comment">//true  比较第一位</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ab"</span> &gt;  <span class="string">"ac"</span> );   <span class="comment">//false 比较第二位 b-98 c-99</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span>&lt;  <span class="string">"abx"</span>);   <span class="comment">//true  比较第三位 c-99 x-120</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  &gt;  <span class="string">"2"</span> );    <span class="comment">//false "1"-49 "2"-50</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>  &gt;  <span class="string">"a"</span> );    <span class="comment">//false "A"-65 "a"-97</span></span><br></pre></td></tr></table></figure></p><p><strong>比较运算符</strong> 的操作数可以是任意类型的，但只有<span style="color:orange"> 数字和字符串才能真正的执行比较操作 </span>，其它的操作都将进行类型转换。在进行类型转换的时候，比较运算符更偏爱数字所以会优先把操作数都转换为数字再比较，只有当两个操作数都是字符串的时候才会进行字符串的比较( <code>字母表顺序</code> )。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*如果比较运算符的两个操作数类型不都是字符串和数字的情况~*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &gt;  <span class="number">0</span> );       <span class="comment">//false  "a"转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>  &gt; <span class="string">"c"</span>);       <span class="comment">//false  "c"转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> &gt;  <span class="number">10</span>);       <span class="comment">//true   "12"转换为数字12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>   &gt; <span class="literal">undefined</span>); <span class="comment">//false   undefined转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>   &gt; <span class="literal">null</span>);      <span class="comment">//true    null转换为0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-1</span>   &gt; <span class="literal">null</span>);      <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>简单总结下，如果比较运算符的两个操作数类型不同(不全是数字或者不全是字符串)的时候，会<span style="color:#f08">优先把操作数转换为数字。如果操作数中出现NaN(无论是类型转换前还是转换后)，最终结果都将是NaN。</span></p><p><strong>相等(==)和全等(===)运算符</strong> 用于比较两个值是否相等或全等，如果满足则返回 true。其实<a href="">相等(==)和全等(===)的核心区别在于相等仅比较值，而全等需要比较值和类型。</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*相等：仅仅比较值，如果类型不同那么会进行类型转换(限于字符串、布尔值和对象)，优先转换为数字*/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   == <span class="number">1</span>);         <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  == <span class="number">1</span>);         <span class="comment">//true   "1"先被转换为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1a"</span> == <span class="number">1</span>);         <span class="comment">//false  "1a"先被转换为数字这里得到的是NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="number">1</span>);         <span class="comment">//true   true先被转换为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="string">"1"</span>);       <span class="comment">//true   true先被转换为数字1,"1"被转换为数字1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>  == <span class="literal">NaN</span>);       <span class="comment">//false  NaN和任何的值都不等包括它自己</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true   比较特殊(因为本质上undefined派生自null)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*需要注意：undefined和null在和数字比较的时候并不会转换成NaN和0*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>    == <span class="literal">undefined</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>    == <span class="literal">null</span>);      <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*全等：也称为严格相等，既比较值也比较类型，类型不同则直接返回false*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  === <span class="number">1</span>);         <span class="comment">//false  类型不同</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> === <span class="number">1</span>);         <span class="comment">//false  类型不同</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">//false  类型不同</span></span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 需要注意区分<code>&quot;==&quot;(相等)</code>、<code>&quot;===&quot;(全等)</code>和<code>&quot;=&quot;(赋值)</code>，此外还有<code>&quot;!=&quot;</code>和<code>&quot;!==&quot;</code>运算符，它们的检测规则刚好是 <strong>相等</strong> 和 <strong>全等</strong> 的求反。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">逻辑运算符</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base16.png?raw=true"></p><p>图示已经列出了JavaScript语言中的三种逻辑运算符(<code>&quot;逻辑非&quot;</code>、<code>&quot;逻辑或&quot;</code>和<code>&quot;逻辑与&quot;</code>)以及它们的具体使用方式，在开发中逻辑运算符常用在条件表达式中(如if语句的条件判断)，下面给出参考代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-逻辑非 该运算符只有一个操作数，作用是对操作数取反*/</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">true</span>);             <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">0</span>);                <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">undefined</span>);        <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-逻辑或 该运算符需要两个操作数</span></span><br><span class="line"><span class="comment">* 运算规则：如果第一个操作数为真那么就直接返回第一个操作数，否则返回第二个操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">0</span> || <span class="number">1</span>);        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">false</span>);    <span class="comment">//true 返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">1</span> || <span class="number">2</span>);        <span class="comment">//1    返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">2</span> || <span class="number">4</span>);        <span class="comment">//2    返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(  <span class="string">""</span> || <span class="number">5</span>);        <span class="comment">//5    第一个操作数转换为false，返回第二个操作数</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>&gt;<span class="number">2</span> || <span class="string">"Hi"</span>);     <span class="comment">//Hi"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-逻辑与 该运算符需要两个操作数</span></span><br><span class="line"><span class="comment">* 运算规则：如果第一个操作数为真那么就直接返回第二个操作数，否则返回第一个操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">0</span> &amp;&amp; <span class="number">1</span>);        <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);    <span class="comment">//false 返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">1</span> &amp;&amp; <span class="number">2</span>);        <span class="comment">//2     返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">2</span> &amp;&amp; <span class="number">4</span>);        <span class="comment">//4     返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(  <span class="string">""</span> &amp;&amp; <span class="number">5</span>);        <span class="comment">//""</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>&gt;<span class="number">2</span> &amp;&amp; <span class="string">"Hi"</span>);     <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">其它常用运算符</span></p><p>在最后，再简单介绍JavaScript语言中的<code>赋值运算符</code>、<code>自增自减运算符</code>以及特殊的<code>三元运算符</code>。</p><p><strong>赋值运算符</strong> JavaScript使用<code>=</code>运算符来给变量赋值，该运算符希望它的左操作数是一个左值(一个变量或者是对象属性)，而它的右操作数可以是任意类型的任意值。需要注意的是，<code>=</code>的优先级很低，且它的结合性是从右至左(即如果一个表达式中出现了多个赋值运算符，那么运算的顺序是从右至左的)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">8.26</span>;             <span class="comment">//将变量a的值设置为8.26</span></span><br><span class="line">    a = <span class="string">"Xia"</span>;            <span class="comment">//二次赋值</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> i,j=k=o=<span class="number">408</span>;          <span class="comment">//把j、k、o三个变量初始化为408</span></span><br><span class="line"><span class="built_in">console</span>.log(i, j, k,o);   <span class="comment">//undefined 408 408 408</span></span><br></pre></td></tr></table></figure></p><p><strong>带操作的赋值运算符</strong> 主要有<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>以及<code>%=</code>等，当然还包括<code>&lt;&lt;=</code>等位操作符和赋值操作符的组合(此文不涉及位操作符)。这里列出的这些运算符它们其实是算术运算符和赋值运算符的组合，是一种常用的简写形式，下面给出示例代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a += b);  <span class="comment">//等价于 a = a + b    3 (这是a更新后的值)</span></span><br><span class="line"><span class="built_in">console</span>.log(a -= b);  <span class="comment">//等价于 a = a - b    1</span></span><br><span class="line"><span class="built_in">console</span>.log(a *= b);  <span class="comment">//等价于 a = a * b    2</span></span><br><span class="line"><span class="built_in">console</span>.log(a /= b);  <span class="comment">//等价于 a = a / b    1</span></span><br><span class="line"><span class="built_in">console</span>.log(a %= b);  <span class="comment">//等价于 a = a % b    1</span></span><br></pre></td></tr></table></figure></p><p>现在，我们来看开发中经常使用的<code>自增(++i或i++)</code>和<code>自减(--i或i--)</code>运算符，它们的作用是在当前值的基础上+1或者是-1，而<code>++i</code>和<code>i++</code>对于i这个变量本身而言没区别，它们的区别在于如果有涉及返回值的操作，那么<code>++i</code>的更新会体现在返回值中(换句话说就是先对变量的+1，然后把结果返回)，而<code>i++</code>则不会(先把i返回，然后再执行变量的+1操作)，自减运算符同理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*说明：i++ 等价于 i = i + 1*/</span></span><br><span class="line"><span class="keyword">var</span> i  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> r1 = i++;     <span class="comment">//先把i的值赋值给r1,然后在执行i+1</span></span><br><span class="line"><span class="built_in">console</span>.log(i);   <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(r1);  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> r2 = ++j;     <span class="comment">//先执行j+1,然后把j+1的值赋值给r2</span></span><br><span class="line"><span class="built_in">console</span>.log(j)    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(r2);  <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*思考：var k = 0; console.log(k++ + ++k + k  + k++);*/</span></span><br></pre></td></tr></table></figure></p><p><strong>条件运算符( ? : )</strong> 也被称为三元运算符，因为该运算符需要三个操作数，语法为<code>**条件表达式？表达式1：表达式2**</code>,其运算的规则是<span style="color:#f08">检查条件表达式的值，如果该值为真则返回表达式1，否则返回表达式2</span>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> &lt; <span class="number">2</span> ? <span class="string">"小于"</span> : <span class="string">"大于"</span>;              <span class="comment">//条件表达式1&lt;2的结果为真(true)</span></span><br><span class="line"><span class="built_in">console</span>.log(a);     <span class="comment">//小于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = (<span class="number">1</span> &lt; <span class="number">2</span>) &amp;&amp; (<span class="number">3</span> &gt; <span class="number">5</span>) ? <span class="string">"看书"</span> : <span class="string">"睡觉"</span>;<span class="comment">//条件表达式的结果为真(false)</span></span><br><span class="line"><span class="built_in">console</span>.log(b);    <span class="comment">//睡觉</span></span><br></pre></td></tr></table></figure><p class="tip"><strong>运算符的优先级备注</strong> 我们在编写JavaScript表达式的时候，需要注意运算符是有优先级的，譬如<code>var a = x + y * b;</code>这行代码，因为 乘法运算符比 加法运算符的优先级，其次是等号赋值运算符，因此其执行顺序是先计算 <code>y * b</code>，然后再 <code>+ x</code>的值，最终才把结果赋值给a。在开发中，我们可以通过圆括号来强行指定运算顺序。如果<code>var a = (x + y) * b;</code>这样写代码，那么就先加再乘最后才进行赋值操作。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍javaScript语言中的运算符(&lt;code&gt;operator&lt;/code&gt;)，包括但不限于算术运算符、逻辑运算符、关系运算符以及赋值运算符等内容，而对于位运算符及关键字运算符则仅会做简单说明。&lt;/div&gt;

&lt;div class=&quot;
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [16]-语言基础</title>
    <link href="https://weibo.com/u/3800117445/2019/04/09/javaScript%E7%B3%BB%E5%88%97%20%5B16%5D-JavaScript%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>https://weibo.com/u/3800117445/2019/04/09/javaScript系列 [16]-JavaScript语言基础/</id>
    <published>2019-04-09T00:22:16.000Z</published>
    <updated>2019-06-11T01:32:07.360Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍javaScript最基础的知识点，包括但不限于JavaScript的简单介绍、历史、引入方式、变量、标识符命名规范、数据类型以及操作符等内容。</div><div class="titleX"><strong>JavaScript简介</strong></div><p><strong><code>概述</code></strong> JavaScript是一门动态、<code>弱类型</code>的解释型高级编程语言，它基于<code>原型</code>，<code>支持面向对象</code>和函数式编程等多种编程范式，通常简称为js。在世界上的绝大多数网站中都能看到JavaScript的身影，世界上所有的主流浏览器(<a href="https://zh.wikipedia.org/wiki/Google_Chrome" target="_blank" rel="noopener">Chrome</a>、<a href="https://zh.wikipedia.org/wiki/Internet_Explorer" target="_blank" rel="noopener">IE</a>、<a href="https://zh.wikipedia.org/wiki/Firefox" target="_blank" rel="noopener">Firefox</a>、<a href="https://zh.wikipedia.org/wiki/Safari" target="_blank" rel="noopener">Safari</a>、<a href="https://zh.wikipedia.org/wiki/Opera%E7%80%8F%E8%A6%BD%E5%99%A8" target="_blank" rel="noopener">Opera</a>)都支持它。</p><p><strong><code>作者</code></strong> <a href="https://brendaneich.com/" target="_blank" rel="noopener">Brendan Eich</a></p><p><strong><code>背景</code></strong> JavaScript诞生于1995年，其诞生的初衷是为了减轻服务器端的压力而在客户端提供一种表单验证的功能。最初命名为Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名为<code>LiveScript</code>，同年12月，Netscape Navigator 2.0 Beta 3中部署时被重命名为JavaScript，当时网景公司与昇阳电脑公司(<a href="https://zh.wikipedia.org/wiki/%E6%98%87%E9%99%BD%E9%9B%BB%E8%85%A6" target="_blank" rel="noopener">Sun</a>)组成的开发联盟为了让这门语言搭上Java这个编程语言“热词”，将其临时改名为JavaScript(其实就像现在某些网红蹭热度一样)。</p><p><strong><code>标准</code></strong> 1996年11月，网景正式向<code>ECMA（欧洲计算机制造商协会）</code>提交语言标准。1997年6月，ECMA以JavaScript语言为基础制定了<a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">ECMAScript</a>标准规范<a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="noopener">ECMA-262</a>。JavaScript成为了ECMAScript最著名的实现之一。实现ECMAScript规范的语言还有Adobe的<a href="https://zh.wikipedia.org/wiki/ActionScript" target="_blank" rel="noopener">ActionScript</a>和微软的<a href="https://zh.wikipedia.org/wiki/JScript" target="_blank" rel="noopener">JScript</a>。</p><p><strong><code>范围</code></strong> 虽然在大多数情况下，我们都认为ECMAScript和JavaScript表达的是相同的含义，但实际上JavaScript所表达的却比ECMAScript要广泛的多。完整的JavaScript应该由以下三部分组成：</p><blockquote><p>❐ <span class="liYY">ECMAScript</span> 由ECMA-262定义，提供核心语法功能。<br>❐ <span class="liYY">DOM</span>    全称<code>Document Object Model</code>文档对象模型，提供访问和操作网页的API。<br>❐ <span class="liYY">BOM</span>    全称<code>Browser Object Model</code>浏览器对象模型，提供与浏览器交互的方法和接口。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base07.png?raw=true"></p><p><strong><code>历史</code></strong> ECMAScript迄今已经历多个版本的迭代，下面给出主要的版本历史。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base09.png?raw=true"><br><strong><code>关系</code></strong> ECMAScript是标准(规范)，JavaScript是实现。H5是一种新的技术，JS用于实现H5新标签深层的扩展功能。HTML表示网页的核心内容和结构，CSS用于设置网页的样式，JavaScript控制网页的行为。</p><p><strong><code>应用</code></strong> JavaScript主要用于浏览器Web、物联网、游戏、桌面和移动应用开发和以及服务器端的开发。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base08.png?raw=true" height="200px"></p><p><strong><code>参考</code></strong> <a href="http://ecma-international.org/" target="_blank" rel="noopener">ECMA官网</a> <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf" target="_blank" rel="noopener">ECMA-262规范PDF文件</a> <a href="https://brendaneich.com/" target="_blank" rel="noopener">布兰登·艾克博客</a> </p><div class="titleX"><strong>JavaScript初体验</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">在html页面中使用JavaScript</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base01.png?raw=true" height="280px"></p><p>在html页面中编写JavaScript代码需要借助script标签，具体的使用方式有两种。<strong><code>① 在页面中嵌入JavaScript代码</code></strong>。在html页面中创建script标签，设置script标签的type属性为text/javascript，并在标签中直接编写JavaScript代码即可。<strong><code>② 在页面中引入外部的js文件</code></strong>。在html页面中创建script标签，把javaScript代码单独保存在.js后缀的文件中，然后通过设置script标签的src属性来引入js文件。</p><p><a href="">script 标签</a>的 type 属性可以省略，默认值即为<code>text/javascript</code>。<br><a href="">script 标签</a>的 属性(节点)主要有：<code>type</code>(类型)、<code>src</code>(资源地址)、<code>async</code>(异步加载)、<code>defer</code>(延迟执行)、<code>charset</code>(字符集)等。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">注释</span> JavaScript遵循C语言的注释风格，支持单行和多行注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单行注释 // </span><br><span class="line">多行注释 /*...*/</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">语句</span></p><p><strong><code>概念</code></strong> 在JavaScript中，可以简单认为一行完整的代码就是一条语句(<code>statement</code>)。<br><strong><code>分类</code></strong> 整体来讲，JavaScript的语句大致可以区分为<code>声明赋值语句</code>和<code>控制语句</code>两种。<br><strong><code>分号</code></strong> JavaScript中使用<code>分号(;)</code>来间隔多条语句，若各语句独占一行那么大部分情况下可省略分号。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">控制输出</span></p><p>JavaScript需要具体的JavaScript引擎(解析器)来解析，该引擎通常由浏览器提供，即JavaScript代码需要运行在浏览器中。JavaScript代码中常见的控制输出方式有以下三种：</p><blockquote><p>❐ <span class="liYY">输出到页面</span>    <code>document.write()</code><br>❐ <span class="liYY">弹出框显示</span>    <code>alert()</code><br>❐ <span class="liYY">控制台输出</span>    <code>console.log()</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 弹出对话框提示*/</span></span><br><span class="line">alert(<span class="string">"喜欢我就点我吧！"</span>);</span><br><span class="line">alert(<span class="string">"小姐姐你好，我是阿狸~"</span>);</span><br><span class="line">alert(<span class="string">"拜拜 &gt;.&lt; "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 直接向在网页中输出内容*/</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"蝉鸣的夏季，刚好遇见你。"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;遇见&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 控制台打印输出*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"文顶顶"</span>);</span><br></pre></td></tr></table></figure><div class="titleX"><strong>变量</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">直接量</span></p><p><strong><code>说明</code></strong> 直接量(<code>literal</code>)指的是程序中直接使用的数据值。</p><p>当一个值(数字、字符串等)直接出现在JavaScript程序中时，我们称之为<code>直接量</code>。</p><p>JavaScript语言中直接量(字面量)有很多，包括数字直接量、字符串直接量、数组直接量、对象直接量以及正则表达式直接量等等，下面简单给出一些直接量的示例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">null;            //空</span><br><span class="line">18;              //数字</span><br><span class="line">19.3;            //小数</span><br><span class="line">"wendingding";   //字符串文本</span><br><span class="line">true;            //布尔值</span><br><span class="line">false;           //布尔值</span><br><span class="line">/abc/gi;         //正则表达式直接量</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">变量基础</span></p><p><strong><code>定义</code></strong> 变量是编程语言中能够存储计算结果或表示值的抽象概念。<br><strong><code>使用</code></strong> 在JavaScript语言中 <span style="color:red">变量需要先声明再使用</span>。<br><strong><code>声明</code></strong> 使用 <code>var</code> 关键字来声明变量，如果省略var关键字那么该变量默认成为全局变量。<br><strong><code>作用</code></strong> 记录特定的内容，并通过变量名来访问它们。<br><strong><code>备注</code></strong> JavaScript变量是无类型的(<code>untype</code>)，任何变量都可以被赋予任何类型的值。<br><strong><code>原理</code></strong> 当使用var关键字声明变量时，计算机会从内存中分配储存空间来存放不同类型的内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*01 先声明两个变量，然后再输出变量的值到控制台*/</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"wendingding"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);                 <span class="comment">//变量的值可以被修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 可以一次性声明多个变量*/</span></span><br><span class="line"><span class="keyword">var</span> address = <span class="string">"北京市"</span>,className = <span class="string">"H5"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(address,className);   <span class="comment">//北京市 H5</span></span><br></pre></td></tr></table></figure></p><p><strong><code>语法说明</code></strong> <code>var name_1 [ = value1][,...,name_n [ = value_n]]]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*声明示例*/</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'&lt;strong&gt;&lt;/strong&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> p,q;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>,y = <span class="number">3</span>,z;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*示例说明</span></span><br><span class="line"><span class="comment">* JavaScript中的=和数学中的=不一样，在JavaScript中=是赋值运算符。</span></span><br><span class="line"><span class="comment">* var a = '&lt;strong&gt;&lt;/strong&gt;';  这句话分成两个部分。</span></span><br><span class="line"><span class="comment">* 左值 ：在等号左侧，是变量名（同时被赋值）</span></span><br><span class="line"><span class="comment">* 右值 ：在等号右侧，是存放进变量中的东西（给变量赋值）</span></span><br><span class="line"><span class="comment">* 备注 ：使用var关键字多次声明同一个变量是无所谓的(正确、无意义也不报错)。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">命名规范</span></p><p><strong>标识符</strong> 标识符(<code>identifier</code>)指的是JavaScript代码中变量、函数、属性的名字，或者函数的参数。标识符(变量)在命名的时候并不能随心所欲，也有对应的规则和要求。下面列出具体的命名规范：</p><blockquote><p>① 标识符可以使用下划线、字母、数字和$符号。<br>② 标识符不能以数字开头。<br>③ 标识符区分大小写(区别于HTML)。<br>④ 标识符不能使用JavaScript的关键字和保留字。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 常见(合法)的标识符命名方式*/</span></span><br><span class="line"><span class="comment">/*纯字母*/</span></span><br><span class="line"><span class="keyword">var</span> age  = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"wendingding"</span>;</span><br><span class="line"><span class="keyword">var</span> stuAge  = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> stuName = <span class="string">"宁夏"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字母、数字、下划线、$的组合*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1.5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> num$ = num1 + num2;</span><br><span class="line"><span class="keyword">var</span> stu_Score = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 错误的命名演示*/</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">if</span> = <span class="number">123</span>;               <span class="comment">//错误：使用关键字</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">super</span> =  <span class="string">"哈哈哈"</span>        <span class="comment">//错误：使用保留字</span></span><br><span class="line"><span class="keyword">var</span> <span class="number">2</span>age = <span class="number">123</span>;             <span class="comment">//错误：数字开头</span></span><br><span class="line"><span class="keyword">var</span> stu-address = <span class="string">"北京市"</span>;  <span class="comment">//错误：使用了非法的-</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">命名风格</span></p><p>JavaScript语言常用的标识符命名风格是<code>驼峰标识法(camel-case)</code>，即标识符的名称由多个单词组合的时候，每个单词的首字母大写以区分。驼峰标识又可以分成大驼峰标识和小驼峰标识，它们的区别在于整个标识符的首字母需要大写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小驼峰标识 var wenDingDing  = &quot;神秘人&quot;;</span><br><span class="line">大驼峰标识 var WenDingDing  = &quot;神秘人&quot;;</span><br></pre></td></tr></table></figure><p>当然，在写代码的时候给标识符命名并非一定要使用驼峰标识，这只是一种建议的风格，譬如有的开发者就喜欢用下划线来连接单词，类似于<a href="">wen_ding_ding</a>、<a href="">stu_Name</a>这样。类似的还有匈牙利命名法等，但在JavaScript编程中不建议使用。</p><p><strong><code>JavaScript规定的关键字</code></strong> 关键字通常用于执行特定的操作。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base05.png?raw=true" width="600px"></p><p><strong><code>JavaScript规定的保留字</code></strong> 保留字是给语言未来发展而预留的。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base06.png?raw=true" width="600px"></p><div class="titleX"><strong>数据类型</strong></div><blockquote><p>在编程语言中，能够表示并操作的值的类型被称为数据类型(<code>type</code>)，能够支持多种数据类型是每一门编程语言的基本特征。在编写程序的时候，如果我们需要将某个(些)值保存起来以备将来使用时，就会将该 <strong>值</strong> <code>赋值</code>给一个<code>变量</code>(将值保存到变量中)。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base02.png?raw=true"></p><p>JavaScript语言的数据类型可以简单的分成<code>基本(简单)类型</code>和<code>复杂(复合)类型</code>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base03.png?raw=true" height="200px"></p><p>基本类型主要包括：<code>字符串(string)</code>、<code>数值(number)</code>、<code>布尔值(boolean)</code>、<code>Null</code>和<code>undefined</code>五种。其中Null类型有一个值，即<a href="">null</a>表示为空，而undefined类型也只有一个对应值<a href="">undefined</a>，表示变量未定义(即声明变量后未给变量赋值)。</p><p>复杂类型主要是对象类型，包括Object对象、Function函数、RegExp正则等，这里不做具体的展开。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">typeof关键字</span></p><p>如果我们需要判断变量的类型，那么可以使用<span style="color:red"> typeof 关键字(操作符)</span>。</p><p><strong><code>语法</code></strong> <code>typeof 变量  |  typeof(变量)</code><br><strong><code>结果</code></strong> typeof 关键字执行后的结果总是为一个string类型的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*多种类型的变量*/</span></span><br><span class="line"><span class="keyword">var</span> age   = <span class="number">18</span>;                     <span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">var</span> name  = <span class="string">"宁夏"</span>;                  <span class="comment">//字符串类型</span></span><br><span class="line"><span class="keyword">var</span> isFun = <span class="literal">true</span>;                   <span class="comment">//布尔类型值</span></span><br><span class="line"><span class="keyword">var</span> a;                              <span class="comment">//未定义</span></span><br><span class="line"><span class="keyword">var</span> obj   = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">desc</span>:<span class="string">"描述信息"</span>&#125;;   <span class="comment">//Object类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我是fn函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);            <span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> name);           <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> isFun);          <span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);              <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);            <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*typeof的两种使用方式*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);             <span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(fn));            <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);            <span class="comment">//object</span></span><br></pre></td></tr></table></figure></p><p><strong><code>注意</code></strong> 对null执行typeof计算的结果为object,其实这被认为是JavaScript这门语言的一个设计错误。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">字符串类型</span></p><p><strong><code>定义</code></strong> 由〇个或多个16位Unicode字符组成的字符序列。<br><strong><code>表示</code></strong> 字符串可以由双引号或单引号表示。<br><strong><code>操作</code></strong> 可以通过length属性来获取字符串的长度，且多个字符串之间可以通过 + 来进行拼接。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hi ~"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Wendingding!"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = str1 + <span class="string">" "</span> +str2;    <span class="comment">/*字符串的拼接 */</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);              <span class="comment">/*输出结果：Hi ~ Wendingding!*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.length);       <span class="comment">/*输出结果：17 */</span></span><br></pre></td></tr></table></figure></p><p><strong><code>注意</code></strong> JavaScript中的字符串是不可变的，这也就意味着要改变某个变量保存的字符串，那么需要先销毁原来的字符串然后再用另外一个包含新值的字符串来填充该变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">'Hi ! '</span>;</span><br><span class="line">test = test + <span class="string">'Nice to meet u ~'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test);  <span class="comment">//Hi ! Nice to meet u ~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*描述上述代码的内部执行细节</span></span><br><span class="line"><span class="comment">* 说明：上述示例代码中 test变量的值最开始时为Hi ！，而后变成了Hi ! Nice to meet u ~   </span></span><br><span class="line"><span class="comment">*      但这并不意味着字符串是可变的，要想理解这一点需要把变量和字符串区分开来。</span></span><br><span class="line"><span class="comment">* 上述第二行代码的实现过程为(整个过程在浏览器后台处理)：</span></span><br><span class="line"><span class="comment">* [1] 先创建一个能容纳21位字符的新字符串。</span></span><br><span class="line"><span class="comment">* [2] 在新创建的字符串中填充Hi ! 和 Nice to meet u ~内容。</span></span><br><span class="line"><span class="comment">* [3] 销毁原先的Hi ! 和 Nice to meet u ~ 字符串，因为它们没用了。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">布尔类型</span></p><p><strong><code>说明</code></strong> 布尔类型用来表示正确和错误两种状态(同灯泡有开和关两种状态一样)。<br><strong><code>取值</code></strong> 布尔类型(boolean)只有两个值，分别是true和false。<br><strong><code>注意</code></strong> 布尔类型常用于条件表达式，布尔类型的值和字符串以及数值等可以相互转换。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">undefined类型</span> </p><p>undefined类型的值也只有一个，那就是<code>undefined</code>。我们在使用var来声明变量，但是没有对该变量进行初始化的时候，变量的值就为undefined，表示未定义。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">Null类型</span>  </p><p>Null类型的值只有一个，那就是<code>null(关键字)</code>，通常表示空对象指针。<br>注意 ① <span style="color:red">typeof null 的结果为 object 而非 null</span>。<br>注意 ② 实际上，undefined的值派生自null，因此ECMA-262规定它们的相等性测试需要返回true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 布尔类型值*/</span></span><br><span class="line"><span class="keyword">var</span> boolA = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> boolB = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 声明变量但未赋值(未定义)*/</span></span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 设置变量的值为null*/</span></span><br><span class="line"><span class="keyword">var</span> boolA = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(boolA);               <span class="comment">//null 表示空对象</span></span><br><span class="line"><span class="built_in">console</span>.log(test);                <span class="comment">//undefined 未定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04 测试undefined和null*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数值类型</span></p><p><strong><code>定义</code></strong> 数值简单说就是数字，在JavaScript语言中数值类型包含整数和浮点数(小数)。<br><strong><code>小数</code></strong> 浮点数就是小数，数值中必须包含一个小数点，小数点后面必须至少有一位数字。<br><strong><code>备注</code></strong> 实际上JavaScript内部并不直接区分整数值和浮点数值，其所有数字均用浮点数值表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 数值的两种类型*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span>;       <span class="comment">/*整型-数据1*/</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">4.0075e7</span>;  <span class="comment">/*整型-数据2  科学计数发*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*浮点数特点：数值中必须包含一个小数点，小数点后面必须至少有一位数字。*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum1 = <span class="number">8.26</span>;  <span class="comment">/*浮点型-数据1*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum2 = <span class="number">1.1</span>;   <span class="comment">/*浮点型-数据2*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum3 = <span class="number">0.5</span>;   <span class="comment">/*浮点型-数据3*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum4 = <span class="number">.8</span>;    <span class="comment">/*浮点型-数据4-不建议*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum5 = <span class="number">3.2e-4</span>;<span class="comment">/*浮点型-数据4 科学计数法*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 整数和浮点数的默认转换*/</span></span><br><span class="line"><span class="keyword">var</span> intNum1 = <span class="number">10.0</span>;  <span class="comment">/*整数，解析为10*/</span></span><br><span class="line"><span class="keyword">var</span> intNum2 = <span class="number">2.</span>;    <span class="comment">/*整数，解析为2*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 03  浮点数注意点</span></span><br><span class="line"><span class="comment"> * 001 默认，当小数点后面超过6个0，则以科学计数法的方式来表示。</span></span><br><span class="line"><span class="comment"> * 002 浮点数值的最高精度为17位小数，但算术运算时其精度不如整数。</span></span><br><span class="line"><span class="comment"> * 003 JavaScript使用基于IEEE754数值的浮点格式表示，计算因此存在舍入误差问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong><code>进制</code></strong> JavaScript中的数值类型支持多种进制，包括二进制、八进制、十进制和十六进制等。<br><strong><code>说明</code></strong> 在进行算术运算时，所有<a href="">八进制、十六进制的数据最终都会转换为十进制的数据</a>。<br><strong><code>特点</code></strong> 八进制的特点是数字以 <code>0</code> 开头，十六进制则以 <code>0x</code> 或 <code>0X</code> 开头。<br><strong><code>补充</code></strong> 实际上ECMAScript并不支持八进制直接量，且严格模式下八进制直接量被禁止，因此不建议用。十六进制值是<a href=""> 0 ~ 9之间的数字和a(A) ~ f(F)之间的字母 </a>构成，字母对应的数字为10~15。此外，我们还可以通过调用<code>toString</code>方法传递参数的方式来实现进制的转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*进制的转换  通过toString方法*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">17</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);              <span class="comment">//默认以十进制的方式打印(数字)  17</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString());   <span class="comment">//默认以十进制的方式打印(字符串)</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">2</span>));  <span class="comment">//设置以二进制的方式打印(字符串) 10001</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">8</span>));  <span class="comment">//设置以八进制的方式打印(字符串) 21</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">16</span>)); <span class="comment">//设置是十六进制的方式打印(字符串)11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二进制、八进制、16进制的数据*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">070</span>);   <span class="comment">//8进制的数据   对应的十进制值为56</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0x11</span>);  <span class="comment">//16进制的数据  对应的十进制数值为17</span></span><br></pre></td></tr></table></figure><p><strong><code>NaN</code></strong> 全称<code>Not a Number</code>(非数值)，NaN用于表示本来要返回数值的操作数而实际未返回的情况。</p><blockquote><p>① 任何涉及NaN的操作都会返回NaN。<br>② <span style="color:red">NaN与任何值都不相等，包括NaN自身</span>。</p></blockquote><p><strong>说明</strong> 上面列出了NaN的两个特点，针对NaN的这两个特点，ECMAScript提供了<a href="">isNaN() 函数</a>。isNaN()函数接收一个参数，该参数可以是任何类型的，该函数在执行的时候会尝试把参数转换为数值，如果参数不能被转换为数值(转换失败)，那么返回true，否则返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"20.3"</span>));   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"5red"</span>));   <span class="comment">//true   无法转换为数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>));     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"red"</span>));    <span class="comment">//true   无法转换为数值</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>二进制浮点数的误差问题</strong> JavaScript在使用数字(实数)的时候，常常只是真实值的一个近似表示。原因就在于JavaScript采用的是<a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE-754浮点数表示法</a>(这是一种二进制浮点数表示法),这种表示法可以精确地表示分数，比如1/2、1/8和1/1024等，而我们开发中常用的反而都是十进制分数，比如1/10、1/100等，神奇的地方就在于这种表示法无法精确的表示类似于0.1 、0.2和0.3这种简单的数字。正是因为上面的原因，所以JavaScript语言中才会存在奇葩的 <a href="http://0.30000000000000004.com/" target="_blank" rel="noopener">0.1 + 0.2 == 0.3</a> 不成立的问题。</p></blockquote><div class="titleX"><strong>类型的转换</strong></div><p>在JavaScript的基本数据类型中，字符串、数值以及其他类型之间是可以相互转换的，而这种转换大概又可以细分成两种，其一是在进行算术运算时默认会执行的<strong><code>自动转换</code></strong>，其二就是<strong><code>强制转换</code></strong>了。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base04.png?raw=true" height="220px"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">类型间的强制转换</span>  </p><p>强制类型转换需要用到一些特定的函数，这些函数可以是<code>Number()</code>、<code>Bumber()</code>、<code>String()</code>也可以是<code>parseInt()</code>、<code>parseFloat()</code>、<code>toString()</code>等，下面将通过代码来演示它们的具体使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 Number(构造)函数把其它类型转换为数值*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>));         <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>));   <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"miaoXia"</span>));   <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"18blue"</span>));    <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"18"</span>));        <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>));        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>));       <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-1 String函数用于把其它类型转换为字符串*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">null</span>));       <span class="comment">//"null"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">undefined</span>));  <span class="comment">//"undefined"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">123</span>));        <span class="comment">//"123"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">21.5</span>));       <span class="comment">//"21.5"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">-0</span>));         <span class="comment">//"0"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">true</span>));       <span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">false</span>));      <span class="comment">//"false"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-2 toString函数</span></span><br><span class="line"><span class="comment">* a、其实其它类型的值直接调用toString方法也能强转为字符串</span></span><br><span class="line"><span class="comment">* b、toString方法可以接收一个参数，该参数用于表示转换时的进制数</span></span><br><span class="line"><span class="comment">* c、如果toString方法的参数缺省，那么默认采用的十进制</span></span><br><span class="line"><span class="comment">* d、null和undefined值无法调用toString方法</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">123</span>).toString());  <span class="comment">//"123"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>.toString());   <span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>.toString());  <span class="comment">//"false"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>.toString());    <span class="comment">//"NaN"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 Boolean函数用于将其它类型转换为字符串*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"Nice"</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">" "</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">123</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));        <span class="comment">//fasle</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>));      <span class="comment">//fasle</span></span><br></pre></td></tr></table></figure><p>在上面的代码示例中Number函数用于将其他类型的数据转换成数字，而<code>parseInt()</code>和<code>parseFloat()</code>函数相对于Number()函数而言更加灵活。</p><p><code>parseInt()</code>函数用于解析整数，如果字符串前缀是0x或0X，则将会被解析为十六进制数。解析规则为：<a href="">跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略数字后面的内容，如果第一个非空格字符是非法的数字直接量，将最终返回NaN</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*parseInt()基本使用*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">" 123"</span>));        <span class="comment">//123 忽略前面的N个空格</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123"</span>));         <span class="comment">//123</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123.59"</span>));      <span class="comment">//123 仅解析为整数</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"-13.14"</span>));      <span class="comment">//-13</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"826 Birthday"</span>));<span class="comment">//826</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"Birthday826"</span>))  <span class="comment">//NaN</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"0.1"</span>))          <span class="comment">//0</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">".1"</span>))           <span class="comment">//NaN 整数不能以.开头</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"0xff"</span>))         <span class="comment">//255 以十六进制来解析</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"071"</span>));         <span class="comment">//71  十进制处理(非八进制)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>parseInt()</code> 被定义为<code>declare function parseInt(s: string, radix?: number): number;</code> 该函数的第一个参数为字符串，它还可以接收第二个参数用于指定数字转换的进制基数，合法的取值范围是2~36。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"111"</span>,<span class="number">2</span>));       <span class="comment">// 7  = 1 * 2 * 2 + 1 * 2 + 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"aa"</span>,<span class="number">16</span>));       <span class="comment">//170 = 10 * 16 + 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"076"</span>,<span class="number">8</span>));       <span class="comment">//62  = 7 * 8 + 6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"077"</span>,<span class="number">10</span>));      <span class="comment">//77</span></span><br></pre></td></tr></table></figure><p><code>parseFloat()</code>函数用于解析浮点数。解析规则为：<a href="">跳过任意数量的前导空格，检索纯数字字符串后面第一个.后的不为数字的字符，并对之前所有的结果进行返回，如果第一个非空格字符是非法的数字直接量，将最终返回NaN，如果没有.则以整数解析的方式处理</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*parseFloat()基本使用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 123"</span>));            <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 123.55"</span>));         <span class="comment">//123.55</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 8.26 Birthday"</span>));  <span class="comment">//8.26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" Birthday 8.26"</span>));  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0.1"</span>));             <span class="comment">//0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">".1"</span>));              <span class="comment">//0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0xff"</span>));            <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"abc 12.5"</span>));        <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"$12.5"</span>));           <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base10.png?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍javaScript最基础的知识点，包括但不限于JavaScript的简单介绍、历史、引入方式、变量、标识符命名规范、数据类型以及操作符等内容。&lt;/div&gt;

&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;JavaScript
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据安全系列 OpenSSL</title>
    <link href="https://weibo.com/u/3800117445/2019/02/23/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20OpenSSL/"/>
    <id>https://weibo.com/u/3800117445/2019/02/23/数据安全系列 OpenSSL/</id>
    <published>2019-02-22T17:00:00.000Z</published>
    <updated>2019-02-24T10:28:22.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文对密码学中常用的底层库OpenSSL进行简单说明，包括基本介绍、简单使用等内容。</p></blockquote><div class="titleX"><strong>简单介绍</strong></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>是密码学中一个流行的底层密码库，也是SSL和TLS最常见的开源实现。</p><div class="tip"><br><div><strong><code>SSL</code></strong>全称为<code>Secure  Sockets   Layer</code>，<strong>安全套接层协议</strong>( 对网络连接进行加密处理 )。</div><br><div><strong><code>TLS</code></strong>全称为<code>Transport Layer Security</code>，<strong>安全传输层协议</strong>( 由记录协议和握手协议组成 )。</div><br></div><p>SSL协议由<code>Netscape</code>(网景)公司开发，因为应用广泛，到了1999年SSL已经成为互联网上的事实标准。同年，<code>IETF把SSL标准化后改名为TLS，它建立在SSL 3.0协议规范上，是SSL的后续版本</code>。 TLS 和 SSL，两者差别极小，可以简单看做是同一个东西的两个不同阶段。</p><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>是由一些志愿者合作开发的开源工具库，其目标是开发一个强壮的、具有完备功能的商业级工具集，以实现SSL 和 TLS协议以及一个全功能的通用加密库。OpenSSL主要以C语言实现，目前最新稳定版本为2018年9月11日发布的<code>1.1.1版本</code>。</p><p><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> OpenSSL </strong>的主要组成</span></p><div><br>❏  <div class="liYY"><strong>openssl</strong></div>  多用途的命令行工具。<br>❏  <div class="liYY"><strong>libcrypto</strong></div> 常用加密算法库。<br>❏  <div class="liYY"><strong>libssl</strong></div>   实现了SSL及TLS的加密模块应用库。<br></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>支持许多不同的加密算法：其中包括但不限于<strong>单向散列函数</strong>的 <a href="https://zh.wikipedia.org/wiki/MD5" target="_blank" rel="noopener">MD5</a>、<a href="https://zh.wikipedia.org/wiki/MD4" target="_blank" rel="noopener">MD4</a>、MD2、<a href="https://zh.wikipedia.org/wiki/SHA-1" target="_blank" rel="noopener">SHA-1</a>、<a href="https://zh.wikipedia.org/wiki/SHA-2" target="_blank" rel="noopener">SHA-2</a>、<a href="https://zh.wikipedia.org/wiki/SHA-3" target="_blank" rel="noopener">SHA-3</a>、RIPEMD-160、MDC-2、GOST R 34.11-94、BLAKE2、Whirlpool、SM3等算法，<strong>对称加密</strong>有 <a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener">AES</a>、Blowfish、Camellia、Chacha20、Poly1305、SEED、CAST-128、<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener">DES</a>、IDEA、RC2、RC4、<a href="https://zh.wikipedia.org/wiki/RC5" target="_blank" rel="noopener">RC5</a>、SM4、TDES、GOST 28147-89等算法，以及<strong>非对称加密</strong>的 <a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">RSA</a>、DSA、迪菲-赫尔曼密钥交换、椭圆曲线、SM2、X25519、Ed25519、X448、Ed448、GOST R 34.10-2001等算法。</p><p><strong>参考资料</strong> </p><p><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL官网</a><br><a href="https://zh.wikipedia.org/wiki/OpenSSL" target="_blank" rel="noopener">OpenSSL 维基百科</a><br><a href="https://github.com/openssl" target="_blank" rel="noopener">OpenSSL GitHub组织</a><br><a href="https://www.cnblogs.com/eshizhan/p/4988105.html" target="_blank" rel="noopener">OpenSSL Command-Line HOWTO</a><br><a href="https://oomake.com/download/openssl" target="_blank" rel="noopener">OpenSSL 版本下载地址①</a> &nbsp;<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">OpenSSL 版本下载地址②</a></p><div class="titleX"><strong>opsnssl 命令行简单说明</strong></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> 的安装</strong></p><p>通常，很多操作系统都会默认安装OpenSSL 工具，我们可以通过在终端中输入<code>openssl version</code>命令来查看和进行验证。</p><p class="tip">早些年，Mac OSX默认自带安装 OpenSSL库，但是因为OpenSSL“心脏病失血”事件，Mac OSX 自 10.11 El Capitan 起，原本默认安装的 OpenSSL 被替换为 LibreSSL 。除Mac外，其它使用LibreSSL 取代 OpenSSL的系统还有 <strong>OpenBSD</strong> (<code>5.6 +</code>)和 <strong>Alpine Linux</strong> (<code>3.5.0 +</code>) 等。<br></p><p>我当前使用的是Mac OSX 系统10.13.3 版本，在终端中输入<code>openssl version</code>命令 可以看到本地显示的是<strong> LibreSSL </strong>的版本，为<code>LibreSSL 2.2.7</code>。<strong>LibreSSL</strong> 是 OpenBSD 开发者在 OpenSSL 爆出心脏出血漏洞之后 fork 的一个分支，旨在提供一个比 OpenSSL 更安全的替代品，更详细的信息可以参考<a href="https://hltj.me/security/2017/05/26/libressl-instead-openssl.html" target="_blank" rel="noopener">扔掉 OpenSSL，拥抱 LibreSSL</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl version</span><br><span class="line">LibreSSL 2.2.7</span><br><span class="line">wendingding$ which openssl</span><br><span class="line">/usr/bin/openssl</span><br></pre></td></tr></table></figure><p><strong>说明</strong> 上面的命令用于检查和验证当前系统中使用的openssl的版本和路径(位置)。<strong>LibreSSL</strong>可以理解为更安全的<strong>OpenSSL</strong>，使用方式几乎一致，接下来我就以电脑中已经安装的<code>LibreSSL 2.2.7</code>版本为例进行说明。在终端查看(输入任意无效命令)该工具支持的所有命令，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">wendingding:openssl wendingding$ openssl help</span><br><span class="line">openssl:Error: &apos;help&apos; is an invalid command.</span><br><span class="line"></span><br><span class="line">Standard commands</span><br><span class="line">asn1parse         ca                certhash          ciphers           </span><br><span class="line">crl               crl2pkcs7         dgst              dh                </span><br><span class="line">dhparam           dsa               dsaparam          ec                </span><br><span class="line">ecparam           enc               engine            errstr            </span><br><span class="line">gendh             gendsa            genpkey           genrsa            </span><br><span class="line">nseq              ocsp              passwd            pkcs12            </span><br><span class="line">pkcs7             pkcs8             pkey              pkeyparam         </span><br><span class="line">pkeyutl           prime             rand              req               </span><br><span class="line">rsa               rsautl            s_client          s_server          </span><br><span class="line">s_time            sess_id           smime             speed             </span><br><span class="line">spkac             ts                verify            version           </span><br><span class="line">x509              </span><br><span class="line"></span><br><span class="line">Message Digest commands (see the `dgst&apos; command for more details)</span><br><span class="line">gost-mac          md4               md5               md_gost94         </span><br><span class="line">ripemd160         sha               sha1              sha224            </span><br><span class="line">sha256            sha384            sha512            streebog256       </span><br><span class="line">streebog512       whirlpool         </span><br><span class="line"></span><br><span class="line">Cipher commands (see the `enc&apos; command for more details)</span><br><span class="line">aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb       </span><br><span class="line">aes-256-cbc       aes-256-ecb       base64            bf                </span><br><span class="line">bf-cbc            bf-cfb            bf-ecb            bf-ofb            </span><br><span class="line">camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  camellia-192-ecb  </span><br><span class="line">camellia-256-cbc  camellia-256-ecb  cast              cast-cbc          </span><br><span class="line">cast5-cbc         cast5-cfb         cast5-ecb         cast5-ofb         </span><br><span class="line">chacha            des               des-cbc           des-cfb           </span><br><span class="line">des-ecb           des-ede           des-ede-cbc       des-ede-cfb       </span><br><span class="line">des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb      </span><br><span class="line">des-ede3-ofb      des-ofb           des3              desx              </span><br><span class="line">rc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc           </span><br><span class="line">rc2-cfb           rc2-ecb           rc2-ofb           rc4               </span><br><span class="line">rc4-40</span><br></pre></td></tr></table></figure><p>通过上面列出的庞大的可选命令项，不难看出OpenSSL工具的强大和庞大，如果需要获取指定算法的帮助信息，只需要在终端输入<code>openssl 算法名称 --help</code>形式的命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl enc -help</span><br><span class="line">usage: enc -ciphername [-AadePp] [-base64] [-bufsize number] [-debug]</span><br><span class="line">    [-engine id] [-in file] [-iv IV] [-K key] [-k password]</span><br><span class="line">    [-kfile file] [-md digest] [-none] [-nopad] [-nosalt]</span><br><span class="line">    [-out file] [-pass arg] [-S salt] [-salt]</span><br><span class="line"></span><br><span class="line"> -A                 Process base64 data on one line (requires -a)</span><br><span class="line"> -a                 Perform base64 encoding/decoding (alias -base64)</span><br><span class="line"> -bufsize size      Specify the buffer size to use for I/O</span><br><span class="line"> -d                 Decrypt the input data</span><br><span class="line"> -debug             Print debugging information</span><br><span class="line"> -e                 Encrypt the input data (default)</span><br><span class="line"> -engine id         Use the engine specified by the given identifier</span><br><span class="line"> -in file           Input file to read from (default stdin)</span><br><span class="line"> -iv IV             IV to use, specified as a hexidecimal string</span><br><span class="line"> -K key             Key to use, specified as a hexidecimal string</span><br><span class="line"> -md digest         Digest to use to create a key from the passphrase</span><br><span class="line"> -none              Use NULL cipher (no encryption or decryption)</span><br><span class="line"> -nopad             Disable standard block padding</span><br><span class="line"> -out file          Output file to write to (default stdout)</span><br><span class="line"> -P                 Print out the salt, key and IV used, then exit</span><br><span class="line">                      (no encryption or decryption is performed)</span><br><span class="line"> -p                 Print out the salt, key and IV used</span><br><span class="line"> -pass source       Password source</span><br><span class="line"> -S salt            Salt to use, specified as a hexidecimal string</span><br><span class="line"> -salt              Use a salt in the key derivation routines (default)</span><br><span class="line"> -v                 Verbose</span><br><span class="line"></span><br><span class="line">Valid ciphername values:</span><br><span class="line"></span><br><span class="line"> -aes-128-cbc              -aes-128-cfb              -aes-128-cfb1            </span><br><span class="line"> -aes-128-cfb8             -aes-128-ctr              -aes-128-ecb             </span><br><span class="line"> -aes-128-gcm              -aes-128-ofb              -aes-128-xts             </span><br><span class="line"> -aes-192-cbc              -aes-192-cfb              -aes-192-cfb1            </span><br><span class="line"> -aes-192-cfb8             -aes-192-ctr              -aes-192-ecb             </span><br><span class="line"> -aes-192-gcm              -aes-192-ofb              -aes-256-cbc             </span><br><span class="line"> -aes-256-cfb              -aes-256-cfb1             -aes-256-cfb8            </span><br><span class="line"> -aes-256-ctr              -aes-256-ecb              -aes-256-gcm             </span><br><span class="line"> -aes-256-ofb              -aes-256-xts              -aes128                  </span><br><span class="line"> -aes192                   -aes256                   -bf                      </span><br><span class="line"> -bf-cbc                   -bf-cfb                   -bf-ecb                  </span><br><span class="line"> -bf-ofb                   -blowfish                 -camellia-128-cbc        </span><br><span class="line"> -camellia-128-cfb         -camellia-128-cfb1        -camellia-128-cfb8       </span><br><span class="line"> -camellia-128-ecb         -camellia-128-ofb         -camellia-192-cbc        </span><br><span class="line"> -camellia-192-cfb         -camellia-192-cfb1        -camellia-192-cfb8       </span><br><span class="line"> -camellia-192-ecb         -camellia-192-ofb         -camellia-256-cbc        </span><br><span class="line"> -camellia-256-cfb         -camellia-256-cfb1        -camellia-256-cfb8       </span><br><span class="line"> -camellia-256-ecb         -camellia-256-ofb         -camellia128             </span><br><span class="line"> -camellia192              -camellia256              -cast                    </span><br><span class="line"> -cast-cbc                 -cast5-cbc                -cast5-cfb               </span><br><span class="line"> -cast5-ecb                -cast5-ofb                -chacha                  </span><br><span class="line"> -des                      -des-cbc                  -des-cfb                 </span><br><span class="line"> -des-cfb1                 -des-cfb8                 -des-ecb                 </span><br><span class="line"> -des-ede                  -des-ede-cbc              -des-ede-cfb             </span><br><span class="line"> -des-ede-ofb              -des-ede3                 -des-ede3-cbc            </span><br><span class="line"> -des-ede3-cfb             -des-ede3-cfb1            -des-ede3-cfb8           </span><br><span class="line"> -des-ede3-ofb             -des-ofb                  -des3                    </span><br><span class="line"> -desx                     -desx-cbc                 -gost89                  </span><br><span class="line"> -gost89-cnt               -gost89-ecb               -id-aes128-GCM           </span><br><span class="line"> -id-aes192-GCM            -id-aes256-GCM            -rc2                     </span><br><span class="line"> -rc2-40-cbc               -rc2-64-cbc               -rc2-cbc                 </span><br><span class="line"> -rc2-cfb                  -rc2-ecb                  -rc2-ofb                 </span><br><span class="line"> -rc4</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>opsnssl + 单向散列函数应用</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 单向散列函数的特点</strong></span></p><blockquote><p><strong>① 散列计算后的密文是定长的。</strong><br><strong>② 明文相同，密文一定相同。</strong><br><strong>③ 明文不同，密文一定不同。</strong><br><strong>④ 计算过程不可逆，算法公开，效率高性能好。</strong></p></blockquote><p><strong>经典加密算法</strong> MD5加密 、SHA1 和 SHA512等<br><strong>散列函数进阶</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）先加盐，然后再进行MD5</span><br><span class="line">2）先乱序，再进行MD5加密</span><br><span class="line">3）乱序 | 加盐，多次MD5加密等</span><br><span class="line">4）使用消息认证机制，即HMAC-MD5-先对密钥进行加密，加密之后进行两次MD5散列</span><br></pre></td></tr></table></figure></p><p><code>001 对字符串进行简单的MD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; | md5</span><br><span class="line">d661517da45e21c9d180ad50ffcdf18d</span><br></pre></td></tr></table></figure></p><p><code>002 对任意的文件进行MD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ ls -a</span><br><span class="line">..DS_StoreAllNodeVue</span><br><span class="line">..123.pngCanvasOther</span><br><span class="line">wendingding$ md5 123.png </span><br><span class="line">MD5 (123.png) = 2feeda7a43bc96b94fa0fbe64673a593</span><br></pre></td></tr></table></figure></p><p><code>003 使用sha家族算法来对字符串进行加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha1</span><br><span class="line">(stdin)= 13fb6a32c9876c0b4aa05c5e930ff9332f84c62d</span><br><span class="line"></span><br><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha256</span><br><span class="line">(stdin)= a3c02021d3630ec36fd07c4f14236cac691f499bc47428a245e8618319d812df</span><br><span class="line"></span><br><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha512</span><br><span class="line">(stdin)= 9b4c77e0e1a99b99fc46bfa58dab5070d707b84384a8659c69b19442d1d19490cf63b145b645c7</span><br><span class="line">a7fe42ffba9a3bff800911f5957bc6a0a219b708c6c2dc9c2c</span><br></pre></td></tr></table></figure></p><p><code>004 对字符串应用hmacMD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; |openssl dgst -md5 -hmac &quot;123&quot;</span><br><span class="line">(stdin)= 82fce83fe44d72969f69565f3b16d3e9</span><br></pre></td></tr></table></figure></p><p class="tip"><br>消息认证机制（HMAC）原理是：消息的发送者和接收者有一个共享密钥，发送者使用共享密钥对消息加密计算得到MAC值，消息接收者使用共享密钥对消息加密计算得到MAC值，比较两个MAC值是否一致。在具体使用的时候，客户端需要在发送的时候把<code>（消息）+（消息·HMAC）</code>打包发送给服务器，服务器接收到数据后，对拿到的消息用共享的KEY进行HMAC，比较是否一致，如果一致则信任。<br></p><p><div class="titleX"><strong>opsnssl + 对称加密算法</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 对称加密算法的特点</strong></span></p><blockquote><p><strong>① 加密/解密使用相同的密钥。</strong><br><strong>② 加密和解密的过程是可逆的。</strong><br><strong>③ 效率高、性能好，但是存在密钥传输安全问题。</strong></p></blockquote><p><strong>经典加密算法</strong> DES、3DES 和 AES 等</p><p><code>001 AES-ECB加密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ mkdir openssl</span><br><span class="line">wendingding$ cd openssl/</span><br><span class="line">wendingding$ echo &quot;测试的字符串-des加密&quot; &gt;&gt; 123.txt</span><br><span class="line">wendingding$ cat 123.txt </span><br><span class="line">测试的字符串-des加密</span><br><span class="line">wendingding$ ls -a</span><br><span class="line">...123.txt</span><br><span class="line">wendingding$ openssl enc -des-ecb -K 616263 -nosalt -in 123.txt -out 123.bin</span><br><span class="line">wendingding:openssl wendingding$ ls -a</span><br><span class="line">...123.bin123.txt</span><br></pre></td></tr></table></figure></p><p><code>002 AES-ECB解密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl enc -des-ecb -K 616263 -nosalt -in 123.bin -out 123_new.txt -d</span><br><span class="line">wendingding$ cat 123_new.txt </span><br><span class="line">测试的字符串-des加密</span><br></pre></td></tr></table></figure></p><blockquote><p>密码算法可以分为分组密码和流密码两种。 </p></blockquote><p><strong><code>分组密码</code></strong>的特点是在解密和解密时，每次只能处理特定长度的一组数据，一个分组的比特数量就称之为分组长度。DES 和 3DES 的分组长度都是64比特，也就是每次只能加密64比特的明文，并生成64比特的密文。AES 的分组长度有128比特、192比特和256比特可以选择。</p><p><strong><code>流密码</code></strong>的特点是加密和解密时会对数据流进行连续处理。流密码中一般以1比特、8比特或者是32比特等作为单位俩进行加密和解密。</p><p class="tip"> <strong>备注</strong> 分组密码算法在具体实现的时候，又有很多的分组模式可以选择。常见的分组模式有 ECB 和 CBC 等。ECB模式的全称为 <code>Electronic CodeBook</code>模式，CBC模式全称为 <code>Cipher Block Chainning</code>模式，它的特点是分组后先将明文分组与前一个密文分组进行XOR运算，然后再进行加密。关于CBC和ECB的具体细节可以参考<a href="http://wendingding.com/2018/08/02/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E9%87%8A%E4%B9%89/" target="_blank" rel="noopener">数据安全系列 术语</a>这篇文章。</p><p><code>003 AES-CBC加密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;测试aes-cbc&quot; &gt;&gt; a.txt</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txt</span><br><span class="line">..123.txta.txt</span><br><span class="line">$ openssl enc -des-cbc -K 616263 -iv 0102030405060708 -nosalt -in a.txt -out a.bin</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txta.txt</span><br><span class="line">..123.txta.bin</span><br></pre></td></tr></table></figure></p><p><code>004 AES-CBC解密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -des-cbc -K 616263 -iv 0102030405060708 -nosalt -in a.bin -out a_new.txt -d</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txta.txt</span><br><span class="line">..123.txta.bina_new.txt</span><br><span class="line">$ cat a_new.txt </span><br><span class="line">测试aes-cbc</span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 上文命令行中的<code>-iv 0102030405060708</code>是CBC分组模式需要使用到的初始向量值。</p><p><div class="titleX"><strong>opsnssl + 非对称加密算法</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 非对称加密算法的特点</strong></span></p><blockquote><p><strong>① 加密的时候使用公钥，解密的时候使用私钥。</strong><br><strong>② 公钥是公开的，私钥是绝对保密的。</strong><br><strong>③ 效率不高，性能不好，可能会遭遇中间人攻击。</strong></p></blockquote><p><strong>经典加密算法</strong> RSA</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">这里简单介绍RSA算法的原理和小示例</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] RSA 原理</span><br><span class="line">        （<span class="number">1</span>）求N，准备两个质数p和q,N = p x q</span><br><span class="line">        （<span class="number">2</span>）求L,L是p<span class="number">-1</span>和q<span class="number">-1</span>的最小公倍数。L = lcm（p<span class="number">-1</span>,q<span class="number">-1</span>）</span><br><span class="line">        （<span class="number">3</span>）求E，E和L的最大公约数为<span class="number">1</span>（E和L互质）</span><br><span class="line">        （<span class="number">4</span>）求D，E x D mode L = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    [<span class="number">2</span>] RSA加密小实践</span><br><span class="line">        （<span class="number">1</span>）p = <span class="number">17</span>,q = <span class="number">19</span> =&gt;N = <span class="number">323</span></span><br><span class="line">        （<span class="number">2</span>）lcm（p<span class="number">-1</span>,q<span class="number">-1</span>）=&gt;lcm（<span class="number">16</span>，<span class="number">18</span>）=&gt;L= <span class="number">144</span></span><br><span class="line">        （<span class="number">3</span>）gcd（E,L）=<span class="number">1</span> =&gt;E=<span class="number">5</span></span><br><span class="line">        （<span class="number">4</span>）E乘以几可以mode L =<span class="number">1</span>? D=<span class="number">29</span>可以满足</span><br><span class="line">        （<span class="number">5</span>）得到公钥为：E=<span class="number">5</span>,N=<span class="number">323</span></span><br><span class="line">        （<span class="number">6</span>）得到私钥为：D=<span class="number">29</span>,N=<span class="number">323</span></span><br><span class="line">        （<span class="number">7</span>）加密 明文的E次方 mod N = <span class="number">123</span>的<span class="number">5</span>次方  mod <span class="number">323</span> = <span class="number">225</span>（密文）</span><br><span class="line">        （<span class="number">8</span>）解密 密文的D次方 mod N = <span class="number">225</span>的<span class="number">29</span>次方 mod <span class="number">323</span> = <span class="number">123</span>（明文）</span><br></pre></td></tr></table></figure><p><strong>非对称加密命令行介绍</strong></p><p><code>001 生成512位的RSA私钥</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl genrsa -out private.pem 512</span><br><span class="line">Generating RSA private key, 512 bit long modulus</span><br><span class="line">........+++++++++++++++++++++++++++</span><br><span class="line">..+++++++++++++++++++++++++++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure></p><p><code>002  以明文输出私钥内容</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -text -out private.txt</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure></p><p><code>003 校验私钥文件</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -check</span><br><span class="line">RSA key ok</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIBOwIBAAJBAKfq2SR+2arBoS1c+Jc8Pt7N6Jus4IaqvFttbBaBriVm/EFGY5c0</span><br><span class="line">eS4lDVwLWr0ld2bee720855YkFEsa6j9IlECAwEAAQJBAJwiSOogcTDPfpj5m8S0</span><br><span class="line">JhlyCNnH87YER8QTiK+cwVrQV7AVMNaNWMa4hKZh/rsXTD5oPemUsTTjEWNNNjbE</span><br><span class="line">o+kCIQDZypEycPx1knONDQSVbJwhEsFfnC81BPRUglAyLLK1NwIhAMVgWK6q5vI5</span><br><span class="line">ZKR73XhoHMC3OLE3alvx43JnD0TE+yi3AiAU618tACtPw8RznPd+vtL0Xk/StjbW</span><br><span class="line">meY6I9Y+K4ry2wIhAIPI9q15MsZch9RDV/aDHV+XdmTtKTjG4ySJp2o1U7U1AiBG</span><br><span class="line">IM0D897qkeovClo3kw/mFDA9lgfJu1ir0W3OLSmvXg==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><p><code>004 从私钥中提取公钥</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -out public.pem -outform PEM -pubout</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure></p><p><code>005 以明文输出公钥内容</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in public.pem -out public.txt -pubin -pubout -text</span><br><span class="line">writing RSA key</span><br><span class="line"></span><br><span class="line">wendingding$ cat public.txt</span><br><span class="line">Public-Key: (512 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:a7:ea:d9:24:7e:d9:aa:c1:a1:2d:5c:f8:97:3c:</span><br><span class="line">    3e:de:cd:e8:9b:ac:e0:86:aa:bc:5b:6d:6c:16:81:</span><br><span class="line">    ae:25:66:fc:41:46:63:97:34:79:2e:25:0d:5c:0b:</span><br><span class="line">    5a:bd:25:77:66:de:7b:bd:b4:f3:9e:58:90:51:2c:</span><br><span class="line">    6b:a8:fd:22:51</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKfq2SR+2arBoS1c+Jc8Pt7N6Jus4Iaq</span><br><span class="line">vFttbBaBriVm/EFGY5c0eS4lDVwLWr0ld2bee720855YkFEsa6j9IlECAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p><code>006 使用公钥加密文件</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo &quot;rsa算法测试&quot; &gt;&gt; msg.txt</span><br><span class="line">wendingding$ openssl rsautl -encrypt -pubin -inkey public.pem -in msg.txt -out msg.bin</span><br><span class="line">wendingding$ ls -l</span><br><span class="line">total 48</span><br><span class="line">-rw-r--r--  1 wendingding  staff    64  2 24 18:20 msg.bin</span><br><span class="line">-rw-r--r--  1 wendingding  staff    16  2 24 18:20 msg.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   497  2 24 18:19 private.pem</span><br><span class="line">-rw-r--r--  1 wendingding  staff  1626  2 24 18:19 private.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   182  2 24 18:19 public.pem</span><br><span class="line">-rw-r--r--  1 wendingding  staff   458  2 24 18:19 public.txt</span><br></pre></td></tr></table></figure></p><p><code>007 对加密后的文件进行解密操作</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsautl -decrypt -inkey private.pem -in msg.bin -out a.txt</span><br><span class="line">wendingding$ cat a.txt</span><br><span class="line">rsa算法测试</span><br><span class="line"></span><br><span class="line">wendingding$ md5 a.txt </span><br><span class="line">MD5 (a.txt) = f0f64bc1852acfd133e27567bd71c92e</span><br><span class="line"></span><br><span class="line">wendingding$ md5 msg.txt </span><br><span class="line">MD5 (msg.txt) = f0f64bc1852acfd133e27567bd71c92e</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文对密码学中常用的底层库OpenSSL进行简单说明，包括基本介绍、简单使用等内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;简单介绍&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="数据安全系列" scheme="https://weibo.com/u/3800117445/tags/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>开发工具系列 OSX(UNIX / Linux)常用命令行</title>
    <link href="https://weibo.com/u/3800117445/2019/02/22/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97%20OSX%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://weibo.com/u/3800117445/2019/02/22/开发工具系列 OSX系统基础命令/</id>
    <published>2019-02-22T15:45:13.000Z</published>
    <updated>2019-02-23T10:00:27.464Z</updated>
    
    <content type="html"><![CDATA[<p class="tip">本文简单记录工作中常用的命令行(持续更新)，因为我用的是<code>Mac OSX</code>系统，因此部分命令在<code>Windows系统</code>中将失效(或需调整)，此外需注意Windows的文件系统路径斜杠和<code>UNIX</code>是反的。</p><p><span class="Shell backColorT">pwd</span><br><strong>全称</strong> <strong><code>Print Working Directory</code></strong><br><strong>作用</strong> &nbsp;&nbsp;查看当前目录<br><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop/Test</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cd</span><br> <strong>全称</strong> <strong><code>Change Directory</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;切换目录，<code>../</code>表示返回上一层目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd ../</span><br><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop</span><br><span class="line">$ cd Test/</span><br><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop/Test</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">ls</span><br> <strong>全称</strong> <strong><code>List</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;查看当前目录下内容<br> <strong>参数</strong> <code>usage: ls [-ABCFGHLOPRSTUWabcdefghiklmnopqrstuwx1] [file ...]</code><br> <strong>示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">示例01：ls    列出当前目录下面的所有文件</span><br><span class="line">示例02：ls -a 列出当前目录下面的所有文件(包含隐藏文件)</span><br><span class="line">示例03：ls -l 列出当前目录下面的所有文件(列表方式)，包含文件的创建者和时间等信息</span><br><span class="line">示例04：ls -s 列出当前目录下面的所有文件(打印文件的大小)</span><br><span class="line">示例05：ls -t 列出当前目录下面的所有文件(按照时间来排序)</span><br><span class="line">  </span><br><span class="line">$ ls</span><br><span class="line">    ImageData数据.xmindVueindex.js</span><br><span class="line">    PQ.pngYu.jpg</span><br><span class="line"></span><br><span class="line">$ ls -a</span><br><span class="line">    .ImageData数据.xmindYu.jpg</span><br><span class="line">    ..PQ.pngindex.js</span><br><span class="line">    .DS_StoreVue</span><br><span class="line"></span><br><span class="line">$ ls -l</span><br><span class="line">    total 1216</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff   36971  2 21 15:39 ImageData数据.xmind</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff  519843  2 19 11:34 PQ.png</span><br><span class="line">    drwxr-xr-x  3 wendingding  staff      96  2 23 10:03 Vue</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff   56244  2 19 15:58 Yu.jpg</span><br><span class="line">    -rw-r--r--  1 wendingding  staff     363 12 20 15:33 index.js</span><br><span class="line">    </span><br><span class="line">$ ls -t</span><br><span class="line">    VueYu.jpgindex.js</span><br><span class="line">    ImageData数据.xmindPQ.png</span><br><span class="line"></span><br><span class="line">$ ls -s</span><br><span class="line">    total 1216</span><br><span class="line">    80   ImageData数据.xmind 112 Yu.jpg</span><br><span class="line">    1016 PQ.png   8 index.js</span><br><span class="line">       0 Vue</span><br></pre></td></tr></table></figure><p><strong>说明</strong> 这里简单对<code>ls - l</code>命令列出的文件详细信息中的各个字段加以说明<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命令行结果：-rw-r--r--@ 1 wendingding  staff   56244  2 19 15:58 Yu.jpg</span><br><span class="line">第一个字符：类型(如果是文件夹则为d,如果是文件则为-)</span><br><span class="line">第二三字符：文件的读取权限，如果是rw则表示可读可写</span><br><span class="line">其他的字符：第一个-r表示当前组的权限</span><br><span class="line">          第二个-r表示其它用户的操作权限</span><br><span class="line">          wendingding 是当前用户</span><br><span class="line">          staff       是当前用户所属的组</span><br><span class="line">          519843      是文件的大小(字节数)</span><br><span class="line">          2 19 15:58  是文件最后一次的修改时间</span><br><span class="line">          Yu.jpg      是文件的名称</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">mkdir</span><br><strong>全称</strong> <strong><code>Make Directory</code></strong><br><strong>作用</strong> &nbsp;&nbsp;创建目录<br><strong>参数</strong> <code>usage: mkdir [-pv] [-m mode] directory ...</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例01：mkdir Demo          创建Demo文件夹(目录)</span><br><span class="line">示例02：mkdir -v demo       创建demo文件夹并输出提示信息</span><br><span class="line">示例03：mkdir -p test/sub1  创建test文件夹并在该目录中创建sub1文件夹</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">touch</span><br><strong>作用</strong> &nbsp;&nbsp;在当前的目录中创建文件，可以通过<code>$ open 文件名称</code>命令来打开指定文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd demo</span><br><span class="line">$ ls -a</span><br><span class="line">...</span><br><span class="line">$ touch 1.txt 2.txt</span><br><span class="line">$ ls -a</span><br><span class="line">...1.txt2.txt</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">wc</span><br> <strong>全称</strong> <strong><code>Word Count</code></strong><br> <strong>参数</strong> <code>usage: wc [-clmw] [file ...]</code><br> <strong>作用</strong> &nbsp;&nbsp;获取文件的字数信息统计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例01：wc a.text           获取a.text文件的字数统计信息</span><br><span class="line">示例02：wc -c a.text        获取a.text文件的字数统计信息(统计字节数)</span><br><span class="line">示例03：wc -l a.text        获取a.text文件的字数统计信息(统计行数，从0开始计数)</span><br><span class="line">示例04：wc -m a.text        获取a.text文件的字数统计信息(统计字符数)</span><br><span class="line">示例05：wc -w a.text        获取a.text文件的字数统计信息(统计单词数)</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cat</span><br> <strong>全称</strong> <strong><code>Concatenate files and print on the standard output</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;查看 | 创建 | 合并文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例01：cat index.html              打印并查看index.html文件的内容</span><br><span class="line">示例02：cat &gt; b.text                新建文件b.text并输入内容，需保存</span><br><span class="line">示例03：cat a.text b.text &gt; c.text  合并两个文件的内容给c.text </span><br><span class="line">示例04：cat -n a.text               输出a.text文件的内容并显示行号(空行会被编号)</span><br><span class="line">示例05：cat -b a.text               输出a.text文件的内容并显示行号(空行不被编号)  </span><br><span class="line">示例06：cat -n b.text &gt;&gt; a.text     对b.text文件的内容加上行号然后追加到a.text文件中</span><br><span class="line">示例07：cat -n b.text &gt; a.text      对b.text文件的内容加上行号然后替换a.text文件的内容</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">echo</span><br> <strong>作用</strong> &nbsp;&nbsp;回显字符(向控制台输出字符串信息)，默认会压缩多个空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例01: echo &quot;123&quot; &gt;  a.text  向a.text文件中输入123字符串(替换)</span><br><span class="line">示例02: echo &quot;123&quot; &gt;&gt; a.text  向a.text文件中输入123字符串(追加)</span><br><span class="line"></span><br><span class="line">$ echo &quot;wendingding-mitaoer&quot;</span><br><span class="line">wendingding-mitaoer</span><br><span class="line">$ touch a.txt</span><br><span class="line">$ echo &quot;MiaoXia&quot; &gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">MiaoXia</span><br><span class="line">$ echo &quot;ChanMing&quot; &gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">ChanMing</span><br><span class="line">$ echo &quot;De XiaJi&quot; &gt;&gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">ChanMing</span><br><span class="line">De XiaJi</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">more 和 less</span><br><strong>作用</strong> &nbsp;&nbsp;查看文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">示例01：more +3 a.text              从第三行开始查看a.text文件的内容</span><br><span class="line">示例02：more +/font a.text          搜索文件中指定字符串显示指定位置后的内容</span><br><span class="line">示例03：less -N a.text              显示a.text文件的内容前面加上行号</span><br><span class="line"></span><br><span class="line">$ cat 1.text </span><br><span class="line">Hi!</span><br><span class="line">How are you !</span><br><span class="line">Hello!</span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br><span class="line"></span><br><span class="line">$ more +3 1.text </span><br><span class="line">Hello!</span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"></span><br><span class="line">$ more +/old 1.text </span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">rm</span><br><strong>全称</strong> <code>Remove</code><br><strong>作用</strong> &nbsp;&nbsp;删除文件<br><strong>参数</strong> <code>usage: rm [-f | -i] [-dPRrvW] file ...</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例01： rm    1.text               删除a.text文件</span><br><span class="line">示例02： rm -i 1.text               删除文件前会逐一询问确认，输入YES表示删除</span><br><span class="line">示例03： rm -f 1.text               强制删除a.text文件不会询问确认</span><br><span class="line">示例04： rm -r test                 删除test文件夹以及该目录下面所有文件，Recurve(递归)</span><br><span class="line">示例05： rm -r *                    删除当前目录下面所有的文件</span><br><span class="line">示例06： rm -rf /*                  递归删除所有文件(不提醒) [请勿轻易尝试 ⚠️]</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">rmdir</span><br><strong>全称</strong> <code>Remove Directory</code><br><strong>作用</strong> 删除文件夹，只能删除空文件夹，不常用</p><p><span class="Shell backColorT">mv</span><br><strong>全称</strong> <code>Move</code><br><strong>作用</strong> 移动文件或重命名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例01：mv index.html ./demo/index.html  移动文件到demo目录</span><br><span class="line">示例02：mv index.html a.html             把index.html重命名为a.html</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cp</span><br><strong>全称</strong> <code>Copy</code><br><strong>作用</strong> 复制文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例：cp index.html ./demo/index.html   把文件复制一份保存到demo目录</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">date</span><br><strong>作用</strong> 显示当前的日期和时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ date</span><br><span class="line">2019年 2月23日 星期六 06时52分47秒 CST</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">who</span><br><strong>作用</strong> <code>who</code>获取登录到系统中的所有用户信息，<code>who am i</code>指令用于获取当前登录到系统中的用户信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ who</span><br><span class="line">wendingding console  Feb 22 21:07 </span><br><span class="line">wendingding ttys000  Feb 23 09:28 </span><br><span class="line">wendingding ttys001  Feb 23 11:00 </span><br><span class="line">$ who am i</span><br><span class="line">wendingding ttys001  Feb 23 11:00</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">history</span><br><strong>作用</strong> 查看操作历史</p><p><span class="Shell backColorT">curl</span><br><strong>作用</strong> 发送网络请求，常用于测试(服务器)是否能够到达指定的网站<br><strong>说明</strong> 关于curl的更多用法，请参考另一篇介绍文章。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://wendingding.com</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-Hans&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt; 花田半亩&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;生死有命 富贵在天&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;icon&quot; href=&quot;/logo.jpeg&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/apollo.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;search&quot; type=&quot;application/opensearchdescription+xml&quot; title=&quot;花田半亩&quot;&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">...省略</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">（星号）*</span><br><strong>作用</strong> 在UNIX系统中，星号常用于文件名替换(结合其它的命令)<br><strong>示例</strong> <code>01-Shell自动将模式*替换成当前目录下能够匹配到的所有文件名</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;我是1.txt&quot; &gt; 1.txt</span><br><span class="line">$ echo &quot;我是2.txt&quot; &gt; 2.txt</span><br><span class="line">$ echo &quot;我是a1文件的内容&quot; &gt; a1.txt</span><br><span class="line">$ echo &quot;我是a2文件的内容&quot; &gt; a2.txt</span><br><span class="line">$ echo &quot;我是a3文件的内容&quot; &gt; a3.txt</span><br><span class="line">$ ls -l</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:12 a3.txt</span><br><span class="line"></span><br><span class="line">$ cat 1.txt 2.txt a1.txt</span><br><span class="line">我是1.txt</span><br><span class="line">我是2.txt</span><br><span class="line">我是a1文件的内容</span><br><span class="line"></span><br><span class="line">$ cat *</span><br><span class="line">我是1.txt</span><br><span class="line">我是2.txt</span><br><span class="line">我是a1文件的内容</span><br><span class="line">我是a2文件的内容</span><br><span class="line">我是a3文件的内容</span><br><span class="line"></span><br><span class="line">$ echo *</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">$ echo * == *</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt == 1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">备注：主要是*出现的地方就被替换为当期那目录中所有的文件名</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong> <code>02-星号还能实现部分文件替换功能，与其它字符配合使用可以限制范围</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:12 a3.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   0  2 23 17:24 a4.mp4</span><br><span class="line">-rw-r--r--  1 wendingding  staff   0  2 23 17:24 text.mp4</span><br><span class="line">$ echo *txt</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">$ cat a*</span><br><span class="line">我是a1文件的内容</span><br><span class="line">我是a2文件的内容</span><br><span class="line">我是a3文件的内容</span><br><span class="line">$ ls *ex*</span><br><span class="line">text.mp4</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong> <code>03-文件名替换的其他示例</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1] echo t*         打印出以t开头的所有文件名</span><br><span class="line">[2] rm   *.*        删除包含点号的所有文件</span><br><span class="line">[3] ls   a*         列出所有以a开头的文件</span><br><span class="line">[4] rm    *         删除当前目录下的所有文件( ⚠️)</span><br><span class="line">[5] echo a*b        打印出以a开头且以b结尾的所有文件名</span><br><span class="line">[6] cat  *.c        打印出以.c结尾的所有文件的内容</span><br><span class="line">[7] cp ../demo/* .  将../demo目录中的所有文件复制到当前目录</span><br><span class="line">[8] ls [a-z]*[!0-9] 列出以小写字母开头且不以数字结尾的所有文件</span><br></pre></td></tr></table></figure></p><hr><p class="tip">在使用星号命令的时候，在指定的命令被调用之前，这些文件名替换就已经完成了。在具体的操作中，利用星号文件名替换的功能，可以写出更复杂功能更强大的命令行。</p><p><span class="Shell backColorT"> vim </span><br><strong>作用</strong> 在Mac OSX系统，已经内置了vim编辑器，可以通过vim编辑器方便的在命令行中编辑文件的内容。<br><strong>说明</strong> vim编辑器的功能非常强大，有一套自己的命令相对复杂，这里简单列出常用的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1] 使用vim编辑器打开指定文件       $ vim 1.txt</span><br><span class="line">[2] 让文件进入编辑(INSERT插入)状态  敲击键盘上的i键</span><br><span class="line">[3] 保存并退出                    esc + shift + : + wq</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p class=&quot;tip&quot;&gt;本文简单记录工作中常用的命令行(持续更新)，因为我用的是&lt;code&gt;Mac OSX&lt;/code&gt;系统，因此部分命令在&lt;code&gt;Windows系统&lt;/code&gt;中将失效(或需调整)，此外需注意Windows的文件系统路径斜杠和&lt;code&gt;UNIX&lt;/
      
    
    </summary>
    
    
      <category term="开发工具系列" scheme="https://weibo.com/u/3800117445/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>开发工具系列 WebStorm常用快捷键(Mac版)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/21/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97%20Webstorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://weibo.com/u/3800117445/2019/02/21/开发工具系列 Webstorm常用快捷键/</id>
    <published>2019-02-21T11:45:13.000Z</published>
    <updated>2019-02-21T09:50:15.801Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-family:Georgia"><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; C</span>  复制<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; V</span>  粘贴<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; X</span>  剪切<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; D</span>  复制当前行或选中的区块<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; F</span>    在当前文档执行搜索(查找)<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; G</span>    跳转到文档的某处<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; P</span>    <span style="color:red">显示方法(函数)的参数信息</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; R</span>    在当前文档执行替换操作<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; W</span>    关闭当前选项卡<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; E</span>    弹出最近文件，支持选择后打开<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; B</span>    跳转到变量声明处<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; L</span>    跳转到指定行(输入)<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; Y</span>    浮动窗口显示变量声明行</span></p><p><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; +</span>    <span style="color:red">展开代码块</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; -</span>    <span style="color:red">折叠代码块</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 左</span>    光标移到行头<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 右</span>    光标移到行尾<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 上</span>    跳转到导航栏<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 移入</span>    显示主要信息<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;delete</span>    删除当前行<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;alt&nbsp;&nbsp;+&nbsp;&nbsp; L</span>    <span style="color:red">格式化处理整个文档</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; U</span>    对选中字符进行大小写切换<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; [</span>    选项卡切换</p><p><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;  /</span>    <span style="color:red">添加(取消)单行注释</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;  alt &nbsp;&nbsp;+&nbsp;&nbsp; /</span>    <span style="color:red">添加(取消)多行注释</span></p><p><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;alt &nbsp;&nbsp;+&nbsp;&nbsp; R </span>    运行项目<br><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;alt&nbsp;&nbsp;+&nbsp;&nbsp; I</span>    快速调整每行的缩进<br><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; J</span>    清除缩进变成单行</p><p><span class="spaceT backColorT">alt &nbsp;&nbsp;+&nbsp;&nbsp; /</span>    代码补全(连按选择)<br><span class="spaceT backColorT">shift &nbsp;&nbsp;+&nbsp;&nbsp;tab</span>    调整缩进</p><p></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span style=&quot;font-family:Georgia&quot;&gt;&lt;br&gt;&lt;span class=&quot;spaceT backColorT&quot;&gt;command &amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp; C&lt;/span&gt;  复制&lt;br&gt;&lt;span class=&quot;spac
      
    
    </summary>
    
    
      <category term="开发工具系列" scheme="https://weibo.com/u/3800117445/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
