<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2020-05-06T03:51:05.787Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>疑难杂症-gyp: No Xcode or CLT version detected</title>
    <link href="https://weibo.com/u/3800117445/2020/05/06/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-gyp:%20No%20Xcode%20or%20CLT%20version%20detected/"/>
    <id>https://weibo.com/u/3800117445/2020/05/06/疑难杂症-gyp: No Xcode or CLT version detected/</id>
    <published>2020-05-06T15:58:37.000Z</published>
    <updated>2020-05-06T03:51:05.787Z</updated>
    
    <content type="html"><![CDATA[<p>当Mac升级到High sierra 后，在终端中使用 <code>npm install</code> 或者 <code>yarn</code> 的时候，显示提示信息 <code>gyp: No Xcode or CLT version detected!</code>, 表示缺失了 XCode 的 CLI 工具。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/xcode_test.jpg?raw=true"></p><p>尝试在终端中使用管理员权限执行下面的命令来安装该工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select --install</span><br></pre></td></tr></table></figure><p>如果问题还没有解决，尝试先删除原本的命令行工具，然后再执行上面的命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf $(xcode-select -p)  或者是  rm -rf /Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当Mac升级到High sierra 后，在终端中使用 &lt;code&gt;npm install&lt;/code&gt; 或者 &lt;code&gt;yarn&lt;/code&gt; 的时候，显示提示信息 &lt;code&gt;gyp: No Xcode or CLT version detected!&lt;/code&gt;,
      
    
    </summary>
    
    
      <category term="疑难杂症" scheme="https://weibo.com/u/3800117445/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>Gossip -   generate Virtual-DOM</title>
    <link href="https://weibo.com/u/3800117445/2020/05/06/Gossip%20-%20generate%20Virtual-DOM/"/>
    <id>https://weibo.com/u/3800117445/2020/05/06/Gossip - generate Virtual-DOM/</id>
    <published>2020-05-05T16:00:08.000Z</published>
    <updated>2020-05-08T04:52:47.989Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">在 <a href="http://wendingding.com/2019/08/26/Gossip%20-%20ast%20&amp;&amp;%20render/" target="_blank" rel="noopener">ast &amp;&amp; render</a> 这篇文章中介绍了 ast 树和 render函数生成的过程，本文介绍通过 <code>render函数创建DOM</code>的基本过程(仅仅核心部分)，更多的细节也可以参考 <a href="https://github.com/vuejs" target="_blank" rel="noopener">Vue 框架源码</a>自行探索 。</div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/virtual_01.png?raw=true"></p><div class="titleX"><strong>Render =&gt; Virtual-DOM</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模拟数据 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"刘毅"</span>;</span><br><span class="line">    <span class="keyword">return</span> _c(<span class="string">"a"</span>, &#123; <span class="attr">id</span>: <span class="string">"app"</span>, <span class="attr">title</span>: <span class="string">"标题"</span> &#125; , _c(<span class="string">"p"</span>, <span class="literal">null</span>, _v(<span class="string">"hello"</span>)),</span><br><span class="line">        _c(<span class="string">"span"</span>, <span class="literal">null</span>, _v(<span class="string">"My name is"</span> + _s(name))));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(...arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_v</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createTextNode(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关键：用于处理插值模板 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_s</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val == <span class="literal">null</span> ?<span class="string">''</span>: (<span class="keyword">typeof</span> val === <span class="string">'object'</span>?<span class="built_in">JSON</span>.stringify(val):val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建节点函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">tag, data = &#123;&#125;, ...children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v_node(tag, data, <span class="literal">null</span>, children, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建文本内容 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTextNode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v_node(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建虚拟 DOM 方法：把数据组织成对象返回 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v_node</span>(<span class="params">tag, data, key, children, text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; tag, data, key, children, text &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vNode = render();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'vNode'</span>, vNode);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">// vNode </span></span><br><span class="line"><span class="comment">// &#123; tag: 'a',</span></span><br><span class="line"><span class="comment">//   data: &#123; id: 'app', title: '标题' &#125;,</span></span><br><span class="line"><span class="comment">//   key: null,</span></span><br><span class="line"><span class="comment">//   text: null,</span></span><br><span class="line"><span class="comment">//   children:</span></span><br><span class="line"><span class="comment">//    [ &#123; tag: 'p', data: null, key: null, children: [Array], text: null &#125;,</span></span><br><span class="line"><span class="comment">//      &#123; tag: 'span', data: null,key: null,children: [Array],text: null &#125; </span></span><br><span class="line"><span class="comment">//    ]</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br></pre></td></tr></table></figure><p>给出上面代码生成的<code>虚拟 DOM</code>对应的对象结构图。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/virtual_02.png?raw=true"></p><div class="titleX"><strong> Vue 框架源码核心 </strong></div><p>在 <a href="https://github.com/vuejs" target="_blank" rel="noopener">Vue 框架中</a>，我们主要三种方式来渲染标签。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、实例化 Vue 的过程中，通过 el 来选择实例挂载的标签。</span><br><span class="line">2、实例化 Vue 的过程中，通过 template 标签字符串模板来渲染标签。</span><br><span class="line">3、实例化 Vue 的过程中，直接通过 render 函数的方式来渲染标签，这也是底层的方法。</span><br></pre></td></tr></table></figure></p><p>我们给出对应的 Vue 渲染标签(组件)的对应代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第一种方式： 通过 配置项中的 el 参数来挂载 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         el: <span class="string">"#app1"</span></span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第二种方式：通过template 模板 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="xml">         template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>我是模板内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="javascript">     vm2.$mount(<span class="string">"#app2"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第三种方式：通过 render 函数渲染 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="undefined">         render(c) &#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> c(<span class="string">'div'</span>, &#123;</span></span><br><span class="line"><span class="undefined">                 attrs: &#123;</span></span><br><span class="line"><span class="javascript">                     title: <span class="string">"标题"</span>,</span></span><br><span class="line"><span class="undefined">                     idx: 1</span></span><br><span class="line"><span class="undefined">                 &#125;,</span></span><br><span class="line"><span class="undefined">                 class: &#123;</span></span><br><span class="line"><span class="javascript">                     <span class="string">'is-red'</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                 &#125;</span></span><br><span class="line"><span class="undefined">             &#125;, [</span></span><br><span class="line"><span class="javascript">               c(<span class="string">'a'</span>, <span class="string">'我是a'</span>),</span></span><br><span class="line"><span class="javascript">               c(<span class="string">'span'</span>, &#123;<span class="attr">class</span>: <span class="string">"span-class"</span>&#125;, <span class="string">'我是span'</span>),</span></span><br><span class="line"><span class="undefined">               ])</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     vm3.$mount(<span class="string">"#app3"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 测试数据 */</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm1.$el);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm2.$el);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm3.$el);</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在上面的代码中，我们通过三种方式来进行渲染，它们将生成下面的标签结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>我是模板内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"标题"</span> <span class="attr">idx</span>=<span class="string">"1"</span> <span class="attr">class</span>=<span class="string">"is-red"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span-class"</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>我是a<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在三种渲染的方式中，其中<code>el</code> 把挂载渲染的标签到页面，<code>template</code> 会直接执行替换操作，<code>render</code>函数同 template 一致。我们知道，无论使用什么样的方式来渲染 Vue框架的内部最终都是使用 <code>render</code>函数来进行处理的。</p><p>接下来，我这里通过代码简单模拟 render 函数渲染生成标签和虚拟 DOM 的过程。为了保持基本一致，我这里改造下上文的代码，并提供 Vue 这个构造函数(Class),并把涉及到的诸多方法都写到Vue原型对象上面以供实例化对象调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一部分代码：主要处理模板编译 */</span></span><br><span class="line"><span class="comment">/* 形如：abc-123 */</span></span><br><span class="line"><span class="keyword">const</span> nc_name = <span class="string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;aaa:bbb&gt; */</span></span><br><span class="line"><span class="keyword">const</span> q_nameCapture = <span class="string">`((?:<span class="subst">$&#123;nc_name&#125;</span>\\:)?<span class="subst">$&#123;nc_name&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;div   匹配开始标签的左半部分 */</span></span><br><span class="line"><span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;q_nameCapture&#125;</span>`</span>);</span><br><span class="line"><span class="comment">/* 匹配开始标签的右半部分(&gt;) 形如`&gt;`或者`  &gt;`前面允许存在 N(N&gt;=0)个空格 */</span></span><br><span class="line"><span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span>;</span><br><span class="line"><span class="comment">/* 匹配闭合标签：形如 &lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">const</span> endTag = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;\\/<span class="subst">$&#123;q_nameCapture&#125;</span>[^&gt;]*&gt;`</span>);</span><br><span class="line"><span class="comment">/* 匹配属性节点：形如 id="app" 或者 id='app' 或者 id=app 等形式的字符串 */</span></span><br><span class="line"><span class="keyword">const</span> att=<span class="regexp">/^\s*([^\s"'&lt;&gt;\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=&lt;div&gt;`]+)))?/</span></span><br><span class="line"><span class="comment">/* 匹配插值语法：形如 &#123;&#123;msg&#125;&#125; */</span></span><br><span class="line"><span class="keyword">const</span> defaultTagRE = <span class="regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(文本节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_TEXT = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(元素节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_ELEMENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []; <span class="comment">/* 数组模拟栈结构 */</span></span><br><span class="line">    <span class="keyword">let</span> currentParent;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 推进函数：每处理完一部分模板就向前推进删除一段 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">advance</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        html = html.substring(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> element = createASTElement(tag, attrs);</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            root = element;</span><br><span class="line">        &#125;</span><br><span class="line">        currentParent = element;</span><br><span class="line">        stack.push(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">tagName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> element = stack.pop();</span><br><span class="line">        currentParent = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (currentParent) &#123;</span><br><span class="line">            element.parent = currentParent;</span><br><span class="line">            currentParent.children.push(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 文本处理函数：&lt;span&gt;  hello &lt;span&gt; =&gt; text的值为 " hello "*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">chars</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 1.先处理文本字符串中所有的空格，全部替换为空 */</span></span><br><span class="line">        <span class="comment">// text = text.replace(/\s/g, '');</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 2.把数据组织成&#123;text:"hello",type:3&#125;的形式保存为当前父节点的子元素 */</span></span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            currentParent.children.push(&#123;</span><br><span class="line">                text,</span><br><span class="line">                nodeType: NODE_TYPE_TEXT</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createASTElement</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            tag,</span><br><span class="line">            attrs,</span><br><span class="line">            children: [],</span><br><span class="line">            parent: <span class="literal">null</span>,</span><br><span class="line">            nodeType: NODE_TYPE_ELEMENT</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析开始标签部分：主要提取标签名和属性节点 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parser_start_html</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 00-正则匹配 &lt;div id="app" title="标题"&gt;模板结构*/</span></span><br><span class="line">        <span class="keyword">let</span> start = html.match(startTagOpen);</span><br><span class="line">        <span class="keyword">if</span> (start) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 01-提取标签名称 形如 div */</span></span><br><span class="line">            <span class="keyword">const</span> tagInfo = &#123;</span><br><span class="line">                tag: start[<span class="number">1</span>],</span><br><span class="line">                attrs: []</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除&lt;div部分 */</span></span><br><span class="line">            advance(start[<span class="number">0</span>].length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 02-提取属性节点部分 形如：id="app" title="标题"*/</span></span><br><span class="line">            <span class="keyword">let</span> attr, end;</span><br><span class="line">            <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(att))) &#123;</span><br><span class="line">                tagInfo.attrs.push(&#123;</span><br><span class="line">                    name: attr[<span class="number">1</span>],</span><br><span class="line">                    value: attr[<span class="number">3</span>] || attr[<span class="number">4</span>] || attr[<span class="number">5</span>]</span><br><span class="line">                &#125;);</span><br><span class="line">                advance(attr[<span class="number">0</span>].length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 03-处理开始标签 形如 &gt;*/</span></span><br><span class="line">            <span class="keyword">if</span> (end) &#123;</span><br><span class="line">                advance(end[<span class="number">0</span>].length);</span><br><span class="line">                <span class="keyword">return</span> tagInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (html) &#123;</span><br><span class="line">        <span class="keyword">let</span> textTag = html.indexOf(<span class="string">'&lt;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果以&lt;开头 */</span></span><br><span class="line">        <span class="keyword">if</span> (textTag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* (1) 可能是开始标签 形如:&lt;div id="app"&gt; */</span></span><br><span class="line">            <span class="keyword">let</span> startTagMatch = parser_start_html();</span><br><span class="line">            <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">                start(startTagMatch.tag, startTagMatch.attrs);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* (2) 可能是结束标签 形如:&lt;/div&gt;*/</span></span><br><span class="line">            <span class="keyword">let</span> endTagMatch = html.match(endTag);</span><br><span class="line">            <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">                advance(endTagMatch[<span class="number">0</span>].length);</span><br><span class="line">                end(endTagMatch[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 文本内容的处理 */</span></span><br><span class="line">        <span class="keyword">let</span> text;</span><br><span class="line">        <span class="keyword">if</span> (textTag &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            text = html.substring(<span class="number">0</span>, textTag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            advance(text.length);</span><br><span class="line">            chars(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ****************** */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* 2.1 如果属性节点名称为 style那么则对 value进行中间处理 */</span></span><br><span class="line">        <span class="keyword">if</span> (attr.name === <span class="string">'style'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            attr.value.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> [key, value] = item.split(<span class="string">':'</span>);</span><br><span class="line">                obj[key] = value</span><br><span class="line">            &#125;);</span><br><span class="line">            attr.value = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:"app",title:"标题", */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, <span class="number">-1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateChildren</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = el.children;</span><br><span class="line">    <span class="keyword">return</span> (children &amp;&amp; children.length &gt; <span class="number">0</span>) ? <span class="string">`<span class="subst">$&#123;children.map(c =&gt; generate(c)).join(<span class="string">','</span>)&#125;</span>`</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType == <span class="number">1</span> ? generateRenderString(node) : generateText(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tokens = [];</span><br><span class="line">    <span class="keyword">let</span> match, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文本内容 */</span></span><br><span class="line">    <span class="keyword">let</span> text = node.text;</span><br><span class="line">    <span class="comment">// console.log('node', node);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果是全局匹配 那么每次匹配的时候都需要将 lastIndex 调整到0*/</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex = defaultTagRE.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 正则匹配(匹配插值语法部分的内容) */</span></span><br><span class="line">    <span class="keyword">while</span> (match = defaultTagRE.exec(text)) &#123;</span><br><span class="line">        index = match.index;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">            tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex, index)));</span><br><span class="line">        &#125;</span><br><span class="line">        tokens.push(<span class="string">`_s(<span class="subst">$&#123;match[<span class="number">1</span>].trim()&#125;</span>)`</span>);</span><br><span class="line">        lastIndex = index + match[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt; text.length) &#123;</span><br><span class="line">        tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;tokens.join(<span class="string">' + '</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数：完成每个部分字符串(标签名 &amp;&amp; 属性节点 &amp;&amp; 子节点)的拼接 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRenderString</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> children = generateChildren(el);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_c("<span class="subst">$&#123;el.tag&#125;</span>",<span class="subst">$&#123;el.attrs.length ? generateAttrs(el.attrs) : <span class="string">'null'</span>&#125;</span><span class="subst">$&#123; children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span> : <span class="string">''</span>&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compilerToFunction</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Html-&gt;AST */</span></span><br><span class="line">    <span class="keyword">let</span> root = compiler(template);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* AST-&gt;RenderString */</span></span><br><span class="line">    <span class="keyword">let</span> renderString = generateRenderString(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* RenderString-&gt;RenderFunction */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">`with(this)&#123; return <span class="subst">$&#123;renderString&#125;</span>&#125;`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第二部分代码：主要处理虚拟 DOM 的生成 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$options = options;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果传入了 el | el + template  */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$options.el) <span class="keyword">this</span>.$mount(<span class="keyword">this</span>.$options.el);</span><br><span class="line">    &#125;</span><br><span class="line">    $mount(el) &#123;</span><br><span class="line">        <span class="keyword">let</span> v_node;</span><br><span class="line">        <span class="comment">/* 挂载函数 */</span></span><br><span class="line">        el = <span class="built_in">document</span>.querySelector(el);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 考虑：el + template + render函数的优先级关系 */</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.$options.render) &#123;</span><br><span class="line">            <span class="comment">// 对模板进行编译</span></span><br><span class="line">            <span class="keyword">let</span> template = <span class="keyword">this</span>.$options.template; <span class="comment">// 取出模板</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如果没有仅仅是传入 el的情况那么就获取outerHTML */</span></span><br><span class="line">            <span class="keyword">if</span> (!template &amp;&amp; el) &#123;</span><br><span class="line">                template = el.outerHTML;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 无论传入的是 el || template  */</span></span><br><span class="line">            <span class="comment">/* 最终根据 template 标签字符串创建 render 函数 */</span></span><br><span class="line">            <span class="keyword">this</span>.$options.render = compilerToFunction(template).bind(<span class="keyword">this</span>);</span><br><span class="line">            v_node = <span class="keyword">this</span>.$options.render();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如何创建？ */</span></span><br><span class="line">            <span class="keyword">this</span>.render = <span class="keyword">this</span>.$options.render;</span><br><span class="line">            v_node = <span class="keyword">this</span>.render(<span class="keyword">this</span>._c.bind(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'v_node'</span>, v_node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    _c() &#123;</span><br><span class="line">        <span class="comment">/* 创建标签节点 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createElement(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    _v(text) &#123;</span><br><span class="line">        <span class="comment">/* 创建文本节点 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createTextNode(text);</span><br><span class="line">    &#125;</span><br><span class="line">    _s(val) &#123;</span><br><span class="line">        <span class="comment">/* 编译插值 */</span></span><br><span class="line">     <span class="keyword">return</span> val == <span class="literal">null</span> ? <span class="string">''</span>:(<span class="keyword">typeof</span> val === <span class="string">'object'</span>?<span class="built_in">JSON</span>.stringify(val):val)</span><br><span class="line">    &#125;</span><br><span class="line">    createElement(tag, data = &#123;&#125;, ...children) &#123;</span><br><span class="line">        <span class="comment">/* 创建标签节点的实现函数 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.v_node(tag, data, <span class="literal">null</span>, children, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    createTextNode(text) &#123;</span><br><span class="line">        <span class="comment">/* 创建文本内容的实现函数 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.v_node(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, text);</span><br><span class="line">    &#125;</span><br><span class="line">    v_node(tag, data, key, children, text) &#123;</span><br><span class="line">        <span class="comment">/* 创建虚拟 DOM ：把所有的数据都组织成对象返回 */</span></span><br><span class="line">        <span class="keyword">return</span> &#123; tag, data, key, children, text &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第三部分：测试代码 */</span></span><br><span class="line"><span class="comment">/* 第一种方式 */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二种方式 */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    template: <span class="string">`&lt;a id="app" title="标题"&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;hello&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;My name is &#123;&#123;name&#125;&#125; &lt;/span&gt;</span></span><br><span class="line"><span class="string">               &lt;/a&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第三种方式 */</span></span><br><span class="line"><span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    render(c) &#123;</span><br><span class="line">        <span class="keyword">return</span> c(<span class="string">'div'</span>, &#123;</span><br><span class="line">            id: <span class="string">"testID"</span></span><br><span class="line">        &#125;, c(<span class="string">'a'</span>, <span class="string">'我是a'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">vm3.$mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码中，第一部分代码大部分来自于<a href=""></a>这篇博客，略有修改,把三种(挂载)渲染方式的情况下生成的虚拟 DOM 对象打印出来(参考下图)。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/virtual_t.png?raw=true"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;在 &lt;a href=&quot;http://wendingding.com/2019/08/26/Gossip%20-%20ast%20&amp;amp;&amp;amp;%20render/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ast &amp;a
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - 如何自己撸一个脚手架(commander模块)</title>
    <link href="https://weibo.com/u/3800117445/2020/05/02/Gossip%20-%20%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E6%92%B8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6(commander%E6%A8%A1%E5%9D%97)/"/>
    <id>https://weibo.com/u/3800117445/2020/05/02/Gossip - 如何自己撸一个脚手架(commander模块)/</id>
    <published>2020-05-01T16:00:08.000Z</published>
    <updated>2020-05-07T06:19:26.656Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">这是系列文章 <a href="">如何自己撸一个脚手架</a> 的第一篇，主要讲解脚手架工具中的核心模块命令行参数解析功能的实现，重点讲解 Node 模块 <a href="">commander</a>的使用。</div><p>在前端开发中我们已经接触过各种各样的脚手架工具，从<code>Yeoman</code>到<code>vue-cli</code>和<code>dva-cli</code>等，这几篇文章将讲解脚手架工具的核心功能以及具体实现细节，本文探讨哪些功能呢？我们先随便拿一个现成的脚手架工具<code>vue-cli</code>来作为参考。</p><p>当我们通过<code>npm install -g @vue/cli</code> 来全局安装 @vue/cli之后，就可以在终端中使用 vue 指令了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">wendingding:vue-test wendingding$ vue --version</span><br><span class="line">@vue/cli 4.3.1</span><br><span class="line">wendingding:vue-test wendingding$ vue --<span class="built_in">help</span></span><br><span class="line">Usage: vue &lt;<span class="built_in">command</span>&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                              output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>                                 output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create [options] &lt;app-name&gt;                create a new project powered by vue-cli-service</span><br><span class="line">  add [options] &lt;plugin&gt; [pluginOptions]     install a plugin and invoke its generator <span class="keyword">in</span> an already created project</span><br><span class="line">  invoke [options] &lt;plugin&gt; [pluginOptions]  invoke the generator of a plugin <span class="keyword">in</span> an already created project</span><br><span class="line">  inspect [options] [paths...]               inspect the webpack config <span class="keyword">in</span> a project with vue-cli-service</span><br><span class="line">  serve [options] [entry]                    serve a .js or .vue file <span class="keyword">in</span> development mode with zero config</span><br><span class="line">  build [options] [entry]                    build a .js or .vue file <span class="keyword">in</span> production mode with zero config</span><br><span class="line">  ui [options]                               start and open the vue-cli ui</span><br><span class="line">  init [options] &lt;template&gt; &lt;app-name&gt;       generate a project from a remote template (legacy API, requires @vue/cli-init)</span><br><span class="line">  config [options] [value]                   inspect and modify the config</span><br><span class="line">  outdated [options]                         (experimental) check <span class="keyword">for</span> outdated vue cli service / plugins</span><br><span class="line">  upgrade [options] [plugin-name]            (experimental) upgrade vue cli service / plugins</span><br><span class="line">  migrate [options] [plugin-name]            (experimental) run migrator <span class="keyword">for</span> an already-installed cli plugin</span><br><span class="line">  info                                       <span class="built_in">print</span> debugging information about your environment</span><br><span class="line"></span><br><span class="line">  Run vue &lt;<span class="built_in">command</span>&gt; --<span class="built_in">help</span> <span class="keyword">for</span> detailed usage of given <span class="built_in">command</span>.</span><br><span class="line">  </span><br><span class="line">  wendingding:vue-test wendingding$ abc </span><br><span class="line">  -bash: abc: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure></p><p>观察上面的终端命令和显示输出，我们总共输入了三个命令<br><code>$ vue --version</code> 查看版本信息<br><code>$ vue --help</code>    获取帮助信息<br><code>$ abc</code>          随意输入的指令，显示<code>command not found</code>该指令不存在。</p><p>本文将专注实现上面的功能，假设我们自己实现的脚手架名为<code>vito-cli</code>那么当我在终端中使用<code>vito-cli</code>的时候，系统应该认识该指令，且能够获取当前脚手架的版本并能够获取帮助信息，下面给出具体的实现过程。</p><div class="titleX"><strong>项目准备</strong></div><p>在电脑中新创建文件夹，假设为 <code>vito-cli</code> ,在该文件夹下面执行下面的命令先做一些准备工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y                         <span class="comment"># 初始化package.json</span></span><br><span class="line">npm install eslint husky --save-dev <span class="comment"># eslint是负责代码校验工作,husky提供了git钩子功能</span></span><br><span class="line">npx eslint --init                   <span class="comment"># 初始化eslint配置文件，用于语法检查</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>目录结构</strong></div><p>参考下面的目录结构来创建文件和文件夹，关键。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   └── www            &lt;!-- 全局命令执行的根文件 --&gt;</span><br><span class="line">├── node_modules       &lt;!-- 安装的包文件 --&gt;</span><br><span class="line">│   ├── @babel</span><br><span class="line">│   ...</span><br><span class="line">│   └── yaml</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json       &lt;!-- 元信息文件 --&gt;</span><br><span class="line">├── src       </span><br><span class="line">│   └── main.js        &lt;!-- 项目入口文件 --&gt;</span><br><span class="line">│── .huskyrc           &lt;!-- git hook --&gt;</span><br><span class="line">│── .eslintrc.json     &lt;!-- 代码规范校验文件 --&gt;</span><br><span class="line">└── util</span><br><span class="line">    └── constants.js   &lt;!-- 该文件用于存放公共常量数据 --&gt;</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>配置和链接</strong></div><p>❏ 配置 <code>package.json</code> 校验src文件夹下的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"lint"</span>:<span class="string">"eslint src"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>❏ 配置 <code>husky</code> 文件，当使用git提交前校验代码是否符合规范<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"npm run lint"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>❏ 链接全局包，编写 <code>package.json</code> 文件设置在终端中<code>执行 vito-cli 时调用 bin 目录下的 www 文件</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bin"</span>: &#123;</span><br><span class="line">       <span class="string">"vito-cli"</span>: <span class="string">"./bin/www"</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><p>❏ <code>bin</code> 目录下面的 <code>www</code> 文件设置使用 <code>main.js</code> 作为入口文件，并且以 <code>node 环境</code> 执行此文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../src/main.js'</span>);</span><br></pre></td></tr></table></figure><p>❏ 链接包到全局环境下使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure></p><p>到现在这一步，我们就已经可以成功的在命令行中使用<code>vito-cli</code>命令了，当在终端中执行<code>vito-cli</code>命令的时候其内部会执行main.js文件，如果我们在该文件中加上一行打印代码<code>console.log(&quot;hello vito-cli&quot;)</code>,那么在终端中可以看到对应的输出。</p><div class="titleX" style="background:orange"><strong>使用 commander 解析命令行参数</strong></div><p><a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener">commander</a> 模块可以帮助我们自动的生成 help 信息，解析选项参数大家可以点击到<a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener"> npmjs网站 </a>查看包模块的详细情况。</p><p>先在系统中安装 <code>commander</code> 模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander</span><br></pre></td></tr></table></figure></p><p>在入口文件 main.js 文件中引入该模块并测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">"commander"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// process.argv就是用户在命令行中传入的参数</span></span><br><span class="line">program.version(<span class="string">'1.0.1'</span>).parse(process.argv);</span><br></pre></td></tr></table></figure></p><p>此时，我们终端使用<code>vito-cli --help</code> 或者是 <code>vito-cli --version</code> 就能看到对应的提示信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ vito-cli --version</span><br><span class="line">1.0.1</span><br><span class="line"></span><br><span class="line">wendingding$ vito-cli --<span class="built_in">help</span></span><br><span class="line">Usage: vito-cli [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version  output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>     display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure></p><p>注意：脚手架的这个版本号应该使用的是当前cli项目的版本号，我们需要动态的来获取，具体实现方式是直接把<code>package.json</code> 文件中的 <code>version</code> 字段值导入到<code>main.js</code>文件中直接使用即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, version &#125; = <span class="built_in">require</span>(<span class="string">"../package"</span>);</span><br></pre></td></tr></table></figure><p>另外，当我们使用脚手架工具的时候，往往不同的指令会对应不同的功能，譬如<code>vue create app</code>的作用是创建项目，而<code>vue ui</code>的作用是开启一个服务以 UI 界面的方式来创建项目，也就是说不能的 命令 它的功能、别名以及使用示例这些信息都是不同的，如何实现呢？</p><p><a href="">commander</a> 模块我为了提供了对应的方法，下面给出具体的示例(演示使用，实际功能暂欠缺)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.js 文件的内容 */</span></span><br><span class="line"><span class="comment">/* 0.导入模块 */</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">"commander"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导入常量(package 包中的名称和版本号) */</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, version &#125; = <span class="built_in">require</span>(<span class="string">"../package"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1.vito-cli crete */</span></span><br><span class="line">program</span><br><span class="line">    <span class="comment">/*  命令的名称 */</span></span><br><span class="line">    .command(<span class="string">"create"</span>) </span><br><span class="line">    <span class="comment">/*  命令的别名 */</span></span><br><span class="line">    .alias(<span class="string">"c"</span>) </span><br><span class="line">    <span class="comment">/* 命令的描述 */</span></span><br><span class="line">    .description(<span class="string">"create a project whit vito-cli...."</span>) </span><br><span class="line">    <span class="comment">/* 该命令的具体功能(动作) */</span></span><br><span class="line">    .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt; create`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.vito-cli config */</span></span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">"config"</span>)</span><br><span class="line">    .alias(<span class="string">"conf"</span>)</span><br><span class="line">    .description(<span class="string">"config info...."</span>)</span><br><span class="line">    .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt; config`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.vito-cli xxx  (其它未定义指令) */</span></span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">"*"</span>)</span><br><span class="line">    .alias(<span class="string">""</span>)</span><br><span class="line">    .description(<span class="string">"command not found"</span>)</span><br><span class="line">    .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt; nothing`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4.示例信息 */</span></span><br><span class="line"><span class="keyword">const</span> examples = [</span><br><span class="line">    <span class="string">"vito-cli create &lt;project-name&gt;"</span>,</span><br><span class="line">    <span class="string">"vito-cli config get &lt;k&gt;"</span>,</span><br><span class="line">    <span class="string">"vito-cli config set &lt;k&gt; &lt;v&gt;"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.监听用户的help 事件</span></span><br><span class="line">program.on(<span class="string">'--help'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">/* 当终端输入 vito-cli --help指令的时候打印nExamples信息 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'\nExamples:'</span>);</span><br><span class="line">    examples.forEach(<span class="function"><span class="params">example</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`   <span class="subst">$&#123;example&#125;</span>`</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6.版本信息 + 命令行参数解析 */</span></span><br><span class="line">program.version(<span class="string">`version = <span class="subst">$&#123;version&#125;</span>`</span>).parse(process.argv);</span><br></pre></td></tr></table></figure></p><p>我们来看看此时，我们的工具拥有了哪些功能？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ vito-cli --<span class="built_in">help</span></span><br><span class="line">Usage: vito-cli [options] [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version   output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>      display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create|c        create a project whit vito-cli....</span><br><span class="line">  config|conf     config info....</span><br><span class="line">  *               <span class="built_in">command</span> not found</span><br><span class="line">  <span class="built_in">help</span> [<span class="built_in">command</span>]  display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">   vito-cli create &lt;project-name&gt;</span><br><span class="line">   vito-cli config get &lt;k&gt;</span><br><span class="line">   vito-cli config <span class="built_in">set</span> &lt;k&gt; &lt;v&gt;</span><br><span class="line"></span><br><span class="line">wendingding$ vito-cli --version</span><br><span class="line">version = 1.0.1</span><br><span class="line"></span><br><span class="line">wendingding$ vito-cli create myapp</span><br><span class="line">执行 action-&gt; create</span><br><span class="line"></span><br><span class="line">wendingding$ vito-cli config</span><br><span class="line">执行 action-&gt; config</span><br><span class="line"></span><br><span class="line">wendingding$ vito-cli c app</span><br><span class="line">执行 action-&gt; create</span><br></pre></td></tr></table></figure></p><p>写到这里，脚手架工具的基本提示功能就已经实现了，但代码较长且脚手架的指令肯定不止 <code>create</code> 和 <code>config</code> 这么两个，因此这里适当调整下代码结构让其可维护性更高一些。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.js 文件的内容 */</span></span><br><span class="line"><span class="comment">/* 导入模块 */</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">"commander"</span>);</span><br><span class="line"><span class="comment">/* 导入常量(package 包中的名称和版本号) */</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, version &#125; = <span class="built_in">require</span>(<span class="string">"../util/constants"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组织映射结构 */</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    create: &#123; <span class="comment">// 项目创建(初始化)指令</span></span><br><span class="line">        description: <span class="string">'create project with vito-cli'</span>,</span><br><span class="line">        alias: <span class="string">'c'</span>,</span><br><span class="line">        examples: [</span><br><span class="line">            <span class="string">'vito-cli create &lt;project-name&gt;'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    config: &#123; <span class="comment">// 设置项目配置文件指令</span></span><br><span class="line">        description: <span class="string">'config info'</span>,</span><br><span class="line">        alias: <span class="string">'conf'</span>,</span><br><span class="line">        examples: [</span><br><span class="line">            <span class="string">'vito-cli config get &lt;k&gt;'</span>,</span><br><span class="line">            <span class="string">'vito-cli config set &lt;k&gt; &lt;v&gt;'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'*'</span>: &#123;</span><br><span class="line">        description: <span class="string">'command not found'</span>,</span><br><span class="line">        alias: <span class="string">''</span>,</span><br><span class="line">        examples: [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(actions).forEach(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    program</span><br><span class="line">        <span class="comment">/* 命名的名称 */</span></span><br><span class="line">        .command(action)</span><br><span class="line">        <span class="comment">/* 命名的别名 */</span></span><br><span class="line">        .alias(actions[action].alias)</span><br><span class="line">        <span class="comment">/* 命令的描述信息 */</span></span><br><span class="line">        .description(actions[action].description)</span><br><span class="line">        <span class="comment">/* 命令的任务(功能) */</span></span><br><span class="line">        .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 动作</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt;`</span>, action);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听用户的help 事件</span></span><br><span class="line">program.on(<span class="string">'--help'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'\nExamples:'</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.ownKeys(actions).forEach(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        actions[action].examples.forEach(<span class="function">(<span class="params">example</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`  <span class="subst">$&#123;example&#125;</span>`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 版本信息 + 命令行参数解析 */</span></span><br><span class="line">program.version(<span class="string">`version = <span class="subst">$&#123;version&#125;</span>`</span>).parse(process.argv);</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;这是系列文章 &lt;a href=&quot;&quot;&gt;如何自己撸一个脚手架&lt;/a&gt; 的第一篇，主要讲解脚手架工具中的核心模块命令行参数解析功能的实现，重点讲解 Node 模块 &lt;a href=&quot;&quot;&gt;commander&lt;/a&gt;的使用。&lt;/div&gt;

&lt;p&gt;在前端开
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - palindrome</title>
    <link href="https://weibo.com/u/3800117445/2020/04/29/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87/"/>
    <id>https://weibo.com/u/3800117445/2020/04/29/奇怪问题-字符串回文/</id>
    <published>2020-04-28T16:00:09.000Z</published>
    <updated>2020-05-08T04:48:20.259Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题1：检查给定的字符串是否是回文字符串。</strong></div><p><strong>说明</strong> 回文字符串的特点是：<code>自左-&gt;右读和自右-&gt;左读内容一致</code>，譬如<code>上海自来水来自海上</code>。</p><div class="titleX" style="background:#239F60;color:white"><strong>解决方案1</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 思路 : 使用数组来进行处理*/</span></span><br><span class="line"><span class="comment">/* (1) 先把字符串转换为数组，然后倒序后再处理为字符串 */</span></span><br><span class="line"><span class="comment">/* (2) 比较两个字符串是否全等，全等则表示该字符串是回文 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target = [...str].reverse().join(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> target === str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span>  </span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"aba"</span>));              <span class="comment">/*  true  */</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"abc"</span>));              <span class="comment">/*  false */</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"上海自来水来自海上"</span>));  <span class="comment">/*  true  */</span></span><br></pre></td></tr></table></figure><div class="titleX" style="background:#239F60;color:white"><strong>解决方案2</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 思路 : 使用栈数据结构进行处理 */</span></span><br><span class="line"><span class="comment">/* (1) 利用栈结构通过入栈和出栈的操作来完成字符串的翻转 */</span></span><br><span class="line"><span class="comment">/* (2) 比较两个字符串是否全等，全等则表示该字符串是回文 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    push(ele) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data[<span class="keyword">this</span>.top++] = ele;</span><br><span class="line">    &#125;</span><br><span class="line">    peek() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.top - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    clear() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">    length() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        stack.push(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (stack.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        target += stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str === target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">"abcdcba"</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">"abcaba"</span>;</span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">"上海自来水来自海上"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123;str1&#125;</span>"<span class="subst">$&#123;isPalindrome(str1) ? <span class="string">"是"</span> : <span class="string">"不是"</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123;str2&#125;</span>"<span class="subst">$&#123;isPalindrome(str2) ? <span class="string">"是"</span> : <span class="string">"不是"</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123;str3&#125;</span>"<span class="subst">$&#123;isPalindrome(str3) ? <span class="string">"是"</span> : <span class="string">"不是"</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行结果 */</span></span><br><span class="line"><span class="comment">// wendingding$ node 02-检查回文.js </span></span><br><span class="line"><span class="comment">// "abcdcba"是回文字符串。</span></span><br><span class="line"><span class="comment">// "abcaba"不是回文字符串。</span></span><br><span class="line"><span class="comment">// "上海自来水来自海上"是回文字符串。</span></span><br></pre></td></tr></table></figure><div class="titleX" style="background:#DC534A;color:white"><strong>问题2：请编写函数求字符串中存在的最长回文字符串。</strong></div><p><strong>说明</strong> 譬如给定字符串为<code>1abcba123</code>,那么该该字符串中存在的最长回文字符串应该为<code>1abcba1</code>。</p><div class="titleX" style="background:#239F60;color:white"><strong>解决方案</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 如果字符串为空或者只有一个字符，那么就直接返回当前字符 */</span></span><br><span class="line">    <span class="keyword">if</span> (str.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = [],offset, k;</span><br><span class="line">    <span class="comment">/* 通过循环把所有的字符(可能存在最长回文都添加到chars中) */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        offset = k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (str[i+ offset] &amp;&amp; str[i - offset] &amp;&amp; str[i-offset] === str[i+offset]) &#123;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;;</span><br><span class="line">        chars.push(str.slice(i - offset + <span class="number">1</span>, i + offset))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;chars.toString()&#125;</span>]`</span>);</span><br><span class="line">        <span class="keyword">while</span> (str[i + <span class="number">1</span> + k] &amp;&amp; str[i - k] &amp;&amp; str[i + <span class="number">1</span> + k] === str[i - k]) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        chars.push(str.slice(i - k + <span class="number">1</span>, i + k + <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 对数组中的字符串按照长度进行排序(长-&gt;短) */</span></span><br><span class="line">    <span class="keyword">let</span> result = chars.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b.length - a.length</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`排序后的数组：[<span class="subst">$&#123;result.join(<span class="string">","</span>)&#125;</span>]`</span>);</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">"ac121ca123210"</span>));</span><br><span class="line"><span class="comment">/* 打印显示 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[a]</span></span><br><span class="line"><span class="comment">[a,,c]</span></span><br><span class="line"><span class="comment">[a,,c,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2,,1,,0]</span></span><br><span class="line"><span class="comment">排序后的数组：[ac121ca,12321,a,a,1,c,c,1,2,1,2,1,0,,,,,,,,,,,,,]</span></span><br><span class="line"><span class="comment">ac121ca */</span></span><br></pre></td></tr></table></figure><div class="tip">在上面的代码中，可能会存在拥有多个最长回文子串(譬如传入的字符串是<code>abccba1221a</code>)或者没有回文子串(<code>譬如传入的字符串是 abc</code>)的情况，因此还需要调整下代码。</div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = [];</span><br><span class="line">    <span class="keyword">let</span> offset, k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        offset = k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (str[i + offset] &amp;&amp; str[i - offset] &amp;&amp; str[i-offset] === str[i+offset]) &#123;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        chars.push(str.slice(i - offset + <span class="number">1</span>, i + offset));</span><br><span class="line">        <span class="keyword">while</span> (str[i + <span class="number">1</span> + k] &amp;&amp; str[i - k] &amp;&amp; str[i + <span class="number">1</span> + k] === str[i - k]) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        chars.push(str.slice(i - k + <span class="number">1</span>, i + k + <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = chars.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b.length - a.length</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`排序后的数组：[<span class="subst">$&#123;result.join(<span class="string">","</span>)&#125;</span>]`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注意：特殊情况的处理 */</span></span><br><span class="line">    <span class="keyword">let</span> maxLength = result[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> allPalindromes = [];</span><br><span class="line">    result.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxLength == item.length) allPalindromes.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLength == <span class="number">1</span> ? <span class="string">`抱歉，在该字符串中没有找到回文子串`</span> : </span><br><span class="line">        <span class="string">`列出字符串中的最长回文子串为：<span class="subst">$&#123;allPalindromes.join(<span class="string">" 和 "</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">"abc"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">"ac121ca123210"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">"abccba1221a"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印结果 */</span></span><br><span class="line"><span class="comment">// wendingding$ node 02-min.js </span></span><br><span class="line"><span class="comment">// 排序后的数组：[a,b,c,,,]</span></span><br><span class="line"><span class="comment">// 抱歉，在该字符串中没有找到回文子串</span></span><br><span class="line"><span class="comment">// 排序后的数组：[ac121ca,12321,a,a,1,c,c,1,2,1,2,1,0,,,,,,,,,,,,,]</span></span><br><span class="line"><span class="comment">// 列出字符串中的最长回文子串为：ac121ca</span></span><br><span class="line"><span class="comment">// 排序后的数组：[abccba,a1221a,a,a,c,b,b,1,2,c,2,1,a,,,,,,,,,]</span></span><br><span class="line"><span class="comment">// 列出字符串中的最长回文子串为：abccba 和 a1221a</span></span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题1：检查给定的字符串是否是回文字符串。&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt; 回文字符串的特点是：&lt;c
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - 校验括号是否匹配</title>
    <link href="https://weibo.com/u/3800117445/2020/04/28/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E6%A0%A1%E9%AA%8C%E6%8B%AC%E5%8F%B7%E6%98%AF%E5%90%A6%E5%8C%B9%E9%85%8D/"/>
    <id>https://weibo.com/u/3800117445/2020/04/28/奇怪问题-校验括号是否匹配/</id>
    <published>2020-04-27T16:00:09.000Z</published>
    <updated>2020-05-06T04:02:26.216Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：给出下面的字符串，请编写函数来校验括号是否匹配，要求函数尽可能通用。</strong></div>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testString = <span class="string">"(()()()()"</span>;</span><br></pre></td></tr></table></figure><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><p><strong><code>说明</code></strong> 类似问题使用栈数据结构的方式来进行匹配会比较合理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* 1.提供简单的栈结构 Class */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = [];</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push(ele) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data[<span class="keyword">this</span>.top++] = ele;</span><br><span class="line">    &#125;</span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top--;</span><br><span class="line">        <span class="keyword">this</span>.data.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    peek() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.top - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    clear() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.括号字符串匹配校验函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">   stack.clear();                                <span class="comment">/* 清栈操作 */</span></span><br><span class="line">   str = str.trim();                             <span class="comment">/* 字符串清理 */</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;        <span class="comment">/* 遍历字符串 */</span></span><br><span class="line">       <span class="keyword">if</span> (str[i] == <span class="string">" "</span>) <span class="keyword">continue</span>;              <span class="comment">/* 如果当前字符是空格则跳过 */</span></span><br><span class="line">       <span class="keyword">if</span> (stack.peek() == <span class="string">"("</span> &amp;&amp; str[i] == <span class="string">")"</span>) &#123;</span><br><span class="line">           stack.pop();                          <span class="comment">/* 若匹配则执行出栈操作 */</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           stack.push(str[i]);                   <span class="comment">/* 不匹配则执行入栈操作 */</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(i, stack.data)                <span class="comment">/* 打印检查栈内数据结构 */</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> stack.top == <span class="number">0</span>;                        <span class="comment">/* 返回结果 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.测试数据 */</span></span><br><span class="line"><span class="keyword">let</span> res1 = matching(<span class="string">"()"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_______"</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = matching(<span class="string">"("</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_______"</span>);</span><br><span class="line"><span class="keyword">let</span> res3 = matching(<span class="string">"()("</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_______"</span>);</span><br><span class="line"><span class="keyword">let</span> res4 = matching(<span class="string">"( (())  ()()  )  "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res1, res2, res3, res4);</span><br></pre></td></tr></table></figure></p><p>打印参考：<br><img src="https://github.com/flowerField/Source/blob/master/Blog/khpp.png?raw=true"></p><p>在上面代码中<code>matching</code>函数中通过普通 for 循环遍历字符串，尝试使用<code>forEach</code>遍历调整代码如下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();            <span class="comment">/* 实例化 */</span></span><br><span class="line">    str = str.trim();                   <span class="comment">/* 清理字符串前后可能存在的空格 */</span></span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">")"</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">/* 如果开始字符为)那么直接结束 */</span></span><br><span class="line"></span><br><span class="line">    [...str].forEach(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">" "</span>) <span class="keyword">return</span>;           <span class="comment">/* 如果当前字符是空格，那么忽略处理 */</span></span><br><span class="line">        <span class="comment">/* 如果当前字符和栈顶字符匹配，那么就出栈，否则执行入栈操作 */</span></span><br><span class="line">        (stack.peek() == <span class="string">"("</span> &amp;&amp; s == <span class="string">")"</span>) ? stack.pop(): stack.push(s);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/* 如果栈内没有数据(都消除了)，那么表示()总是合法成对匹配 */</span></span><br><span class="line">    <span class="keyword">return</span> stack.top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面代码中我自己提供了一个 Stack 类来实例化 stack 栈对象，在面试中这样写可能代码显得有点多，下面我使用字符串来模拟栈结构调整代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 匹配函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span>;                                  <span class="comment">/* 1.使用字符串来模拟栈结构 */</span></span><br><span class="line">    <span class="keyword">let</span> stack = <span class="string">""</span>;                               <span class="comment">/* 2.初始化一个空栈 */</span>    </span><br><span class="line">    str = str.trim();                             <span class="comment">/* 3.对需要检查校验的字符串执行清理操作 */</span></span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">")"</span>) <span class="keyword">return</span> <span class="literal">false</span>;              <span class="comment">/* 4.如果第一个字符不正确那么直接结束 */</span></span><br><span class="line">    </span><br><span class="line">    [...str].forEach(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;                  <span class="comment">/* 5.遍历字符串 */</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">" "</span>) <span class="keyword">return</span>;                     <span class="comment">/* 6.若当前字符为空字符串，那么就忽略处理 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (stack[len - <span class="number">1</span>] === <span class="string">"("</span> &amp;&amp; s == <span class="string">")"</span>) &#123; <span class="comment">/* 7.检查是否匹配，若匹配那么就执行出栈操作*/</span></span><br><span class="line">            len--;</span><br><span class="line">            stack = stack.slice(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                                  <span class="comment">/* 8.如果不匹配那么就执行入栈操作 */</span>  </span><br><span class="line">            len++;</span><br><span class="line">            stack += s</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> len === <span class="number">0</span>;                              <span class="comment">/* 9.根据栈的长度来判断是否匹配 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：给出下面的字符串，请编写函数来校验括号是否匹配，要求函数尽可能通用。&lt;/strong&gt;&lt;/div&gt;

  &lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - 编写add(1)(2)(3)(..)函数</title>
    <link href="https://weibo.com/u/3800117445/2020/04/27/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%A5%87%E6%80%AA%E5%87%BD%E6%95%B0/"/>
    <id>https://weibo.com/u/3800117445/2020/04/27/奇怪问题-奇怪函数/</id>
    <published>2020-04-26T16:00:09.000Z</published>
    <updated>2020-05-08T04:53:55.813Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：编写函数要求函数实现 add(1)(2)(3)(4)(5) 返回所有参数的累加和15。</strong></div><p><strong>说明</strong> 编写的<code>add</code>函数需满足通用性要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)          返回值 <span class="number">3</span></span><br><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)       返回值 <span class="number">6</span></span><br><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)    返回值 <span class="number">10</span></span><br><span class="line">...以此类推</span><br></pre></td></tr></table></figure><p><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function">(<span class="params">n</span>) =&gt;</span> add(m + n);</span><br><span class="line">    fn.toString = <span class="function"><span class="params">()</span> =&gt;</span> m;</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="keyword">let</span> res1 = add(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = add(<span class="number">1</span>)(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> res3 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> res4 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> res5 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res1, res2, res3, res4, res5); <span class="comment">/* ƒ 1 ƒ 3 ƒ 6 ƒ 10 ƒ 15 ƒ 3 */</span></span><br></pre></td></tr></table></figure></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：编写函数要求函数实现 add(1)(2)(3)(4)(5) 返回所有参数的累加和15。&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - 找出复杂数组中的最大值</title>
    <link href="https://weibo.com/u/3800117445/2020/04/26/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E6%B1%82%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://weibo.com/u/3800117445/2020/04/26/奇怪问题-求数组最大值/</id>
    <published>2020-04-25T16:00:09.000Z</published>
    <updated>2020-05-07T06:26:27.131Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：给出下面的数据，请编写函数求数组的最大值。</strong></div>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">            [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">            [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>],</span><br><span class="line">            [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, [<span class="number">39</span>, <span class="number">43</span>, [<span class="number">99</span>, <span class="number">81</span>]]],</span><br><span class="line">            <span class="number">12</span></span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><p><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 整理数组元素 */</span></span><br><span class="line">   arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">           <span class="comment">/* 递归调用 */</span></span><br><span class="line">           arr[index] = findMax(item);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 数组排序 */</span></span><br><span class="line">   arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> b - a;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 总是取最大值 */</span></span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优化下代码，把利用 <code>sort</code> 排序求最大值的部分调整为 <code>Math.max</code> 方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">            arr[index] = findMax(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：给出下面的数据，请编写函数求数组的最大值。&lt;/strong&gt;&lt;/div&gt;


  &lt;figure class=&quot;highlight java
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - defineProperty</title>
    <link href="https://weibo.com/u/3800117445/2020/04/20/Gossip%20-%20defineProperty/"/>
    <id>https://weibo.com/u/3800117445/2020/04/20/Gossip - defineProperty/</id>
    <published>2020-04-19T16:00:08.000Z</published>
    <updated>2020-05-07T06:19:27.687Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍<code>Object.defineProperty()</code>方法，并基于此简单讨论数据劫持的实现方案。</div><h3 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty"></a>defineProperty</h3><p><code>Object.getOwnPropertyDescriptor(target,attrName)</code>方法用于获取对象的属性描述符对象，该方法的第一个参数为目标对象，第二个参数为指定的属性名。</p><p>我们可以利用该方法来查看对象属性的描述符配置项(包括：<code>value值</code>、<code>writable可重写</code>、<code>enumerable可枚举</code>和<code>configurable可配置</code>等)。默认正常的对象属性中，这些配置项的值都是 <code>true</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> des = <span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">"name"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(des);</span><br><span class="line"><span class="comment">/* &#123; value: '文顶顶',writable: true,enumerable: true,configurable: true &#125; */</span></span><br></pre></td></tr></table></figure><p><code>Object.defineProperty(target,attrName,options)</code>方法用于定义(设置)对象并对指定的属性描述符对象进行配置。该方法的第一个参数为目标对象，第二个参数为指定的属性名，第三个参数为配置对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 备注：给o对象添加address属性，并设置属性值为香悦山 */</span></span><br><span class="line"><span class="comment">/* 说明：默认新添加的属性，属性描述配置项均为false */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"address"</span>, &#123; <span class="attr">value</span>: <span class="string">"香悦山"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">"address"</span>));</span><br><span class="line"><span class="comment">/* &#123; value: '香悦山',writable: false,enumerable: false,configurable: false &#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 备注：重新定义age属性，设置属性值为20，该属性值可配置但无法重写和枚举 */</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"age"</span>, &#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">writable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">"age"</span>));</span><br><span class="line"><span class="comment">/* &#123; value: 20,writable: false,enumerable: false,configurable: true &#125; */</span></span><br><span class="line">o.age = <span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age); <span class="comment">//20</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, o[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* name 文顶顶 */</span></span><br><span class="line"><span class="comment">/* 在for...in循环中，age键值对 ，以及新添加的address键值对均没有被枚举 */</span></span><br></pre></td></tr></table></figure><p><code>Object.defineProperties(target,options)</code>方法用于一次性设置(<code>添加</code>)对象的多个属性，与之对应的<code>Object.getOwnPropertyDescriptors(target)</code>方法用于获取对象中所有成员的 <strong>详细</strong> 配置信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(o, &#123;</span><br><span class="line">    <span class="string">"className"</span>: &#123;</span><br><span class="line">        value: <span class="string">"H5"</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"friends"</span>: &#123;</span><br><span class="line">        value: [<span class="string">"胡适"</span>, <span class="string">"沈从文"</span>, <span class="string">"辜鸿铭"</span>],</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        writable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_____"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(o));</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123;   name:&#123; value: '文顶顶', writable: true,enumerable: true,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    age:&#123; value: 20,writable: false,enumerable: false,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    address:&#123; value: '香悦山',writable: false,enumerable: false,configurable: false &#125;,</span></span><br><span class="line"><span class="comment">    className:&#123; value: 'H5',writable: false,enumerable: false,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    friends:&#123; value: [ '胡适', '沈从文', '辜鸿铭' ],</span></span><br><span class="line"><span class="comment">              writable: true, enumerable: false,configurable: true &#125; &#125; */</span></span><br></pre></td></tr></table></figure></p><div class="tip"><a href="">Object.defineProperty </a>方法主要用于对象中的某个属性进行访问配置，如果需要对整个对象执行类似的操作则可使用<code>Object.preventExtensions()</code>、<code>Object.seal()</code>和<code>Object.freeze()</code> 等方法，它们分别对应着<code>禁止扩展</code>、<code>密封对象</code>以及要<code>冻结</code>对象。</div><h3 id="Getter-and-Setter"><a href="#Getter-and-Setter" class="headerlink" title="Getter and Setter"></a>Getter and Setter</h3><p>对于对象字面量创建的对象而言，我们可以直接通过<code>get attrName</code>或<code>set attrName</code>的方式来对属性的设置和读取操作进行拦截和监听。通过下面的代码，我们可以观察到，对象属性的 Getter 和 Setter 的代码并不复杂但却需要借助一个无关的中间变量<code>_age</code>来实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* getter 和 setter */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    name: <span class="string">"文顶顶"</span>,</span><br><span class="line">    _age: <span class="number">17</span>,</span><br><span class="line">    get age() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"监听到执行了getter方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._age;</span><br><span class="line">    &#125;,</span><br><span class="line">    set age(val) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"监听到执行了setter方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>._age = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line">o.age = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">监听到执行了getter方法</span></span><br><span class="line"><span class="comment">17</span></span><br><span class="line"><span class="comment">监听到执行了setter方法</span></span><br><span class="line"><span class="comment">监听到执行了getter方法</span></span><br><span class="line"><span class="comment">100 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p><code>Object.defineProperty()</code>方法的配置对象中也支持对象属性的 <code>Getter</code> 和 <code>Setter</code>操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(o, <span class="string">"age"</span>, &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"——getter———"</span>);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(val) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"——setter———"</span>);</span><br><span class="line">            temp = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(o.age);</span><br><span class="line">    o.age = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(o.age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行情况 */</span></span><br><span class="line">    <span class="comment">// ——getter———</span></span><br><span class="line">    <span class="comment">// 18</span></span><br><span class="line">    <span class="comment">// ——setter———</span></span><br><span class="line">    <span class="comment">// ——getter———</span></span><br><span class="line">    <span class="comment">// 100</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p><hr><br>利用<code>Object.defineProperty()</code>方法，来监听对象属性的设置和读取操作，可以不必借助于中间属性来实现而改用一个外部变量即可，这样的处理方式为代码的封装提供了可能。</p><p><strong>注意</strong> 在 <code>defineProperty</code> 方法内部使用 <code>set 和 get</code> 函数时不能与 <code>value 和 writable</code> 共存。上述的代码演示了监听对象单个属性读写的方案，如果需要为对象中所有的属性都添加 <code>set 和 get</code> 监听，可以考虑对上述代码进行封装。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> || target == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.hasOwnProperty(key)) defineReactive(target, key, target[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defineReactive = <span class="function">(<span class="params">target, key, val</span>) =&gt;</span> &#123;</span><br><span class="line">    observer(val); <span class="comment">/* 递归解决多层对象解构问题 */</span></span><br><span class="line">    <span class="comment">/* val 是外部传入的参数：就是指定属性的默认值 */</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            handler(<span class="string">"getter"</span>)</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(_val) &#123;</span><br><span class="line">            handler(<span class="string">"setter"</span>)</span><br><span class="line">            val = _val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"监听到"</span> + text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试代码 */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">car</span>: &#123; <span class="attr">color</span>: <span class="string">"white"</span> &#125; &#125;;</span><br><span class="line">observer(o);</span><br><span class="line">o.age = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line">o.car.color = <span class="string">"black"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.car.color);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行情况 */</span></span><br><span class="line"><span class="comment">// 监听到setter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 监听到setter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// black</span></span><br></pre></td></tr></table></figure></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍&lt;code&gt;Object.defineProperty()&lt;/code&gt;方法，并基于此简单讨论数据劫持的实现方案。&lt;/div&gt;

&lt;h3 id=&quot;defineProperty&quot;&gt;&lt;a href=&quot;#defineProperty&quot; clas
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip -  ast &amp;&amp; render</title>
    <link href="https://weibo.com/u/3800117445/2020/04/10/Gossip%20-%20ast%20&amp;&amp;%20render/"/>
    <id>https://weibo.com/u/3800117445/2020/04/10/Gossip - ast &amp;&amp; render/</id>
    <published>2020-04-09T16:00:08.000Z</published>
    <updated>2020-05-07T06:19:27.687Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">在 <a href="http://wendingding.com/2019/08/25/Gossip%20-%20html-parser/" target="_blank" rel="noopener">html-parser</a> 这篇文章中，简单探讨了 html模板字符串 编译为 AST 抽象语法树的过程，本文作为后续将继续讨论 AST 转换为 渲染字符串并最终调整为 <code>render 渲染函数</code>的具体过程，这样的讨论有益于我们加深对常见的<code>模板引擎</code>其工作机制以及<code>Vue</code>等前端框架的理解 。</div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/ast_ex.png?raw=true"></p><p>在上图中简单画出了这篇文章的代码要完成的主要工作，即把 <a href="http://wendingding.com/2019/08/25/Gossip%20-%20html-parser/" target="_blank" rel="noopener">html-parser</a> 中模板编译得到的 AST 抽象语法树处理为 <code>render字符串</code>继而包装为<code>render渲染函数</code>。</p><p>假设我们要编译的<code>模板字符串</code>为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span> title=<span class="string">"标题"</span>&gt;&lt;p&gt;hello&lt;/p&gt;&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>那么编译为 <code>AST 语法树</code>后大概应该长成下面这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &#123; <span class="attr">tag</span>: <span class="string">'div'</span>,</span><br><span class="line">  attrs:</span><br><span class="line">   [ &#123; <span class="attr">name</span>: <span class="string">'id'</span>, <span class="attr">value</span>: <span class="string">'app'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'title'</span>, <span class="attr">value</span>: <span class="string">'标题'</span> &#125; ],</span><br><span class="line">  children:</span><br><span class="line">   [ &#123; <span class="attr">tag</span>: <span class="string">'p'</span>,</span><br><span class="line">       attrs: [],</span><br><span class="line">       children: [<span class="built_in">Array</span>],</span><br><span class="line">       parent: [Circular],</span><br><span class="line">       nodeType: <span class="number">1</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">tag</span>: <span class="string">'span'</span>,</span><br><span class="line">       attrs: [],</span><br><span class="line">       children: [<span class="built_in">Array</span>],</span><br><span class="line">       parent: [Circular],</span><br><span class="line">       nodeType: <span class="number">1</span> &#125; ],</span><br><span class="line">  parent: <span class="literal">null</span>,</span><br><span class="line">  nodeType: <span class="number">1</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们需要通过代码来得到的<code>renderString</code>应该是下面这样的字符串结构(忽略换行)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'_createElement("div",</span></span><br><span class="line"><span class="string">    &#123;id:"app",title:"标题"&#125;,</span></span><br><span class="line"><span class="string">    _createElement("p",null,_v("hello")),</span></span><br><span class="line"><span class="string">    _createElement("span",null,_v(_s(msg))))'</span></span><br></pre></td></tr></table></figure><p>在得到的整个字符串中，主要包含的要素有：<code>_createElement</code>这是创建函数的名称，<code>div</code>和<code>p</code>等这是对应标签的名称，<code>{id:&quot;app&quot;,title:&quot;标题&quot;}</code>这部分是对应标签的属性节点，如果当前标签存在子标签，那么应该以递归的方式来进行处理。因为整个过程比较复杂，所有下面分成 <strong>属性节点处理</strong> 和 <strong>标签(子)节点处理</strong>两个部分。</p><div class="titleX"><strong>属性节点的处理</strong></div><p>属性节点的处理要求把<code>attrs:[ { name: &#39;id&#39;, value: &#39;app&#39; }, { name: &#39;title&#39;, value: &#39;标题&#39; } ]</code>这样的对象结构转换为<code>{id:&quot;app&quot;,title:&quot;标题&quot;}</code>字符串，难度不大。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:"app",title:"标题", */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, <span class="number">-1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> attrs = [&#123; <span class="attr">name</span>: <span class="string">'id'</span>, <span class="attr">value</span>: <span class="string">'app'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'title'</span>, <span class="attr">value</span>: <span class="string">'标题'</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> attrsString = generateAttrs(attrs);</span><br><span class="line"><span class="built_in">console</span>.log(attrsString);  <span class="comment">/* &#123; id:"app",title:"标题" &#125; */</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中封装了的<code>generateAttrs</code>函数，虽然能够解决标签中简单属性节点但还需要注意一种特殊的属性节点，那就是<code>style</code>，我们在给标签设置行内样式的时候，是可以给 <code>style</code>设置多个样式的，比如宽度和高度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( generateAttrs([name:<span class="string">"style"</span>,<span class="attr">value</span>:<span class="string">"color:red;background:#000"</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*执行上面的代码，得到打印结果为*/</span></span><br><span class="line"><span class="string">'&#123; style:"color:red;background:#000" &#125;'</span></span><br><span class="line"><span class="comment">/* 我想要的结果 */</span></span><br><span class="line"><span class="string">'&#123; style:&#123;"color":"red","background":"#000"&#125; &#125;`</span></span><br></pre></td></tr></table></figure></p><p>调整<code>generateAttrs</code>函数的实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* 2.1 如果属性节点名称为 style那么则对 value进行中间处理 */</span></span><br><span class="line">        <span class="keyword">if</span> (attr.name === <span class="string">'style'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            attr.value.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> [key, value] = item.split(<span class="string">':'</span>);</span><br><span class="line">                obj[key] = value</span><br><span class="line">            &#125;);</span><br><span class="line">            attr.value = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:"app",title:"标题", */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, <span class="number">-1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="titleX"><strong>标签(子)节点的处理</strong></div><p>标签(子)节点的处理因为涉及到标签嵌套(标签可能存在多个子标签)所以会稍显复杂。</p><p>这里我们暂且不考虑标签的属性节点，假设我们有模板字符串为<code>&lt;p&gt;hello&lt;/p&gt;</code>,它转换之后的结果应该为<code>_createElement(&quot;p&quot;,null,_v(&quot;hello&quot;))</code>,这里<code>_createElement</code>为固定的函数名字，第一个参数<code>p</code>表示标签的类型(名称)，第二个参数用来放置属性节点( 如果没有属性节点那么显示为 null ),第三个参数<code>_v(&quot;hello&quot;)</code>表示 p标签的文本内容<code>hello</code>，此处如果标签中的内容为类似<code></code>的插值语法，那么还需要处理为<code>_createElement(&quot;span&quot;,null,_v(_s(msg))))</code>结构，做额外的处理。</p><p>那么怎么转换呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="built_in">JSON</span>.stringify(node.text); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;text&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generateText(&#123; <span class="attr">text</span>: <span class="string">"hello"</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(generateText(&#123; <span class="attr">text</span>: <span class="string">"My name is &#123;&#123;name&#125;&#125;"</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上述代码的执行结果 */</span></span><br><span class="line"><span class="comment">/* _v("hello") */</span></span><br><span class="line"><span class="comment">/* _v("My name is &#123;&#123;name&#125;&#125;") */</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我封装了一个专门用来处理标签内容(字符串)的函数<code>generateText</code>，内部的逻辑非常简单只是字符串的无脑拼接而已。但是<code>_v(&quot;My name is &quot;)</code>只能算是半成品，因为我们在真正渲染的时候，插值语法<code></code>中的变量是需要用真正的实例数据来进行替换的，因此我们需要进一步处理为<code>_v(&quot;My name is &quot;+_s(name))</code>这样的结构。那要怎么做呢？ </p><p>要处理这个问题无疑是个挑战，因为当我们面对<code>&quot;My name is  &quot;</code>这样内容的时候，首先应该先把普通字符串和插值语法的部分区分开来，然后对插值语法的部分单独处理成<code>_s(name)</code>结构，最后再拼接。</p><p>无疑，字符串插值语法部分的匹配需要用到正则表达式，下面试着给出对应的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultTagRE = <span class="regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tokens = [];</span><br><span class="line">    <span class="keyword">let</span> match, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文本内容 */</span></span><br><span class="line">    <span class="keyword">let</span> text = node.text;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果是全局匹配 那么每次匹配的时候都需要将 lastIndex 调整到0*/</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex = defaultTagRE.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 正则匹配(匹配插值语法部分的内容) */</span></span><br><span class="line">    <span class="keyword">while</span> (match = defaultTagRE.exec(text)) &#123;</span><br><span class="line">        index = match.index;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">            tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex, index)));</span><br><span class="line">        &#125;</span><br><span class="line">        tokens.push(<span class="string">`_s(<span class="subst">$&#123;match[<span class="number">1</span>].trim()&#125;</span>)`</span>);</span><br><span class="line">        lastIndex = index + match[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt; text.length) &#123;</span><br><span class="line">        tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"tokens"</span>, tokens); <span class="comment">/* tokens [ '"My name is "', '_s(name)' ] */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;tokens.join(<span class="string">'+'</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generateText(&#123; <span class="attr">text</span>: <span class="string">"hello"</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(generateText(&#123; <span class="attr">text</span>: <span class="string">"My name is &#123;&#123;name&#125;&#125; biubiubiu @"</span> &#125;));</span><br><span class="line"><span class="comment">/* 打印结果 */</span></span><br><span class="line"><span class="comment">/* _v("hello")  */</span></span><br><span class="line"><span class="comment">/* _v("My name is "+_s(name)+" biubiubiu @")*/</span></span><br></pre></td></tr></table></figure><p>此外，我们还需要考虑到标签的嵌套，这个问题我们可以通过函数的递归调用来实现。</p><p>最后一步，我们还需要完成<code>RenderString-&gt;RenderFunction</code>,即把拼接好的字符串转换为函数，这个过程需要用到两个小技巧。我们可以通过 <code>new Function</code>来创建函数并将字符串转换为函数体内容，此外插值语法(如 <code></code> )中的<code>name</code>变量应该通过作用域绑定的方式来进行处理，因此这里还用到了<code>with特性</code>。</p><p>下面给出整个过程的完整代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 形如：abc-123 */</span></span><br><span class="line"><span class="keyword">const</span> nc_name = <span class="string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;aaa:bbb&gt; */</span></span><br><span class="line"><span class="keyword">const</span> q_nameCapture = <span class="string">`((?:<span class="subst">$&#123;nc_name&#125;</span>\\:)?<span class="subst">$&#123;nc_name&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;div   匹配开始标签的左半部分 */</span></span><br><span class="line"><span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;q_nameCapture&#125;</span>`</span>);</span><br><span class="line"><span class="comment">/* 匹配开始标签的右半部分(&gt;) 形如`&gt;`或者`  &gt;`前面允许存在 N(N&gt;=0)个空格 */</span></span><br><span class="line"><span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span>;</span><br><span class="line"><span class="comment">/* 匹配闭合标签：形如 &lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">const</span> endTag = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;\\/<span class="subst">$&#123;q_nameCapture&#125;</span>[^&gt;]*&gt;`</span>);</span><br><span class="line"><span class="comment">/* 匹配属性节点：形如 id="app" 或者 id='app' 或者 id=app 等形式的字符串 */</span></span><br><span class="line"><span class="keyword">const</span> att =<span class="regexp">/^\s*([^\s"'&lt;&gt;\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=&lt;div&gt;`]+)))?/</span></span><br><span class="line"><span class="comment">/* 匹配插值语法：形如 &#123;&#123;msg&#125;&#125; */</span></span><br><span class="line"><span class="keyword">const</span> defaultTagRE = <span class="regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标记节点类型(文本节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_TEXT = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(元素节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_ELEMENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = []; <span class="comment">/* 数组模拟栈结构 */</span></span><br><span class="line"><span class="keyword">let</span> root = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> currentParent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 推进函数：每处理完一部分模板就向前推进删除一段 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">advance</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        html = html.substring(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析开始标签部分：主要提取标签名和属性节点 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parser_start_html</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 00-正则匹配 &lt;div id="app" title="标题"&gt;模板结构*/</span></span><br><span class="line">        <span class="keyword">let</span> start = html.match(startTagOpen);</span><br><span class="line">        <span class="keyword">if</span> (start) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 01-提取标签名称 形如 div */</span></span><br><span class="line">            <span class="keyword">const</span> tagInfo = &#123;</span><br><span class="line">                tag: start[<span class="number">1</span>],</span><br><span class="line">                attrs: []</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除&lt;div部分 */</span></span><br><span class="line">            advance(start[<span class="number">0</span>].length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 02-提取属性节点部分 形如：id="app" title="标题"*/</span></span><br><span class="line">            <span class="keyword">let</span> attr, end;</span><br><span class="line">            <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(att))) &#123;</span><br><span class="line">                tagInfo.attrs.push(&#123;</span><br><span class="line">                    name: attr[<span class="number">1</span>],</span><br><span class="line">                    value: attr[<span class="number">3</span>] || attr[<span class="number">4</span>] || attr[<span class="number">5</span>]</span><br><span class="line">                &#125;);</span><br><span class="line">                advance(attr[<span class="number">0</span>].length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 03-处理开始标签 形如 &gt;*/</span></span><br><span class="line">            <span class="keyword">if</span> (end) &#123;</span><br><span class="line">                advance(end[<span class="number">0</span>].length);</span><br><span class="line">                <span class="keyword">return</span> tagInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (html) &#123;</span><br><span class="line">        <span class="keyword">let</span> textTag = html.indexOf(<span class="string">'&lt;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果以&lt;开头 */</span></span><br><span class="line">        <span class="keyword">if</span> (textTag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* (1) 可能是开始标签 形如:&lt;div id="app"&gt; */</span></span><br><span class="line">            <span class="keyword">let</span> startTagMatch = parser_start_html();</span><br><span class="line">            <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">                start(startTagMatch.tag, startTagMatch.attrs);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* (2) 可能是结束标签 形如:&lt;/div&gt;*/</span></span><br><span class="line">            <span class="keyword">let</span> endTagMatch = html.match(endTag);</span><br><span class="line">            <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">                advance(endTagMatch[<span class="number">0</span>].length);</span><br><span class="line">                end(endTagMatch[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 文本内容的处理 */</span></span><br><span class="line">        <span class="keyword">let</span> text;</span><br><span class="line">        <span class="keyword">if</span> (textTag &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            text = html.substring(<span class="number">0</span>, textTag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            advance(text.length);</span><br><span class="line">            chars(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文本处理函数：&lt;span&gt;  hello &lt;span&gt; =&gt; text的值为 " hello "*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chars</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.先处理文本字符串中所有的空格，全部替换为空 */</span></span><br><span class="line">    text = text.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.把数据组织成&#123;text:"hello",type:3&#125;的形式保存为当前父节点的子元素 */</span></span><br><span class="line">    <span class="keyword">if</span> (text) &#123;</span><br><span class="line">        currentParent.children.push(&#123;</span><br><span class="line">            text,</span><br><span class="line">            nodeType: NODE_TYPE_TEXT</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = createASTElement(tag, attrs);</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        root = element;</span><br><span class="line">    &#125;</span><br><span class="line">    currentParent = element;</span><br><span class="line">    stack.push(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">tagName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = stack.pop();</span><br><span class="line">    currentParent = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (currentParent) &#123;</span><br><span class="line">        element.parent = currentParent;</span><br><span class="line">        currentParent.children.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createASTElement</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        tag,</span><br><span class="line">        attrs,</span><br><span class="line">        children: [],</span><br><span class="line">        parent: <span class="literal">null</span>,</span><br><span class="line">        nodeType: NODE_TYPE_ELEMENT</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ****************** */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* 2.1 如果属性节点名称为 style那么则对 value进行中间处理 */</span></span><br><span class="line">        <span class="keyword">if</span> (attr.name === <span class="string">'style'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            attr.value.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> [key, value] = item.split(<span class="string">':'</span>);</span><br><span class="line">                obj[key] = value</span><br><span class="line">            &#125;);</span><br><span class="line">            attr.value = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:"app",title:"标题", */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, <span class="number">-1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateChildren</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = el.children;</span><br><span class="line">    <span class="keyword">return</span> (children &amp;&amp; children.length &gt; <span class="number">0</span>)</span><br><span class="line">     ? <span class="string">`<span class="subst">$&#123;children.map(c =&gt; generate(c)).join(<span class="string">','</span>)&#125;</span>`</span> </span><br><span class="line">     : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 如果是子标签那么就递归调用 */</span></span><br><span class="line">    <span class="keyword">return</span> node.nodeType == <span class="number">1</span> ? generateRenderString(node) : generateText(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tokens = [];</span><br><span class="line">    <span class="keyword">let</span> match, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文本内容 */</span></span><br><span class="line">    <span class="keyword">let</span> text = node.text;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果是全局匹配 那么每次匹配的时候都需要将 lastIndex 调整到0*/</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex = defaultTagRE.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 正则匹配(匹配插值语法部分的内容) */</span></span><br><span class="line">    <span class="keyword">while</span> (match = defaultTagRE.exec(text)) &#123;</span><br><span class="line">        index = match.index;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">            tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex, index)));</span><br><span class="line">        &#125;</span><br><span class="line">        tokens.push(<span class="string">`_s(<span class="subst">$&#123;match[<span class="number">1</span>].trim()&#125;</span>)`</span>);</span><br><span class="line">        lastIndex = index + match[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt; text.length) &#123;</span><br><span class="line">        tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;tokens.join(<span class="string">'+'</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数：完成每个部分字符串(标签名 &amp;&amp; 属性节点 &amp;&amp; 子节点)的拼接 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRenderString</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = generateChildren(el);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_createElement("<span class="subst">$&#123;el.tag&#125;</span>",<span class="subst">$&#123;el.attrs.length ? generateAttrs(el.attrs) : <span class="string">'null'</span>&#125;</span><span class="subst">$&#123; children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span> : <span class="string">''</span>&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compilerToFunction</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* Html-&gt;AST */</span></span><br><span class="line">    <span class="keyword">let</span> root = compiler(template);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* AST-&gt;RenderString */</span></span><br><span class="line">    <span class="keyword">let</span> renderString = generateRenderString(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* RenderString-&gt;RenderFunction */</span></span><br><span class="line">    <span class="keyword">let</span> renderFn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">`with(this)&#123; return <span class="subst">$&#123;renderString&#125;</span>&#125;`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"renderString"</span>, renderString,<span class="string">'renderFn'</span>, renderFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const template = `&lt;div&gt;&lt;span class="span-class"&gt;Hi 夏!&lt;/span&gt;&lt;/div&gt;`;</span></span><br><span class="line"><span class="comment">// const template = `&lt;div id="app" title="标题"&gt;&lt;p&gt;hello&lt;/p&gt;&lt;span&gt;vito&lt;/span&gt;&lt;/div&gt;`</span></span><br><span class="line"> <span class="keyword">const</span> template = <span class="string">`&lt;a id="app" title="标题"&gt;&lt;p&gt;hello&lt;/p&gt;&lt;span&gt;My name is &#123;&#123;name&#125;&#125; dududu!!!&lt;/span&gt;&lt;/a&gt;`</span>;</span><br><span class="line">    </span><br><span class="line">compilerToFunction(template);</span><br></pre></td></tr></table></figure><p>最后，给出上述代码的测试结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">renderString </span><br><span class="line">    _createElement(<span class="string">"a"</span>,</span><br><span class="line">        &#123; id:<span class="string">"app"</span>,title:<span class="string">"标题"</span> &#125;,</span><br><span class="line">        _createElement(<span class="string">"p"</span>,null,_v(<span class="string">"hello"</span>)),</span><br><span class="line">        _createElement(<span class="string">"span"</span>,null,_v(<span class="string">"My name is"</span>+_s(name)+<span class="string">"dududu!!!"</span>))) </span><br><span class="line"></span><br><span class="line">renderFn </span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">anonymous</span></span>() &#123;</span><br><span class="line">        with(this)&#123; </span><br><span class="line">            <span class="built_in">return</span> _createElement(<span class="string">"a"</span>,</span><br><span class="line">                &#123; id:<span class="string">"app"</span>,title:<span class="string">"标题"</span> &#125;,</span><br><span class="line">                _createElement(<span class="string">"p"</span>,null,_v(<span class="string">"hello"</span>)),</span><br><span class="line">                _createElement(<span class="string">"span"</span>,null,_v(<span class="string">"My name is"</span>+_s(name)+<span class="string">"dududu!!!"</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;在 &lt;a href=&quot;http://wendingding.com/2019/08/25/Gossip%20-%20html-parser/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;html-parser&lt;/a&gt; 这篇文章
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - html-parser</title>
    <link href="https://weibo.com/u/3800117445/2020/04/06/Gossip%20-%20html-parser/"/>
    <id>https://weibo.com/u/3800117445/2020/04/06/Gossip - html-parser/</id>
    <published>2020-04-05T16:00:08.000Z</published>
    <updated>2020-05-07T06:19:27.687Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文简单研究 html标签的编译过程，模板的编译是前端主流框架中的基础部分，搞清楚这块内容对于理解框架的工作原理、<code>virtual-DOM</code> 有诸多益处 ，因限于篇幅所以本文将仅仅探讨把 html 字符串模板处理成 AST 树对象结构的过程。</div><div class="titleX"><strong>单标签 HTML模板的解析</strong></div><p>因为 HTML 解析的过程相对麻烦和复杂，因此为了把这个过程讲清楚，我这里先从下面这段最简单的 HTML 标签开始入手。我们专注一个点，需要做的似乎就是封装一个解析函数来完成转换，把<code>字符串模板(template)</code>作为函数的输入，把<code>Tree 结构对象</code>作为函数的输出即可。</p><p><strong>输入</strong> <code>字符串模板(template)</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 举例： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>输出</strong> <code>Tree 结构对象</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   tag: <span class="string">"div"</span>,</span><br><span class="line">   attrs:[&#123;<span class="attr">name</span>:<span class="string">"id"</span>,<span class="attr">value</span>:<span class="string">"app"</span>&#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>观察上面的输入和输出，我们需要逐字的扫描<code>HTML字符串模板</code>，提取里面的标签名称作为最终对象的 Tag 属性值，提取里面的属性节点保存到 attrs 属性中，因为标签身上可能有多个属性节点，所以 <code>attrs</code> 使用对象数组结构。</p><p>在扫描<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>字符串的时候，我们需区分<strong>开始标签、属性节点、闭合标签</strong>等部分，又因为标签的类型可以有很多种(<code>div</code>、<code>span</code>等)，而属性节点的 <code>key</code> 和 <code>value</code>我们也无法限定和预估，因此在具体操作的时候似乎还需要用到 <code>正则表达式</code>来进行匹配，下面给出需要用到的正则表达式，并试着给出解析上述 HTML 模板字符串的 JavaScript 实现代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 形如：abc-123 */</span></span><br><span class="line"><span class="keyword">const</span> nc_name = <span class="string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 形如：&lt;aaa:bbb&gt; */</span></span><br><span class="line"><span class="keyword">const</span> q_nameCapture = <span class="string">`((?:<span class="subst">$&#123;nc_name&#125;</span>\\:)?<span class="subst">$&#123;nc_name&#125;</span>)`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 形如：&lt;div   匹配开始标签的左半部分 */</span></span><br><span class="line"><span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;q_nameCapture&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配开始标签的右半部分(&gt;) 形如`&gt;`或者`  &gt;`前面允许存在 N(N&gt;=0)个空格 */</span></span><br><span class="line"><span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配属性节点：形如 id="app" 或者 id='app' 或者 id=app 等形式的字符串 */</span></span><br><span class="line"><span class="keyword">const</span> att =<span class="regexp">/^\s*([^\s"'&lt;&gt;\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=&lt;div&gt;`]+)))?/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`&lt;div id="app"&gt;&lt;/div&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parser_html</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 在字符串中搜索&lt;字符并获取索引 */</span></span><br><span class="line">    <span class="keyword">let</span> textStart = html.indexOf(<span class="string">'&lt;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 标签的开头 */</span></span><br><span class="line">    <span class="keyword">if</span> (textStart == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 匹配标签的开头 */</span></span><br><span class="line">        <span class="keyword">let</span> start = html.match(startTagOpen);</span><br><span class="line">        <span class="comment">/* start的结果为：["&lt;div","div",...] */</span></span><br><span class="line">        <span class="keyword">if</span> (start) &#123;</span><br><span class="line">            <span class="keyword">const</span> tagInfo = &#123;</span><br><span class="line">                tag: start[<span class="number">1</span>],</span><br><span class="line">                attrs: []</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除已经匹配过的这部分标签 html-&gt;' id="app"&gt;&lt;/div&gt;'*/</span></span><br><span class="line">            html = html.slice(start[<span class="number">0</span>].length)</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 匹配属性节点部分 */</span></span><br><span class="line">            <span class="comment">/* 考虑到标签可能存在多个属性节点，因此这里使用循环 */</span></span><br><span class="line">            <span class="keyword">let</span> attr, end;</span><br><span class="line">            <span class="comment">/* 换言之：(如果 end 有值那么循环结束)，即当匹配到关闭标签的时候结束循环 */</span></span><br><span class="line">            <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(att))) &#123;</span><br><span class="line">                tagInfo.attrs.push(&#123;</span><br><span class="line">                    name: attr[<span class="number">1</span>],</span><br><span class="line">                    value: attr[<span class="number">3</span>] || attr[<span class="number">4</span>] || attr[<span class="number">5</span>]</span><br><span class="line">                &#125;)</span><br><span class="line">                html = html.slice(attr[<span class="number">0</span>].length)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* html-&gt; ' &gt;&lt;/div&gt;' */</span></span><br><span class="line">            <span class="keyword">if</span> (end) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* 此处可能是'  &gt;'因此第一个参数不能直接写0 */</span></span><br><span class="line">                html = html.slice(end[<span class="number">0</span>].length); </span><br><span class="line">                <span class="comment">/* html-&gt; '&lt;/div&gt;' */</span></span><br><span class="line">                <span class="comment">/* 此处，关闭标签并不影响整体结果，因此暂不处理 */</span></span><br><span class="line">                <span class="keyword">return</span> tagInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tree = parser_html(template);</span><br><span class="line"><span class="built_in">console</span>.log(tree);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">打印结果：</span></span><br><span class="line"><span class="comment">&#123; tag: 'div', </span></span><br><span class="line"><span class="comment">  attrs: [ &#123; name: 'id', value: 'app' &#125; ] &#125; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(parser_html(<span class="string">`&lt;span id="app" title="标题"&gt;&lt;/span&gt;`</span>));</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">打印结果：</span></span><br><span class="line"><span class="comment">&#123; tag: 'span',</span></span><br><span class="line"><span class="comment">  attrs:</span></span><br><span class="line"><span class="comment">   [ &#123; name: 'id', value: 'app' &#125;, &#123; name: 'title', value: '标题' &#125; ] &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>在上面的代码中，多个地方都用到了字符串的<code>match</code>方法，该方法接收一个正则表达式作为参数，用于进行正则匹配，并返回匹配的结果。</p><p>这里以属性匹配为例，当我们对字符串<code>&#39; id=&quot;app&quot;&gt;&lt;/div&gt;&#39;</code>应用正则匹配<code>att</code>后，得到的结果是一个数组，而如果匹配不成功，那么得到的结果为 null。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/reg_test.png?raw=true"></p><div class="titleX"><strong>复杂标签 HTML模板的解析</strong></div><p>上文中处理的HTML 字符串模板比较简单，是单标签的(只有一个标签)，如果我们要处理的标签结构比较复杂，比如存在嵌套关系(既标签中又有一个或多个子标签，而子标签也有自己的属性节点、内容甚至是子节点)和文本内容等。</p><p>这里简单给出HTML 字符串模板编译的示例代码，基本上解决了标签嵌套的问题，能够最终得到一棵描述 标签结构的 “Tree”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 形如：abc-123 */</span></span><br><span class="line"><span class="keyword">const</span> nc_name = <span class="string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;aaa:bbb&gt; */</span></span><br><span class="line"><span class="keyword">const</span> q_nameCapture = <span class="string">`((?:<span class="subst">$&#123;nc_name&#125;</span>\\:)?<span class="subst">$&#123;nc_name&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;div   匹配开始标签的左半部分 */</span></span><br><span class="line"><span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;q_nameCapture&#125;</span>`</span>);</span><br><span class="line"><span class="comment">/* 匹配开始标签的右半部分(&gt;) 形如`&gt;`或者`  &gt;`前面允许存在 N(N&gt;=0)个空格 */</span></span><br><span class="line"><span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span>;</span><br><span class="line"><span class="comment">/* 匹配闭合标签：形如 &lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">const</span> endTag = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;\\/<span class="subst">$&#123;q_nameCapture&#125;</span>[^&gt;]*&gt;`</span>);</span><br><span class="line"><span class="comment">/* 匹配属性节点：形如 id="app" 或者 id='app' 或者 id=app 等形式的字符串 */</span></span><br><span class="line"><span class="keyword">const</span> att = <span class="regexp">/^\s*([^\s"'&lt;&gt;\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=&lt;div&gt;`]+)))?/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const template = `&lt;div&gt;&lt;span class="span-class"&gt;Hi 夏!&lt;/span&gt;&lt;/div&gt;`;</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;div id="app" title="标题"&gt;&lt;p&gt;hello&lt;/p&gt;&lt;span&gt;vito&lt;/span&gt;&lt;/div&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标记节点类型(文本节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_TEXT = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(元素节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_ELEMENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = []; <span class="comment">/* 数组模拟栈结构 */</span></span><br><span class="line"><span class="keyword">let</span> root = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> currentParent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 推进函数：每处理完一部分模板就向前推进删除一段 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">advance</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        html = html.substring(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析开始标签部分：主要提取标签名和属性节点 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parser_start_html</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 00-正则匹配 &lt;div id="app" title="标题"&gt;模板结构*/</span></span><br><span class="line">        <span class="keyword">let</span> start = html.match(startTagOpen);</span><br><span class="line">        <span class="keyword">if</span> (start) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 01-提取标签名称 形如 div */</span></span><br><span class="line">            <span class="keyword">const</span> tagInfo = &#123;</span><br><span class="line">                tag: start[<span class="number">1</span>],</span><br><span class="line">                attrs: []</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除&lt;div部分 */</span></span><br><span class="line">            advance(start[<span class="number">0</span>].length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 02-提取属性节点部分 形如：id="app" title="标题"*/</span></span><br><span class="line">            <span class="keyword">let</span> attr, end;</span><br><span class="line">            <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(att))) &#123;</span><br><span class="line">                tagInfo.attrs.push(&#123;</span><br><span class="line">                    name: attr[<span class="number">1</span>],</span><br><span class="line">                    value: attr[<span class="number">3</span>] || attr[<span class="number">4</span>] || attr[<span class="number">5</span>]</span><br><span class="line">                &#125;);</span><br><span class="line">                advance(attr[<span class="number">0</span>].length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 03-处理开始标签 形如 &gt;*/</span></span><br><span class="line">            <span class="keyword">if</span> (end) &#123;</span><br><span class="line">                advance(end[<span class="number">0</span>].length);</span><br><span class="line">                <span class="keyword">return</span> tagInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (html) &#123;</span><br><span class="line">        <span class="keyword">let</span> textTag = html.indexOf(<span class="string">'&lt;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果以&lt;开头 */</span></span><br><span class="line">        <span class="keyword">if</span> (textTag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* (1) 可能是开始标签 形如:&lt;div id="app"&gt; */</span></span><br><span class="line">            <span class="keyword">let</span> startTagMatch = parser_start_html();</span><br><span class="line">            <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">                start(startTagMatch.tag, startTagMatch.attrs);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* (2) 可能是结束标签 形如:&lt;/div&gt;*/</span></span><br><span class="line">            <span class="keyword">let</span> endTagMatch = html.match(endTag);</span><br><span class="line">            <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">                advance(endTagMatch[<span class="number">0</span>].length);</span><br><span class="line">                end(endTagMatch[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 文本内容的处理 */</span></span><br><span class="line">        <span class="keyword">let</span> text;</span><br><span class="line">        <span class="keyword">if</span> (textTag &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            text = html.substring(<span class="number">0</span>, textTag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            advance(text.length);</span><br><span class="line">            chars(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文本处理函数：&lt;span&gt;  hello &lt;span&gt; =&gt; text的值为 " hello "*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chars</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.先处理文本字符串中所有的空格，全部替换为空 */</span></span><br><span class="line">    text = text.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.把数据组织成&#123;text:"hello",type:3&#125;的形式保存为当前父节点的子元素 */</span></span><br><span class="line">    <span class="keyword">if</span> (text) &#123;</span><br><span class="line">        currentParent.children.push(&#123;</span><br><span class="line">            text,</span><br><span class="line">            type: NODE_TYPE_TEXT</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = createASTElement(tag, attrs);</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        root = element;</span><br><span class="line">    &#125;</span><br><span class="line">    currentParent = element;</span><br><span class="line">    stack.push(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">tagName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = stack.pop();</span><br><span class="line">    currentParent = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (currentParent) &#123;</span><br><span class="line">        element.parent = currentParent;</span><br><span class="line">        currentParent.children.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createASTElement</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        tag,</span><br><span class="line">        attrs,</span><br><span class="line">        children: [],</span><br><span class="line">        parent: <span class="literal">null</span>,</span><br><span class="line">        nodeType: NODE_TYPE_ELEMENT</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(compiler(template));</span><br></pre></td></tr></table></figure><p>执行上述代码，我们可以得到下面的显示结果。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/compiler_test.png?raw=true"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文简单研究 html标签的编译过程，模板的编译是前端主流框架中的基础部分，搞清楚这块内容对于理解框架的工作原理、&lt;code&gt;virtual-DOM&lt;/code&gt; 有诸多益处 ，因限于篇幅所以本文将仅仅探讨把 html 字符串模板处理成 AST 
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - Objet &amp;&amp; Array hijacked</title>
    <link href="https://weibo.com/u/3800117445/2020/04/05/Gossip%20-%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84%E7%9A%84%E8%AF%BB%E5%86%99%E5%8A%AB%E6%8C%81/"/>
    <id>https://weibo.com/u/3800117445/2020/04/05/Gossip - 对象和数组的读写劫持/</id>
    <published>2020-04-04T16:00:08.000Z</published>
    <updated>2020-05-07T07:26:01.122Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文讨论如何监听对象中所有属性的读和写操作，以及对于数组的劫持特殊处理，本文将从侧面来介绍 Vue2.X版本中响应式数据监听的原理。本文将用到 <a href="">Object.defineProperty</a>方法，该方法以及[getter 和 setter] 方法的具体使用方式，可以参考另一篇<a href="http://wendingding.com/2019/08/25/Gossip%20-%20defineProperty/" target="_blank" rel="noopener">博客文章</a>。</div><div class="titleX"><strong>对象劫持</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> o === <span class="string">"object"</span> &amp;&amp; o != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*核心函数：通过Object.defineProperty方法实现劫持*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 递归调用：解决value也是对象的情况 */</span></span><br><span class="line">    observe(value);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>--读`</span>)</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newValue) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>--写`</span>)</span><br><span class="line">                <span class="comment">/* 如果数据的值没有改变那么就直接返回 */</span></span><br><span class="line">            <span class="keyword">if</span> (value === newValue) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">/* 如果设置的新数据是对象，那么也应该进行监听 */</span></span><br><span class="line">            observe(newValue);</span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Observer 类(构造函数) */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.walk(val)</span><br><span class="line">    &#125;</span><br><span class="line">    walk(data) &#123;</span><br><span class="line">        <span class="comment">/* 获取当前对象所有可枚举的 key */</span></span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 遍历所有的 keys，通过 Object.defineProperty 给所有的 key 都添加 getter和 setter */</span></span><br><span class="line">        keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> defineReactive(data, key, data[key]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isObject(o)) <span class="keyword">return</span>; <span class="comment">/* 排除对象的情况 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observer(o); <span class="comment">/* 获取Observer的实例 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    person: &#123;</span><br><span class="line">        name: <span class="string">"zs"</span>,</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br></pre></td></tr></table></figure><p>上面代码同的核心方法是<code>defineReactive函数</code>，在该函数的内部我们通过<code>Object.defineProperty</code>方法实现了对对象中属性的读(<code>get</code>)和写(<code>set</code>)操作的监听。<code>Observer</code>类用于构建 observe实例对象，该实例的<code>walk</code>方法通过遍历的方式为对象中所有的属性都实现了<code>getter 和 setter 方法</code>。</p><p>接下来，我们给出一组测试数据并贴出对应的显示结果。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/objtest.png?raw=true"></p><p>通过对代码的研究和对数据的测试，我们验证了上面代码基本上能够完成对对象数据读写操作的监听，但仍然存在一些不足。</p><p><strong>① 如果是新增加属性，那么则无法监听。</strong><br><strong>② 如果是数组的结构，那么也无法监听。</strong></p><div class="titleX"><strong>数组劫持</strong></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> o === <span class="string">"object"</span> &amp;&amp; o != <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 递归调用：解决value也是对象的情况 */</span></span><br><span class="line">    observe(value);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>--读`</span>)</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newValue) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>--写`</span>)</span><br><span class="line">                <span class="comment">/* 如果数据的值没有改变那么就直接返回 */</span></span><br><span class="line">            <span class="keyword">if</span> (value === newValue) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">/* 如果设置的新数据是对象，那么也应该进行监听 */</span></span><br><span class="line">            observe(newValue);</span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取数组原型的方法 */</span></span><br><span class="line"><span class="keyword">let</span> oldArrayMethods = <span class="built_in">Array</span>.prototype;</span><br><span class="line"><span class="comment">/* 把oldArrayMethods作为原型对象创建一个新的空的对象 */</span></span><br><span class="line"><span class="keyword">let</span> newArrayMethods = <span class="built_in">Object</span>.create(oldArrayMethods);</span><br><span class="line"><span class="comment">/* 整理数组中需要重写的方法 */</span></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">"pop"</span>, <span class="string">"push"</span>, <span class="string">"shift"</span>, <span class="string">"unshift"</span>, <span class="string">"sort"</span>, <span class="string">"reverse"</span>, <span class="string">"splice"</span>];</span><br><span class="line">methods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    newArrayMethods[method] = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> __ob__ = <span class="keyword">this</span>.__ob__;</span><br><span class="line">        <span class="keyword">let</span> result = oldArrayMethods[method].apply(<span class="keyword">this</span>, args);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`监听到<span class="subst">$&#123;method&#125;</span>方法`</span>, <span class="keyword">this</span>, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 注意：新添加的数据可能是对象也需要监听读写操作 */</span></span><br><span class="line">        <span class="comment">/* 1.先获取新添加的数据参数 */</span></span><br><span class="line">        <span class="keyword">let</span> insetData;</span><br><span class="line">        <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"push"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"unshift"</span>:</span><br><span class="line">                insetData = args;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"splice"</span>:</span><br><span class="line">                insetData = args.slice(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"insetData"</span>, insetData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 2.对新添加的数据进行监听 */</span></span><br><span class="line">        <span class="keyword">if</span> (insetData) __ob__.observerArr(insetData);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Observer 类(构造函数) */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(val) &#123;</span><br><span class="line">            <span class="comment">/* 区分对象和数组的情况 */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) &#123;</span><br><span class="line">                <span class="comment">/* 给当前的对象定义__ob__属性,该属性指向的是自己 */</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(val, <span class="string">"__ob__"</span>, &#123;</span><br><span class="line">                configurable: <span class="literal">false</span>,</span><br><span class="line">                enumerable: <span class="literal">false</span>,</span><br><span class="line">                value: <span class="keyword">this</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">/* 重写数组的原型方法，在这些重写的方法内部进行监听 */</span></span><br><span class="line">            <span class="built_in">Reflect</span>.setPrototypeOf(val, newArrayMethods);</span><br><span class="line">            <span class="keyword">this</span>.observerArr(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.walk(val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    walk(data) &#123;</span><br><span class="line">        <span class="comment">/* 获取当前对象所有可枚举的 key */</span></span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 遍历所有的 keys，通过 Object.defineProperty 给所有的 key 都添加 getter和 setter */</span></span><br><span class="line">        keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> defineReactive(data, key, data[key]));</span><br><span class="line">    &#125;</span><br><span class="line">    observerArr(arr) &#123;</span><br><span class="line">        arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> observe(item));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isObject(o)) <span class="keyword">return</span>; <span class="comment">/* 排除对象的情况 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observer(o); <span class="comment">/* 获取Observer的实例 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    person: &#123;</span><br><span class="line">        name: <span class="string">"zs"</span>,</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    friends: [&#123;</span><br><span class="line">        name: <span class="string">"佩琪"</span>,</span><br><span class="line">        age: <span class="number">3</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">"巧虎"</span>,</span><br><span class="line">        age: <span class="number">5</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br></pre></td></tr></table></figure><p>根据测试数据贴出对应的显示结果如下所示。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/objtest2.png?raw=true"></p><p>上述代码完成了对数组数据的读写监听(劫持)，但仍然存在一些无法处理的情况，下面简单列出。</p><p><strong>问题1</strong>：如果我们通过数组的下标来访问和修改数据，那么无法监听。<br><strong>问题2</strong>：如果我们通过数组的 length 属性来操作(删除)数组，那么也无法监听。</p><div class="tip">上面的这些问题在 Vue 2.X 版本中主要通过 Vue.set() 或者是 vm.$set() 来进行实现。</div><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文讨论如何监听对象中所有属性的读和写操作，以及对于数组的劫持特殊处理，本文将从侧面来介绍 Vue2.X版本中响应式数据监听的原理。本文将用到 &lt;a href=&quot;&quot;&gt;Object.defineProperty&lt;/a&gt;方法，该方法以及[getter
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - Rollup 打包器</title>
    <link href="https://weibo.com/u/3800117445/2020/04/04/Gossip%20-%20Rollup/"/>
    <id>https://weibo.com/u/3800117445/2020/04/04/Gossip - Rollup/</id>
    <published>2020-04-03T16:00:08.000Z</published>
    <updated>2020-05-07T06:19:27.687Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文简单介绍类库打包工具 rollup 。</div><p><a href="https://www.rollupjs.com/" target="_blank" rel="noopener">Rollup</a> 是一款 JavaScript 模块打包器,可以将多个简单的js代码文件编译成一份复杂的js代码文件,需要注意的是 <a href="https://www.rollupjs.com/" target="_blank" rel="noopener">Rollup</a> 主要用于JavaScript类库的打包，譬如 Vue 框架的源码打包。</p><p>使用 <a href="https://www.rollupjs.com/" target="_blank" rel="noopener">Rollup</a> 必要性在于，如果我们开发的是较为复杂的大型项目，那么将项目拆分成小的单独文件来组织代码兴许会更简单，因为这通常会消除无法预知的相互影响(<code>remove unexpected interaction</code>)，以及显著降低了所要解决的问题的复杂度(<code>complexity of the problem</code>)。</p><div class="titleX"><strong>第一步 安装rollup环境</strong></div><p>我们可以通过下面的指令来全局安装 rollup 和一些必要的插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/preset-env @babel/core rollup rollup-plugin-babel rollup-plugin-serve cross-env -D</span><br></pre></td></tr></table></figure></p><p><code>rollup</code>               打包工具<br><code>@babel/preset-env</code>    babel将高级语法转换为高级语法<br><code>@babel/core</code>          需要使用 babel核心模块<br><code>rollup-plugin-babel</code>  和 babel关联的 rollup插件<br><code>rollup-plugin-serve</code>  在本地开启(设置)静态服务<br><code>cross-env</code>            在本地设置环境变量等</p><p>这里我先新创建 Vue_L文件夹，先执行<code>npm init -y</code>初始化，然后再执行上面的命令行，下面列出安装和执行成功后显示的结果信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ cross-env@7.0.2</span><br><span class="line">+ rollup-plugin-babel@4.4.0</span><br><span class="line">+ @babel/preset-env@7.9.5</span><br><span class="line">+ @babel/core@7.9.0</span><br><span class="line">+ rollup@2.7.2</span><br><span class="line">+ rollup-plugin-serve@1.0.1</span><br><span class="line">added 158 packages from 93 contributors and audited 2000 packages in 23.326s</span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>第二步 创建配置文件</strong></div><p>在根目录中创建<code>rollup.config.js</code>文件，并引入插件模块，并配置入口、出口以及插件等信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">'rollup-plugin-serve'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">/* 设置打包的入口文件 */</span></span><br><span class="line">    input: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    <span class="comment">/* 输出配置项 */</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">/* 配置出口路径 */</span></span><br><span class="line">        file: <span class="string">"dist/umd/xxx.js"</span>,</span><br><span class="line">        <span class="comment">/* 指定打包后全局变量的名字 */</span></span><br><span class="line">        name: <span class="string">"Person"</span>,</span><br><span class="line">        <span class="comment">/* 统一模块规范 */</span></span><br><span class="line">        format: <span class="string">"umd"</span>,</span><br><span class="line">        <span class="comment">/* es6-&gt;es5 开启源码调试(显示报错位置) */</span></span><br><span class="line">        sourcemap: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 使用插件 */</span></span><br><span class="line">    plugins: [</span><br><span class="line">        babel(&#123;</span><br><span class="line">            exclude: <span class="string">"node_modules/**"</span></span><br><span class="line">        &#125;),</span><br><span class="line">        process.env.ENV === <span class="string">'development'</span> ? serve(&#123;</span><br><span class="line">            open: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">/* 默认打开的 HTML 文件路径 */</span></span><br><span class="line">            openPage: <span class="string">"/public/index.html"</span>,</span><br><span class="line">            port: <span class="number">3000</span>,</span><br><span class="line">            contentBase: <span class="string">""</span></span><br><span class="line">        &#125;) : <span class="literal">null</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>第三步 创建其它文件等</strong></div><p>在项目根目录中创建 <code>.babelrc</code> 文件，设置文件内容<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"@babel/preset-env"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建项目所需要的 public 、src 、dist 等文件夹和对应的文件，下面列出文件树结构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wendingding:Vue_L wendingding$ tree -L 2</span><br><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   └── umd</span><br><span class="line">├── node_modules</span><br><span class="line">│   ├── @babel</span><br><span class="line">│   ├── ansi-styles</span><br><span class="line">│   ├── babel-plugin-dynamic-import-node</span><br><span class="line">│   ├── browserslist</span><br><span class="line">│   ├── caniuse-lite</span><br><span class="line">│   ...</span><br><span class="line">│   └── which</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   └── index.html</span><br><span class="line">├── rollup.config.js</span><br><span class="line">└── src</span><br><span class="line">    └── index.js</span><br></pre></td></tr></table></figure></p><p>在 index.html文件中，通过 script文件引入最终打包好的文件.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/dist/umd/xxx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="comment">// 使用 xxx.js 文件中提供的class</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> x = <span class="keyword">new</span> Person(<span class="string">"zs"</span>, <span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(x);</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>第四步 执行打包</strong></div><p>在 package.json文件中配置<code>scripts</code>项中的<code>build:dev</code>任务和<code>serve</code>任务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">        &quot;build:dev&quot;: &quot;rollup -c&quot;,</span><br><span class="line">        &quot;serve&quot;: &quot;cross-env ENV=development rollup -c -w&quot;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>执行指令<code>$ npm run serve</code>即可 (如果只是简单的想要打包，那么执行<code>npm run build:dev</code>指令即可)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /dist/umd/xxx.js 文件的内容 */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> ? </span><br><span class="line">    <span class="built_in">module</span>.exports = factory() :</span><br><span class="line">    <span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd ? define(factory) :</span><br><span class="line">    (global = global || self, global.Person = factory());</span><br><span class="line">&#125;(<span class="keyword">this</span>, (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Person;</span><br><span class="line"></span><br><span class="line">&#125;)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//# sourceMappingURL=xxx.js.map</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rollup v2.7.2</span><br><span class="line">bundles ./src/index.js → dist/umd/xxx.js...</span><br><span class="line">http://localhost:3000 -&gt; /Users/文顶顶/Documents/花田半亩 /Learn/Hall/Vue_L</span><br><span class="line">created dist/umd/xxx.js in 616ms</span><br><span class="line"></span><br><span class="line">[2019-08-24 16:35:26] waiting for changes...</span><br></pre></td></tr></table></figure><p><code>-c</code> 等同于<code>--config</code>命令，表示使用 配置文件来执行打包过程。<br><code>-w</code> 等同于<code>--watch</code>命令，用于监听源文件是否有改动，如果有改动那么就会重新打包。</p><p>这里顺便列出该打包工具的其它可用参数，作为参考。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-i, --input &lt;filename&gt;      要打包的文件（必须）</span><br><span class="line">-o, --file &lt;output&gt;         输出的文件 (如果没有这个参数，则直接输出到控制台)</span><br><span class="line">-f, --format &lt;format&gt;       输出的文件类型 (amd, cjs, esm, iife, umd)</span><br><span class="line">-e, --external &lt;ids&gt;        将模块ID的逗号分隔列表排除</span><br><span class="line">-g, --globals &lt;pairs&gt;       以`module ID:Global` 键值对的形式，用逗号分隔开 </span><br><span class="line">                              任何定义在这里模块ID定义添加到外部依赖</span><br><span class="line">-n, --name &lt;name&gt;           生成UMD模块的名字</span><br><span class="line">-h, --help                  输出 help 信息</span><br><span class="line">-m, --sourcemap             生成 sourcemap (`-m inline` for inline map)</span><br><span class="line">--amd.id                    AMD模块的ID，默认是个匿名函数</span><br><span class="line">--amd.define                使用Function来代替`define`</span><br><span class="line">--no-strict                 在生成的包中省略`&quot;use strict&quot;;`</span><br><span class="line">--no-conflict               对于UMD模块来说，给全局变量生成一个无冲突的方法</span><br><span class="line">--intro                     在打包好的文件的块的内部(wrapper内部)的最顶部插入一段内容</span><br><span class="line">--outro                     在打包好的文件的块的内部(wrapper内部)的最底部插入一段内容</span><br><span class="line">--banner                    在打包好的文件的块的外部(wrapper外部)的最顶部插入一段内容</span><br><span class="line">--footer                    在打包好的文件的块的外部(wrapper外部)的最底部插入一段内容</span><br><span class="line">--interop                   包含公共的模块（这个选项是默认添加的）</span><br></pre></td></tr></table></figure></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文简单介绍类库打包工具 rollup 。&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rollupjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rollup&lt;/a&gt; 是一款 JavaScrip
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>杂谈书坊-“陷王于恶”</title>
    <link href="https://weibo.com/u/3800117445/2020/03/28/%E6%9D%82%E8%B0%88%E4%B9%A6%E5%9D%8A-%E9%99%B7%E7%8E%8B%E4%BA%8E%E6%81%B6%E5%92%8C%E8%90%A5%E6%83%91%E8%AF%B8%E4%BE%AF/"/>
    <id>https://weibo.com/u/3800117445/2020/03/28/杂谈书坊-陷王于恶和营惑诸侯/</id>
    <published>2020-03-28T15:58:37.000Z</published>
    <updated>2020-03-30T01:01:04.887Z</updated>
    
    <content type="html"><![CDATA[<p><a href="">“陷王于恶”</a> 这个典故出自汉书,叙述了海昏侯<strong>刘贺</strong>被霍光废黜的故事。</p><p><strong>贺者，武帝孙，昌邑哀王子也。既至，即位，行淫乱。光忧懑，独以问所亲故吏大司农田延年。延年曰：“将军为国柱石，审此人不可，何不建白太后，更选贤而立之？” 光曰：“今欲如是，于古尝有此否？” 延年曰：“伊尹相殷，废太甲以安宗庙，后世称其忠。将军若能行此，亦汉之伊尹也”。光乃引延年给事中，阴与车骑将军张安世图计，遂召丞相、御史、将军、列侯、中二千石、大夫、博士会议未央宫。光曰：“昌邑王行昏乱，恐危社稷，如何？” 群臣皆惊鄂失色，莫敢发言，但唯唯而已。田延年前，离席按剑，曰：“先帝属将军以幼孤，寄将军以天下，以将军忠贤能安刘氏也。今群下鼎沸，社稷将倾，且汉之传谥常为孝者，以长有天下，令宗庙血食也。如令汉家绝祀，将军虽死，何面目见先帝于地下乎？今日之议，不得旋踵。群臣后应者，臣请剑斩之”。光谢曰：“九卿责光是也。天下匈匈不安，光当受难”。于是议者皆叩头，曰：“万姓之命在于将军，唯大将军令”。</strong></p><p><strong>光即与群臣俱见白太后，具陈昌邑王不可以承宗庙状。皇太后乃车驾幸未央承明殿，诏诸禁门毋内昌邑群臣。王入朝太后还，乘辇欲归温室，中黄门宦者各持门扇，王入，门闭，昌邑群臣不得入。王曰“何为？” 大将军跪曰：“有皇太后诏，毋内昌邑群臣”。王曰：“徐之，何乃惊人如是!” 光使尽驱出昌邑群臣，置金马门外。车骑将军安世将羽林骑收缚二百余人，皆送廷尉诏狱。令故昭帝侍中中臣侍守王。光敕左右：“谨宿卫，卒有物故自裁，令我负天下，有杀主名”。王尚未自知当废，谓左右：“我故群臣从官安得罪，而大将军尽系之乎？” 顷之，有太后诏召王，王闻召，意恐，乃曰：“我安得罪而召我哉!” 太后被珠襦，盛服坐武帐中，侍御数百人皆持兵，期门武士陛戟，陈列殿下。群臣以次上殿，召昌邑王伏前听诏。光与群臣连名奏王，尚书令读奏。</strong></p><p><strong>皇太后诏曰：“可”。光令王起拜受诏，王曰：“闻天子有争臣七人，虽无道不失天下”。光曰：“皇太后诏废，安得天子!” 乃即持其手，解脱其玺组，奉上太后，扶王下殿，出金马门，群臣随送。王西面拜，曰：“愚戆不任汉事”。起就乘舆副车。大将军光送至昌邑邸，光谢曰：“王行自绝于天，臣等驽怯，不能杀身报德。臣宁负王，不敢负社稷。愿王自爱，臣长不复见左右”。光涕泣而去。群臣奏言：“古者废放之人屏于远方，不及以政，请徙王贺汉中房陵县”。太后诏归贺昌邑，赐汤沐邑二千户。<span style="color:red">昌邑群臣坐亡辅导之谊，陷王于恶，光悉诛杀二百余人</span>。出死，号呼市中曰：“当断不断，反受其乱”。</strong></p><p>这段文字记载于《<a href="http://www.oh100.com/peixun/guoxuezhihui/294243.html" target="_blank" rel="noopener">汉书·霍光金日禪传</a>》，完整的记录了大将军霍光废黜刘贺的详细过程。2015年，在江西南昌发现了轰动一时的海昏侯墓，而刘贺正是这海昏侯墓的主人。关于海昏侯墓的相关信息，大家可以查询。</p><p>刘贺是汉武帝的孙子，其父刘髆为昌邑哀王[<code>今山东菏泽</code>]，刘贺在历史上短暂的做过27天皇帝，后因为言行昏(淫)乱被大将军霍光和太后废黜。据记载，刘贺被废的主要原因是先帝刚驾崩棺材都还停放在宫中的时候就迫不及待的和乐人寻欢作乐，被朝臣认为没有“人主之尊”。说起来，我们现在所经历的一些现实就很魔幻了。据说，现在很多地方在治办丧事的时候，都喜欢把丧事办的喜庆风光，因此网络上也流传了很多坟头蹦迪的鬼畜视频出来。这真是，先人的棺材板都还没盖上，后来人就一蹦跳起了三丈高。</p><p>我今天知道这个这个典故，是读了秋原先生著的《乱世靡音》，这本书讲了江湖中“艺人”的生存之道和历史演变，颇有意思。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/qy.jpg?raw=true" height="500px"></p><p>古时候，”江湖艺人”的身份低位，仅仅只有少数造诣极高的艺人，才可能得到有限的尊重，不像现在的明星这么风光，他们的身份地位几乎排在最末，甚至连现在的某些平台主播也不如。</p><p>其实，哪怕是最牛逼的艺人(为皇帝和朝臣服务的官伶)，可能下场也比较凄凉。譬如上述<strong>“陷王于恶”</strong>的这两百多人就半数都是“乐人”，他们的结局是被 <strong><span style="color:red"> 悉数诛杀 </span></strong>。</p><p>最后，再贴点学到的新知识。</p><p><a href="">※</a> 献艺和卖艺，前者有很高的雅兴，后者是鄙俗的生意。<br><a href="">※</a> “玩意儿”这个词同”玩艺儿”，指的是稍微有些才能的乞丐。<br><a href="">※</a> 长期以来以艺娱人低人一等。这也是古时候罪犯抄家为什么男的杀头，妻女则送入教坊司的原因。<br><a href="">※</a> 以艺娱人的人被称为乐人或乐工，职业会被编入乐户，算作贱民，而管理乐户的机构就叫做乐府。<br><a href="">※</a> 艺人主要有三种起源分别是“人类古老的祭祀活动、人们对身体残障者的嘲弄以及流民行乞的手段”。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home？from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;&quot;&gt;“陷王于恶”&lt;/a&gt; 这个典故出自汉书,叙述了海昏侯&lt;strong&gt;刘贺&lt;/strong&gt;被霍光废黜的故事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;贺者，武帝孙，昌邑哀王子也。既至，即位，行淫乱。光忧懑，独以问所亲故吏大司农田延年。延年曰：“将军为国柱石，审此
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://weibo.com/u/3800117445/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - Throttle and Debounce</title>
    <link href="https://weibo.com/u/3800117445/2020/03/28/Gossip%20-%20Throttle%20And%20Debounce%20/"/>
    <id>https://weibo.com/u/3800117445/2020/03/28/Gossip - Throttle And Debounce /</id>
    <published>2020-03-27T16:00:08.000Z</published>
    <updated>2020-05-07T06:19:27.700Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文讨论前端开发中 函数防抖 和 函数节流，它们的应用、区别以及简单实现。</div><p>在前端开发中我们可能经常需要给(页面)标签绑定一些持续触发的事件，如 <code>resize</code>、<code>scroll</code>、<code>input</code>、<code>mousemove</code>、<code>keyup</code>和<code>keydown</code> 等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p><p>譬如，如果用户有频繁的<code>resize</code> 和 <code>scroll</code> 行为，那么会导致页面不断的被重新渲染，如果在绑定的回调函数中存在大量的 DOM 操作，那么还会出现页面的卡顿，针对这种情况，常用的解决方式就是利用<strong>节流( <a href="">throttle</a> )</strong>和<strong>防抖( <a href="">debounce</a> )</strong>来优化高频事件，降低代码的执行频率。</p><p>若想对比默认情况、函数节流和函数防抖的情况，可以参考<a href="https://codepen.io/chriscoyier/embed/vOZNQV?height=736&amp;theme-id=1&amp;slug-hash=vOZNQV&amp;default-tab=result&amp;user=chriscoyier&amp;name=cp_embed_1" target="_blank" rel="noopener">演示效果-点击我</a>来直观感受它们的区别。</p><div class="titleX"><strong>函数节流</strong></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 原先： 1秒 执行 100次 --&gt;</span><br><span class="line">&lt;!-- 调节： 1秒 执行 1次--&gt;</span><br><span class="line">&lt;!-- 10秒钟执行1000次任务调整后10秒钟最多执行10次 --&gt;</span><br><span class="line">&lt;!-- 换个例子 --&gt;</span><br><span class="line">&lt;!-- 原先： 1秒中从池塘中流水100L --&gt;</span><br><span class="line">&lt;!-- 调节： 1秒钟从池塘中流水1L --&gt;</span><br><span class="line">&lt;!-- 10秒钟流出1000L水调整后10秒钟最多流出10L 水，这就是节流的操作。 --&gt;</span><br></pre></td></tr></table></figure><p><strong>函数节流</strong> 可以通过<code>时间戳</code>来实现。</p><p>下面，我们试着以代码的方式来探究函数节流的细节和具体实现。<br>我们在页面中提供一个按钮，给按钮绑定点击事件，那么正常情况是每当按钮点击一次的时候，对应的事件处理函数就会被触发执行一次。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页面标签： &lt;button&gt;按钮&lt;/button&gt;  */</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"click button"</span>, e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oBtn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line">oBtn.addEventListener(<span class="string">"click"</span>, task);</span><br></pre></td></tr></table></figure></p><p>如果用户在短时间内快速连续多次的点击按钮，那么事件处理函数也会随之触发很多次。<span style="color:red"><strong>函数节流</strong>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效</span>。换言之，函数节流控制在固定的时间单位内，事件任务只会执行(生效)一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 事件处理函数 */</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"click button"</span>, e);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数节流 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 绑定事件 */</span></span><br><span class="line"><span class="keyword">let</span> oBtn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line">oBtn.addEventListener(<span class="string">"click"</span>, throttle(task, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p>上面给出了函数节流的简单实现方式，代码中封装了<code>throttle 函数</code>，该函数接收任何(事件)函数和间隔时间两个参数，并返回一个新在函数中。<code>throttle 函数</code>的核心是，在返回的函数中通过获取当前<code>时间戳</code>并和间隔时间进行比较的方式来控制是否应该执行任务函数。</p><p>当事件处理函数第一次执行后，后续点击事件被触发的时候，如果<code>now - previous &gt; wait</code> 成立(距离上次事件触发的时间已经超过了指定间隔时间)，那么则执行任务函数，否则就忽略这次点击事件。注意<code>func.apply(context, args)</code>这行代码的作用是，把具体的标签绑定给事件处理函数中的<code>this</code>, 此外在事件处理函数中可能还会存在事件对象等参数的传递，需要考虑到这种情况。</p><div class="tip">关于函数节流的代码实现，我们还可以阅读和参考下知名框架<a href="https://github.com/jashkenas/underscore/blob/master/underscore.js" target="_blank" rel="noopener"> underscore </a>的写法，该框架对函数节流提供了更精确的控制，譬如可以通过传递参数的方式来控制 第一次点击事件是否生效，以及最后一次的点击是否要触发等，下面给出其函数节流代码的核心实现。</div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout,args, context, previous = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 该行代码设置第一次点击不生效 */</span></span><br><span class="line">        <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> remaning = wait - (now - previous);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果：是第一次触发事件 */</span></span><br><span class="line">        <span class="comment">/* 那么：执行事件处理函数，并更新previous值，如果有定时器，那么就进行清理操作 */</span></span><br><span class="line">        <span class="keyword">if</span> (remaning &lt;= <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">/* 如果：不是第一次触发事件 &amp;&amp; 定时器为空 &amp;&amp;  trailing == true */</span></span><br><span class="line">        <span class="comment">/* 那么：总是执行最后一次的事件触发的处理函数 */</span></span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">                previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : <span class="built_in">Date</span>.now();</span><br><span class="line">                func.apply(context, args);</span><br><span class="line">                args = context = <span class="literal">null</span></span><br><span class="line">            &#125;, remaning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 任何处理函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oBtn.addEventListener(<span class="string">'click'</span>, throttle(task, <span class="number">1000</span>, &#123;</span><br><span class="line">    leading: <span class="literal">false</span>,<span class="comment">/* 设置为 false的时候，第一次点击不生效 */</span></span><br><span class="line">    trailing: <span class="literal">true</span> <span class="comment">/* 设置最终一次点击总是触发 */</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><div class="titleX"><strong>函数防抖</strong></div><p>函数防抖（<a href="">debounce</a>）就是指<span style="color:red">触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会从头重新计算函数执行时间</span>。</p><p><strong>函数防抖</strong> 可以通过<code>定时器</code>来实现。</p><p>我们假设，当点击页面按钮的时候，在1秒的时间内事件处理函数只能执行一次，如果下次点击按钮的时候还没有超过1秒这个时间间隔，那么就重新开始计时。下面给出一份简单的代码实现供大家参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &lt;button&gt;&lt;/button&gt; */</span></span><br><span class="line"><span class="comment">/* 任务执行函数 */</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"task"</span>, e);  </span><br><span class="line"><span class="comment">/* 防抖函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">        clearTimeout(timer); <span class="comment">/* 先清理以前的定时器(延迟函数) */</span></span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;  </span><br><span class="line">        <span class="comment">/* 开启定时器，指定时间后执行任务函数 task */</span></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* 获取标签 */</span></span><br><span class="line"><span class="keyword">let</span> oBtn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line"><span class="comment">/* 注册事件 */</span></span><br><span class="line">oBtn.addEventListener(<span class="string">"click"</span>, debounce(task, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p>稍微调整下上面的代码，假设我们想要通过一个参数来控制是否要在第一次触发事件的时候，执行任务函数，那么可以参考下面的写法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &lt;button&gt;&lt;/button&gt; */</span></span><br><span class="line"><span class="comment">/* 任务执行函数 */</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"task"</span>, e);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">防抖函数</span></span><br><span class="line"><span class="comment">func:具体的事件处理函数(任务函数)</span></span><br><span class="line"><span class="comment">wait:规定的时间(单位毫秒)</span></span><br><span class="line"><span class="comment">immediate：布尔型参数，开始的时候是否先执行一次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        clearTimeout(timer); <span class="comment">/* 清理以前的定时器(延迟函数) */</span></span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 是否要在最开始的时候，先执行一次 */</span></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">let</span> callNow = !timer;</span><br><span class="line">            <span class="keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 开启定时器，指定时间后执行任务函数 task */</span></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取标签 */</span></span><br><span class="line"><span class="keyword">let</span> oBtn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line"><span class="comment">/* 注册事件 */</span></span><br><span class="line">oBtn.addEventListener(<span class="string">"click"</span>, debounce(task, <span class="number">1000</span>, <span class="literal">true</span>));</span><br></pre></td></tr></table></figure></p><p>总结下,<code>函数防抖</code> 和 <code>函数节流</code>都是防止某一事件的频繁触发，但原理却不一样：<strong>函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行</strong>。</p><div class="titleX"><strong>源码赏析</strong></div><p>最后，简单贴出著名框架 <a href="https://lodash.com/" target="_blank" rel="noopener">lodash</a> 中关于函数防抖和函数节流的部分演示代码，并附上 Github<a href="https://github.com/lodash/lodash/" target="_blank" rel="noopener">开源地址</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* debounce.js 文件实现 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> maxWait;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'maxWait'</span> <span class="keyword">in</span> opts) &#123;</span><br><span class="line">        maxWait = opts.maxWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> leading = <span class="literal">true</span>; <span class="comment">// 第一次点击时触发</span></span><br><span class="line">    <span class="keyword">let</span> trailing = <span class="literal">true</span>; <span class="comment">// 最后一次也要触发</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lastCallTime; <span class="comment">// 最后调用的时间 previous</span></span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">let</span> lastThis; <span class="comment">// 返回函数的this</span></span><br><span class="line">    <span class="keyword">let</span> lastArgs; <span class="comment">// 返回函数的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// shouldInvoke 表示是否应该调用</span></span><br><span class="line">    <span class="keyword">let</span> lastInvokeTime;</span><br><span class="line">    <span class="keyword">let</span> shouldInvoke = <span class="function"><span class="keyword">function</span>(<span class="params">now</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sinceLastTime = now - lastCallTime;</span><br><span class="line">        <span class="keyword">let</span> sinceLastInvoke = now - lastInvokeTime;</span><br><span class="line">        <span class="comment">// 第一次</span></span><br><span class="line">        <span class="keyword">return</span> lastCallTime === <span class="literal">undefined</span> </span><br><span class="line">        || sinceLastTime &gt; wait </span><br><span class="line">        || sinceLastInvoke &gt;= maxWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leadingEdge 是否第一次执行</span></span><br><span class="line">    <span class="keyword">let</span> invokeFunc = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 最终的调用函数的时间</span></span><br><span class="line">        lastInvokeTime = time;</span><br><span class="line">        func.apply(lastThis, lastArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// startTimer就是开启了一个定时器</span></span><br><span class="line">    <span class="keyword">let</span> startTimer = <span class="function"><span class="keyword">function</span>(<span class="params">timerExpired, wait</span>) </span>&#123;</span><br><span class="line">        timeout = setTimeout(timerExpired, wait);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> remainingWait = <span class="function"><span class="keyword">function</span>(<span class="params">now</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wait - (now - lastCallTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> trailingEdge = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">        timeout = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (trailing) &#123;</span><br><span class="line">            invokeFunc(time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timerExpired = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now(); <span class="comment">// 当前定时器到时间了 看看是否需要执行这个函数</span></span><br><span class="line">        <span class="keyword">if</span> (shouldInvoke(now)) &#123; <span class="comment">// 如果需要调用，那么就触发结束的方法</span></span><br><span class="line">            <span class="keyword">return</span> trailingEdge(now);</span><br><span class="line">        &#125;</span><br><span class="line">        startTimer(timerExpired, remainingWait(now));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> leadingEdge = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">        lastInvokeTime = time;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果需要执行那么就调用函数</span></span><br><span class="line">        <span class="keyword">if</span> (leading) &#123;</span><br><span class="line">            invokeFunc(time)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启一个定时器 看下一次定时器到了 是否需要执行func</span></span><br><span class="line">    startTimer(timerExpired, wait);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> debounced = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        lastThis = <span class="keyword">this</span>;</span><br><span class="line">        lastArgs = args;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断当前的debounce时是否需要执行</span></span><br><span class="line">        <span class="keyword">let</span> isInvoking = shouldInvoke(now);</span><br><span class="line">        lastCallTime = now;</span><br><span class="line">        <span class="keyword">if</span> (isInvoking) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timeout === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                leadingEdge(now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* throttle.js 文件实现 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> debounce(func, wait, &#123;</span><br><span class="line">        <span class="comment">// maxWait最大的点击时间</span></span><br><span class="line">        maxWait: wait</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文讨论前端开发中 函数防抖 和 函数节流，它们的应用、区别以及简单实现。&lt;/div&gt;

&lt;p&gt;在前端开发中我们可能经常需要给(页面)标签绑定一些持续触发的事件，如 &lt;code&gt;resize&lt;/code&gt;、&lt;code&gt;scroll&lt;/code&gt;、
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - TS、Class and ES5</title>
    <link href="https://weibo.com/u/3800117445/2020/03/24/Gossip%20-%20TS%E3%80%81Class%20and%20ES5/"/>
    <id>https://weibo.com/u/3800117445/2020/03/24/Gossip - TS、Class and ES5/</id>
    <published>2020-03-23T16:00:08.000Z</published>
    <updated>2020-03-26T04:43:28.696Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文讨论Typescript中的Class同ES5构造函数的对应关系，涉及TypeScript的诸多语法、构造函数、面向对象以及原型对象等相关知识点细节，本文只简单对比并不进行深入展开。</div><p><a href="">TypeScript</a> 是JavaScript的超集，包含ES5、ES6、ES7+…和扩展。</p><p>我们知道在TS中，Class并不是什么新鲜的东西，它的本质其实就是ES那套<code>构造函数·原型对象·实例对象</code>的老古董。在下面的篇幅中，我会简单的对比Class的ES5写法，从最简单到复杂。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195">最简单的类</span></p><p>最简单的类，除名字外其它一无所有。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文件名：01.ts_class_and_es5.ts */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class_test</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>我们通过<code>tsc 01.ts_class_and_es5.ts</code>命令对该文件进行编译，得到的是下面的JavaScript代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文件名：01.ts_class_and_es5.js */</span></span><br><span class="line"><span class="keyword">var</span> Class_test = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Class_test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> Class_test;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>从编译后的结果可以看到对应的代码就是个空构造函数，精巧的地方在于<strong>这个函数被放到一个自调用函数中并返回</strong>，这里使用了一个同名的变量来接收内部的构造函数，多么经典的闭包应用啊。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195"> + 属性</span></p><p>我们尝试在上面代码的基础上，在这个类中加入属性的概念。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class_test</span> </span>&#123;</span><br><span class="line">    name:string;</span><br><span class="line">    age:number;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string,age:number)&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age  = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们为Class_test类新添加了属性的概念( 分别是 <code>name</code> 和 <code>age</code> ) , 这里其实如果不想写constructor构造函数的话其实可以给 <code>name</code> 和 <code>age</code> 设置一个初始值也是没问题的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Class_test = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Class_test</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Class_test;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>可以发现写法跟ES5构造函数的写法一致，注意Class成员的几个修饰符：<a href="">public</a> <a href="">protected</a> <a href="">private</a> 在ES5代码的结构中没有意义，这里不做额外说明。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195"> + 方法(静态)</span></p><p>我们在上面代码的基础上再加上方法、静态属性、静态方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设计类 */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Class_test</span> </span>&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string, age: number) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo():<span class="keyword">void</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Name === <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>  Age === <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 静态属性：构造函数(类)自己的属性，访问示例：类名.静态属性; */</span></span><br><span class="line">    <span class="comment">/* 静态方法：构造函数(类)自己的方法，访问示例：类名.静态方法名称(); */</span></span><br><span class="line">    <span class="keyword">static</span> className: string = <span class="string">"Class_test"</span>;</span><br><span class="line">    <span class="keyword">static</span> getClassName():<span class="keyword">void</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"ClassName === "</span>+<span class="keyword">this</span>.className);   <span class="comment">//this=&gt;Class_Test</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 实例化对象 */</span></span><br><span class="line">  <span class="keyword">let</span> c:Class_test = <span class="keyword">new</span> Class_test(<span class="string">"文顶顶"</span>,<span class="number">18</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(c.name,c.age);</span><br><span class="line">  c.getInfo();</span><br><span class="line">  <span class="built_in">console</span>.log(Class_test.className);</span><br><span class="line">  Class_test.getClassName();</span><br></pre></td></tr></table></figure></p><p>我们为代码添加了静态属性 <code>className</code>、静态方法 <code>getClassName()</code> 、实例方法 <code>getInfo()</code>,通过查看对应的ES5代码，我们会发现这也没什么特别的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Class_test = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Class_test</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        Class_test.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Name === "</span> + <span class="keyword">this</span>.name + <span class="string">"  Age === "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">        &#125;;</span><br><span class="line">        Class_test.getClassName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"ClassName === "</span> + <span class="keyword">this</span>.className); <span class="comment">//this=&gt;Class_Test</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/* 静态属性：构造函数(类)自己的属性，访问示例：类名.静态属性; */</span></span><br><span class="line">        <span class="comment">/* 静态方法：构造函数(类)自己的方法，访问示例：类名.静态方法名称(); */</span></span><br><span class="line">        Class_test.className = <span class="string">"Class_test"</span>;</span><br><span class="line">        <span class="keyword">return</span> Class_test;</span><br><span class="line">    &#125;());</span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> Class_test(<span class="string">"文顶顶"</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(c.name, c.age);           <span class="comment">/* 文顶顶 18 */</span></span><br><span class="line">    c.getInfo();                          <span class="comment">/* Name === 文顶顶  Age === 18 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(Class_test.className);    <span class="comment">/* Class_test */</span></span><br><span class="line">    Class_test.getClassName();            <span class="comment">/* ClassName === Class_test */</span></span><br></pre></td></tr></table></figure></p><p>关键在于搞清楚<strong>成员</strong>、<strong>原型成员</strong>、<strong>静态成员</strong>、<strong>实例成员</strong>、<strong>构造函数</strong>、<strong>原型对象</strong>以及<strong>实例化</strong>的关系。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195"> + 继承 </span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设计类(父类) */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class_super</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string, age: number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  getInfo():<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Name === <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>  Age === <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> className: string = <span class="string">"Class_test"</span>;</span><br><span class="line">  <span class="keyword">static</span> getClassName():<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ClassName === "</span>+<span class="keyword">this</span>.className);   <span class="comment">//this=&gt;Class_Test</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设计类(子类) */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class_child</span> <span class="keyword">extends</span> <span class="title">Class_super</span></span>&#123;</span><br><span class="line">  money:number;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string, age: number,money:number) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name,age);</span><br><span class="line">    <span class="keyword">this</span>.money = money;</span><br><span class="line">  &#125;</span><br><span class="line">  getMoney():<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Money === <span class="subst">$&#123;<span class="keyword">this</span>.money&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> child_static_func():<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"测试该方法能否被Class_super方法调用？No"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实例化(对象) */</span></span><br><span class="line"><span class="keyword">let</span> child:Class_child = <span class="keyword">new</span> Class_child(<span class="string">"zs"</span>,<span class="number">19</span>,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child,child.name,child.age,child.money);</span><br><span class="line">child.getInfo();</span><br><span class="line">child.getMoney();</span><br><span class="line"><span class="built_in">console</span>.log(Class_child.className);</span><br><span class="line">Class_child.getClassName();</span><br><span class="line">Class_child.child_static_func();</span><br><span class="line"><span class="comment">// Class_super.child_static_func();   错误的示范</span></span><br></pre></td></tr></table></figure><p>如果我们实现了类的继承，那么问题就会变得复杂得多，至少看起来如此。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> extendStatics = <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics = <span class="built_in">Object</span>.setPrototypeOf ||</span><br><span class="line">            (&#123; <span class="attr">__proto__</span>: [] &#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; d.__proto__ = b; &#125;) </span><br><span class="line">            || <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p]&#125;;</span><br><span class="line">        <span class="keyword">return</span> extendStatics(d, b);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics(d, b);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">    d.prototype = b === <span class="literal">null</span> ? <span class="built_in">Object</span>.create(b) : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设计类(父类) */</span></span><br><span class="line"><span class="keyword">var</span> Class_super = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Class_super</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    Class_super.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Name === "</span> + <span class="keyword">this</span>.name + <span class="string">"  Age === "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;;</span><br><span class="line">    Class_super.getClassName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ClassName === "</span> + <span class="keyword">this</span>.className); <span class="comment">//this=&gt;Class_Test</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Class_super.className = <span class="string">"Class_test"</span>;</span><br><span class="line">    <span class="keyword">return</span> Class_super;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="comment">/* 设计类(子类) */</span></span><br><span class="line"><span class="keyword">var</span> Class_child = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params">_super</span>) </span>&#123;</span><br><span class="line">    __extends(Class_child, _super);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Class_child</span>(<span class="params">name, age, money</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = _super.call(<span class="keyword">this</span>, name, age) || <span class="keyword">this</span>;</span><br><span class="line">        _this.money = money;</span><br><span class="line">        <span class="keyword">return</span> _this;</span><br><span class="line">    &#125;</span><br><span class="line">    Class_child.prototype.getMoney = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Money === "</span> + <span class="keyword">this</span>.money);</span><br><span class="line">    &#125;;</span><br><span class="line">    Class_child.child_static_func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"测试该方法能否被Class_super方法调用？No"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Class_child;</span><br><span class="line">&#125;(Class_super));</span><br><span class="line"><span class="comment">/* 实例化(对象) */</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Class_child(<span class="string">"zs"</span>, <span class="number">19</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child, child.name, child.age, child.money);   </span><br><span class="line"><span class="comment">/* Class_child &#123; name: 'zs', age: 19, money: 100 &#125; 'zs' 19 100 */</span></span><br><span class="line">child.getInfo();                    <span class="comment">/* Name === zs  Age === 19 */</span></span><br><span class="line">child.getMoney();                   <span class="comment">/* Money === 100 */</span></span><br><span class="line"><span class="built_in">console</span>.log(Class_child.className); <span class="comment">/* Class_test */</span></span><br><span class="line">Class_child.getClassName();         <span class="comment">/* ClassName === Class_test */</span></span><br><span class="line">Class_child.child_static_func();    <span class="comment">/* 测试该方法能否被Class_super方法调用？No */</span></span><br><span class="line"><span class="comment">// Class_super.child_static_func();   错误的示范</span></span><br></pre></td></tr></table></figure></p><p>蒽，是的。看上去，TS ( ES6 ) 中感觉Class继承的实现稍显复杂。接下来，我们试着挑出关键的部分，并把比较重要(表面感觉不太看得懂)的那部分代码加上些注释。</p><p><strong>关键 ①</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = _super.call(<span class="keyword">this</span>, name, age) || <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure></p><p>这行代码的目的是获取父类的实例成员，具体采用的技术手段是通过借用构造函数调用( <a href="">在子构造函数中以call方法来调用父构造函数，并绑定this </a>)的方式来获取。此处，拿到的是<code>name</code> <code>age</code>两个属性(当我们通过子类来实例化创建对象的时候，得到的实例化对象中因此拥有了<code>name</code> 和 <code>age</code> 属性)。</p><p><strong>关键 ②</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__extends(Class_child, _super);</span><br></pre></td></tr></table></figure></p><p>这行代码是一个函数调用，其中__extends是函数名称，而Class_child, _super是传递给函数的具体实参。<br>该函数的作用是，通过特定的方式来获取父类(构造函数)的静态成员(包括静态属性以及静态方法)并让实例对象可以通过原型链来访问父类原型对象上面的成员(属性和方法)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @Description: __extends主要用于处理(静态成员)的继承</span></span><br><span class="line"><span class="comment"> * @return: 函数形态 function f(_child,_super)&#123;&#125; */</span></span><br><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">/* @Description: extendStatics用于扩展静态成员(静态属性和静态方法)</span></span><br><span class="line"><span class="comment"> * param __child  子类(Class_child)</span></span><br><span class="line"><span class="comment"> * param __super  父类(Class_super)*/</span></span><br><span class="line"><span class="keyword">var</span> extendStatics = <span class="function"><span class="keyword">function</span>(<span class="params">__child, __super</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.确定函数 */</span></span><br><span class="line">    <span class="comment">/* extendStatics变量的值总是为一个函数，该函数的目的是_super的属性和方法(静态)*/</span></span><br><span class="line">    <span class="comment">/* 核心策略 */</span></span><br><span class="line">    <span class="comment">/* ① 尝试直接使用 Object.setPrototypeOf函数 类似于__child.__proto__ = __super */</span></span><br><span class="line">    <span class="comment">/* ② 直接通过__child.__proto__ = __super来设置 */</span></span><br><span class="line">    <span class="comment">/* ③ 通过遍历的方式来拷贝_super对象的实例成员 */</span></span><br><span class="line">    extendStatics = <span class="built_in">Object</span>.setPrototypeOf </span><br><span class="line">    ||(&#123; <span class="attr">__proto__</span>: [] &#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span> </span><br><span class="line">      &amp;&amp; <span class="function"><span class="keyword">function</span>(<span class="params">__child, __super</span>) </span>&#123;</span><br><span class="line">         __child.__proto__ = __super; </span><br><span class="line">         &#125;) </span><br><span class="line">    ||<span class="function"><span class="keyword">function</span>(<span class="params">d, b</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) &#123; </span><br><span class="line">        <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p]; &#125; </span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="comment">/* 2.调用函数(完成继承) */</span></span><br><span class="line">    <span class="keyword">return</span> extendStatics(__child, __super);</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">_child, _super</span>) </span>&#123;</span><br><span class="line">     <span class="comment">/* [1] 完成对父类(构造函数)静态成员(属性+方法)的拷贝工作 */</span></span><br><span class="line">     extendStatics(_child, _super);</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* [2] 完成对父类(构造函数)原型成员(主要是方法)的原型链继承 */</span></span><br><span class="line">     <span class="comment">/* 内部的this取决于__()函数如何调用，使用new调用则this指向的是内部新创建的实例对象 */</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = _child; &#125; </span><br><span class="line"></span><br><span class="line">     <span class="comment">/* 如果_spuer为null,那么就创建一个新对象*/</span></span><br><span class="line">     <span class="comment">/* 设置该对象的原型对象为_super[let o = &#123;&#125;; o.__prototype = _super] */</span> </span><br><span class="line">     <span class="comment">/* 并把最终结果赋值给_child.prototype, 否则就间接通过__()这个函数来设置原型对象*/</span></span><br><span class="line">     <span class="comment">/* 并创建实例化对象，并设置 _child.prototype = new __() */</span></span><br><span class="line">     _child.prototype = </span><br><span class="line">          _super === <span class="literal">null</span> ? </span><br><span class="line">          <span class="built_in">Object</span>.create(_super) : </span><br><span class="line">          (__.prototype = _super.prototype, <span class="keyword">new</span> __());</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我在代码中穿插并加上了一些说明性的注释 ，看上去似乎比较复杂，稍微总结下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__extends() 函数做了两件事情：</span><br><span class="line">  [1] 完成对父类(构造函数)静态成员(属性+方法)的拷贝工作</span><br><span class="line">  [2] 完成对父类(构造函数)原型成员(主要是方法)的原型链继承</span><br><span class="line">如何做的？</span><br><span class="line">  [1] child.__proto__ = super  </span><br><span class="line">  [2] child.prototype = super.prototype; + 解决共享问题(中间加了间隔层)</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/ts_class.png?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#fff;background:#195"> + Interface </span></p><p>接口( <a href="">interface </a> )是 typescript 中的重要概念，而且接口也能继承且可以约束类，因此这里简单的比较下，下面给出示例代码以及对应的JavaScript代码。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.定义接口(父) */</span></span><br><span class="line">  <span class="keyword">interface</span> Test_Class_Super_Interface &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    getName: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    getAge: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 2.定义接口(子) */</span></span><br><span class="line">  <span class="keyword">interface</span> Test_Class_Child_Interface <span class="keyword">extends</span> Test_Class_Super_Interface&#123;</span><br><span class="line">    id:<span class="built_in">number</span>;</span><br><span class="line">    getId:<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 3.设计类：该类实现指定的接口 */</span></span><br><span class="line">  <span class="keyword">class</span> Test_Class <span class="keyword">implements</span> Test_Class_Child_Interface &#123;</span><br><span class="line">    id: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    getName(): <span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"getName() "</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;;</span><br><span class="line">    getAge(): <span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"getAge() "</span> + <span class="keyword">this</span>.age)</span><br><span class="line">    &#125;;</span><br><span class="line">    getId():<span class="built_in">void</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 4.创建实例化对象 */</span></span><br><span class="line">  <span class="keyword">let</span> instance: Test_Class = <span class="keyword">new</span> Test_Class(<span class="string">"ls"</span>, <span class="number">18</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(instance);</span><br></pre></td></tr></table></figure></p><p>上面代码设计了两个接口，分别是<code>Test_Class_Super_Interface</code> 和 <code>Test_Class_Child_Interface</code>,它们是继承关系，<a href="">Test_Class</a> 类实现了<code>Test_Class_Child_Interface</code>接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Test_Class = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Test_Class</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        Test_Class.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"getName() "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;;;</span><br><span class="line">        Test_Class.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"getAge() "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">        &#125;;;</span><br><span class="line">        Test_Class.prototype.getId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Test_Class;</span><br><span class="line">    &#125;());</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> Test_Class(<span class="string">"ls"</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(instance);</span><br></pre></td></tr></table></figure><p>我们发现转换后 JavaScript版本的代码里面好像没有任何与接口相关的信息，<strong>接口是 typescript 中特有的<code>类型</code>, 在编译后会自动消失。</strong></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文讨论Typescript中的Class同ES5构造函数的对应关系，涉及TypeScript的诸多语法、构造函数、面向对象以及原型对象等相关知识点细节，本文只简单对比并不进行深入展开。&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;TypeScri
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - deepClone</title>
    <link href="https://weibo.com/u/3800117445/2020/02/15/Gossip%20-%20deepClone/"/>
    <id>https://weibo.com/u/3800117445/2020/02/15/Gossip - deepClone/</id>
    <published>2020-02-15T15:58:37.000Z</published>
    <updated>2020-05-07T06:25:56.443Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文讨论数据的拷贝，并给出深拷贝的实现代码。</div><p>拷贝即复制<code>( copy | clone )</code>，获取指定数据副本的一种行为，理论上我们可以对任意类型的数据进行拷贝，包括但不限于<code>null、undefined、字符串、数字、布尔值、对象、函数、数组、正则表达式等</code>。</p><p>数据的拷贝，可以具体的分为<a href=""> 浅拷贝 </a>和<a href=""> 深拷贝 </a>。浅拷贝拷贝一层，副本可能存在共享问题，而深拷贝会拷贝多层，拷贝得到的副本无共享问题。</p><p>数据拷贝的方案有很多，譬如可以使用循环遍历和<code>Object.assign()</code>等方法，但这些拷贝方式都是浅拷贝。深拷贝的常见实现方案一种是利用JSON内置对象来进行序列化和反序列化操作，请看下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"MiTaoEr"</span>, <span class="attr">info</span>: &#123; <span class="attr">address</span>: <span class="string">"天津"</span>, <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> t = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(o));</span><br><span class="line">o.info.address = <span class="string">"北京"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br><span class="line"><span class="comment">/* &#123; name: 'MiTaoEr', info: &#123; address: '天津', color: 'red' &#125; &#125; */</span></span><br></pre></td></tr></table></figure></p><p>我们先通过<code>JSON.stringify()</code>方法将对象序列化为JSON字符串，然后再进行反序列化的骚操作再转换回来，顺利完成任务。不得不说，这种拷贝对象的方式，手起刀落干净利落，但却有一点点小遗憾，遗憾的是<span style="color:#195">JSON数据中没有函数和 undefined 类型，因此在进行序列化的过程中，对象中的这部分数据会被直接过滤掉，此外正则类型的数据也会被处理为空对象。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; </span><br><span class="line">  name: <span class="string">"MiTaoEr"</span>, </span><br><span class="line">  ID: <span class="literal">undefined</span>, </span><br><span class="line">  showName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, </span><br><span class="line">  reg: <span class="regexp">/wen/</span>, </span><br><span class="line">  info: &#123; <span class="attr">address</span>: <span class="string">"天津"</span>,<span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(o)));</span><br><span class="line"><span class="comment">/* &#123; name: 'MiTaoEr',reg: &#123;&#125;,info: &#123; address: '天津', color: 'red' &#125; &#125; */</span></span><br></pre></td></tr></table></figure><p>利用JSON来实现深拷贝这种实现方式其实不够完美，下面给出通过递归来实现深拷贝的完美方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 深拷贝实现函数 */</span></span><br><span class="line"><span class="keyword">let</span> deepClone = <span class="function">(<span class="params">val, wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (val == <span class="literal">null</span>) <span class="keyword">return</span> val;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">"object"</span>) <span class="keyword">return</span> val;</span><br><span class="line">    <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (wm.has(val)) <span class="keyword">return</span> wm.get(val);</span><br><span class="line">    <span class="keyword">let</span> _instance = <span class="keyword">new</span> val.constructor;</span><br><span class="line">    wm.set(val, _instance);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val.hasOwnProperty(key)) _instance[key] = deepClone(val[key], wm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>_instance</code>是引用类型的数据，后续for循环的执行会更新_instance的内容,考虑到循环引用的问题，在<code>deepClone</code>方法中用到<a href=""> WeakMap </a>类型，其中<code>wm.set</code>方法执行后<code>wm</code>中保存的数据 <code>key === value</code> ， 该对象用于数据的记忆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 001-测试代码：正常情况 */</span></span><br><span class="line"><span class="comment">//var target = &#123;name: "wen-ding-ding", car:&#123;id: 666 &#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 002-测试代码：循环引用 */</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;<span class="attr">name</span>: <span class="string">"wen-ding-ding"</span>, <span class="attr">car</span>:&#123;<span class="attr">id</span>: <span class="number">666</span> &#125;&#125;</span><br><span class="line">target.ref = target;</span><br><span class="line"><span class="keyword">var</span> result = deepClone(target);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target, result);</span><br><span class="line"><span class="built_in">console</span>.log(target.ref === result.ref, target.ref === target); <span class="comment">/* false true */</span></span><br><span class="line">target.car.id = <span class="number">888</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.car.id); <span class="comment">/* 666 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 003-其它数据类型测试 */</span></span><br><span class="line"><span class="comment">/* (1) 数组 */</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = deepClone(arr1);</span><br><span class="line">arr1.push(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);</span><br><span class="line"><span class="comment">/* [ 100, 200, 300, 400 ] [ 100, 200, 300 ] */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (2) 日期 */</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> date2 = deepClone(date1);</span><br><span class="line"><span class="built_in">console</span>.log(date1,date2,date1 == date2)</span><br><span class="line"><span class="comment">/* 2019-08-24T11:00:21.379Z 2019-08-24T11:00:21.379Z false*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (3) null 和 undefined */</span></span><br><span class="line"><span class="built_in">console</span>.log(deepClone(<span class="literal">null</span>),deepClone(<span class="literal">undefined</span>))</span><br><span class="line"><span class="comment">/* null undefined */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (4) 正则 */</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>);</span><br><span class="line"><span class="keyword">var</span> reg2 = deepClone(reg1);</span><br><span class="line"><span class="built_in">console</span>.log(reg1,reg2,reg1 == reg2)</span><br><span class="line"><span class="comment">/* /\&#123;\&#123;(.+?)\&#125;\&#125;/ /\&#123;\&#123;(.+?)\&#125;\&#125;/ false */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (5) 基本值 */</span></span><br><span class="line"><span class="built_in">console</span>.log(deepClone(<span class="string">"wen-ding-ding"</span>),deepClone(<span class="number">2019</span>),deepClone(<span class="literal">true</span>))</span><br><span class="line"><span class="comment">/* wen-ding-ding 2019 true */</span></span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文讨论数据的拷贝，并给出深拷贝的实现代码。&lt;/div&gt;

&lt;p&gt;拷贝即复制&lt;code&gt;( copy | clone )&lt;/code&gt;，获取指定数据副本的一种行为，理论上我们可以对任意类型的数据进行拷贝，包括但不限于&lt;code&gt;null、unde
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>疑难杂症-raw.githubusercontent.com访问错误</title>
    <link href="https://weibo.com/u/3800117445/2020/02/12/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-raw.githubusercontent.com/"/>
    <id>https://weibo.com/u/3800117445/2020/02/12/疑难杂症-raw.githubusercontent.com/</id>
    <published>2020-02-12T15:58:37.000Z</published>
    <updated>2020-05-07T06:25:36.862Z</updated>
    
    <content type="html"><![CDATA[<p>我自己在写博客的时候，需要在博客中间插入很多的图片来解释和说明文章，为了方便所以我以前是在 github账户下面新创建了一个 source 仓库专门用来保存图片等静态资源的，当图片等文件上传到 github 仓库后会获得一个 URL 地址，正常我在博客中只需要通过 image 标签来引入这个地址就可以了。</p><p>前段时间在访问自己博客的时候，突然发现很多图片资源都访问不了，检查下原因应该是 raw.githubusercontent.com 被 GFW 特殊照顾了，下面给出恢复访问的解决方案。</p><div class="titleX" style="width:250px"><strong>第一步 查询该网站的 IP 地址</strong></div><p>打开<a href="https://site.ip138.com/" target="_blank" rel="noopener">查询网</a>页面,在该页面的查询搜索框中输入 <code>raw.githubusercontent.com</code> , 或者直接<a href="https://site.ip138.com/raw.Githubusercontent.com/" target="_blank" rel="noopener">点击我跳转</a></p><p>你将会得到下面的 IP 地址结果。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/raw1.png?raw=true"></p><p>查询到 IP 地址后，可以ping不同IP的延时以选择最佳IP地址。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/raw2.png?raw=true"></p><div class="titleX" style="width:250px"><strong>第二步 修改电脑的 host </strong></div><p>我用的是 Mac 电脑，所以直接在终端中输入<code>sudo vi /etc/hosts</code>命令使用 vim 工具来打开。<br>在该文件中新添加 对应的 IP 地址即可。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/raw3.png?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我自己在写博客的时候，需要在博客中间插入很多的图片来解释和说明文章，为了方便所以我以前是在 github账户下面新创建了一个 source 仓库专门用来保存图片等静态资源的，当图片等文件上传到 github 仓库后会获得一个 URL 地址，正常我在博客中只需要通过 imag
      
    
    </summary>
    
    
      <category term="疑难杂症" scheme="https://weibo.com/u/3800117445/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>前端框架系列-动态响应</title>
    <link href="https://weibo.com/u/3800117445/2019/05/23/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97%20%E5%8A%A8%E6%80%81%E5%93%8D%E5%BA%94%E5%92%8C%E7%BB%91%E5%AE%9A/"/>
    <id>https://weibo.com/u/3800117445/2019/05/23/前端框架系列 动态响应和绑定/</id>
    <published>2019-05-22T16:00:00.000Z</published>
    <updated>2020-04-26T01:39:52.150Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将继续讨论 <code>前端框架\模板中</code> 文本插值的实现方案，主要关注当数据变化后页面标签也实时更新功能，需要指出的是本文面向的是初学者的入门级文章仅仅从<a href=""> ( 结果 )…( 实现<br>) </a>的角度来讨论解决问题的过程，侧重点并不在于技术的深度也不探讨框架的内部架构和实现原理。</div><p class="titleX"><strong>数据和标签的动态响应</strong></p><p>在<a href=""> 上文中..文本插值 </a>我们已经讨论过如何把数据映射到页面标签的问题，并且给出了简陋的Class结构，对于前端框架来说标签中插值部分能够跟随数据实时动态更新是标配的功能，现在我们来考虑下这个功能要如何来实现。下面是<a href=""> Vue官网 </a>对<strong>响应式</strong>渲染的说明。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们已经成功创建了第一个 Vue 应用！</span><br><span class="line">看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。</span><br><span class="line">现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？</span><br><span class="line">打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改app.message的值，你将看到上例相应地更新。</span><br></pre></td></tr></table></figure><p>简单点说，我们现在要考虑的是当数据(<code>data的成员</code>)发生变化的时候，页面挂载标签中对应的部分也要能够实时更新。如何实现呢？<span style="color:red">自然而然的我们能够想到 —— 监听数据的变化，当数据变化的时候通知更新UI ( 重新计算和渲染 ) 即可。</span> </p><p class="titleX"><strong>监听对象成员的读写操作</strong></p><p>如何监听数据的变化呢？要知道数据都作为实例对象的成员(属性)而存在的。监听对象(对象属性)的读写操作以利用Object的静态方法<code>Object.defineProperty</code>来实现，下面简单介绍其基本使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>: <span class="string">"wendingding"</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"name"</span>, &#123;</span><br><span class="line">    value: <span class="string">"文顶顶"</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.name); <span class="comment">//"文顶顶"</span></span><br></pre></td></tr></table></figure><p><strong>❏</strong> <code>语法</code>：<code>Object.defineProperty(target,key,options)</code><br><strong>❏</strong> <code>参数</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* target   目标对象</span><br><span class="line">* key      对象(成员)属性名称</span><br><span class="line">* options  对象属性描述对象</span><br></pre></td></tr></table></figure></p><p><strong>❏</strong> <code>用途</code>：更细粒度的定义对象以控制指定属性的值、是否可配置(删除)、是否可枚举以及是否可写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"name"</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"监听到-执行读取操作"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    set(newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"监听到-执行写入操作"</span>, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(o.name); <span class="comment">//监听到-执行读取操作</span></span><br><span class="line">o.name = <span class="string">"夏"</span>; <span class="comment">//监听到-执行写入操作 夏</span></span><br></pre></td></tr></table></figure></p><p>当我们试图访问对象属性的时候可以在<code>get</code>方法中拦截，当尝试设置对象属性的时候能够在<code>set</code>方法中拦截，到这里我们已经掌握了一种可以监听对象中属性读写操作的方式。<code>Object.defineProperty</code>方法只能够对对象中的单个标签进行监听，而我们框架的响应模型中需要对对象中的多个数据(<code>构造函数参数对象中data的所有成员</code>)的写操作进行监听，怎么处理呢？且看下面的实现代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>: <span class="string">"xx"</span>,<span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">"女"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">definePropertyReact</span>(<span class="params">o, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 定义目标对象的单个属性：(读 | 写) 监听 */</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(o, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"监听到读取操作"</span>, key);</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newVal) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"监听到设置操作"</span>, key, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 迭代对象的成员，为每个数据属性都监听监听 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> o) &#123; definePropertyReact(o, key, o[key]) &#125;</span><br></pre></td></tr></table></figure></p><p>当程序运行后，我们可以在控制台通过o.name的方式访问和修改属性的值，下面是执行的结果。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/vue003.png?raw=true" height="200px"></p><p class="titleX"><strong>动态响应的代码实现</strong></p><p>现在我们已经解决了对象属性<strong><code>写操作</code></strong>监听的问题，剩下的就是当对象中指定属性的<code>写操作</code>被触发时通知让UI更新即可，下面给出完整的Manager实现和演示代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 12px;color:#195;margin:10px 30px"</span>&gt;</span> &#123;&#123;author&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;textA&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;textB&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JS代码部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Class的写法 */</span></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">constructor</span>(o) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/*  根据传入的el来获取页面中挂载的标签 */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(o.el);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.rootInnerHTMLCopy = <span class="keyword">this</span>.el.innerHTML;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 存data属性中所有的属性名 */</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 给data属性中所有数据添加读写操作监听 */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.keys = [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o.data) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.keys.push(key);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.definePropertyReact(<span class="keyword">this</span>, key, o.data[key])</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 第一次渲染 */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.ObserverPropertyChange();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        definePropertyReact(o, key, val) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 定义目标对象的单个属性：(读 | 写) 监听 */</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">Object</span>.defineProperty(o, key, &#123;</span></span><br><span class="line"><span class="javascript">                configurable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                enumerable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                get() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> val;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                set(newVal) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"监听到设置操作"</span>, key, newVal);</span></span><br><span class="line"><span class="undefined">                    val = newVal;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">/* 当修改数据的时候通知UI重新渲染 */</span></span></span><br><span class="line"><span class="undefined">                    self.ObserverPropertyChange();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        ObserverPropertyChange() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.el.innerHTML = <span class="keyword">this</span>.rootInnerHTMLCopy;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.keys.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`&#123;&#123;2&#125;\\s*<span class="subst">$&#123;ele&#125;</span>\\s*&#125;&#123;2&#125;`</span>, <span class="string">"g"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.el.innerHTML = <span class="keyword">this</span>.el.innerHTML.replace(reg, <span class="keyword">this</span>[ele]);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* 初始化：传入配置对象创建实例对象 */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Manager(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">"沐春风"</span>,</span></span><br><span class="line"><span class="javascript">            textA: <span class="string">"白马秋风塞上"</span>,</span></span><br><span class="line"><span class="javascript">            textB: <span class="string">"杏花烟雨江南"</span>,</span></span><br><span class="line"><span class="javascript">            author: <span class="string">"文顶顶"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/xxxxx.gif?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将继续讨论 &lt;code&gt;前端框架\模板中&lt;/code&gt; 文本插值的实现方案，主要关注当数据变化后页面标签也实时更新功能，需要指出的是本文面向的是初学者的入门级文章仅仅从&lt;a href=&quot;&quot;&gt; ( 结果 )…( 实现&lt;br&gt;) &lt;/a&gt;的角度来
      
    
    </summary>
    
    
      <category term="前端框架系列" scheme="https://weibo.com/u/3800117445/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>前端框架系列-文本插值</title>
    <link href="https://weibo.com/u/3800117445/2019/05/22/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97%20%E6%96%87%E6%9C%AC%E6%8F%92%E5%80%BC/"/>
    <id>https://weibo.com/u/3800117445/2019/05/22/前端框架系列 文本插值/</id>
    <published>2019-05-21T16:00:00.000Z</published>
    <updated>2020-04-26T01:39:51.234Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文讨论 <code>前端框架\模板中</code> 文本插值的实现方案，本文将会主要以<a href="">Vue</a>框架作为参考讨论文本插值语法的具体实现和推导方案，并补充相关的技术细节。</div><p class="titleX"><strong>文本插值</strong></p><p>在Vue官网文档的第一部分( <a href="https://cn.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">声明式渲染</a> )我们可以看到下面一段描述。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: 'Hello Vue!'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">我们已经成功创建了第一个 Vue 应用！</span><br><span class="line">看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。</span><br><span class="line">现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？</span><br><span class="line">打开你的浏览器的JavaScript控制台，并修改 app.message 的值，你将看到上例相应地更新。</span><br></pre></td></tr></table></figure></p><p>在Vue官网的另一部分(<a href="https://cn.vuejs.org/v2/guide/syntax.html" target="_blank" rel="noopener">模板语法-插值</a>)说明了<span style="color:red">“ Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析 ”。</span></p><p>我们知道，在Vue框架中数据绑定的插值语法使用的是<code>Mustache语法 (双大括号)</code> ，而这篇短小的文章将简单讨论其内部的实现机制。</p><p class="titleX"><strong>Class-实例的构建初步</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 标签部分</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 引入框架文件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 创建Vue实例</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: 'Hello Vue!'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在Vue框架中我们总是会通过上面的方式来创建并得到一个实例对象，在调用的时候我们传递了一个对象作为构造函数(class)的参数，在该对象中我们设置了<code>挂载的标签(el属性)</code>、<code>实例数据(data属性)</code>等信息。这里，我们先提供一个<a href=""> 构造函数 或者是 Class </a>来模拟这个整体的结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Class的写法 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(o) &#123;</span><br><span class="line">        <span class="comment">/*  根据传入的el来获取页面中挂载的标签 */</span></span><br><span class="line">        <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(o.el);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 把对象参数中的data成员(数据)添加到实例对象 */</span></span><br><span class="line">        <span class="comment">/* 在访问的时候可以直接通过(new Manager()).xx访问 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o.data) &#123;</span><br><span class="line">            <span class="keyword">this</span>[key] = o.data[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 初始化：传入配置对象创建实例对象 */</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Manager(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">"Hello 文顶顶!"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/flowerField/Source/master/Blog/vue001.png" height="150px"></p><p>在开始的时候，[ 构造函数 \ Class ]的样子可能可能是像上面这样的，先尝试获取参数对象中<code>el</code>的值以获取实例在页面中挂载的标签，然后通过一个循环结构来把<code>data</code>中的数据都直接添加到实例对象，这种处理将允许我们直接以<code>app.message</code>的方式来操作数据。</p><p class="titleX"><strong>数据和标签的渲染关系</strong></p><p>设计出基本结构后，现在我们可以开始考虑如果需要把<code>data</code>中的数据渲染(绑定)到页面的标签，那该如何实现？ 简单思考一秒钟后，我们似乎可以尝试以下的实践策略：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 在初始化的操作中先获取挂载标签的属性节点(这很容易办到，使用innerHTML就可以)。</span><br><span class="line">(2) 在innerHTML中寻找类类似于&#123;&#123;message&#125;&#125;的结构，如果找到那么抠出双括号中的字段-message</span><br><span class="line">(3) 在实例对象中获取-message字段对应的value值，使用该值来替换&#123;&#123;message&#125;&#125;部分。</span><br><span class="line">(!) 因为标签中可能存在多个插值代码，因此可能需要循环处理，在寻找插值代码的时候使用正则匹配或许会比较合适。</span><br></pre></td></tr></table></figure></p><p>下面试着给出用正则来匹配标签内容并进行替换的核心代码，正则表达式的结果可以参考下面的注释，用于匹配<a href="">  </a>的特定结构，<code>\s*</code>表示可以允许存在空格，<code>\\s</code>表示对<code>\</code>进行转义处理，参数<code>g</code>用以表示应用全局匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`&#123;&#123;2&#125;\\s*msg\\s*&#125;&#123;2&#125;`</span>, <span class="string">"g"</span>);</span><br><span class="line"><span class="comment">/* /&#123;&#123;2&#125;\s*msg\s*&#125;&#123;2&#125;/g  */</span></span><br><span class="line"><span class="keyword">this</span>.el.innerHTML = <span class="keyword">this</span>.el.innerHTML.replace(reg, <span class="string">"文顶顶"</span>);</span><br></pre></td></tr></table></figure><p>考虑到在参数对象的<code>data</code>中可能会有多个数据(<code>键值对</code>)，且执行文本插值的时候某个数据可能会出现在标签的多个位置，因此需要通过循环的方式来检查 <a href="">innerTTML</a> 字段中每个数据的情况。我们可以通过 <code>Object.keys()</code>方法来获取所有的属性名(<code>key的集合</code>)，然后遍历该数组并执行正则替换操作。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123; message &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JS代码部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* Class的写法 */</span></span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">constructor</span>(o) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/*  根据传入的el来获取页面中挂载的标签 */</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(o.el);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">/* 把对象参数中的data成员(数据)添加到实例对象 */</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">/* 在访问的时候可以直接通过(new Manager()).xx访问 */</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o.data) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>[key] = o.data[key];</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/* 获取data数据中所有的key */</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">/* 根据data中的属性集合来遍历渲染页面中指定的内容 */</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">Object</span>.keys(o.data).forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`&#123;&#123;2&#125;\\s*<span class="subst">$&#123;ele&#125;</span>\\s*&#125;&#123;2&#125;`</span>, <span class="string">"g"</span>);</span></span><br><span class="line"><span class="javascript">                     <span class="comment">/*  /&#123;&#123;2&#125;\s*message\s*&#125;&#123;2&#125;/g */</span></span></span><br><span class="line"><span class="javascript">                     <span class="comment">/*  /&#123;&#123;2&#125;\s*msg\s*&#125;&#123;2&#125;/g     */</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.el.innerHTML, reg);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.el.innerHTML = <span class="keyword">this</span>.el.innerHTML.replace(reg, <span class="keyword">this</span>[ele]);</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* 初始化：传入配置对象创建实例对象 */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Manager(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">"文顶顶"</span>,</span></span><br><span class="line"><span class="javascript">                msg: <span class="string">"米桃儿"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当代码执行的时候，可以看到下面的效果。</p><p><img src="https://raw.githubusercontent.com/flowerField/Source/master/Blog/vue002.png" height="300px"></p><p>至此，便简单了实现了数据-标签渲染的功能。如果数据发生变化后标签中对应的内容也要随之变化，这种数据驱动UI的结构最核心之处在于<code>监听数据的变化并通知给UI视图</code>，具体实现可以参考下一篇文章。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文讨论 &lt;code&gt;前端框架\模板中&lt;/code&gt; 文本插值的实现方案，本文将会主要以&lt;a href=&quot;&quot;&gt;Vue&lt;/a&gt;框架作为参考讨论文本插值语法的具体实现和推导方案，并补充相关的技术细节。&lt;/div&gt;

&lt;p class=&quot;titleX&quot;
      
    
    </summary>
    
    
      <category term="前端框架系列" scheme="https://weibo.com/u/3800117445/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [29]-RegExp</title>
    <link href="https://weibo.com/u/3800117445/2019/05/11/javaScript%E7%B3%BB%E5%88%97%20%5B29%5D-RegExp/"/>
    <id>https://weibo.com/u/3800117445/2019/05/11/javaScript系列 [29]-RegExp/</id>
    <published>2019-05-10T16:23:18.000Z</published>
    <updated>2019-06-11T01:32:06.867Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍RegExp相关的知识点，包括正则表达式的创建、匹配规则等内容。</div><br><div class="titleX"><strong>RegExp简单介绍</strong></div><br><strong>正则表达式</strong><a href=""> Regular Expression </a>是描述字符模式的对象，在JavaScript语言中提供了内置的 RegExp 来处理正则。正则表达式能够进行强大的<code>模式匹配</code>和<code>文本检索与替换</code>功能，在前端开发中往往有大量的表单数据校验的工作，使用正则表达式可以减少数据校验的工作量。<br><br>在JavaScript语言中，除 RegExp 内置构造函数外，字符串操作中也有很多操作涉及到正则，包括字符串的<code>macth()</code>、<code>search()</code>、<code>split()</code>以及<code>replace()</code>等方法都接受正则表达式作为参数，而这也为我们操作字符串提供了更强大的功能。<br><br><div class="titleX"><strong>正则表达式的创建</strong></div><p>正则表达式的创建支持两种形式，一种是直接字面量方式创建，一种是使用 RegExp 构造函数方式创建，两种创建方式得到的正则实例是等价的。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">① 字面量</span></p><p>字面量创建正则的语法 <span style="color:#195;font-family:Georgia">var reg = / pattern / flags;</span> 其中 pattern(模式) 部分可以是任何简单或复杂的正则表达式，而 flags(参数) 部分支持三种匹配模式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g: global              表示全局匹配</span><br><span class="line">i: case-insensitive    表示忽略大小写</span><br><span class="line">m: multiline           表示多行匹配,影响^，$的匹配结果</span><br></pre></td></tr></table></figure></p><p>JavaScript语言在字面量创建正则的语法中，模式部分可以直接写特定的字符串文本，也可以使用正则元字符，需要注意的是因为这些元字符在正则表达式中都有一种或者多种特殊的用途，因此如果想要匹配字符串中包含的这些字符，那么就必须对它们进行转义操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-字面量的方式创建*/</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/文顶顶/g</span>;                  <span class="comment">/*匹配文顶顶文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/[a-zA-Z0-9]\d&#123;3&#125;/g</span>;       <span class="comment">/*匹配以字母和数字开头后面跟3个数字的文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/^javaScript/g</span>;            <span class="comment">/*匹配以JavaScript开头的文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/^javaScript/gm</span>;           <span class="comment">/*匹配以JavaScript开头或作为行首的文本，全局多行匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg5 = <span class="regexp">/[xm]xia/i</span>;                <span class="comment">/*匹配xxia或者mxia文本，不区分大小写*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*.是正则中的元字符,代表除了换行外的所有字符*/</span></span><br><span class="line"><span class="keyword">var</span> reg6 = <span class="regexp">/.com/gi</span>;                  <span class="comment">/*匹配所有以com结尾的4个字符，不区分大小写*/</span></span><br><span class="line"><span class="keyword">var</span> reg7 = <span class="regexp">/\.com/gi</span>;                 <span class="comment">/*匹配所有.com文本，不区分大小写*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-正则测试*/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">"你好，文顶顶！"</span>));    <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"a123"</span>));           <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"5123"</span>));           <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"-123"</span>));           <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"java\njavaScript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(str));              <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg3));             <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg4));             <span class="comment">//["javaScript"]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xxiao"</span>));          <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"MxiAo"</span>));          <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xiongXxiao"</span>));     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xiaoxiao"</span>));       <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg6.test(<span class="string">"baiducom"</span>));       <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg7.test(<span class="string">"baiducom"</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg7.test(<span class="string">"wendingding.com"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">② 构造函数</span></p><p>RegExp 构造函数创建正则实例的语法  <span style="color:#195;font-family:Georgia">var reg = new RegExp( pattern , flags ) ;</span>其中 pattern(模式) 部分可以是任何简单或复杂的正则表达式(直接写字符串规则即可)，而 flags(参数) 部分和字面量方式一样也支持三种匹配模式。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-构造函数创建正则表达式*/</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"文顶顶"</span>,<span class="string">"g"</span>);            <span class="comment">/*匹配文顶顶文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[a-zA-Z0-9]\\d&#123;3&#125;"</span>,<span class="string">"g"</span>) <span class="comment">/*匹配字母和数字开头后跟3个数字的文本全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^javaScript"</span>,<span class="string">"g"</span>);  <span class="comment">/*匹配以JavaScript开头的文本，全局匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg4 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^javaScript"</span>,<span class="string">"gm"</span>); <span class="comment">/*匹配以JavaScript开头或作为行首的文本全局多行匹配*/</span></span><br><span class="line"><span class="keyword">var</span> reg5 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[xm]xia"</span>,<span class="string">"i"</span>);      <span class="comment">/*匹配xxia或者mxia文本，不区分大小写*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*.是正则中的元字符,代表除了换行外的所有字符*/</span></span><br><span class="line"><span class="keyword">var</span> reg6 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">".com"</span>,<span class="string">"gi"</span>);        <span class="comment">/*匹配所有以com结尾的4个字符，不区分大小写*/</span></span><br><span class="line"><span class="keyword">var</span> reg7 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\.com"</span>,<span class="string">"gi"</span>);      <span class="comment">/*匹配所有.com文本，不区分大小写*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*02-正则测试*/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">"hello，文顶顶！"</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"a123"</span>));           <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"5123"</span>));           <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"-123"</span>));           <span class="comment">//false</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"java\njavaScript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(str));              <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg3));             <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg4));             <span class="comment">//["javaScript"]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xxiao"</span>));          <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"MxiAo"</span>));          <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xiongXxiao"</span>));     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg5.test(<span class="string">"xiaoxiao"</span>));       <span class="comment">//false</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(reg6.test(<span class="string">"baiducom"</span>));       <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg7.test(<span class="string">"baiducom"</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg7.test(<span class="string">"wendingding.com"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>RegExp基本使用</strong></div><p><strong>字符串方法</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str.search()</span><br><span class="line">    返回第一次匹配时所在的索引值,如果匹配不到则返回-1</span><br><span class="line">str.match()</span><br><span class="line">    - 默认匹配字符串，返回一个数组</span><br><span class="line">        + 0:所匹配的字符</span><br><span class="line">        + index:匹配第一个字符所在的索引</span><br><span class="line">        + input:对字符串的引用</span><br><span class="line">    - 全局匹配(g)，返回一个匹配所有字符串数组</span><br><span class="line">    - 如果匹配不到则返回null</span><br><span class="line">str.replace()  利用正则匹配来替换字符串</span><br><span class="line">str.split()    利用正则匹配来切割字符串</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-replace方法的基本使用*/</span></span><br><span class="line"><span class="comment">/*01-1 清空字符串前面和后面的N个空格(实现字符串trim方法功能)*/</span></span><br><span class="line"><span class="comment">//var reg1   = /^\s+|\s+$/g;</span></span><br><span class="line"><span class="keyword">var</span> reg1     = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^\\s+|\\s+$"</span>,<span class="string">"g"</span>)</span><br><span class="line"><span class="keyword">var</span> result   = <span class="string">" trim test   "</span>.replace(reg1,<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);                            <span class="comment">//trim test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-2 处理字符串中的敏感词*/</span></span><br><span class="line"><span class="keyword">var</span>  world = <span class="string">"华为荣耀"</span>;</span><br><span class="line"><span class="keyword">var</span>  reg2  = <span class="keyword">new</span> <span class="built_in">RegExp</span>(world,<span class="string">"g"</span>);</span><br><span class="line"><span class="keyword">var</span>  str   = <span class="string">"华为公司今天宣布旗下手机华为荣耀正式上市，华为荣耀价格感人只卖998"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg2, <span class="string">"****"</span>));</span><br><span class="line"><span class="comment">/*华为公司今天宣布旗下手机****正式上市，****价格感人只卖998*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-match方法的基本使用*/</span></span><br><span class="line"><span class="comment">/*02-1 默认匹配*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/华为荣耀/</span>));</span><br><span class="line"><span class="comment">//["华为荣耀", index: 13, input: "华为公司今天宣布旗下手机华为荣耀正式上市，华为荣耀价格感人只卖998"</span></span><br><span class="line"><span class="comment">//groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-2 全局匹配*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/华为荣耀/g</span>));  <span class="comment">/*["华为荣耀", "华为荣耀"]*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-3 匹配失败*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/苹果/</span>));      <span class="comment">/*null*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-search方法的基本使用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/华为荣耀/</span>));  <span class="comment">/*13*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/苹果/</span>));     <span class="comment">/*-1*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-split方法的基本使用*/</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"2019-05-20"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"熊大  ,熊二 ，光头强，  毛毛， 吉吉&gt;凯特"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">"-"</span>));        <span class="comment">//["2019", "05", "20"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="string">","</span>));        <span class="comment">//["熊大", "熊二，光头强，  毛毛， 吉吉&gt;凯特"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="regexp">/\s*[,，&gt;]\s*/g</span>));<span class="comment">//["熊大", "熊二", "光头强", "毛毛", "吉吉", "凯特"]</span></span><br></pre></td></tr></table></figure><p><strong>RegExp的核心成员</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">regExp.test() 测试正则表达式用test方法,返回布尔值</span><br><span class="line">    - 格式：正则表达式.test(字符串)</span><br><span class="line">    - 用<span class="tag">&lt;<span class="name">正则表达式</span>&gt;</span>测试<span class="tag">&lt;<span class="name">字符串</span>&gt;</span>是否匹配,返回true/false</span><br><span class="line">regExp.exec() 测试正则表达式exec方法</span><br><span class="line">    - 格式：/xx/.exec(字符串)</span><br><span class="line">global        是否应用g</span><br><span class="line">ignoreCase    是否忽略大小写模式</span><br><span class="line">multiline     是否应用多行匹配模式</span><br><span class="line">source        包含正则表达式文本的字符串</span><br><span class="line">lastIndex     整数，如果正则中应用了g全局匹配，则保存下一次开始检索的位置，在exec和test方法中会被用到</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/小青蛙/gi</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.global);      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.ignoreCase);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);   <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.multiline);   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.source);      <span class="comment">//小青蛙</span></span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>RegExp匹配规则</strong></div><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">001 所有字母和数字都是按照字面量进行匹配,和字符串匹配等效 如/good/gi</span><br><span class="line">002 字符类（只记小写字母即可）</span><br><span class="line">    - `. ` : 除换行以外的字符</span><br><span class="line">    - \w : 代表数字或字母或下划线</span><br><span class="line">    - \W : 非数字字母和下划线字符</span><br><span class="line">    - \d : 数字</span><br><span class="line">    - \D : 非数字</span><br><span class="line">    - \s : 代表一个空格</span><br><span class="line">    - \S : 空格以外的字符</span><br><span class="line">    注意：以上所有字符类都只是匹配“一个”字符</span><br><span class="line">    </span><br><span class="line">003 边界处理</span><br><span class="line">    - \b : 匹配一个单词边界，也就是指单词和空格间的位置</span><br><span class="line">    - \B : 匹配非单词边界。</span><br><span class="line"></span><br><span class="line">004 特殊符号</span><br><span class="line">    &gt;^  $  .  *  +  ?  =  !  :  |  \  /  ()  []  &#123;&#125;</span><br><span class="line">    - []: 代表任意“单个字符” ,里面的内容表示“或”的关系</span><br><span class="line">        + -: 代表范围</span><br><span class="line">        + ^: 代表非</span><br><span class="line"></span><br><span class="line">    - (): 表示分组（n是以最左边括号出现的顺序排列）</span><br><span class="line">        + $1: 表示第一个分组</span><br><span class="line">        + $n: 表示第n个分组（不能写在正则表达式里）</span><br><span class="line">        + \n: 在正则分组后面使用，表示对第n个分组的引用(一定要写在正则表达式里)</span><br><span class="line">        建议：编写的正则分组数量越少越好</span><br><span class="line"></span><br><span class="line">    - |:  表示或者</span><br><span class="line"></span><br><span class="line">    - 锚点定位</span><br><span class="line">        + ^: 表示以什么开头</span><br><span class="line">        + $: 表示以什么结尾</span><br><span class="line"></span><br><span class="line">    - 表示数量，对前一个字符计数，</span><br><span class="line">        + *: 代表0个或0个以上  &#123;0,&#125;</span><br><span class="line">        + +: 代表1个或1个以上  &#123;1,&#125;</span><br><span class="line">        + ?: 代表0个或1个     &#123;0,1&#125;</span><br><span class="line">        + &#123;&#125;:</span><br><span class="line">            \d&#123;5&#125;: 匹配5个数字</span><br><span class="line">            \d&#123;5,10&#125;: 匹配5个到10个数字</span><br><span class="line">            \d&#123;5,&#125;: 匹配5个或5个以上的数字</span><br><span class="line">        说明:</span><br><span class="line">            1）数量词*,+,&#123;5,&#125;，会尽可能多的去匹配结果（贪婪）</span><br><span class="line">            2）在后面加一个?表示尽可能少的去匹配结果（非贪婪）</span><br><span class="line">                google,goooogle ==&gt; /go+/</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍RegExp相关的知识点，包括正则表达式的创建、匹配规则等内容。&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;RegExp简单介绍&lt;/strong&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;正则表达式&lt;/stron
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
