<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2019-04-11T09:42:56.306Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javaScript系列 [17]-JavaScript的运算符</title>
    <link href="https://weibo.com/u/3800117445/2019/04/10/javaScript%E7%B3%BB%E5%88%97%20%5B17%5D-JavaScript%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://weibo.com/u/3800117445/2019/04/10/javaScript系列 [17]-JavaScript的运算符/</id>
    <published>2019-04-10T00:22:16.000Z</published>
    <updated>2019-04-11T09:42:56.306Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍javaScript语言中的运算符(<code>operator</code>)，包括但不限于算术运算符、逻辑运算符、关系运算符以及赋值运算符等内容，而对于位运算符及关键字运算符则仅会做简单说明。</div><div class="titleX"><strong>运算符简介</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base12.png?raw=true"></p><p>JavaScript语言中的运算符如果按照<code>符号</code>来划分那么总体可以分成<strong>标点符号所表示的运算符</strong>和<strong>关键字运算符</strong>两大类，其中前者指代的是类似于<code>+</code>、<code>*</code>、<code>&amp;&amp;</code>、<code>==</code>等运算符，而后者指代的是类似于<code>in</code>、<code>delete</code>、<code>typeof</code>以及<code>instanceof</code>的运算符。需要说明的是，本文只介绍前者，也就是所谓<strong>标点符号所表示的运算符</strong>。</p><p>其实，如果按照运算符的作用和具体使用方式来划分，又可以分成如上图所示的<strong>基本算术运算符</strong>、<strong>逻辑运算符</strong>、<strong>关系运算符</strong>、<strong>赋值运算符</strong>等几种，而这也是开发中习惯的分类方式。听上去感觉非常繁杂甚至让人害怕，其实 enmmm ~ 大可不必 <a href=""><strong> : )</strong></a></p><div class="titleX"><strong>运算符基本使用</strong></div><p>接下来，我将分别介绍JavaScript中各种类型的运算符，包括它们都有哪些具体的运算符，应该如何使用，使用的示例代码以及额外的注意点等(位运算符不在本文说明的范围，有兴趣的朋友可以参考<a href="http://wendingding.com/2018/08/03/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20XOR/" target="_blank" rel="noopener"> 数据安全系列 XOR </a>这篇文章。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">基本算术运算符</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base14.png?raw=true"></p><p>在这里我们先介绍基本的算术运算符，它们是 <a href="">*(乘法)、/(除法)、+(加法)、-(减法)和 %(求余|模运算)</a>。这些运算符中，除了<code>+(加法)</code>稍微复杂点外，其余的四种运算符都很简单，就是简单的求积、求商、差以及余数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">8</span>,num2 = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基本的算术运算符*/</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 + num2);     <span class="comment">//34</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 - num1);     <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 - num2);     <span class="comment">//-18</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 * num2);     <span class="comment">//208</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 / num2);     <span class="comment">//0.3076923076923077</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 / num1);     <span class="comment">//3.25</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 % num1);     <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 % num2);     <span class="comment">//8</span></span><br></pre></td></tr></table></figure><p><strong>算术运算符的使用注意点说明</strong></p><blockquote><p>① 除加法外，其他运算符在必要时会将操作数转换为数字，如<code>无法转换则结果为NaN</code>。<br>② 除数为0的结果为正无穷大或者是负无穷大，而<code>0/0的结果是NaN</code>。<br>③ 模(%)运算中，计算的结果和第一个操作数的符号保持一致，且模运算也适用于整数和浮点数。<br>④ 加法(+)可以对两个数字做加法，也可以用来连接字符串，具体的情况可以参考下面的示例代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*算术运算符的使用注意点*/</span></span><br><span class="line"><span class="comment">/*01 默认把非数字转换为数字，如果无法转换则转换为NaN,最终结果为NaN*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> - <span class="number">3</span>);            <span class="comment">//9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> / <span class="number">3</span>);            <span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12a"</span>* <span class="number">3</span>);            <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 考虑0作为除数的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> / <span class="number">0</span>);            <span class="comment">//Infinity   无穷大</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-12</span>  / <span class="number">0</span>);            <span class="comment">//-Infinity  负无穷大</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span>   / <span class="number">0</span>);            <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 模运算的符号问题，以及在浮点数中的应用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span>  % <span class="number">1</span>  );         <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-12"</span> % <span class="number">5</span>  );         <span class="comment">//-2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-12"</span> % <span class="number">-5</span> );         <span class="comment">//-2  模运算结果的符号只和第一个操作数相关</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">6.5</span>  % <span class="number">2.1</span>);         <span class="comment">//0.19999999999999973</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04 加法用来拼接字符串的用法和注意点*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">2</span>);               <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hi"</span> + <span class="string">" XiaoXia"</span>);   <span class="comment">//"Hi XiaoXia"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>  + <span class="string">"3"</span>);          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>  +  <span class="number">3</span> );          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">2</span>   + <span class="string">"3"</span>);          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   + <span class="number">2</span> + <span class="string">"Nice"</span> );  <span class="comment">//"3Nice"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   + (<span class="number">2</span> + <span class="string">"Nice"</span>)); <span class="comment">//"12Nice"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Nice"</span> + <span class="number">1</span> + <span class="number">2</span>);      <span class="comment">//"Nice12"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">true</span>);         <span class="comment">//2 布尔类型的值转换为数字1后再做加法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">false</span>);        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">41</span>   + <span class="literal">null</span>);         <span class="comment">//41  null转换为数字0后再做加法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">41</span>   + <span class="literal">undefined</span>);    <span class="comment">//NaN undefined转换为数字(NaN)后做加法</span></span><br></pre></td></tr></table></figure><p><strong>特别说明</strong> 处理+运算符的时候，如果操作数都是数字那就做加法计算，如果都是字符串那就拼接，如果是此外的其他情况，那运算是默认会执行必要的类型转换，而运算符的行为依赖于类型转换的结果，<span style="color:#f08">加号的转换规则需要优先考虑字符串连接</span>。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">关系运算符</span><br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base15.png?raw=true"></p><p><strong>关系运算符</strong> 用于测试两个值之间的关系,比如”相等”、”大于”等，根据关系是否存在(成立)而返回 <code>true</code> 或者是 <code>false</code>。<a href="">关系表达式总是返回一个布尔值</a>,通常用在if、while以及for语句中用于控制程序的执行流程。下面将依次介绍关系运算符中的比较运算符(<code>&lt;、&lt;=、&gt;、&gt;=</code>) 和 (不)相(全)等运算符。</p><p><strong>比较运算符</strong> 用来检测两个操作数的大小关系(<a href="">数值大小或者字母表的顺序</a>)。需要注意JavaScript字符串是一个由16位整数值组成的序列，字符串的比较本质上是对两个字符串中的字符对应的数值进行比较，而且字符串比较是区分大小写的，所有的大写的ASCII字母都”小于”小写的ASCII字母，<a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">点击查看ASCII表</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*比较运算符的简单使用：返回值均为布尔值*/</span></span><br><span class="line"><span class="comment">/*01-两个操作符都是数字的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>  &lt;  <span class="number">3</span> );        <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span> &lt;  <span class="number">4</span> );        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>  &lt;= <span class="number">3</span> );        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">65</span> &gt;  <span class="number">41</span>);        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">65</span> &gt;= <span class="number">41</span>);        <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-两个操作符都是字符串的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &lt;  <span class="string">"b"</span>  );   <span class="comment">//true  "a"-97 "b"-98</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &lt;  <span class="string">"ba"</span> );   <span class="comment">//true  比较第一位</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ab"</span> &gt;  <span class="string">"ac"</span> );   <span class="comment">//false 比较第二位 b-98 c-99</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span>&lt;  <span class="string">"abx"</span>);   <span class="comment">//true  比较第三位 c-99 x-120</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  &gt;  <span class="string">"2"</span> );    <span class="comment">//false "1"-49 "2"-50</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>  &gt;  <span class="string">"a"</span> );    <span class="comment">//false "A"-65 "a"-97</span></span><br></pre></td></tr></table></figure></p><p><strong>比较运算符</strong> 的操作数可以是任意类型的，但只有<span style="color:orange"> 数字和字符串才能真正的执行比较操作 </span>，其它的操作都将进行类型转换。在进行类型转换的时候，比较运算符更偏爱数字所以会优先把操作数都转换为数字再比较，只有当两个操作数都是字符串的时候才会进行字符串的比较( <code>字母表顺序</code> )。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*如果比较运算符的两个操作数类型不都是字符串和数字的情况~*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &gt;  <span class="number">0</span> );       <span class="comment">//false  "a"转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>  &gt; <span class="string">"c"</span>);       <span class="comment">//false  "c"转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> &gt;  <span class="number">10</span>);       <span class="comment">//true   "12"转换为数字12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>   &gt; <span class="literal">undefined</span>); <span class="comment">//false   undefined转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>   &gt; <span class="literal">null</span>);      <span class="comment">//true    null转换为0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-1</span>   &gt; <span class="literal">null</span>);      <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>简单总结下，如果比较运算符的两个操作数类型不同(不全是数字或者不全是字符串)的时候，会<span style="color:#f08">优先把操作数转换为数字。如果操作数中出现NaN(无论是类型转换前还是转换后)，最终结果都将是NaN。</span></p><p><strong>相等(==)和全等(===)运算符</strong> 用于比较两个值是否相等或全等，如果满足则返回 true。其实<a href="">相等(==)和全等(===)的核心区别在于相等仅比较值，而全等需要比较值和类型。</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*相等：仅仅比较值，如果类型不同那么会进行类型转换(限于字符串、布尔值和对象)，优先转换为数字*/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   == <span class="number">1</span>);         <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  == <span class="number">1</span>);         <span class="comment">//true   "1"先被转换为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1a"</span> == <span class="number">1</span>);         <span class="comment">//false  "1a"先被转换为数字这里得到的是NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="number">1</span>);         <span class="comment">//true   true先被转换为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="string">"1"</span>);       <span class="comment">//true   true先被转换为数字1,"1"被转换为数字1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>  == <span class="literal">NaN</span>);       <span class="comment">//false  NaN和任何的值都不等包括它自己</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true   比较特殊(因为本质上undefined派生自null)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*需要注意：undefined和null在和数字比较的时候并不会转换成NaN和0*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>    == <span class="literal">undefined</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>    == <span class="literal">null</span>);      <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*全等：也称为严格相等，既比较值也比较类型，类型不同则直接返回false*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  === <span class="number">1</span>);         <span class="comment">//false  类型不同</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> === <span class="number">1</span>);         <span class="comment">//false  类型不同</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">//false  类型不同</span></span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 需要注意区分<code>&quot;==&quot;(相等)</code>、<code>&quot;===&quot;(全等)</code>和<code>&quot;=&quot;(赋值)</code>，此外还有<code>&quot;!=&quot;</code>和<code>&quot;!==&quot;</code>运算符，它们的检测规则刚好是 <strong>相等</strong> 和 <strong>全等</strong> 的求反。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">逻辑运算符</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base16.png?raw=true"></p><p>图示已经列出了JavaScript语言中的三种逻辑运算符(<code>&quot;逻辑非&quot;</code>、<code>&quot;逻辑或&quot;</code>和<code>&quot;逻辑与&quot;</code>)以及它们的具体使用方式，在开发中逻辑运算符常用在条件表达式中(如if语句的条件判断)，下面给出参考代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-逻辑非 该运算符只有一个操作数，作用是对操作数取反*/</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">true</span>);             <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">0</span>);                <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">undefined</span>);        <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-逻辑或 该运算符需要两个操作数</span></span><br><span class="line"><span class="comment">* 运算规则：如果第一个操作数为真那么就直接返回第一个操作数，否则返回第二个操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">0</span> || <span class="number">1</span>);        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">false</span>);    <span class="comment">//true 返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">1</span> || <span class="number">2</span>);        <span class="comment">//1    返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">2</span> || <span class="number">4</span>);        <span class="comment">//2    返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(  <span class="string">""</span> || <span class="number">5</span>);        <span class="comment">//5    第一个操作数转换为false，返回第二个操作数</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>&gt;<span class="number">2</span> || <span class="string">"Hi"</span>);     <span class="comment">//Hi"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-逻辑与 该运算符需要两个操作数</span></span><br><span class="line"><span class="comment">* 运算规则：如果第一个操作数为真那么就直接返回第二个操作数，否则返回第一个操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">0</span> &amp;&amp; <span class="number">1</span>);        <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);    <span class="comment">//false 返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">1</span> &amp;&amp; <span class="number">2</span>);        <span class="comment">//2     返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">2</span> &amp;&amp; <span class="number">4</span>);        <span class="comment">//4     返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(  <span class="string">""</span> &amp;&amp; <span class="number">5</span>);        <span class="comment">//""</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>&gt;<span class="number">2</span> &amp;&amp; <span class="string">"Hi"</span>);     <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">其它常用运算符</span></p><p>在最后，再简单介绍JavaScript语言中的<code>赋值运算符</code>、<code>自增自减运算符</code>以及特殊的<code>三元运算符</code>。</p><p><strong>赋值运算符</strong> JavaScript使用<code>=</code>运算符来给变量赋值，该运算符希望它的左操作数是一个左值(一个变量或者是对象属性)，而它的右操作数可以是任意类型的任意值。需要注意的是，<code>=</code>的优先级很低，且它的结合性是从右至左(即如果一个表达式中出现了多个赋值运算符，那么运算的顺序是从右至左的)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">8.26</span>;             <span class="comment">//将变量a的值设置为8.26</span></span><br><span class="line">    a = <span class="string">"Xia"</span>;            <span class="comment">//二次赋值</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> i,j=k=o=<span class="number">408</span>;          <span class="comment">//把j、k、o三个变量初始化为408</span></span><br><span class="line"><span class="built_in">console</span>.log(i, j, k,o);   <span class="comment">//undefined 408 408 408</span></span><br></pre></td></tr></table></figure></p><p><strong>带操作的赋值运算符</strong> 主要有<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>以及<code>%=</code>等，当然还包括<code>&lt;&lt;=</code>等位操作符和赋值操作符的组合(此文不涉及位操作符)。这里列出的这些运算符它们其实是算术运算符和赋值运算符的组合，是一种常用的简写形式，下面给出示例代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a += b);  <span class="comment">//等价于 a = a + b    3 (这是a更新后的值)</span></span><br><span class="line"><span class="built_in">console</span>.log(a -= b);  <span class="comment">//等价于 a = a - b    1</span></span><br><span class="line"><span class="built_in">console</span>.log(a *= b);  <span class="comment">//等价于 a = a * b    2</span></span><br><span class="line"><span class="built_in">console</span>.log(a /= b);  <span class="comment">//等价于 a = a / b    1</span></span><br><span class="line"><span class="built_in">console</span>.log(a %= b);  <span class="comment">//等价于 a = a % b    1</span></span><br></pre></td></tr></table></figure></p><p>现在，我们来看开发中经常使用的<code>自增(++i或i++)</code>和<code>自减(--i或i--)</code>运算符，它们的作用是在当前值的基础上+1或者是-1，而<code>++i</code>和<code>i++</code>对于i这个变量本身而言没区别，它们的区别在于如果有涉及返回值的操作，那么<code>++i</code>的更新会体现在返回值中(换句话说就是先对变量的+1，然后把结果返回)，而<code>i++</code>则不会(先把i返回，然后再执行变量的+1操作)，自减运算符同理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*说明：i++ 等价于 i = i + 1*/</span></span><br><span class="line"><span class="keyword">var</span> i  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> r1 = i++;     <span class="comment">//先把i的值赋值给r1,然后在执行i+1</span></span><br><span class="line"><span class="built_in">console</span>.log(i);   <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(r1);  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> r2 = ++j;     <span class="comment">//先执行j+1,然后把j+1的值赋值给r2</span></span><br><span class="line"><span class="built_in">console</span>.log(j)    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(r2);  <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*思考：var k = 0; console.log(k++ + ++k + k  + k++);*/</span></span><br></pre></td></tr></table></figure></p><p><strong>条件运算符( ? : )</strong> 也被称为三元运算符，因为该运算符需要三个操作数，语法为<code>**条件表达式？表达式1：表达式2**</code>,其运算的规则是<span style="color:#f08">检查条件表达式的值，如果该值为真则返回表达式1，否则返回表达式2</span>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> &lt; <span class="number">2</span> ? <span class="string">"小于"</span> : <span class="string">"大于"</span>;              <span class="comment">//条件表达式1&lt;2的结果为真(true)</span></span><br><span class="line"><span class="built_in">console</span>.log(a);     <span class="comment">//小于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = (<span class="number">1</span> &lt; <span class="number">2</span>) &amp;&amp; (<span class="number">3</span> &gt; <span class="number">5</span>) ? <span class="string">"看书"</span> : <span class="string">"睡觉"</span>;<span class="comment">//条件表达式的结果为真(false)</span></span><br><span class="line"><span class="built_in">console</span>.log(b);    <span class="comment">//睡觉</span></span><br></pre></td></tr></table></figure><p class="tip"><strong>运算符的优先级备注</strong> 我们在编写JavaScript表达式的时候，需要注意运算符是有优先级的，譬如<code>var a = x + y * b;</code>这行代码，因为 乘法运算符比 加法运算符的优先级，其次是等号赋值运算符，因此其执行顺序是先计算 <code>y * b</code>，然后再 <code>+ x</code>的值，最终才把结果赋值给a。在开发中，我们可以通过圆括号来强行指定运算顺序。如果<code>var a = (x + y) * b;</code>这样写代码，那么就先加再乘最后才进行赋值操作。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍javaScript语言中的运算符(&lt;code&gt;operator&lt;/code&gt;)，包括但不限于算术运算符、逻辑运算符、关系运算符以及赋值运算符等内容，而对于位运算符及关键字运算符则仅会做简单说明。&lt;/div&gt;

&lt;div class=&quot;
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [16]-JavaScript语言基础</title>
    <link href="https://weibo.com/u/3800117445/2019/04/09/javaScript%E7%B3%BB%E5%88%97%20%5B16%5D-JavaScript%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>https://weibo.com/u/3800117445/2019/04/09/javaScript系列 [16]-JavaScript语言基础/</id>
    <published>2019-04-09T00:22:16.000Z</published>
    <updated>2019-04-11T01:04:53.721Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍javaScript最基础的知识点，包括但不限于JavaScript的简单介绍、历史、引入方式、变量、标识符命名规范、数据类型以及操作符等内容。</div><div class="titleX"><strong>JavaScript简介</strong></div><p><strong><code>概述</code></strong> JavaScript是一门动态、<code>弱类型</code>的解释型高级编程语言，它基于<code>原型</code>，<code>支持面向对象</code>和函数式编程等多种编程范式，通常简称为js。在世界上的绝大多数网站中都能看到JavaScript的身影，世界上所有的主流浏览器(<a href="https://zh.wikipedia.org/wiki/Google_Chrome" target="_blank" rel="noopener">Chrome</a>、<a href="https://zh.wikipedia.org/wiki/Internet_Explorer" target="_blank" rel="noopener">IE</a>、<a href="https://zh.wikipedia.org/wiki/Firefox" target="_blank" rel="noopener">Firefox</a>、<a href="https://zh.wikipedia.org/wiki/Safari" target="_blank" rel="noopener">Safari</a>、<a href="https://zh.wikipedia.org/wiki/Opera%E7%80%8F%E8%A6%BD%E5%99%A8" target="_blank" rel="noopener">Opera</a>)都支持它。</p><p><strong><code>作者</code></strong> <a href="https://brendaneich.com/" target="_blank" rel="noopener">Brendan Eich</a></p><p><strong><code>背景</code></strong> JavaScript诞生于1995年，其诞生的初衷是为了减轻服务器端的压力而在客户端提供一种表单验证的功能。最初命名为Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名为<code>LiveScript</code>，同年12月，Netscape Navigator 2.0 Beta 3中部署时被重命名为JavaScript，当时网景公司与昇阳电脑公司(<a href="https://zh.wikipedia.org/wiki/%E6%98%87%E9%99%BD%E9%9B%BB%E8%85%A6" target="_blank" rel="noopener">Sun</a>)组成的开发联盟为了让这门语言搭上Java这个编程语言“热词”，将其临时改名为JavaScript(其实就像现在某些网红蹭热度一样)。</p><p><strong><code>标准</code></strong> 1996年11月，网景正式向<code>ECMA（欧洲计算机制造商协会）</code>提交语言标准。1997年6月，ECMA以JavaScript语言为基础制定了<a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">ECMAScript</a>标准规范<a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="noopener">ECMA-262</a>。JavaScript成为了ECMAScript最著名的实现之一。实现ECMAScript规范的语言还有Adobe的<a href="https://zh.wikipedia.org/wiki/ActionScript" target="_blank" rel="noopener">ActionScript</a>和微软的<a href="https://zh.wikipedia.org/wiki/JScript" target="_blank" rel="noopener">JScript</a>。</p><p><strong><code>范围</code></strong> 虽然在大多数情况下，我们都认为ECMAScript和JavaScript表达的是相同的含义，但实际上JavaScript所表达的却比ECMAScript要广泛的多。完整的JavaScript应该由以下三部分组成：</p><blockquote><p>❐ <span class="liYY">ECMAScript</span> 由ECMA-262定义，提供核心语法功能。<br>❐ <span class="liYY">DOM</span>    全称<code>Document Object Model</code>文档对象模型，提供访问和操作网页的API。<br>❐ <span class="liYY">BOM</span>    全称<code>Browser Object Model</code>浏览器对象模型，提供与浏览器交互的方法和接口。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base07.png?raw=true"></p><p><strong><code>历史</code></strong> ECMAScript迄今已经历多个版本的迭代，下面给出主要的版本历史。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base09.png?raw=true"><br><strong><code>关系</code></strong> ECMAScript是标准(规范)，JavaScript是实现。H5是一种新的技术，JS用于实现H5新标签深层的扩展功能。HTML表示网页的核心内容和结构，CSS用于设置网页的样式，JavaScript控制网页的行为。</p><p><strong><code>应用</code></strong> JavaScript主要用于浏览器Web、物联网、游戏、桌面和移动应用开发和以及服务器端的开发。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base08.png?raw=true" height="200px"></p><p><strong><code>参考</code></strong> <a href="http://ecma-international.org/" target="_blank" rel="noopener">ECMA官网</a> <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf" target="_blank" rel="noopener">ECMA-262规范PDF文件</a> <a href="https://brendaneich.com/" target="_blank" rel="noopener">布兰登·艾克博客</a> </p><div class="titleX"><strong>JavaScript初体验</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">在html页面中使用JavaScript</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base01.png?raw=true" height="280px"></p><p>在html页面中编写JavaScript代码需要借助script标签，具体的使用方式有两种。<strong><code>① 在页面中嵌入JavaScript代码</code></strong>。在html页面中创建script标签，设置script标签的type属性为text/javascript，并在标签中直接编写JavaScript代码即可。<strong><code>② 在页面中引入外部的js文件</code></strong>。在html页面中创建script标签，把javaScript代码单独保存在.js后缀的文件中，然后通过设置script标签的src属性来引入js文件。</p><p><a href="">script 标签</a>的 type 属性可以省略，默认值即为<code>text/javascript</code>。<br><a href="">script 标签</a>的 属性(节点)主要有：<code>type</code>(类型)、<code>src</code>(资源地址)、<code>async</code>(异步加载)、<code>defer</code>(延迟执行)、<code>charset</code>(字符集)等。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">注释</span> JavaScript遵循C语言的注释风格，支持单行和多行注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单行注释 // </span><br><span class="line">多行注释 /*...*/</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">语句</span></p><p><strong><code>概念</code></strong> 在JavaScript中，可以简单认为一行完整的代码就是一条语句(<code>statement</code>)。<br><strong><code>分类</code></strong> 整体来讲，JavaScript的语句大致可以区分为<code>声明赋值语句</code>和<code>控制语句</code>两种。<br><strong><code>分号</code></strong> JavaScript中使用<code>分号(;)</code>来间隔多条语句，若各语句独占一行那么大部分情况下可省略分号。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">控制输出</span></p><p>JavaScript需要具体的JavaScript引擎(解析器)来解析，该引擎通常由浏览器提供，即JavaScript代码需要运行在浏览器中。JavaScript代码中常见的控制输出方式有以下三种：</p><blockquote><p>❐ <span class="liYY">输出到页面</span>    <code>document.write()</code><br>❐ <span class="liYY">弹出框显示</span>    <code>alert()</code><br>❐ <span class="liYY">控制台输出</span>    <code>console.log()</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 弹出对话框提示*/</span></span><br><span class="line">alert(<span class="string">"喜欢我就点我吧！"</span>);</span><br><span class="line">alert(<span class="string">"小姐姐你好，我是阿狸~"</span>);</span><br><span class="line">alert(<span class="string">"拜拜 &gt;.&lt; "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 直接向在网页中输出内容*/</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"蝉鸣的夏季，刚好遇见你。"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;遇见&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 控制台打印输出*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"文顶顶"</span>);</span><br></pre></td></tr></table></figure><div class="titleX"><strong>变量</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">直接量</span></p><p><strong><code>说明</code></strong> 直接量(<code>literal</code>)指的是程序中直接使用的数据值。</p><p>当一个值(数字、字符串等)直接出现在JavaScript程序中时，我们称之为<code>直接量</code>。</p><p>JavaScript语言中直接量(字面量)有很多，包括数字直接量、字符串直接量、数组直接量、对象直接量以及正则表达式直接量等等，下面简单给出一些直接量的示例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">null;            //空</span><br><span class="line">18;              //数字</span><br><span class="line">19.3;            //小数</span><br><span class="line">"wendingding";   //字符串文本</span><br><span class="line">true;            //布尔值</span><br><span class="line">false;           //布尔值</span><br><span class="line">/abc/gi;         //正则表达式直接量</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">变量基础</span></p><p><strong><code>定义</code></strong> 变量是编程语言中能够存储计算结果或表示值的抽象概念。<br><strong><code>使用</code></strong> 在JavaScript语言中 <span style="color:red">变量需要先声明再使用</span>。<br><strong><code>声明</code></strong> 使用 <code>var</code> 关键字来声明变量，如果省略var关键字那么该变量默认成为全局变量。<br><strong><code>作用</code></strong> 记录特定的内容，并通过变量名来访问它们。<br><strong><code>备注</code></strong> JavaScript变量是无类型的(<code>untype</code>)，任何变量都可以被赋予任何类型的值。<br><strong><code>原理</code></strong> 当使用var关键字声明变量时，计算机会从内存中分配储存空间来存放不同类型的内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*01 先声明两个变量，然后再输出变量的值到控制台*/</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"wendingding"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);                 <span class="comment">//变量的值可以被修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 可以一次性声明多个变量*/</span></span><br><span class="line"><span class="keyword">var</span> address = <span class="string">"北京市"</span>,className = <span class="string">"H5"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(address,className);   <span class="comment">//北京市 H5</span></span><br></pre></td></tr></table></figure></p><p><strong><code>语法说明</code></strong> <code>var name_1 [ = value1][,...,name_n [ = value_n]]]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*声明示例*/</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'&lt;strong&gt;&lt;/strong&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> p,q;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>,y = <span class="number">3</span>,z;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*示例说明</span></span><br><span class="line"><span class="comment">* JavaScript中的=和数学中的=不一样，在JavaScript中=是赋值运算符。</span></span><br><span class="line"><span class="comment">* var a = '&lt;strong&gt;&lt;/strong&gt;';  这句话分成两个部分。</span></span><br><span class="line"><span class="comment">* 左值 ：在等号左侧，是变量名（同时被赋值）</span></span><br><span class="line"><span class="comment">* 右值 ：在等号右侧，是存放进变量中的东西（给变量赋值）</span></span><br><span class="line"><span class="comment">* 备注 ：使用var关键字多次声明同一个变量是无所谓的(正确、无意义也不报错)。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">命名规范</span></p><p><strong>标识符</strong> 标识符(<code>identifier</code>)指的是JavaScript代码中变量、函数、属性的名字，或者函数的参数。标识符(变量)在命名的时候并不能随心所欲，也有对应的规则和要求。下面列出具体的命名规范：</p><blockquote><p>① 标识符可以使用下划线、字母、数字和$符号。<br>② 标识符不能以数字开头。<br>③ 标识符区分大小写(区别于HTML)。<br>④ 标识符不能使用JavaScript的关键字和保留字。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 常见(合法)的标识符命名方式*/</span></span><br><span class="line"><span class="comment">/*纯字母*/</span></span><br><span class="line"><span class="keyword">var</span> age  = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"wendingding"</span>;</span><br><span class="line"><span class="keyword">var</span> stuAge  = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> stuName = <span class="string">"宁夏"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字母、数字、下划线、$的组合*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1.5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> num$ = num1 + num2;</span><br><span class="line"><span class="keyword">var</span> stu_Score = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 错误的命名演示*/</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">if</span> = <span class="number">123</span>;               <span class="comment">//错误：使用关键字</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">super</span> =  <span class="string">"哈哈哈"</span>        <span class="comment">//错误：使用保留字</span></span><br><span class="line"><span class="keyword">var</span> <span class="number">2</span>age = <span class="number">123</span>;             <span class="comment">//错误：数字开头</span></span><br><span class="line"><span class="keyword">var</span> stu-address = <span class="string">"北京市"</span>;  <span class="comment">//错误：使用了非法的-</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">命名风格</span></p><p>JavaScript语言常用的标识符命名风格是<code>驼峰标识法(camel-case)</code>，即标识符的名称由多个单词组合的时候，每个单词的首字母大写以区分。驼峰标识又可以分成大驼峰标识和小驼峰标识，它们的区别在于整个标识符的首字母需要大写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小驼峰标识 var wenDingDing  = &quot;神秘人&quot;;</span><br><span class="line">大驼峰标识 var WenDingDing  = &quot;神秘人&quot;;</span><br></pre></td></tr></table></figure><p>当然，在写代码的时候给标识符命名并非一定要使用驼峰标识，这只是一种建议的风格，譬如有的开发者就喜欢用下划线来连接单词，类似于<a href="">wen_ding_ding</a>、<a href="">stu_Name</a>这样。类似的还有匈牙利命名法等，但在JavaScript编程中不建议使用。</p><p><strong><code>JavaScript规定的关键字</code></strong> 关键字通常用于执行特定的操作。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base05.png?raw=true" width="600px"></p><p><strong><code>JavaScript规定的保留字</code></strong> 保留字是给语言未来发展而预留的。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base06.png?raw=true" width="600px"></p><div class="titleX"><strong>数据类型</strong></div><blockquote><p>在编程语言中，能够表示并操作的值的类型被称为数据类型(<code>type</code>)，能够支持多种数据类型是每一门编程语言的基本特征。在编写程序的时候，如果我们需要将某个(些)值保存起来以备将来使用时，就会将该 <strong>值</strong> <code>赋值</code>给一个<code>变量</code>(将值保存到变量中)。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base02.png?raw=true"></p><p>JavaScript语言的数据类型可以简单的分成<code>基本(简单)类型</code>和<code>复杂(复合)类型</code>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base03.png?raw=true" height="200px"></p><p>基本类型主要包括：<code>字符串(string)</code>、<code>数值(number)</code>、<code>布尔值(boolean)</code>、<code>Null</code>和<code>undefined</code>五种。其中Null类型有一个值，即<a href="">null</a>表示为空，而undefined类型也只有一个对应值<a href="">undefined</a>，表示变量未定义(即声明变量后未给变量赋值)。</p><p>复杂类型主要是对象类型，包括Object对象、Function函数、RegExp正则等，这里不做具体的展开。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">typeof关键字</span></p><p>如果我们需要判断变量的类型，那么可以使用<span style="color:red"> typeof 关键字(操作符)</span>。</p><p><strong><code>语法</code></strong> <code>typeof 变量  |  typeof(变量)</code><br><strong><code>结果</code></strong> typeof 关键字执行后的结果总是为一个string类型的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*多种类型的变量*/</span></span><br><span class="line"><span class="keyword">var</span> age   = <span class="number">18</span>;                     <span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">var</span> name  = <span class="string">"宁夏"</span>;                  <span class="comment">//字符串类型</span></span><br><span class="line"><span class="keyword">var</span> isFun = <span class="literal">true</span>;                   <span class="comment">//布尔类型值</span></span><br><span class="line"><span class="keyword">var</span> a;                              <span class="comment">//未定义</span></span><br><span class="line"><span class="keyword">var</span> obj   = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">desc</span>:<span class="string">"描述信息"</span>&#125;;   <span class="comment">//Object类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我是fn函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);            <span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> name);           <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> isFun);          <span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);              <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);            <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*typeof的两种使用方式*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);             <span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(fn));            <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);            <span class="comment">//object</span></span><br></pre></td></tr></table></figure></p><p><strong><code>注意</code></strong> 对null执行typeof计算的结果为object,其实这被认为是JavaScript这门语言的一个设计错误。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">字符串类型</span></p><p><strong><code>定义</code></strong> 由〇个或多个16位Unicode字符组成的字符序列。<br><strong><code>表示</code></strong> 字符串可以由双引号或单引号表示。<br><strong><code>操作</code></strong> 可以通过length属性来获取字符串的长度，且多个字符串之间可以通过 + 来进行拼接。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hi ~"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Wendingding!"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = str1 + <span class="string">" "</span> +str2;    <span class="comment">/*字符串的拼接 */</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);              <span class="comment">/*输出结果：Hi ~ Wendingding!*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.length);       <span class="comment">/*输出结果：17 */</span></span><br></pre></td></tr></table></figure></p><p><strong><code>注意</code></strong> JavaScript中的字符串是不可变的，这也就意味着要改变某个变量保存的字符串，那么需要先销毁原来的字符串然后再用另外一个包含新值的字符串来填充该变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">'Hi ! '</span>;</span><br><span class="line">test = test + <span class="string">'Nice to meet u ~'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test);  <span class="comment">//Hi ! Nice to meet u ~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*描述上述代码的内部执行细节</span></span><br><span class="line"><span class="comment">* 说明：上述示例代码中 test变量的值最开始时为Hi ！，而后变成了Hi ! Nice to meet u ~   </span></span><br><span class="line"><span class="comment">*      但这并不意味着字符串是可变的，要想理解这一点需要把变量和字符串区分开来。</span></span><br><span class="line"><span class="comment">* 上述第二行代码的实现过程为(整个过程在浏览器后台处理)：</span></span><br><span class="line"><span class="comment">* [1] 先创建一个能容纳21位字符的新字符串。</span></span><br><span class="line"><span class="comment">* [2] 在新创建的字符串中填充Hi ! 和 Nice to meet u ~内容。</span></span><br><span class="line"><span class="comment">* [3] 销毁原先的Hi ! 和 Nice to meet u ~ 字符串，因为它们没用了。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">布尔类型</span></p><p><strong><code>说明</code></strong> 布尔类型用来表示正确和错误两种状态(同灯泡有开和关两种状态一样)。<br><strong><code>取值</code></strong> 布尔类型(boolean)只有两个值，分别是true和false。<br><strong><code>注意</code></strong> 布尔类型常用于条件表达式，布尔类型的值和字符串以及数值等可以相互转换。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">undefined类型</span> </p><p>undefined类型的值也只有一个，那就是<code>undefined</code>。我们在使用var来声明变量，但是没有对该变量进行初始化的时候，变量的值就为undefined，表示未定义。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">Null类型</span>  </p><p>Null类型的值只有一个，那就是<code>null(关键字)</code>，通常表示空对象指针。<br>注意 ① <span style="color:red">typeof null 的结果为 object 而非 null</span>。<br>注意 ② 实际上，undefined的值派生自null，因此ECMA-262规定它们的相等性测试需要返回true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 布尔类型值*/</span></span><br><span class="line"><span class="keyword">var</span> boolA = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> boolB = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 声明变量但未赋值(未定义)*/</span></span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 设置变量的值为null*/</span></span><br><span class="line"><span class="keyword">var</span> boolA = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(boolA);               <span class="comment">//null 表示空对象</span></span><br><span class="line"><span class="built_in">console</span>.log(test);                <span class="comment">//undefined 未定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04 测试undefined和null*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数值类型</span></p><p><strong><code>定义</code></strong> 数值简单说就是数字，在JavaScript语言中数值类型包含整数和浮点数(小数)。<br><strong><code>小数</code></strong> 浮点数就是小数，数值中必须包含一个小数点，小数点后面必须至少有一位数字。<br><strong><code>备注</code></strong> 实际上JavaScript内部并不直接区分整数值和浮点数值，其所有数字均用浮点数值表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 数值的两种类型*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span>;       <span class="comment">/*整型-数据1*/</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">4.0075e7</span>;  <span class="comment">/*整型-数据2  科学计数发*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*浮点数特点：数值中必须包含一个小数点，小数点后面必须至少有一位数字。*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum1 = <span class="number">8.26</span>;  <span class="comment">/*浮点型-数据1*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum2 = <span class="number">1.1</span>;   <span class="comment">/*浮点型-数据2*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum3 = <span class="number">0.5</span>;   <span class="comment">/*浮点型-数据3*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum4 = <span class="number">.8</span>;    <span class="comment">/*浮点型-数据4-不建议*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum5 = <span class="number">3.2e-4</span>;<span class="comment">/*浮点型-数据4 科学计数法*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 整数和浮点数的默认转换*/</span></span><br><span class="line"><span class="keyword">var</span> intNum1 = <span class="number">10.0</span>;  <span class="comment">/*整数，解析为10*/</span></span><br><span class="line"><span class="keyword">var</span> intNum2 = <span class="number">2.</span>;    <span class="comment">/*整数，解析为2*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 03  浮点数注意点</span></span><br><span class="line"><span class="comment"> * 001 默认，当小数点后面超过6个0，则以科学计数法的方式来表示。</span></span><br><span class="line"><span class="comment"> * 002 浮点数值的最高精度为17位小数，但算术运算时其精度不如整数。</span></span><br><span class="line"><span class="comment"> * 003 JavaScript使用基于IEEE754数值的浮点格式表示，计算因此存在舍入误差问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong><code>进制</code></strong> JavaScript中的数值类型支持多种进制，包括二进制、八进制、十进制和十六进制等。<br><strong><code>说明</code></strong> 在进行算术运算时，所有<a href="">八进制、十六进制的数据最终都会转换为十进制的数据</a>。<br><strong><code>特点</code></strong> 八进制的特点是数字以 <code>0</code> 开头，十六进制则以 <code>0x</code> 或 <code>0X</code> 开头。<br><strong><code>补充</code></strong> 实际上ECMAScript并不支持八进制直接量，且严格模式下八进制直接量被禁止，因此不建议用。十六进制值是<a href=""> 0 ~ 9之间的数字和a(A) ~ f(F)之间的字母 </a>构成，字母对应的数字为10~15。此外，我们还可以通过调用<code>toString</code>方法传递参数的方式来实现进制的转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*进制的转换  通过toString方法*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">17</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);              <span class="comment">//默认以十进制的方式打印(数字)  17</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString());   <span class="comment">//默认以十进制的方式打印(字符串)</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">2</span>));  <span class="comment">//设置以二进制的方式打印(字符串) 10001</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">8</span>));  <span class="comment">//设置以八进制的方式打印(字符串) 21</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">16</span>)); <span class="comment">//设置是十六进制的方式打印(字符串)11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二进制、八进制、16进制的数据*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">070</span>);   <span class="comment">//8进制的数据   对应的十进制值为56</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0x11</span>);  <span class="comment">//16进制的数据  对应的十进制数值为17</span></span><br></pre></td></tr></table></figure><p><strong><code>NaN</code></strong> 全称<code>Not a Number</code>(非数值)，NaN用于表示本来要返回数值的操作数而实际未返回的情况。</p><blockquote><p>① 任何涉及NaN的操作都会返回NaN。<br>② <span style="color:red">NaN与任何值都不相等，包括NaN自身</span>。</p></blockquote><p><strong>说明</strong> 上面列出了NaN的两个特点，针对NaN的这两个特点，ECMAScript提供了<a href="">isNaN() 函数</a>。isNaN()函数接收一个参数，该参数可以是任何类型的，该函数在执行的时候会尝试把参数转换为数值，如果参数不能被转换为数值(转换失败)，那么返回true，否则返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"20.3"</span>));   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"5red"</span>));   <span class="comment">//true   无法转换为数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>));     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"red"</span>));    <span class="comment">//true   无法转换为数值</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>二进制浮点数的误差问题</strong> JavaScript在使用数字(实数)的时候，常常只是真实值的一个近似表示。原因就在于JavaScript采用的是<a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE-754浮点数表示法</a>(这是一种二进制浮点数表示法),这种表示法可以精确地表示分数，比如1/2、1/8和1/1024等，而我们开发中常用的反而都是十进制分数，比如1/10、1/100等，神奇的地方就在于这种表示法无法精确的表示类似于0.1 、0.2和0.3这种简单的数字。正是因为上面的原因，所以JavaScript语言中才会存在奇葩的 <a href="http://0.30000000000000004.com/" target="_blank" rel="noopener">0.1 + 0.2 == 0.3</a> 不成立的问题。</p></blockquote><div class="titleX"><strong>类型的转换</strong></div><p>在JavaScript的基本数据类型中，字符串、数值以及其他类型之间是可以相互转换的，而这种转换大概又可以细分成两种，其一是在进行算术运算时默认会执行的<strong><code>自动转换</code></strong>，其二就是<strong><code>强制转换</code></strong>了。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base04.png?raw=true" height="220px"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">类型间的强制转换</span>  </p><p>强制类型转换需要用到一些特定的函数，这些函数可以是<code>Number()</code>、<code>Bumber()</code>、<code>String()</code>也可以是<code>parseInt()</code>、<code>parseFloat()</code>、<code>toString()</code>等，下面将通过代码来演示它们的具体使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 Number(构造)函数把其它类型转换为数值*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>));         <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>));   <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"miaoXia"</span>));   <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"18blue"</span>));    <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"18"</span>));        <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>));        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>));       <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-1 String函数用于把其它类型转换为字符串*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">null</span>));       <span class="comment">//"null"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">undefined</span>));  <span class="comment">//"undefined"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">123</span>));        <span class="comment">//"123"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">21.5</span>));       <span class="comment">//"21.5"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">-0</span>));         <span class="comment">//"0"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">true</span>));       <span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">false</span>));      <span class="comment">//"false"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-2 toString函数</span></span><br><span class="line"><span class="comment">* a、其实其它类型的值直接调用toString方法也能强转为字符串</span></span><br><span class="line"><span class="comment">* b、toString方法可以接收一个参数，该参数用于表示转换时的进制数</span></span><br><span class="line"><span class="comment">* c、如果toString方法的参数缺省，那么默认采用的十进制</span></span><br><span class="line"><span class="comment">* d、null和undefined值无法调用toString方法</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">123</span>).toString());  <span class="comment">//"123"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>.toString());   <span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>.toString());  <span class="comment">//"false"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>.toString());    <span class="comment">//"NaN"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 Boolean函数用于将其它类型转换为字符串*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"Nice"</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">" "</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">123</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));        <span class="comment">//fasle</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>));      <span class="comment">//fasle</span></span><br></pre></td></tr></table></figure><p>在上面的代码示例中Number函数用于将其他类型的数据转换成数字，而<code>parseInt()</code>和<code>parseFloat()</code>函数相对于Number()函数而言更加灵活。</p><p><code>parseInt()</code>函数用于解析整数，如果字符串前缀是0x或0X，则将会被解析为十六进制数。解析规则为：<a href="">跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略数字后面的内容，如果第一个非空格字符是非法的数字直接量，将最终返回NaN</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*parseInt()基本使用*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">" 123"</span>));        <span class="comment">//123 忽略前面的N个空格</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123"</span>));         <span class="comment">//123</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123.59"</span>));      <span class="comment">//123 仅解析为整数</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"-13.14"</span>));      <span class="comment">//-13</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"826 Birthday"</span>));<span class="comment">//826</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"Birthday826"</span>))  <span class="comment">//NaN</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"0.1"</span>))          <span class="comment">//0</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">".1"</span>))           <span class="comment">//NaN 整数不能以.开头</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"0xff"</span>))         <span class="comment">//255 以十六进制来解析</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"071"</span>));         <span class="comment">//71  十进制处理(非八进制)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>parseInt()</code> 被定义为<code>declare function parseInt(s: string, radix?: number): number;</code> 该函数的第一个参数为字符串，它还可以接收第二个参数用于指定数字转换的进制基数，合法的取值范围是2~36。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"111"</span>,<span class="number">2</span>));       <span class="comment">// 7  = 1 * 2 * 2 + 1 * 2 + 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"aa"</span>,<span class="number">16</span>));       <span class="comment">//170 = 10 * 16 + 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"076"</span>,<span class="number">8</span>));       <span class="comment">//62  = 7 * 8 + 6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"077"</span>,<span class="number">10</span>));      <span class="comment">//77</span></span><br></pre></td></tr></table></figure><p><code>parseFloat()</code>函数用于解析浮点数。解析规则为：<a href="">跳过任意数量的前导空格，检索纯数字字符串后面第一个.后的不为数字的字符，并对之前所有的结果进行返回，如果第一个非空格字符是非法的数字直接量，将最终返回NaN，如果没有.则以整数解析的方式处理</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*parseFloat()基本使用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 123"</span>));            <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 123.55"</span>));         <span class="comment">//123.55</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 8.26 Birthday"</span>));  <span class="comment">//8.26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" Birthday 8.26"</span>));  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0.1"</span>));             <span class="comment">//0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">".1"</span>));              <span class="comment">//0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0xff"</span>));            <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"abc 12.5"</span>));        <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"$12.5"</span>));           <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base10.png?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍javaScript最基础的知识点，包括但不限于JavaScript的简单介绍、历史、引入方式、变量、标识符命名规范、数据类型以及操作符等内容。&lt;/div&gt;

&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;JavaScript
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据安全系列 OpenSSL</title>
    <link href="https://weibo.com/u/3800117445/2019/02/23/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20OpenSSL/"/>
    <id>https://weibo.com/u/3800117445/2019/02/23/数据安全系列 OpenSSL/</id>
    <published>2019-02-22T17:00:00.000Z</published>
    <updated>2019-02-24T10:28:22.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文对密码学中常用的底层库OpenSSL进行简单说明，包括基本介绍、简单使用等内容。</p></blockquote><div class="titleX"><strong>简单介绍</strong></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>是密码学中一个流行的底层密码库，也是SSL和TLS最常见的开源实现。</p><div class="tip"><br><div><strong><code>SSL</code></strong>全称为<code>Secure  Sockets   Layer</code>，<strong>安全套接层协议</strong>( 对网络连接进行加密处理 )。</div><br><div><strong><code>TLS</code></strong>全称为<code>Transport Layer Security</code>，<strong>安全传输层协议</strong>( 由记录协议和握手协议组成 )。</div><br></div><p>SSL协议由<code>Netscape</code>(网景)公司开发，因为应用广泛，到了1999年SSL已经成为互联网上的事实标准。同年，<code>IETF把SSL标准化后改名为TLS，它建立在SSL 3.0协议规范上，是SSL的后续版本</code>。 TLS 和 SSL，两者差别极小，可以简单看做是同一个东西的两个不同阶段。</p><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>是由一些志愿者合作开发的开源工具库，其目标是开发一个强壮的、具有完备功能的商业级工具集，以实现SSL 和 TLS协议以及一个全功能的通用加密库。OpenSSL主要以C语言实现，目前最新稳定版本为2018年9月11日发布的<code>1.1.1版本</code>。</p><p><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> OpenSSL </strong>的主要组成</span></p><div><br>❏  <div class="liYY"><strong>openssl</strong></div>  多用途的命令行工具。<br>❏  <div class="liYY"><strong>libcrypto</strong></div> 常用加密算法库。<br>❏  <div class="liYY"><strong>libssl</strong></div>   实现了SSL及TLS的加密模块应用库。<br></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>支持许多不同的加密算法：其中包括但不限于<strong>单向散列函数</strong>的 <a href="https://zh.wikipedia.org/wiki/MD5" target="_blank" rel="noopener">MD5</a>、<a href="https://zh.wikipedia.org/wiki/MD4" target="_blank" rel="noopener">MD4</a>、MD2、<a href="https://zh.wikipedia.org/wiki/SHA-1" target="_blank" rel="noopener">SHA-1</a>、<a href="https://zh.wikipedia.org/wiki/SHA-2" target="_blank" rel="noopener">SHA-2</a>、<a href="https://zh.wikipedia.org/wiki/SHA-3" target="_blank" rel="noopener">SHA-3</a>、RIPEMD-160、MDC-2、GOST R 34.11-94、BLAKE2、Whirlpool、SM3等算法，<strong>对称加密</strong>有 <a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener">AES</a>、Blowfish、Camellia、Chacha20、Poly1305、SEED、CAST-128、<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener">DES</a>、IDEA、RC2、RC4、<a href="https://zh.wikipedia.org/wiki/RC5" target="_blank" rel="noopener">RC5</a>、SM4、TDES、GOST 28147-89等算法，以及<strong>非对称加密</strong>的 <a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">RSA</a>、DSA、迪菲-赫尔曼密钥交换、椭圆曲线、SM2、X25519、Ed25519、X448、Ed448、GOST R 34.10-2001等算法。</p><p><strong>参考资料</strong> </p><p><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL官网</a><br><a href="https://zh.wikipedia.org/wiki/OpenSSL" target="_blank" rel="noopener">OpenSSL 维基百科</a><br><a href="https://github.com/openssl" target="_blank" rel="noopener">OpenSSL GitHub组织</a><br><a href="https://www.cnblogs.com/eshizhan/p/4988105.html" target="_blank" rel="noopener">OpenSSL Command-Line HOWTO</a><br><a href="https://oomake.com/download/openssl" target="_blank" rel="noopener">OpenSSL 版本下载地址①</a> &nbsp;<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">OpenSSL 版本下载地址②</a></p><div class="titleX"><strong>opsnssl 命令行简单说明</strong></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> 的安装</strong></p><p>通常，很多操作系统都会默认安装OpenSSL 工具，我们可以通过在终端中输入<code>openssl version</code>命令来查看和进行验证。</p><p class="tip">早些年，Mac OSX默认自带安装 OpenSSL库，但是因为OpenSSL“心脏病失血”事件，Mac OSX 自 10.11 El Capitan 起，原本默认安装的 OpenSSL 被替换为 LibreSSL 。除Mac外，其它使用LibreSSL 取代 OpenSSL的系统还有 <strong>OpenBSD</strong> (<code>5.6 +</code>)和 <strong>Alpine Linux</strong> (<code>3.5.0 +</code>) 等。<br></p><p>我当前使用的是Mac OSX 系统10.13.3 版本，在终端中输入<code>openssl version</code>命令 可以看到本地显示的是<strong> LibreSSL </strong>的版本，为<code>LibreSSL 2.2.7</code>。<strong>LibreSSL</strong> 是 OpenBSD 开发者在 OpenSSL 爆出心脏出血漏洞之后 fork 的一个分支，旨在提供一个比 OpenSSL 更安全的替代品，更详细的信息可以参考<a href="https://hltj.me/security/2017/05/26/libressl-instead-openssl.html" target="_blank" rel="noopener">扔掉 OpenSSL，拥抱 LibreSSL</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl version</span><br><span class="line">LibreSSL 2.2.7</span><br><span class="line">wendingding$ which openssl</span><br><span class="line">/usr/bin/openssl</span><br></pre></td></tr></table></figure><p><strong>说明</strong> 上面的命令用于检查和验证当前系统中使用的openssl的版本和路径(位置)。<strong>LibreSSL</strong>可以理解为更安全的<strong>OpenSSL</strong>，使用方式几乎一致，接下来我就以电脑中已经安装的<code>LibreSSL 2.2.7</code>版本为例进行说明。在终端查看(输入任意无效命令)该工具支持的所有命令，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">wendingding:openssl wendingding$ openssl help</span><br><span class="line">openssl:Error: &apos;help&apos; is an invalid command.</span><br><span class="line"></span><br><span class="line">Standard commands</span><br><span class="line">asn1parse         ca                certhash          ciphers           </span><br><span class="line">crl               crl2pkcs7         dgst              dh                </span><br><span class="line">dhparam           dsa               dsaparam          ec                </span><br><span class="line">ecparam           enc               engine            errstr            </span><br><span class="line">gendh             gendsa            genpkey           genrsa            </span><br><span class="line">nseq              ocsp              passwd            pkcs12            </span><br><span class="line">pkcs7             pkcs8             pkey              pkeyparam         </span><br><span class="line">pkeyutl           prime             rand              req               </span><br><span class="line">rsa               rsautl            s_client          s_server          </span><br><span class="line">s_time            sess_id           smime             speed             </span><br><span class="line">spkac             ts                verify            version           </span><br><span class="line">x509              </span><br><span class="line"></span><br><span class="line">Message Digest commands (see the `dgst&apos; command for more details)</span><br><span class="line">gost-mac          md4               md5               md_gost94         </span><br><span class="line">ripemd160         sha               sha1              sha224            </span><br><span class="line">sha256            sha384            sha512            streebog256       </span><br><span class="line">streebog512       whirlpool         </span><br><span class="line"></span><br><span class="line">Cipher commands (see the `enc&apos; command for more details)</span><br><span class="line">aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb       </span><br><span class="line">aes-256-cbc       aes-256-ecb       base64            bf                </span><br><span class="line">bf-cbc            bf-cfb            bf-ecb            bf-ofb            </span><br><span class="line">camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  camellia-192-ecb  </span><br><span class="line">camellia-256-cbc  camellia-256-ecb  cast              cast-cbc          </span><br><span class="line">cast5-cbc         cast5-cfb         cast5-ecb         cast5-ofb         </span><br><span class="line">chacha            des               des-cbc           des-cfb           </span><br><span class="line">des-ecb           des-ede           des-ede-cbc       des-ede-cfb       </span><br><span class="line">des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb      </span><br><span class="line">des-ede3-ofb      des-ofb           des3              desx              </span><br><span class="line">rc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc           </span><br><span class="line">rc2-cfb           rc2-ecb           rc2-ofb           rc4               </span><br><span class="line">rc4-40</span><br></pre></td></tr></table></figure><p>通过上面列出的庞大的可选命令项，不难看出OpenSSL工具的强大和庞大，如果需要获取指定算法的帮助信息，只需要在终端输入<code>openssl 算法名称 --help</code>形式的命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl enc -help</span><br><span class="line">usage: enc -ciphername [-AadePp] [-base64] [-bufsize number] [-debug]</span><br><span class="line">    [-engine id] [-in file] [-iv IV] [-K key] [-k password]</span><br><span class="line">    [-kfile file] [-md digest] [-none] [-nopad] [-nosalt]</span><br><span class="line">    [-out file] [-pass arg] [-S salt] [-salt]</span><br><span class="line"></span><br><span class="line"> -A                 Process base64 data on one line (requires -a)</span><br><span class="line"> -a                 Perform base64 encoding/decoding (alias -base64)</span><br><span class="line"> -bufsize size      Specify the buffer size to use for I/O</span><br><span class="line"> -d                 Decrypt the input data</span><br><span class="line"> -debug             Print debugging information</span><br><span class="line"> -e                 Encrypt the input data (default)</span><br><span class="line"> -engine id         Use the engine specified by the given identifier</span><br><span class="line"> -in file           Input file to read from (default stdin)</span><br><span class="line"> -iv IV             IV to use, specified as a hexidecimal string</span><br><span class="line"> -K key             Key to use, specified as a hexidecimal string</span><br><span class="line"> -md digest         Digest to use to create a key from the passphrase</span><br><span class="line"> -none              Use NULL cipher (no encryption or decryption)</span><br><span class="line"> -nopad             Disable standard block padding</span><br><span class="line"> -out file          Output file to write to (default stdout)</span><br><span class="line"> -P                 Print out the salt, key and IV used, then exit</span><br><span class="line">                      (no encryption or decryption is performed)</span><br><span class="line"> -p                 Print out the salt, key and IV used</span><br><span class="line"> -pass source       Password source</span><br><span class="line"> -S salt            Salt to use, specified as a hexidecimal string</span><br><span class="line"> -salt              Use a salt in the key derivation routines (default)</span><br><span class="line"> -v                 Verbose</span><br><span class="line"></span><br><span class="line">Valid ciphername values:</span><br><span class="line"></span><br><span class="line"> -aes-128-cbc              -aes-128-cfb              -aes-128-cfb1            </span><br><span class="line"> -aes-128-cfb8             -aes-128-ctr              -aes-128-ecb             </span><br><span class="line"> -aes-128-gcm              -aes-128-ofb              -aes-128-xts             </span><br><span class="line"> -aes-192-cbc              -aes-192-cfb              -aes-192-cfb1            </span><br><span class="line"> -aes-192-cfb8             -aes-192-ctr              -aes-192-ecb             </span><br><span class="line"> -aes-192-gcm              -aes-192-ofb              -aes-256-cbc             </span><br><span class="line"> -aes-256-cfb              -aes-256-cfb1             -aes-256-cfb8            </span><br><span class="line"> -aes-256-ctr              -aes-256-ecb              -aes-256-gcm             </span><br><span class="line"> -aes-256-ofb              -aes-256-xts              -aes128                  </span><br><span class="line"> -aes192                   -aes256                   -bf                      </span><br><span class="line"> -bf-cbc                   -bf-cfb                   -bf-ecb                  </span><br><span class="line"> -bf-ofb                   -blowfish                 -camellia-128-cbc        </span><br><span class="line"> -camellia-128-cfb         -camellia-128-cfb1        -camellia-128-cfb8       </span><br><span class="line"> -camellia-128-ecb         -camellia-128-ofb         -camellia-192-cbc        </span><br><span class="line"> -camellia-192-cfb         -camellia-192-cfb1        -camellia-192-cfb8       </span><br><span class="line"> -camellia-192-ecb         -camellia-192-ofb         -camellia-256-cbc        </span><br><span class="line"> -camellia-256-cfb         -camellia-256-cfb1        -camellia-256-cfb8       </span><br><span class="line"> -camellia-256-ecb         -camellia-256-ofb         -camellia128             </span><br><span class="line"> -camellia192              -camellia256              -cast                    </span><br><span class="line"> -cast-cbc                 -cast5-cbc                -cast5-cfb               </span><br><span class="line"> -cast5-ecb                -cast5-ofb                -chacha                  </span><br><span class="line"> -des                      -des-cbc                  -des-cfb                 </span><br><span class="line"> -des-cfb1                 -des-cfb8                 -des-ecb                 </span><br><span class="line"> -des-ede                  -des-ede-cbc              -des-ede-cfb             </span><br><span class="line"> -des-ede-ofb              -des-ede3                 -des-ede3-cbc            </span><br><span class="line"> -des-ede3-cfb             -des-ede3-cfb1            -des-ede3-cfb8           </span><br><span class="line"> -des-ede3-ofb             -des-ofb                  -des3                    </span><br><span class="line"> -desx                     -desx-cbc                 -gost89                  </span><br><span class="line"> -gost89-cnt               -gost89-ecb               -id-aes128-GCM           </span><br><span class="line"> -id-aes192-GCM            -id-aes256-GCM            -rc2                     </span><br><span class="line"> -rc2-40-cbc               -rc2-64-cbc               -rc2-cbc                 </span><br><span class="line"> -rc2-cfb                  -rc2-ecb                  -rc2-ofb                 </span><br><span class="line"> -rc4</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>opsnssl + 单向散列函数应用</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 单向散列函数的特点</strong></span></p><blockquote><p><strong>① 散列计算后的密文是定长的。</strong><br><strong>② 明文相同，密文一定相同。</strong><br><strong>③ 明文不同，密文一定不同。</strong><br><strong>④ 计算过程不可逆，算法公开，效率高性能好。</strong></p></blockquote><p><strong>经典加密算法</strong> MD5加密 、SHA1 和 SHA512等<br><strong>散列函数进阶</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）先加盐，然后再进行MD5</span><br><span class="line">2）先乱序，再进行MD5加密</span><br><span class="line">3）乱序 | 加盐，多次MD5加密等</span><br><span class="line">4）使用消息认证机制，即HMAC-MD5-先对密钥进行加密，加密之后进行两次MD5散列</span><br></pre></td></tr></table></figure></p><p><code>001 对字符串进行简单的MD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; | md5</span><br><span class="line">d661517da45e21c9d180ad50ffcdf18d</span><br></pre></td></tr></table></figure></p><p><code>002 对任意的文件进行MD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ ls -a</span><br><span class="line">..DS_StoreAllNodeVue</span><br><span class="line">..123.pngCanvasOther</span><br><span class="line">wendingding$ md5 123.png </span><br><span class="line">MD5 (123.png) = 2feeda7a43bc96b94fa0fbe64673a593</span><br></pre></td></tr></table></figure></p><p><code>003 使用sha家族算法来对字符串进行加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha1</span><br><span class="line">(stdin)= 13fb6a32c9876c0b4aa05c5e930ff9332f84c62d</span><br><span class="line"></span><br><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha256</span><br><span class="line">(stdin)= a3c02021d3630ec36fd07c4f14236cac691f499bc47428a245e8618319d812df</span><br><span class="line"></span><br><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha512</span><br><span class="line">(stdin)= 9b4c77e0e1a99b99fc46bfa58dab5070d707b84384a8659c69b19442d1d19490cf63b145b645c7</span><br><span class="line">a7fe42ffba9a3bff800911f5957bc6a0a219b708c6c2dc9c2c</span><br></pre></td></tr></table></figure></p><p><code>004 对字符串应用hmacMD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; |openssl dgst -md5 -hmac &quot;123&quot;</span><br><span class="line">(stdin)= 82fce83fe44d72969f69565f3b16d3e9</span><br></pre></td></tr></table></figure></p><p class="tip"><br>消息认证机制（HMAC）原理是：消息的发送者和接收者有一个共享密钥，发送者使用共享密钥对消息加密计算得到MAC值，消息接收者使用共享密钥对消息加密计算得到MAC值，比较两个MAC值是否一致。在具体使用的时候，客户端需要在发送的时候把<code>（消息）+（消息·HMAC）</code>打包发送给服务器，服务器接收到数据后，对拿到的消息用共享的KEY进行HMAC，比较是否一致，如果一致则信任。<br></p><p><div class="titleX"><strong>opsnssl + 对称加密算法</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 对称加密算法的特点</strong></span></p><blockquote><p><strong>① 加密/解密使用相同的密钥。</strong><br><strong>② 加密和解密的过程是可逆的。</strong><br><strong>③ 效率高、性能好，但是存在密钥传输安全问题。</strong></p></blockquote><p><strong>经典加密算法</strong> DES、3DES 和 AES 等</p><p><code>001 AES-ECB加密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ mkdir openssl</span><br><span class="line">wendingding$ cd openssl/</span><br><span class="line">wendingding$ echo &quot;测试的字符串-des加密&quot; &gt;&gt; 123.txt</span><br><span class="line">wendingding$ cat 123.txt </span><br><span class="line">测试的字符串-des加密</span><br><span class="line">wendingding$ ls -a</span><br><span class="line">...123.txt</span><br><span class="line">wendingding$ openssl enc -des-ecb -K 616263 -nosalt -in 123.txt -out 123.bin</span><br><span class="line">wendingding:openssl wendingding$ ls -a</span><br><span class="line">...123.bin123.txt</span><br></pre></td></tr></table></figure></p><p><code>002 AES-ECB解密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl enc -des-ecb -K 616263 -nosalt -in 123.bin -out 123_new.txt -d</span><br><span class="line">wendingding$ cat 123_new.txt </span><br><span class="line">测试的字符串-des加密</span><br></pre></td></tr></table></figure></p><blockquote><p>密码算法可以分为分组密码和流密码两种。 </p></blockquote><p><strong><code>分组密码</code></strong>的特点是在解密和解密时，每次只能处理特定长度的一组数据，一个分组的比特数量就称之为分组长度。DES 和 3DES 的分组长度都是64比特，也就是每次只能加密64比特的明文，并生成64比特的密文。AES 的分组长度有128比特、192比特和256比特可以选择。</p><p><strong><code>流密码</code></strong>的特点是加密和解密时会对数据流进行连续处理。流密码中一般以1比特、8比特或者是32比特等作为单位俩进行加密和解密。</p><p class="tip"> <strong>备注</strong> 分组密码算法在具体实现的时候，又有很多的分组模式可以选择。常见的分组模式有 ECB 和 CBC 等。ECB模式的全称为 <code>Electronic CodeBook</code>模式，CBC模式全称为 <code>Cipher Block Chainning</code>模式，它的特点是分组后先将明文分组与前一个密文分组进行XOR运算，然后再进行加密。关于CBC和ECB的具体细节可以参考<a href="http://wendingding.com/2018/08/02/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E9%87%8A%E4%B9%89/" target="_blank" rel="noopener">数据安全系列 术语</a>这篇文章。</p><p><code>003 AES-CBC加密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;测试aes-cbc&quot; &gt;&gt; a.txt</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txt</span><br><span class="line">..123.txta.txt</span><br><span class="line">$ openssl enc -des-cbc -K 616263 -iv 0102030405060708 -nosalt -in a.txt -out a.bin</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txta.txt</span><br><span class="line">..123.txta.bin</span><br></pre></td></tr></table></figure></p><p><code>004 AES-CBC解密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -des-cbc -K 616263 -iv 0102030405060708 -nosalt -in a.bin -out a_new.txt -d</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txta.txt</span><br><span class="line">..123.txta.bina_new.txt</span><br><span class="line">$ cat a_new.txt </span><br><span class="line">测试aes-cbc</span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 上文命令行中的<code>-iv 0102030405060708</code>是CBC分组模式需要使用到的初始向量值。</p><p><div class="titleX"><strong>opsnssl + 非对称加密算法</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 非对称加密算法的特点</strong></span></p><blockquote><p><strong>① 加密的时候使用公钥，解密的时候使用私钥。</strong><br><strong>② 公钥是公开的，私钥是绝对保密的。</strong><br><strong>③ 效率不高，性能不好，可能会遭遇中间人攻击。</strong></p></blockquote><p><strong>经典加密算法</strong> RSA</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">这里简单介绍RSA算法的原理和小示例</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] RSA 原理</span><br><span class="line">        （<span class="number">1</span>）求N，准备两个质数p和q,N = p x q</span><br><span class="line">        （<span class="number">2</span>）求L,L是p<span class="number">-1</span>和q<span class="number">-1</span>的最小公倍数。L = lcm（p<span class="number">-1</span>,q<span class="number">-1</span>）</span><br><span class="line">        （<span class="number">3</span>）求E，E和L的最大公约数为<span class="number">1</span>（E和L互质）</span><br><span class="line">        （<span class="number">4</span>）求D，E x D mode L = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    [<span class="number">2</span>] RSA加密小实践</span><br><span class="line">        （<span class="number">1</span>）p = <span class="number">17</span>,q = <span class="number">19</span> =&gt;N = <span class="number">323</span></span><br><span class="line">        （<span class="number">2</span>）lcm（p<span class="number">-1</span>,q<span class="number">-1</span>）=&gt;lcm（<span class="number">16</span>，<span class="number">18</span>）=&gt;L= <span class="number">144</span></span><br><span class="line">        （<span class="number">3</span>）gcd（E,L）=<span class="number">1</span> =&gt;E=<span class="number">5</span></span><br><span class="line">        （<span class="number">4</span>）E乘以几可以mode L =<span class="number">1</span>? D=<span class="number">29</span>可以满足</span><br><span class="line">        （<span class="number">5</span>）得到公钥为：E=<span class="number">5</span>,N=<span class="number">323</span></span><br><span class="line">        （<span class="number">6</span>）得到私钥为：D=<span class="number">29</span>,N=<span class="number">323</span></span><br><span class="line">        （<span class="number">7</span>）加密 明文的E次方 mod N = <span class="number">123</span>的<span class="number">5</span>次方  mod <span class="number">323</span> = <span class="number">225</span>（密文）</span><br><span class="line">        （<span class="number">8</span>）解密 密文的D次方 mod N = <span class="number">225</span>的<span class="number">29</span>次方 mod <span class="number">323</span> = <span class="number">123</span>（明文）</span><br></pre></td></tr></table></figure><p><strong>非对称加密命令行介绍</strong></p><p><code>001 生成512位的RSA私钥</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl genrsa -out private.pem 512</span><br><span class="line">Generating RSA private key, 512 bit long modulus</span><br><span class="line">........+++++++++++++++++++++++++++</span><br><span class="line">..+++++++++++++++++++++++++++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure></p><p><code>002  以明文输出私钥内容</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -text -out private.txt</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure></p><p><code>003 校验私钥文件</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -check</span><br><span class="line">RSA key ok</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIBOwIBAAJBAKfq2SR+2arBoS1c+Jc8Pt7N6Jus4IaqvFttbBaBriVm/EFGY5c0</span><br><span class="line">eS4lDVwLWr0ld2bee720855YkFEsa6j9IlECAwEAAQJBAJwiSOogcTDPfpj5m8S0</span><br><span class="line">JhlyCNnH87YER8QTiK+cwVrQV7AVMNaNWMa4hKZh/rsXTD5oPemUsTTjEWNNNjbE</span><br><span class="line">o+kCIQDZypEycPx1knONDQSVbJwhEsFfnC81BPRUglAyLLK1NwIhAMVgWK6q5vI5</span><br><span class="line">ZKR73XhoHMC3OLE3alvx43JnD0TE+yi3AiAU618tACtPw8RznPd+vtL0Xk/StjbW</span><br><span class="line">meY6I9Y+K4ry2wIhAIPI9q15MsZch9RDV/aDHV+XdmTtKTjG4ySJp2o1U7U1AiBG</span><br><span class="line">IM0D897qkeovClo3kw/mFDA9lgfJu1ir0W3OLSmvXg==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><p><code>004 从私钥中提取公钥</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -out public.pem -outform PEM -pubout</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure></p><p><code>005 以明文输出公钥内容</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in public.pem -out public.txt -pubin -pubout -text</span><br><span class="line">writing RSA key</span><br><span class="line"></span><br><span class="line">wendingding$ cat public.txt</span><br><span class="line">Public-Key: (512 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:a7:ea:d9:24:7e:d9:aa:c1:a1:2d:5c:f8:97:3c:</span><br><span class="line">    3e:de:cd:e8:9b:ac:e0:86:aa:bc:5b:6d:6c:16:81:</span><br><span class="line">    ae:25:66:fc:41:46:63:97:34:79:2e:25:0d:5c:0b:</span><br><span class="line">    5a:bd:25:77:66:de:7b:bd:b4:f3:9e:58:90:51:2c:</span><br><span class="line">    6b:a8:fd:22:51</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKfq2SR+2arBoS1c+Jc8Pt7N6Jus4Iaq</span><br><span class="line">vFttbBaBriVm/EFGY5c0eS4lDVwLWr0ld2bee720855YkFEsa6j9IlECAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p><code>006 使用公钥加密文件</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo &quot;rsa算法测试&quot; &gt;&gt; msg.txt</span><br><span class="line">wendingding$ openssl rsautl -encrypt -pubin -inkey public.pem -in msg.txt -out msg.bin</span><br><span class="line">wendingding$ ls -l</span><br><span class="line">total 48</span><br><span class="line">-rw-r--r--  1 wendingding  staff    64  2 24 18:20 msg.bin</span><br><span class="line">-rw-r--r--  1 wendingding  staff    16  2 24 18:20 msg.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   497  2 24 18:19 private.pem</span><br><span class="line">-rw-r--r--  1 wendingding  staff  1626  2 24 18:19 private.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   182  2 24 18:19 public.pem</span><br><span class="line">-rw-r--r--  1 wendingding  staff   458  2 24 18:19 public.txt</span><br></pre></td></tr></table></figure></p><p><code>007 对加密后的文件进行解密操作</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsautl -decrypt -inkey private.pem -in msg.bin -out a.txt</span><br><span class="line">wendingding$ cat a.txt</span><br><span class="line">rsa算法测试</span><br><span class="line"></span><br><span class="line">wendingding$ md5 a.txt </span><br><span class="line">MD5 (a.txt) = f0f64bc1852acfd133e27567bd71c92e</span><br><span class="line"></span><br><span class="line">wendingding$ md5 msg.txt </span><br><span class="line">MD5 (msg.txt) = f0f64bc1852acfd133e27567bd71c92e</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文对密码学中常用的底层库OpenSSL进行简单说明，包括基本介绍、简单使用等内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;简单介绍&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="数据安全系列" scheme="https://weibo.com/u/3800117445/tags/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>开发工具系列 OSX(UNIX / Linux)常用命令行</title>
    <link href="https://weibo.com/u/3800117445/2019/02/22/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97%20OSX%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://weibo.com/u/3800117445/2019/02/22/开发工具系列 OSX系统基础命令/</id>
    <published>2019-02-22T15:45:13.000Z</published>
    <updated>2019-02-23T10:00:27.464Z</updated>
    
    <content type="html"><![CDATA[<p class="tip">本文简单记录工作中常用的命令行(持续更新)，因为我用的是<code>Mac OSX</code>系统，因此部分命令在<code>Windows系统</code>中将失效(或需调整)，此外需注意Windows的文件系统路径斜杠和<code>UNIX</code>是反的。</p><p><span class="Shell backColorT">pwd</span><br><strong>全称</strong> <strong><code>Print Working Directory</code></strong><br><strong>作用</strong> &nbsp;&nbsp;查看当前目录<br><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop/Test</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cd</span><br> <strong>全称</strong> <strong><code>Change Directory</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;切换目录，<code>../</code>表示返回上一层目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd ../</span><br><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop</span><br><span class="line">$ cd Test/</span><br><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop/Test</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">ls</span><br> <strong>全称</strong> <strong><code>List</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;查看当前目录下内容<br> <strong>参数</strong> <code>usage: ls [-ABCFGHLOPRSTUWabcdefghiklmnopqrstuwx1] [file ...]</code><br> <strong>示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">示例01：ls    列出当前目录下面的所有文件</span><br><span class="line">示例02：ls -a 列出当前目录下面的所有文件(包含隐藏文件)</span><br><span class="line">示例03：ls -l 列出当前目录下面的所有文件(列表方式)，包含文件的创建者和时间等信息</span><br><span class="line">示例04：ls -s 列出当前目录下面的所有文件(打印文件的大小)</span><br><span class="line">示例05：ls -t 列出当前目录下面的所有文件(按照时间来排序)</span><br><span class="line">  </span><br><span class="line">$ ls</span><br><span class="line">    ImageData数据.xmindVueindex.js</span><br><span class="line">    PQ.pngYu.jpg</span><br><span class="line"></span><br><span class="line">$ ls -a</span><br><span class="line">    .ImageData数据.xmindYu.jpg</span><br><span class="line">    ..PQ.pngindex.js</span><br><span class="line">    .DS_StoreVue</span><br><span class="line"></span><br><span class="line">$ ls -l</span><br><span class="line">    total 1216</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff   36971  2 21 15:39 ImageData数据.xmind</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff  519843  2 19 11:34 PQ.png</span><br><span class="line">    drwxr-xr-x  3 wendingding  staff      96  2 23 10:03 Vue</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff   56244  2 19 15:58 Yu.jpg</span><br><span class="line">    -rw-r--r--  1 wendingding  staff     363 12 20 15:33 index.js</span><br><span class="line">    </span><br><span class="line">$ ls -t</span><br><span class="line">    VueYu.jpgindex.js</span><br><span class="line">    ImageData数据.xmindPQ.png</span><br><span class="line"></span><br><span class="line">$ ls -s</span><br><span class="line">    total 1216</span><br><span class="line">    80   ImageData数据.xmind 112 Yu.jpg</span><br><span class="line">    1016 PQ.png   8 index.js</span><br><span class="line">       0 Vue</span><br></pre></td></tr></table></figure><p><strong>说明</strong> 这里简单对<code>ls - l</code>命令列出的文件详细信息中的各个字段加以说明<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命令行结果：-rw-r--r--@ 1 wendingding  staff   56244  2 19 15:58 Yu.jpg</span><br><span class="line">第一个字符：类型(如果是文件夹则为d,如果是文件则为-)</span><br><span class="line">第二三字符：文件的读取权限，如果是rw则表示可读可写</span><br><span class="line">其他的字符：第一个-r表示当前组的权限</span><br><span class="line">          第二个-r表示其它用户的操作权限</span><br><span class="line">          wendingding 是当前用户</span><br><span class="line">          staff       是当前用户所属的组</span><br><span class="line">          519843      是文件的大小(字节数)</span><br><span class="line">          2 19 15:58  是文件最后一次的修改时间</span><br><span class="line">          Yu.jpg      是文件的名称</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">mkdir</span><br><strong>全称</strong> <strong><code>Make Directory</code></strong><br><strong>作用</strong> &nbsp;&nbsp;创建目录<br><strong>参数</strong> <code>usage: mkdir [-pv] [-m mode] directory ...</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例01：mkdir Demo          创建Demo文件夹(目录)</span><br><span class="line">示例02：mkdir -v demo       创建demo文件夹并输出提示信息</span><br><span class="line">示例03：mkdir -p test/sub1  创建test文件夹并在该目录中创建sub1文件夹</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">touch</span><br><strong>作用</strong> &nbsp;&nbsp;在当前的目录中创建文件，可以通过<code>$ open 文件名称</code>命令来打开指定文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd demo</span><br><span class="line">$ ls -a</span><br><span class="line">...</span><br><span class="line">$ touch 1.txt 2.txt</span><br><span class="line">$ ls -a</span><br><span class="line">...1.txt2.txt</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">wc</span><br> <strong>全称</strong> <strong><code>Word Count</code></strong><br> <strong>参数</strong> <code>usage: wc [-clmw] [file ...]</code><br> <strong>作用</strong> &nbsp;&nbsp;获取文件的字数信息统计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例01：wc a.text           获取a.text文件的字数统计信息</span><br><span class="line">示例02：wc -c a.text        获取a.text文件的字数统计信息(统计字节数)</span><br><span class="line">示例03：wc -l a.text        获取a.text文件的字数统计信息(统计行数，从0开始计数)</span><br><span class="line">示例04：wc -m a.text        获取a.text文件的字数统计信息(统计字符数)</span><br><span class="line">示例05：wc -w a.text        获取a.text文件的字数统计信息(统计单词数)</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cat</span><br> <strong>全称</strong> <strong><code>Concatenate files and print on the standard output</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;查看 | 创建 | 合并文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例01：cat index.html              打印并查看index.html文件的内容</span><br><span class="line">示例02：cat &gt; b.text                新建文件b.text并输入内容，需保存</span><br><span class="line">示例03：cat a.text b.text &gt; c.text  合并两个文件的内容给c.text </span><br><span class="line">示例04：cat -n a.text               输出a.text文件的内容并显示行号(空行会被编号)</span><br><span class="line">示例05：cat -b a.text               输出a.text文件的内容并显示行号(空行不被编号)  </span><br><span class="line">示例06：cat -n b.text &gt;&gt; a.text     对b.text文件的内容加上行号然后追加到a.text文件中</span><br><span class="line">示例07：cat -n b.text &gt; a.text      对b.text文件的内容加上行号然后替换a.text文件的内容</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">echo</span><br> <strong>作用</strong> &nbsp;&nbsp;回显字符(向控制台输出字符串信息)，默认会压缩多个空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例01: echo &quot;123&quot; &gt;  a.text  向a.text文件中输入123字符串(替换)</span><br><span class="line">示例02: echo &quot;123&quot; &gt;&gt; a.text  向a.text文件中输入123字符串(追加)</span><br><span class="line"></span><br><span class="line">$ echo &quot;wendingding-mitaoer&quot;</span><br><span class="line">wendingding-mitaoer</span><br><span class="line">$ touch a.txt</span><br><span class="line">$ echo &quot;MiaoXia&quot; &gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">MiaoXia</span><br><span class="line">$ echo &quot;ChanMing&quot; &gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">ChanMing</span><br><span class="line">$ echo &quot;De XiaJi&quot; &gt;&gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">ChanMing</span><br><span class="line">De XiaJi</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">more 和 less</span><br><strong>作用</strong> &nbsp;&nbsp;查看文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">示例01：more +3 a.text              从第三行开始查看a.text文件的内容</span><br><span class="line">示例02：more +/font a.text          搜索文件中指定字符串显示指定位置后的内容</span><br><span class="line">示例03：less -N a.text              显示a.text文件的内容前面加上行号</span><br><span class="line"></span><br><span class="line">$ cat 1.text </span><br><span class="line">Hi!</span><br><span class="line">How are you !</span><br><span class="line">Hello!</span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br><span class="line"></span><br><span class="line">$ more +3 1.text </span><br><span class="line">Hello!</span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"></span><br><span class="line">$ more +/old 1.text </span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">rm</span><br><strong>全称</strong> <code>Remove</code><br><strong>作用</strong> &nbsp;&nbsp;删除文件<br><strong>参数</strong> <code>usage: rm [-f | -i] [-dPRrvW] file ...</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例01： rm    1.text               删除a.text文件</span><br><span class="line">示例02： rm -i 1.text               删除文件前会逐一询问确认，输入YES表示删除</span><br><span class="line">示例03： rm -f 1.text               强制删除a.text文件不会询问确认</span><br><span class="line">示例04： rm -r test                 删除test文件夹以及该目录下面所有文件，Recurve(递归)</span><br><span class="line">示例05： rm -r *                    删除当前目录下面所有的文件</span><br><span class="line">示例06： rm -rf /*                  递归删除所有文件(不提醒) [请勿轻易尝试 ⚠️]</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">rmdir</span><br><strong>全称</strong> <code>Remove Directory</code><br><strong>作用</strong> 删除文件夹，只能删除空文件夹，不常用</p><p><span class="Shell backColorT">mv</span><br><strong>全称</strong> <code>Move</code><br><strong>作用</strong> 移动文件或重命名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例01：mv index.html ./demo/index.html  移动文件到demo目录</span><br><span class="line">示例02：mv index.html a.html             把index.html重命名为a.html</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cp</span><br><strong>全称</strong> <code>Copy</code><br><strong>作用</strong> 复制文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例：cp index.html ./demo/index.html   把文件复制一份保存到demo目录</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">date</span><br><strong>作用</strong> 显示当前的日期和时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ date</span><br><span class="line">2019年 2月23日 星期六 06时52分47秒 CST</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">who</span><br><strong>作用</strong> <code>who</code>获取登录到系统中的所有用户信息，<code>who am i</code>指令用于获取当前登录到系统中的用户信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ who</span><br><span class="line">wendingding console  Feb 22 21:07 </span><br><span class="line">wendingding ttys000  Feb 23 09:28 </span><br><span class="line">wendingding ttys001  Feb 23 11:00 </span><br><span class="line">$ who am i</span><br><span class="line">wendingding ttys001  Feb 23 11:00</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">history</span><br><strong>作用</strong> 查看操作历史</p><p><span class="Shell backColorT">curl</span><br><strong>作用</strong> 发送网络请求，常用于测试(服务器)是否能够到达指定的网站<br><strong>说明</strong> 关于curl的更多用法，请参考另一篇介绍文章。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://wendingding.com</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-Hans&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt; 花田半亩&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;生死有命 富贵在天&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;icon&quot; href=&quot;/logo.jpeg&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/apollo.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;search&quot; type=&quot;application/opensearchdescription+xml&quot; title=&quot;花田半亩&quot;&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">...省略</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">（星号）*</span><br><strong>作用</strong> 在UNIX系统中，星号常用于文件名替换(结合其它的命令)<br><strong>示例</strong> <code>01-Shell自动将模式*替换成当前目录下能够匹配到的所有文件名</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;我是1.txt&quot; &gt; 1.txt</span><br><span class="line">$ echo &quot;我是2.txt&quot; &gt; 2.txt</span><br><span class="line">$ echo &quot;我是a1文件的内容&quot; &gt; a1.txt</span><br><span class="line">$ echo &quot;我是a2文件的内容&quot; &gt; a2.txt</span><br><span class="line">$ echo &quot;我是a3文件的内容&quot; &gt; a3.txt</span><br><span class="line">$ ls -l</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:12 a3.txt</span><br><span class="line"></span><br><span class="line">$ cat 1.txt 2.txt a1.txt</span><br><span class="line">我是1.txt</span><br><span class="line">我是2.txt</span><br><span class="line">我是a1文件的内容</span><br><span class="line"></span><br><span class="line">$ cat *</span><br><span class="line">我是1.txt</span><br><span class="line">我是2.txt</span><br><span class="line">我是a1文件的内容</span><br><span class="line">我是a2文件的内容</span><br><span class="line">我是a3文件的内容</span><br><span class="line"></span><br><span class="line">$ echo *</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">$ echo * == *</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt == 1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">备注：主要是*出现的地方就被替换为当期那目录中所有的文件名</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong> <code>02-星号还能实现部分文件替换功能，与其它字符配合使用可以限制范围</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:12 a3.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   0  2 23 17:24 a4.mp4</span><br><span class="line">-rw-r--r--  1 wendingding  staff   0  2 23 17:24 text.mp4</span><br><span class="line">$ echo *txt</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">$ cat a*</span><br><span class="line">我是a1文件的内容</span><br><span class="line">我是a2文件的内容</span><br><span class="line">我是a3文件的内容</span><br><span class="line">$ ls *ex*</span><br><span class="line">text.mp4</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong> <code>03-文件名替换的其他示例</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1] echo t*         打印出以t开头的所有文件名</span><br><span class="line">[2] rm   *.*        删除包含点号的所有文件</span><br><span class="line">[3] ls   a*         列出所有以a开头的文件</span><br><span class="line">[4] rm    *         删除当前目录下的所有文件( ⚠️)</span><br><span class="line">[5] echo a*b        打印出以a开头且以b结尾的所有文件名</span><br><span class="line">[6] cat  *.c        打印出以.c结尾的所有文件的内容</span><br><span class="line">[7] cp ../demo/* .  将../demo目录中的所有文件复制到当前目录</span><br><span class="line">[8] ls [a-z]*[!0-9] 列出以小写字母开头且不以数字结尾的所有文件</span><br></pre></td></tr></table></figure></p><hr><p class="tip">在使用星号命令的时候，在指定的命令被调用之前，这些文件名替换就已经完成了。在具体的操作中，利用星号文件名替换的功能，可以写出更复杂功能更强大的命令行。</p><p><span class="Shell backColorT"> vim </span><br><strong>作用</strong> 在Mac OSX系统，已经内置了vim编辑器，可以通过vim编辑器方便的在命令行中编辑文件的内容。<br><strong>说明</strong> vim编辑器的功能非常强大，有一套自己的命令相对复杂，这里简单列出常用的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1] 使用vim编辑器打开指定文件       $ vim 1.txt</span><br><span class="line">[2] 让文件进入编辑(INSERT插入)状态  敲击键盘上的i键</span><br><span class="line">[3] 保存并退出                    esc + shift + : + wq</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p class=&quot;tip&quot;&gt;本文简单记录工作中常用的命令行(持续更新)，因为我用的是&lt;code&gt;Mac OSX&lt;/code&gt;系统，因此部分命令在&lt;code&gt;Windows系统&lt;/code&gt;中将失效(或需调整)，此外需注意Windows的文件系统路径斜杠和&lt;code&gt;UNIX&lt;/
      
    
    </summary>
    
    
      <category term="开发工具系列" scheme="https://weibo.com/u/3800117445/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>开发工具系列 WebStorm常用快捷键(Mac版)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/21/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97%20Webstorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://weibo.com/u/3800117445/2019/02/21/开发工具系列 Webstorm常用快捷键/</id>
    <published>2019-02-21T11:45:13.000Z</published>
    <updated>2019-02-21T09:50:15.801Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-family:Georgia"><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; C</span>  复制<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; V</span>  粘贴<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; X</span>  剪切<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; D</span>  复制当前行或选中的区块<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; F</span>    在当前文档执行搜索(查找)<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; G</span>    跳转到文档的某处<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; P</span>    <span style="color:red">显示方法(函数)的参数信息</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; R</span>    在当前文档执行替换操作<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; W</span>    关闭当前选项卡<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; E</span>    弹出最近文件，支持选择后打开<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; B</span>    跳转到变量声明处<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; L</span>    跳转到指定行(输入)<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; Y</span>    浮动窗口显示变量声明行</span></p><p><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; +</span>    <span style="color:red">展开代码块</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; -</span>    <span style="color:red">折叠代码块</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 左</span>    光标移到行头<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 右</span>    光标移到行尾<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 上</span>    跳转到导航栏<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 移入</span>    显示主要信息<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;delete</span>    删除当前行<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;alt&nbsp;&nbsp;+&nbsp;&nbsp; L</span>    <span style="color:red">格式化处理整个文档</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; U</span>    对选中字符进行大小写切换<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; [</span>    选项卡切换</p><p><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;  /</span>    <span style="color:red">添加(取消)单行注释</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;  alt &nbsp;&nbsp;+&nbsp;&nbsp; /</span>    <span style="color:red">添加(取消)多行注释</span></p><p><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;alt &nbsp;&nbsp;+&nbsp;&nbsp; R </span>    运行项目<br><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;alt&nbsp;&nbsp;+&nbsp;&nbsp; I</span>    快速调整每行的缩进<br><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; J</span>    清除缩进变成单行</p><p><span class="spaceT backColorT">alt &nbsp;&nbsp;+&nbsp;&nbsp; /</span>    代码补全(连按选择)<br><span class="spaceT backColorT">shift &nbsp;&nbsp;+&nbsp;&nbsp;tab</span>    调整缩进</p><p></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span style=&quot;font-family:Georgia&quot;&gt;&lt;br&gt;&lt;span class=&quot;spaceT backColorT&quot;&gt;command &amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp; C&lt;/span&gt;  复制&lt;br&gt;&lt;span class=&quot;spac
      
    
    </summary>
    
    
      <category term="开发工具系列" scheme="https://weibo.com/u/3800117445/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [15]-Canvas绘图(压缩)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/20/javaScript%E7%B3%BB%E5%88%97%20%5B15%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%8E%8B%E7%BC%A9)/"/>
    <id>https://weibo.com/u/3800117445/2019/02/20/javaScript系列 [15]-Canvas绘图(压缩)/</id>
    <published>2019-02-20T00:22:16.000Z</published>
    <updated>2019-02-21T07:36:57.858Z</updated>
    
    <content type="html"><![CDATA[<p class="tip">写这篇文章的原因是因为今天早上的时候，突然遇到个需求需要等比例调整照片的大小（主要是想把图片等比例的缩小），我在Mac上通过图片处理软件捣鼓的时候发现比较麻烦，就随手百度了一个在线修改图片尺寸的网站，叫做<a href="http://www.gaitubao.com/" target="_blank" rel="noopener">改图宝</a>。这个网站提供给图片加logo、修改图片尺寸以及印章制作等诸多功能，界面简洁使用方便解决了我的问题，值得推荐。<br><br>然而，等到中午的时候，我发现还有一张图片需要处理，恰好电脑连不上网络，我就考虑能不能通过代码自己来实现，因为图片的<strong><code>选择 - 压缩 - 上传</code></strong>在实际开发中也是对应的场景，因此本文将介绍如何利用Canvas画布来对图片进行压缩的技术，包括实现思路和具体的代码。</p><div class="titleX"><strong>实现思路</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_38.png?raw=true"></p><p><strong>[ 1 ] 获取源图像数据</strong></p><p>在页面中我们使用<code>input标签(file类型)</code>来让用户选择对应的文件上传。为了等比例的对图片进行压缩，需要获取源图片的宽度和高度等数据参数，这里使用了<strong><a href="">FileReader构造函数</a></strong>(类)。</p><p>具体实现的时候，先调用<code>new FileReader()</code>创建一个FileReader的实例对象，然后为<code>input标签</code>注册<span style="color:red">change</span>事件监听。当用户选择好文件后，需要先检查是否是图片(<a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener">通过MIMEType类型判断</a>)，再通过FileReader实例来调用<code>readAsDataURL(file)</code>方法来读取图片文件的数据信息，以获取源图片文件的宽度和高度信息。</p><p><strong>[ 2 ] 计算宽高压缩比数据</strong></p><p>因为示例代码中演示的等比例的进行缩放(压缩)，因此需要通过得到目标图片的宽度和高度尺寸数据。<br>这里列出计算部分的<strong><span style="color:red">核心代码</span></strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetWidth,targetHeight;</span><br><span class="line"><span class="keyword">var</span> imgWidth = img.width, imgHeight = img.height;</span><br><span class="line"><span class="keyword">var</span> maxWidth = <span class="number">150</span>, maxHeight = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图片尺寸超过限制，那么需要重新计算宽高</span></span><br><span class="line"><span class="keyword">if</span> (imgWidth &gt; maxWidth || imgHeight &gt; maxHeight) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (imgWidth / imgHeight &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果更宽，那么就按照宽度限定尺寸</span></span><br><span class="line">    targetWidth = maxWidth;</span><br><span class="line">    targetHeight = <span class="built_in">Math</span>.round(maxWidth * (imgHeight / imgWidth));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果更高，那么就按照高度限定尺寸</span></span><br><span class="line">    targetHeight = maxHeight;</span><br><span class="line">    targetWidth = <span class="built_in">Math</span>.round(maxHeight * (imgWidth / imgHeight));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>[ 3 ] 绘制目标图片</strong></p><p>当目标图片(压缩后)的宽高都计算完成后，可以通过Canvas上下文的<code>drawImage</code>方法来完成图片的绘制，该方法的具体使用可以参考<a href="http://wendingding.com/2019/02/05/javaScript%E7%B3%BB%E5%88%97%20[14]-Canvas%E7%BB%98%E5%9B%BE(%E5%9B%BE%E5%83%8F" target="_blank" rel="noopener"> javaScript系列 [14]-Canvas绘图(图像)</a>这篇文章。</p><p><code>drawImage</code>方法的第一个参数为需要绘制的图片数据，该图片数据即为用户通过input标签选择的文件内容。当然，在具体实现的时候还需要读取文件的内容，监听加载完毕之后再设置Image数据源。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  /e.target.result是图片的base64地址信息</span><br><span class="line">  img.src = event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="titleX"><strong>完整代码</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"file"</span> id=<span class="string">"file"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"info"</span> style=<span class="string">"font-size: 13px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;canvas id=<span class="string">"canvas"</span> height=<span class="string">"200"</span> width=<span class="string">"200"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的文件选择标签</span></span><br><span class="line">  <span class="keyword">var</span> oInput  = <span class="built_in">document</span>.querySelector(<span class="string">'#file'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建FileReader对象用于读取文件信息</span></span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  <span class="keyword">var</span> file   = <span class="literal">null</span>;  <span class="comment">//文件对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 给文件选择标签添加事件监听</span></span><br><span class="line">  oInput.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//001 获取用户选择的文件</span></span><br><span class="line">    file = event.target.files[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//002 获取文件的MIMEType类型</span></span><br><span class="line">    <span class="keyword">var</span> fileType = file.type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 检查用户选择的文件是否是图片</span></span><br><span class="line">    <span class="keyword">if</span> (fileType.indexOf(<span class="string">"image"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//004 如果发现文件是图片则读取图片为DataURL</span></span><br><span class="line">      reader.readAsDataURL(file);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 创建Image图像实例</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="keyword">var</span> targetWidth,targetHeight;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[5] 监听FileReader对象是否处理完毕，设置图像实例的数据源</span></span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//说明：e.target.result是图片的base64地址信息</span></span><br><span class="line">    img.src = event.target.result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[6] 监听Image实例加载，压缩图片并生成预览图像</span></span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      setFileInfo();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//[7]在页面中创建canvas画布对图片进行缩放(压缩)后绘制</span></span><br><span class="line">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">      <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">      ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,ctx.canvas.width,ctx.canvas.height);</span><br><span class="line">      ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setFileInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件的名称</span></span><br><span class="line">      <span class="keyword">var</span> fileName = file.name;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取文件的大小</span></span><br><span class="line">      <span class="keyword">var</span> fileSize = (file.size / <span class="number">1024</span> / <span class="number">1024</span>).toFixed(<span class="number">3</span>) + <span class="string">"M"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 图片压缩比计算</span></span><br><span class="line">      <span class="keyword">var</span> imgWidth = img.width, imgHeight = img.height;</span><br><span class="line">      <span class="keyword">var</span> maxWidth = <span class="number">150</span>, maxHeight = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果图片尺寸超过限制，那么需要重新计算宽高</span></span><br><span class="line">      <span class="keyword">if</span> (imgWidth &gt; maxWidth || imgHeight &gt; maxHeight) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (imgWidth / imgHeight &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 如果更宽，那么就按照宽度限定尺寸</span></span><br><span class="line">          targetWidth = maxWidth;</span><br><span class="line">          targetHeight = <span class="built_in">Math</span>.round(maxWidth * (imgHeight / imgWidth));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果更高，那么就按照高度限定尺寸</span></span><br><span class="line">          targetHeight = maxHeight;</span><br><span class="line">          targetWidth = <span class="built_in">Math</span>.round(maxHeight * (imgWidth / imgHeight));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在页面中显示图片信息</span></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">"&lt;div&gt;1.已选择图片"</span> + fileName + <span class="string">"，大小为"</span> + fileSize + <span class="string">"。&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;2.图片原尺寸是："</span> + imgWidth + <span class="string">" x "</span> + imgHeight + <span class="string">"&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;3.图片压缩尺寸："</span> + maxWidth + <span class="string">" x "</span> + maxHeight + <span class="string">"&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;4.图片已压缩为："</span> + targetWidth + <span class="string">" x "</span> + targetHeight +<span class="string">"&lt;/div&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>);</span><br><span class="line">        oDiv.innerHTML = html;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>演示效果</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_37.gif?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p class=&quot;tip&quot;&gt;写这篇文章的原因是因为今天早上的时候，突然遇到个需求需要等比例调整照片的大小（主要是想把图片等比例的缩小），我在Mac上通过图片处理软件捣鼓的时候发现比较麻烦，就随手百度了一个在线修改图片尺寸的网站，叫做&lt;a href=&quot;http://www.gai
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [14]-Canvas绘图(图像)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/05/javaScript%E7%B3%BB%E5%88%97%20%5B14%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%9B%BE%E5%83%8F)/"/>
    <id>https://weibo.com/u/3800117445/2019/02/05/javaScript系列 [14]-Canvas绘图(图像)/</id>
    <published>2019-02-05T00:22:16.000Z</published>
    <updated>2019-02-20T02:14:17.334Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas画布图像绘制相关的技术细节。</div><h3 id="Canvas画布图像绘制基础"><a href="#Canvas画布图像绘制基础" class="headerlink" title="Canvas画布图像绘制基础"></a>Canvas画布图像绘制基础</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_35.png?raw=true"></p><div class="titleX"><strong>核心API</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制图像</strong></span></p><p><strong><code>语法</code></strong> </p><ul><li><code>ctx.drawImage(image,dx,dy);</code></li><li><code>ctx.drawImage(image,dx,dy,dw,dh);</code></li><li><code>ctx.drawImage(image,sx,sy,sw,sh,dx,dy,dw,dh);</code></li></ul><p><strong><code>作用</code></strong> 该方法可以将一幅图像绘制到Canvas画布中(<code>源图像 - 目标图像</code>)。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">dx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的原点坐标(X轴)</span></li><li><span style="font-family:Georgia">dy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的原点坐标(Y轴)</span></li><li><span style="font-family:Georgia">sx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的原点坐标(X轴)</span></li><li><span style="font-family:Georgia">sy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的原点坐标(Y轴)</span></li><li><span style="font-family:Georgia">sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的大小(高度)</span></li><li><span style="font-family:Georgia">sw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的大小(宽度)</span></li><li><span style="font-family:Georgia">dw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的大小(宽度)</span></li><li><span style="font-family:Georgia">dh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的大小(高度)</span></li><li><span style="font-family:Georgia">image&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 绘制到canvas上面的图像(<a href="">HTMLImageElement</a>)</span></li></ul><p><strong><code>说明</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1] drawImage方法的第一个参数可以是HTMLImageElement类型的图像或HTMLCanvasElement类型的Canvas对象</span><br><span class="line">    或者HTMLVideoElement类型的视频对象。</span><br><span class="line">[2] drawImage方法可以将一幅图像(Canvas对象 」视频帧)的整体或部分绘制到Canvas中，在绘制到画布的时候可以</span><br><span class="line">    任意指定绘制的位置以及缩放的比例。</span><br></pre></td></tr></table></figure></p><p><strong><code>图示</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_30.png?raw=true"><br><strong><code>示例-01</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"800"</span> height=<span class="string">"1000"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取画布和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> ctx  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建Image图像并设置数据源</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = <span class="string">"PQ.png"</span>;</span><br><span class="line">  img.alt = <span class="string">"我是一头小猪,我全家都是猪~"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 监听图片加载完毕，绘制图片到画布</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示001</span></span><br><span class="line">    <span class="comment">//把图片绘制到Canvas画布上，绘制参考的原点坐标为(0,0),等比例缩放图片大小至宽高均为200</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示002</span></span><br><span class="line">    <span class="comment">//剪切(剪切起点的参考坐标为[150,0])图片的一部分(右半边)绘制到画布上，绘制参考的原点坐标为(205,0)</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">150</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">300</span>,<span class="number">205</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示003</span></span><br><span class="line">    <span class="comment">//把图片(300 * 300)绘制到画布的指定位置，绘制参考的原点坐标为(360,0)</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">360</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_31.png?raw=true"></p><p><strong><code>示例-02</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"2000"</span> height=<span class="string">"800"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> ctx  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建Image图像并设置数据源</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src  = <span class="string">"hero.png"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 定义变量(源图片的宽度、高度、等分数量)</span></span><br><span class="line">  <span class="keyword">var</span> width  = <span class="number">1620</span>,height = <span class="number">240</span>,equalDivisionCount = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[5] 等Image图像加载完成后先把完整的图像绘制到画布</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[6] 通过定时器来控制图像的绘制(动画)</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      ctx.canvas.width = <span class="number">2000</span>;</span><br><span class="line">      ctx.drawImage(</span><br><span class="line">          img,</span><br><span class="line">          width * i/equalDivisionCount,<span class="number">0</span>,</span><br><span class="line">          width/equalDivisionCount,height,</span><br><span class="line">          width * i/equalDivisionCount,<span class="number">0</span>,</span><br><span class="line">          width/equalDivisionCount,height</span><br><span class="line">      );</span><br><span class="line">      i++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">7</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_32.gif?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>把Canvas画布转换为图像</strong></span></p><p><strong><code>语法</code></strong> <code>canvas.toDataURL()</code><br><strong><code>作用</code></strong> 该方法用于将Canvas画布的内容转换为图像。<br><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"200"</span> height=<span class="string">"200"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;img src=<span class="string">""</span> alt=<span class="string">""</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的img标签</span></span><br><span class="line">  <span class="keyword">var</span> oImage = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">//[2] 获取页面中的canvas标签</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="comment">//[3] 获取画布的上下文对象</span></span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//[4] 创建Image图片对象</span></span><br><span class="line">  <span class="keyword">var</span> img    = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="comment">//[5] 设置Image图像的数据源</span></span><br><span class="line">  img.src    = <span class="string">"PQ.png"</span>;</span><br><span class="line">  <span class="comment">//[6] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[7] 把图像绘制到Canvas画布中</span></span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[8] 把画布转换为图像保存并显示</span></span><br><span class="line">    oImage.src = canvas.toDataURL();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_33.png?raw=true"></p><p class="tip"><strong>备注</strong> Canvas标签对象的toDataURL方法把画布转换为Base64表示的图像，关于Base64编码相关的知识点可以参考<a href="http://wendingding.com/2018/07/31/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20Base64/" target="_blank" rel="noopener">数据安全系列 Base64</a>。</p><p><div class="titleX"><strong>操作图像像素的方法</strong></div><br><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>getImageData</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.getImageData(dx,dy,w,h)</code><br><strong><code>作用</code></strong> 获取(<strong>复制</strong>)Canvas画布上指定矩形区域的像素数据。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>putImageData</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.putImageData(imgData,dx,dy,[dirtyX],[dirtyY],[dirtyWidth],[dirtyHeight]);</code><br><strong><code>作用</code></strong> 该方法用于将指定ImageData对象的图像数据放回到画布上。<br><strong><code>参数</code></strong></p><ul><li><span style="font-family:Georgia">imgData &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    规定要放回画布的ImageData对象</span></li><li><span style="font-family:Georgia">dx &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    绘制到画布的位置(X坐标)，<a href="">以像素计</a>。</span></li><li><span style="font-family:Georgia">dy &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    绘制到画布的位置(Y坐标)，<a href="">以像素计</a>。</span></li><li><span style="font-family:Georgia">dirtyX &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的位置(X坐标)，默认为0。</span></li><li><span style="font-family:Georgia">dirtyY &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的位置(Y坐标)，默认为0。</span></li><li><span style="font-family:Georgia">dirtyWidth   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的大小(宽度)，默认为整幅图像的宽度。</span></li><li><span style="font-family:Georgia">dirtyHeight &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的大小(高度)，默认为整幅图像的高度。</span></li></ul><p><strong><code>说明</code></strong> <code>putImageData()</code>方法的后四个参数是可选的，在调用时要么传递3个参数要么传递7个参数。<br><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"1000"</span> height=<span class="string">"400"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas画布</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="comment">//[2] 获取Cnavas的上下文对象</span></span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 在画布指定位置绘制一个填空矩形</span></span><br><span class="line">  ctx.fillStyle=<span class="string">"#f9f"</span>;</span><br><span class="line">  ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//演示001</span></span><br><span class="line">  <span class="comment">//[4] 获取画布中指定矩形区域的图像数据，然后再放到画布的指定位置(相当于复制)</span></span><br><span class="line">  ctx.putImageData(ctx.getImageData(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>),<span class="number">120</span>,<span class="number">10</span>);</span><br><span class="line">  ctx.putImageData(ctx.getImageData(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>),<span class="number">230</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[5] 创建Image图像</span></span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="comment">//[6] 设置Image图像的数据源</span></span><br><span class="line">  img.src = <span class="string">"Yu.jpg"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//[7] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[8] 把图像绘制到Canvas画布中</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">10</span>,<span class="number">70</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示002</span></span><br><span class="line">    <span class="comment">//[9] 获取画布中指定矩形区域的图像数据，然后再放到画布的指定位置(测试参数）</span></span><br><span class="line">    <span class="keyword">var</span> imgData = ctx.getImageData(<span class="number">10</span>,<span class="number">70</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 3个参数的情况</span></span><br><span class="line"><span class="comment">    * 第一个参数：imageData对象</span></span><br><span class="line"><span class="comment">    * 第二个参数：绘制到画布的位置(X)</span></span><br><span class="line"><span class="comment">    * 第三个参数：绘制到画布的位置(Y)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    ctx.putImageData(imgData,<span class="number">120</span>,<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 7个参数的情况</span></span><br><span class="line"><span class="comment">    * 第一个参数：imageData对象</span></span><br><span class="line"><span class="comment">    * 第二个参数：绘制到画布的位置(X)</span></span><br><span class="line"><span class="comment">    * 第三个参数：绘制到画布的位置(Y)</span></span><br><span class="line"><span class="comment">    * 第四个参数：部分截取imageData对象的位置(X)</span></span><br><span class="line"><span class="comment">    * 第五个参数：部分截取imageData对象的位置(Y)</span></span><br><span class="line"><span class="comment">    * 第六个参数：部分截取imageData对象的大小(宽度)</span></span><br><span class="line"><span class="comment">    * 第七个参数：部分截取imageData对象的大小(高度)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    ctx.putImageData(imgData,<span class="number">230</span>,<span class="number">70</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">340</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">450</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">30</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">560</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_34.png?raw=true"></p><p class="tip"><strong>注意</strong> 在指定Canvas偏移量的时候，需要以CSS像素为单位，然而在指定图像数据中矩形区域时需要以设置像素为单位。此外，需要注意putImageData的后四个参数确定的区域被称为<code>脏矩形(dirty rectangle)</code>，当浏览器将脏矩形赋值到Canvas画布的时候，会默认将设备像素转换为CSS像素。</p><h3 id="ImageData对象"><a href="#ImageData对象" class="headerlink" title="ImageData对象"></a>ImageData对象</h3><p>在上文中介绍的<code>getImageData()</code>方法，其返回的是ImageData类型的对象，该对象包含<code>width</code>、<code>height</code>以及data等三个属性。其中<code>width</code>代表的是以设备像素(device pixel)为单位的图像数据宽度，而<code>height</code>相应的代表着数据的高度，此外<code>data</code>是包含着各个设备像素数值的数组。</p><p>在<code>ImageData</code>对象中，<code>data</code>属性所包含的每个数组元素，均对应表示图像数据中的相应像素值，每个像素中都存在四方面的信息，分别代表当前像素的颜色(<a href="">RGB - Red 」Green 」Blue</a>)和透明度(<a href="">A - alpha</a>)。这些信息都使用包含8个二进制位(2的八次方)的整数来表示，取值范围为 <span style="color:red"><strong>0</strong> ~ <strong>255</strong> </span>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">也就是说，</span><br><span class="line"></span><br><span class="line">ImageData.data[0]代表的是红色数值，</span><br><span class="line">ImageData.data[1]代表的是绿色数值，</span><br><span class="line">ImageData.data[2]代表的是蓝色数值，</span><br><span class="line">ImageData.data[3]代表的是透明度数值。</span><br><span class="line"></span><br><span class="line">循环往复(如果数据数组的长度为n，那么`ImageData.data[n-4]`代表红色数值，其它的类推)。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>createImageData方法</strong></span></p><p><strong><code>语法</code></strong> </p><ul><li><code>ctx.createImageData(w,h);</code></li><li><code>ctx.createImageData(imageDataOther);</code></li></ul><p><strong><code>作用</code></strong> 该方法根据指定的宽高(目标对象的宽高)来创建新的空白的ImageData对象。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">w 指定的宽度。</span> </li><li><span style="font-family:Georgia">h 指定的高度。</span> </li><li><span style="font-family:Georgia">imageDataOther 参考的图像数据。</span> </li></ul><p><strong><code>示例-01</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"600"</span> height=<span class="string">"400"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas画布和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建ImageData对象</span></span><br><span class="line">  <span class="keyword">var</span> imageData = ctx.createImageData(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(imageData);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * data: Uint8ClampedArray(16) [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]</span></span><br><span class="line"><span class="comment">   * height: 2</span></span><br><span class="line"><span class="comment">   * width:  2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 在画布中绘制红色矩形</span></span><br><span class="line">  ctx.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">  ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 获取画布中指定区域的图像数据</span></span><br><span class="line">  imageData = ctx.getImageData(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(imageData);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * data: Uint8ClampedArray(16) [255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255]</span></span><br><span class="line"><span class="comment">   * height: 2</span></span><br><span class="line"><span class="comment">   * width:  2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>新对象的默认像素值<code>transparent black</code>，表示为<a href="">(0, 0 , 0 , 0)</a>。其中前三项代表的是颜色，最后一项代表的是透明度，<code>color/alpha</code>以数组形式存在，而数组的大小为ImageData对象的四倍。</p></blockquote><p><strong><code>示例说明</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在上面的代码中ctx.createImageData(2,2)表示要创建2 * 2区域的空白ImageData对象。</span><br><span class="line">调用方法后得到的ImageData对象拥有 2 * 2 = 4个像素，每个像素由数组中的四个元素表示。</span><br><span class="line"></span><br><span class="line">打印ImageData属性得到的结果([4])显示为：</span><br><span class="line">data:Uint8ClampedArray(16) [255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255]</span><br><span class="line">我们观察下标0~3的这组数据：255,0,0,255，尝试给出标注结果为255(Red),0(Green),0(Blue),255(alpha)</span><br></pre></td></tr></table></figure></p><p>通过上面的分析，在掌握ImageData内部表示结构后，我们发现通过代码完全可以精准的控制图像的任何一个像素的显示，包括该像素的<code>RGB颜色和透明度</code>均可以控制，结合相应的算法和计算公式就可以简单的实现任何滤镜效果。</p><p><strong><code>示例-02</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> height=<span class="string">"400"</span> width=<span class="string">"600"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取画布和绘图上下文</span></span><br><span class="line">  <span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建ImageData对象(10 * 10)</span></span><br><span class="line">  <span class="keyword">var</span> imgData = ctx.createImageData(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 设置ImageData图像使用红色填充</span></span><br><span class="line">  <span class="keyword">var</span> length  = imgData.data.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;length; i+=<span class="number">4</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    imgData.data[i+<span class="number">0</span>] = <span class="number">255</span>;</span><br><span class="line">    imgData.data[i+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    imgData.data[i+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    imgData.data[i+<span class="number">3</span>] = <span class="number">255</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 把图像数据绘制到画布上面</span></span><br><span class="line">  ctx.putImageData(imgData,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_36.png?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas画布图像绘制相关的技术细节。&lt;/div&gt;

&lt;h3 id=&quot;Canvas画布图像绘制基础&quot;&gt;&lt;a href=&quot;#Canvas画布图像绘制基础&quot; class=&quot;headerlink&quot; title=&quot;Canvas画布图像绘制基础
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [13]-Canvas绘图(文本)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/04/javaScript%E7%B3%BB%E5%88%97%20%5B13%5D-Canvas%E7%BB%98%E5%9B%BE(%E6%96%87%E6%9C%AC)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/04/javaScript系列 [13]-Canvas绘图(文本)/</id>
    <published>2019-01-04T00:22:16.000Z</published>
    <updated>2019-02-19T02:45:45.495Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas画布绘制文本相关的技术细节。</div><h3 id="Canvas画布绘制文本"><a href="#Canvas画布绘制文本" class="headerlink" title="Canvas画布绘制文本"></a>Canvas画布绘制文本</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_27.png?raw=true"></p><div class="titleX"><strong>核心API</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制文本(描边)</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.strokeText( text , x , y , [ maxWidth ]);</code><br><strong><code>作用</code></strong> 用于在画布上绘制文本(描边·没有填色)。<br><strong><code>说明</code></strong> 文本的颜色为黑色，可以通过<code>strokeStyle</code>属性来设置颜色或渐变。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">text &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;绘制的文本信息</span></li><li><span style="font-family:Georgia">x &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的X轴坐标</span></li><li><span style="font-family:Georgia">y &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的Y轴坐标</span></li><li><span style="font-family:Georgia">maxWidth &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;允许的最大文本宽度，单位为像素</span></li></ul><p><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"20px Impact"</span>;</span><br><span class="line">ctx.strokeText(<span class="string">"Nice to meet you!"</span>,<span class="number">10</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建渐变</span></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.createLinearGradient(<span class="number">200</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">0</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0"</span>,<span class="string">"black"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0.5"</span>,<span class="string">"blue"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"1.0"</span>,<span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"25px KaiTi"</span>;</span><br><span class="line">ctx.strokeStyle = gradient;</span><br><span class="line">ctx.strokeText(<span class="string">"wendingding.com"</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_28.png?raw=true"><br><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制文本(填充)</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.fillText( text , x , y , [ maxWidth ]);</code><br><strong><code>作用</code></strong> 用于在画布上绘制填色的文本。<br><strong><code>说明</code></strong> 文本的颜色为黑色，可以通过<code>fillStyle</code>属性来设置颜色或渐变。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">text &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;绘制的文本信息</span></li><li><span style="font-family:Georgia">x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的X轴坐标</span></li><li><span style="font-family:Georgia">y &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的Y轴坐标</span></li><li><span style="font-family:Georgia">maxWidth &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;允许的最大文本宽度，单位为像素</span></li></ul><p><strong><code>示例</code></strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"20px Georgia"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"Nice to meet you!"</span>,<span class="number">10</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建渐变</span></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.createLinearGradient(<span class="number">200</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">0</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0"</span>,<span class="string">"black"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0.5"</span>,<span class="string">"blue"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"1.0"</span>,<span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用渐变填色</span></span><br><span class="line">ctx.fillStyle = gradient;</span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"25px KaiTi"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"wendingding.com"</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_29.png?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>计算文本信息的宽度</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.measureText( text ).width;</code><br><strong><code>作用</code></strong> 用于计算和返回指定文本的宽度，单位以像素计。<br><strong><code>说明</code></strong> <code>measureText</code>方法返回的本身是一个对象，我们需要用过width来获取宽度值。<br><strong><code>参数</code></strong> <code>text</code>表示要测量的文本。</p><p><div class="titleX"><strong>文字绘制相关属性介绍</strong></div><br><span class="prop"><strong>font</strong></span> 设置文字的字号和字体等信息。<br><span class="prop"><strong>textAlign</strong></span> 设置水平对齐方式，可选值有<code>start(默认) | end | left | right | center</code>。<br><span class="prop"><strong>textBaseline</strong></span> 设置垂直对齐方式，可选值有<code>alphabetic(默认) | top | middle | bottom | hanging | ideographic</code>。其中<code>hanging</code>表示文本基线是悬挂基线，<code>ideographic</code>表示文本基线是表意基线。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"How are you?"</span>;</span><br><span class="line">ctx.font = <span class="string">"30px Times New Roman"</span>;</span><br><span class="line"></span><br><span class="line">ctx.strokeText(str,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.fillText(str,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">ctx.fillText(str,<span class="number">50</span>,<span class="number">150</span>,<span class="number">120</span>);   <span class="comment">//约束最大宽度</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.measureText(str).width);</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,ctx.canvas.height);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textAlignArr = [<span class="string">"start"</span>,<span class="string">"end"</span>,<span class="string">"left"</span>,<span class="string">"right"</span>,<span class="string">"center"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;textAlignArr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.textAlign = textAlignArr[i];</span><br><span class="line">    ctx.fillText(str,<span class="number">100</span>,<span class="number">200</span> + (<span class="number">50</span> *(i + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(ctx.canvas.width,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line">str = <span class="string">"正"</span>;</span><br><span class="line"><span class="keyword">var</span> textBaselineArr = [<span class="string">"alphabetic"</span>,<span class="string">"top"</span>,<span class="string">"hanging"</span>,<span class="string">"middle"</span>,<span class="string">"ideographic"</span>,<span class="string">"bottom"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;textBaselineArr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.textBaseline = textBaselineArr[i];</span><br><span class="line">    ctx.fillText(str,<span class="number">100</span>  + (<span class="number">80</span> *(i + <span class="number">1</span>)),<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Canvas实现文字竖排案例"><a href="#Canvas实现文字竖排案例" class="headerlink" title="Canvas实现文字竖排案例"></a>Canvas实现文字竖排案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"1000px"</span> <span class="attr">height</span>=<span class="string">"700px"</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"templateText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里也。 化而為鸟， 其名為鹏， 鹏之背， 不知其幾千里也。 怒而飞， 其翼若垂天之雲。 是鸟也， 海运則將徙於南冥， 南冥者， 天池也。 </span></span><br><span class="line"><span class="undefined">#齐谐者， 志怪者也。 谐之言曰： 鹏之徙於南冥也， 水擊三千里， 摶扶搖而上者九萬里。 去以六月息者也， 野马也， 塵埃也， 生物之以息相吹也。 天之苍苍， 其正色邪？ 其远而無所至极邪？ 其视下也， 亦若是則已矣。 </span></span><br><span class="line"><span class="undefined">#且夫水之积也不厚， 則其负大舟也無力。 覆杯水於坳堂之上， 則芥為之舟， 置杯焉則胶， 水浅而舟大也。 风之积也不厚， 則其负大翼也無力。 故九萬里， 則风斯在下矣， 而後乃今培风。 背负青天而莫之夭厄者， 而後乃今將圖南。 </span></span><br><span class="line"><span class="undefined">#蜩與學鸠笑之曰： “ 我決起而飞， 枪榆枋， 時則不至， 而控於地而已矣。 奚以之九萬里而南為？ ” 适莽苍者， 三飧而反， 腹犹果然。 适百里者， 宿舂粮。 适千里者， 三月聚粮。 之二虫， 又何知？ </span></span><br><span class="line"><span class="undefined">#小知不及大知， 小年不及大年。 奚以知其然也？ 朝菌不知晦朔， 惠蛄不知春秋， 此小年也。 楚之南有冥灵者， 以五百歲為春， 五百歲為秋； 上古有大椿者， 以八千歲為春， 八千歲為秋； 而彭祖乃今以久特闻， 眾人匹之， 不亦悲乎？ </span></span><br><span class="line"><span class="undefined">#汤之问棘也是已： 穷發之北有冥海者， 天池也。 有鱼焉， 其廣數千里， 未有知其修者， 其名為鲲。 有鸟焉， 其名為鹏， 背若泰山， 翼若垂天之雲， 摶扶搖羊角而上者九萬里， 绝雲气， 负青天， 然後圖南， 且适南冥也。 </span></span><br><span class="line"><span class="undefined">#斥鹌笑之曰： “ 彼且奚适也？ 我腾跃而上， 不过數仞而下， 翱翔蓬蒿之间， 耻亦飞之至也。 而彼且奚适也？ ” 此小大之辨也。 </span></span><br><span class="line"><span class="undefined">#故夫知效一官， 行比一鄉， 德合一君， 而征一國者， 其自视也， 亦若此矣。 而宋荣子犹然笑之。 且舉世誉之而不加勸， 舉世非之而不加沮。 定乎內外之分， 辨乎荣辱之境， 斯已矣。 彼其於世， 未數數焉也。 虽然， 犹有未树也。</span></span><br><span class="line"><span class="undefined">#夫列子禦风而行， 泠然善也， 旬有五日而後反。 彼於致福， 未數數然也。 此虽免乎行， 犹有所待者也。 </span></span><br><span class="line"><span class="undefined">#若夫乘天地之正， 而禦六气之辩， 以游無穷者， 彼且惡乎待哉！ 故曰： 至人無己， 神人無功， 聖人無名。 </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m      = <span class="number">30</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h      = ctx.canvas.height;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> w      = ctx.canvas.width;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> count  = <span class="built_in">Math</span>.floor(w / m);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= count; i++) &#123;</span></span><br><span class="line"><span class="undefined">        ctx.beginPath();</span></span><br><span class="line"><span class="undefined">        ctx.moveTo(i*m - 0.5 ,0);</span></span><br><span class="line"><span class="undefined">        ctx.lineTo(i*m - 0.5 ,h);</span></span><br><span class="line"><span class="javascript">        ctx.strokeStyle = <span class="string">"#1D244F"</span>;</span></span><br><span class="line"><span class="undefined">        ctx.stroke();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    CanvasRenderingContext2D.prototype.fillTextVertical = <span class="function"><span class="keyword">function</span> (<span class="params">text, x, y</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">        self.textAlign = <span class="string">'center'</span>;</span></span><br><span class="line"><span class="javascript">        self.textBaseline = <span class="string">'middle'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrText = text.split(<span class="string">''</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrWidth = arrText.map(<span class="function"><span class="keyword">function</span> (<span class="params">letter</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> self.measureText(letter).width;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        arrText.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">letter, index</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(letter == <span class="string">"#"</span>)</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="undefined">                y = 12 + 50;</span></span><br><span class="line"><span class="undefined">                x = x - 30;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> letterWidth = arrWidth[index];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> code = letter.charCodeAt(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (code &lt;= <span class="number">256</span>) &#123;</span></span><br><span class="line"><span class="undefined">                self.translate(x, y);</span></span><br><span class="line"><span class="javascript">                self.rotate(<span class="number">90</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span></span><br><span class="line"><span class="undefined">                self.translate(-x, -y);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; text.charCodeAt(index - <span class="number">1</span>) &lt; <span class="number">256</span>) &#123;</span></span><br><span class="line"><span class="undefined">                y = y + arrWidth[index - 1] / 2;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            self.fillText(letter, x, y);</span></span><br><span class="line"><span class="undefined">            self.setTransform(1, 0, 0, 1, 0, 0);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> letterWidth = arrWidth[index];</span></span><br><span class="line"><span class="undefined">            y = y + letterWidth;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(y &gt;= (self.canvas.height - <span class="number">12</span>))</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="undefined">                y = 12;</span></span><br><span class="line"><span class="undefined">                x = x - 30;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> templateText = <span class="built_in">document</span>.getElementById(<span class="string">"templateText"</span>).innerText;</span></span><br><span class="line"><span class="javascript">    ctx.font = <span class="string">'20px STKaiti, sans-serif'</span>;</span></span><br><span class="line"><span class="javascript">    ctx.fillStyle = <span class="string">"#1D244F"</span>;</span></span><br><span class="line"><span class="javascript">    ctx.fillTextVertical(<span class="string">"逍遥游( 上)  · 庄子"</span>, canvas.width - <span class="number">25</span>,  <span class="number">0</span>);</span></span><br><span class="line"><span class="undefined">    ctx.fillTextVertical(templateText, canvas.width - 25, 12);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas画布绘制文本相关的技术细节。&lt;/div&gt;

&lt;h3 id=&quot;Canvas画布绘制文本&quot;&gt;&lt;a href=&quot;#Canvas画布绘制文本&quot; class=&quot;headerlink&quot; title=&quot;Canvas画布绘制文本&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [12]-Canvas绘图(曲线)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/03/javaScript%E7%B3%BB%E5%88%97%20%5B12%5D-Canvas%E7%BB%98%E5%9B%BE(%E6%9B%B2%E7%BA%BF)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/03/javaScript系列 [12]-Canvas绘图(曲线)/</id>
    <published>2019-01-03T00:21:15.000Z</published>
    <updated>2019-02-19T02:45:45.480Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas中的弧度、曲线、圆弧以及文字的绘制方法以及径向渐变等内容，并提供饼状图等综合案例。</div><h3 id="Canvas中的弧度、曲线和圆弧"><a href="#Canvas中的弧度、曲线和圆弧" class="headerlink" title="Canvas中的弧度、曲线和圆弧"></a>Canvas中的弧度、曲线和圆弧</h3><div class="titleX"><strong>专业术语</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_13.png?raw=true" width="500px"><br><strong><code>夹角</code></strong> 从一个点发射(延伸)出两条线段，两条线相交的部分会构成一个夹角。<br><strong><code>角度</code></strong> 两条相交直线中的任何一条与另一条相叠合时必须转动的量的量度，单位符号为<code>°</code>。<br><strong><code>周角</code></strong> 一条直线围绕起点需要与自己相叠合时必须转动的量的量度被称为周角，周角等分为<code>360</code>度。<br><strong><code>弧度</code></strong> 角的度量单位，弧长等于半径的弧其所对的圆心角为1弧度(<span style="color:red">弧长等于半径时，射线夹角为1弧度</span>)。<br><br><div style="border:1px solid #888;width:300px;height:44px;line-height:44px;text-align:center;"><strong>公式 &nbsp;&nbsp;&nbsp;&nbsp; 弧度 = 角度 * π / 180</strong></div><p>在使用JavaScript编写代码进行相关计算的时候，经常需要使用Math提供的成员，这里简单说明。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_14.png?raw=true"></p><p><strong><span style="color:red">Math.PI</span></strong> 代表着<strong>π</strong>。</p><p><strong><span style="color:red">Math.sin(弧度)</span></strong> 夹角对面的边 与 斜边的比值。<br><strong><span style="color:red">Math.cos(弧度)</span></strong> 夹角侧面的边 与 斜边的比值。</p><p>这里给出圆形上点坐标的计算公式，其中<code>x0</code>和<code>y0</code>为圆心坐标，<code>rad</code>为弧度，<code>R</code>为圆的半径。</p><div style="border:1px solid #888;width:400px;height:44px;line-height:44px;text-align:center;margin-bottom:10px"><strong>坐标 &nbsp;&nbsp;&nbsp;&nbsp; ( x0 + Math.cos(rad) x R&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;&nbsp;&nbsp;y0 + Math.sin(rad) x R )</strong></div><div class="titleX"><strong>核心API介绍</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制圆弧</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.arc(x,y,r,startAngle,endAngle,counterclockwise);</code><br><strong><code>作用</code></strong> 通过该方法来绘制圆弧或者(半)圆。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x 圆心X轴坐标</span></li><li><span style="font-family:Georgia">y 圆心Y轴坐标</span></li><li><span style="font-family:Georgia">r 圆的半径</span></li><li><span style="font-family:Georgia">startAngle  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;开始弧度</span></li><li><span style="font-family:Georgia">endAngle    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结束弧度</span></li><li><span style="font-family:Georgia">counterclockwise &nbsp;&nbsp;是否逆时针旋转(默认为false)</span></li></ul><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制圆弧曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.arcTo(x1,y1,x2,y2,r);</code><br><strong><code>作用</code></strong> 参考两个点并根据指定半径来创建一条圆弧路径。<br><strong><code>备注</code></strong> 绘制的圆弧与当前点到第一个点的连线相切且与第一第二个点的连线也相切。<br><strong><code>说明</code></strong> <code>arcTo</code>方法的这些特性决定了该方法非常适合用来绘制圆角矩形。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x1 第一个参考点的X轴坐标</span></li><li><span style="font-family:Georgia">y1 第一个参考点的Y轴坐标</span></li><li><span style="font-family:Georgia">x2 第二个参考点的X轴坐标</span></li><li><span style="font-family:Georgia">y3 第二个参考点的Y轴坐标</span></li><li><span style="font-family:Georgia">r &nbsp;&nbsp;&nbsp;圆的半径</span></li></ul><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>圆形渐变</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.createRadialGradient(x0,y0,r0,x1,y1,r1);;</code><br><strong><code>作用</code></strong> 通过该方法来绘制圆弧或者(半)圆。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 渐变开始圆的X轴坐标</span></li><li><span style="font-family:Georgia">y0 渐变开始圆的Y轴坐标</span></li><li><span style="font-family:Georgia">r0 开始圆的半径</span></li><li><span style="font-family:Georgia">x1 渐变结束圆的X轴坐标</span></li><li><span style="font-family:Georgia">y1 渐变结束圆的Y轴坐标</span></li><li><span style="font-family:Georgia">r1 结束圆的半径</span></li></ul><h3 id="Canvas曲线-圆弧绘制示例"><a href="#Canvas曲线-圆弧绘制示例" class="headerlink" title="Canvas曲线-圆弧绘制示例"></a>Canvas曲线-圆弧绘制示例</h3><p><div class="titleX"><strong>数学方程绘制图形Demo1</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_17.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 通过代数方程来绘制直线</span></span><br><span class="line"><span class="comment">//设置路径(起点)</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">30</span>,y = <span class="number">0</span>; x &lt; <span class="number">1000</span> ; x++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过代数方程来绘制直线</span></span><br><span class="line">    y = x / <span class="number">2</span> * <span class="number">0.3</span>;</span><br><span class="line">    ctx.lineTo(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置描边的颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"#0Af"</span>;</span><br><span class="line"><span class="comment">//描边绘制出图案</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 通过三角函数来绘制曲线(正玄/余弦)</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">30</span>,y = <span class="number">0</span>; x &lt; <span class="number">1000</span> ; x++)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">// 高度 * 波长 + 中心轴位置</span></span><br><span class="line">    y = <span class="number">50</span> * <span class="built_in">Math</span>.sin(x/<span class="number">25</span>) + <span class="number">100</span>;</span><br><span class="line">    ctx.lineTo(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置描边的颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line"><span class="comment">//描边绘制出图案</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>数学方程绘制图形Demo2</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_20.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">offsetX,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dig = <span class="built_in">Math</span>.PI / <span class="number">15</span> * n;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">30</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="built_in">Math</span>.sin(i * dig);</span><br><span class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.cos(i * dig);</span><br><span class="line">        ctx.lineTo(offsetX + x * <span class="number">80</span>,<span class="number">150</span> + y * <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//闭合路径</span></span><br><span class="line">    ctx.closePath();</span><br><span class="line">    <span class="comment">//设置样式并填充</span></span><br><span class="line">    ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    <span class="comment">//设置样式并描边</span></span><br><span class="line">    ctx.strokeStyle = <span class="string">"#666"</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">14</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">7</span>,<span class="number">26</span>];</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">n,i</span>)</span>&#123;</span><br><span class="line">    draw((i + <span class="number">1</span>) * <span class="number">160</span>,n);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制相切曲线Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_21.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x0 = <span class="number">100</span>,y0 = <span class="number">100</span>,</span><br><span class="line">    x1 = <span class="number">500</span>,y1 = <span class="number">100</span>,</span><br><span class="line">    x2 = <span class="number">450</span>,y2 = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x0,y0);</span><br><span class="line">ctx.arcTo(x1,y1,x2,y2,<span class="number">30</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x0,y0);</span><br><span class="line">ctx.lineTo(x1,y1);</span><br><span class="line">ctx.lineTo(x2,y2);</span><br><span class="line"></span><br><span class="line">ctx.fillText(<span class="string">'x0,y0'</span>,x0,y0+<span class="number">10</span>)</span><br><span class="line">ctx.fillText(<span class="string">'x1,y1'</span>,x1+<span class="number">10</span>,y1+<span class="number">10</span>)</span><br><span class="line">ctx.fillText(<span class="string">'x2,y2'</span>,x2+<span class="number">10</span>,y2)</span><br><span class="line">ctx.strokeStyle = <span class="string">"#333"</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制圆角矩形Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_22.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawRoundedRect</span>(<span class="params">x,y,w,h,r,isFill,isStrokeRect</span>)</span>&#123;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo( x + r , y );</span><br><span class="line">    ctx.arcTo(  x + w , y , x + w , y + h , r);</span><br><span class="line">    ctx.arcTo(  x + w , y + h , x , y + h , r);</span><br><span class="line">    ctx.arcTo(  x , y + h , x , y , r);</span><br><span class="line">    ctx.arcTo(  x , y ,  x + r , y , r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isFill) &#123;</span><br><span class="line">        ctx.fillStyle = getRandomColor();</span><br><span class="line">        ctx.fill();</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ctx.strokeStyle = getRandomColor();</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(isStrokeRect)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo( x + r , y );</span><br><span class="line">        ctx.lineTo(x + w  , y );</span><br><span class="line">        ctx.lineTo(x + w  , y + h);</span><br><span class="line">        ctx.lineTo(x  , y + h);</span><br><span class="line">        ctx.lineTo(x  , y);</span><br><span class="line">        ctx.lineTo(x + r  , y);</span><br><span class="line"></span><br><span class="line">        ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">        ctx.fillText(<span class="string">"x0,y0"</span>,x + r,y);</span><br><span class="line">        ctx.fillText(<span class="string">"x1,y1"</span>,x + w,y);</span><br><span class="line">        ctx.fillText(<span class="string">"x2,y2"</span>,x + w,y + h + <span class="number">10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x3,y3"</span>,x<span class="number">-10</span>,y + h + <span class="number">10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x4,y4"</span>,x - <span class="number">10</span>,y<span class="number">-10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x5,y5"</span>,x + r,y + <span class="number">10</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawRoundedRect(<span class="number">50</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">drawRoundedRect(<span class="number">200</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">drawRoundedRect(<span class="number">350</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">10</span>,<span class="literal">true</span>);</span><br><span class="line">drawRoundedRect(<span class="number">500</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">drawRoundedRect(<span class="number">650</span>,<span class="number">40</span>,<span class="number">120</span>,<span class="number">100</span>,<span class="number">30</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制弧线、扇形、圆弧和圆Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_16.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制弧线</span></span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制扇形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"#f09"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充扇形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3.2</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">3.8</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">"#195"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制半圆</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"#666"</span>;</span><br><span class="line">ctx.arc(<span class="number">450</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.arc(<span class="number">570</span>,<span class="number">80</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制五环图案Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_15.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)</span><br><span class="line">&#123;   ctx.beginPath();</span><br><span class="line">    <span class="keyword">if</span>( i &gt;=<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.arc(x + (i * <span class="number">80</span>) <span class="number">-200</span>,y + <span class="number">60</span>,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ctx.arc(x + (i * <span class="number">80</span>),y,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.strokeStyle = getRandomColor();</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制等分的圆Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_18.png?raw=true" height="140px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//描边</span></span><br><span class="line">drawCircle(<span class="number">100</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">200</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">3</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">300</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">4</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">400</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">20</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">500</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">600</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">200</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充</span></span><br><span class="line">drawCircle(<span class="number">100</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">2</span>);</span><br><span class="line">drawCircle(<span class="number">200</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">3</span>);</span><br><span class="line">drawCircle(<span class="number">300</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">4</span>);</span><br><span class="line">drawCircle(<span class="number">400</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">20</span>);</span><br><span class="line">drawCircle(<span class="number">500</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">100</span>);</span><br><span class="line">drawCircle(<span class="number">600</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params">x,y,r,n,isStroke</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span>  i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//计算开始和结束的角度</span></span><br><span class="line">        <span class="keyword">var</span> angle = <span class="number">2</span> * <span class="built_in">Math</span>.PI / n;</span><br><span class="line">        <span class="keyword">var</span> startAngle  = angle * i;</span><br><span class="line">        <span class="keyword">var</span> endAngle    = angle * (i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始路径</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置绘制圆的起点</span></span><br><span class="line">        ctx.moveTo(x,y);</span><br><span class="line">        ctx.arc(x,y,r,startAngle,endAngle,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isStroke)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ctx.strokeStyle = getRandomColor();</span></span><br><span class="line">            ctx.stroke();</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ctx.fillStyle = getRandomColor();</span><br><span class="line">            ctx.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取填充的颜色/随机</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制饼状图综合示例</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_19.png?raw=true" height="140px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PieChart</span> (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx        = ctx || <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">this</span>.x          = <span class="keyword">this</span>.ctx.canvas.width/<span class="number">2</span> - <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">this</span>.y          = <span class="keyword">this</span>.ctx.canvas.height/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.r          = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">this</span>.outLine    = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>.dataList   = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PieChart.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>:PieChart,</span><br><span class="line">    init:function(dataList)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataList = dataList || [&#123;<span class="attr">title</span>:<span class="string">"默认"</span>,<span class="attr">value</span>:<span class="number">100</span>&#125;];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据数据来计算并转换弧度</span></span><br><span class="line">        <span class="keyword">this</span>.transformAngle();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制饼状图</span></span><br><span class="line">        <span class="keyword">this</span>.drawPie();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawPie:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> startAngle = <span class="number">0</span>,endAngle;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">this</span>.dataList.length ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> item = <span class="keyword">this</span>.dataList[i];</span><br><span class="line">            endAngle = startAngle + item.angle;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</span><br><span class="line">            <span class="keyword">this</span>.ctx.arc(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y,<span class="keyword">this</span>.r,startAngle,endAngle,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">var</span> color= <span class="keyword">this</span>.ctx.strokeStyle= <span class="keyword">this</span>.ctx.fillStyle= <span class="keyword">this</span>.getRandomColor();</span><br><span class="line">            <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">            <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制标题</span></span><br><span class="line">            <span class="keyword">this</span>.drawPieTitle(startAngle,item.angle,color,item.title)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制图例</span></span><br><span class="line">            <span class="keyword">this</span>.drawPieLegend(i,item.title);</span><br><span class="line">            startAngle = endAngle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    drawPieTitle:<span class="function"><span class="keyword">function</span>(<span class="params">startAngle,angle,color,title</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> edge    = <span class="keyword">this</span>.r + <span class="keyword">this</span>.outLine;</span><br><span class="line">        <span class="keyword">var</span> edgeX   = <span class="built_in">Math</span>.cos(startAngle + angle / <span class="number">2</span>) * edge; <span class="comment">/*x轴方向的直角边*/</span></span><br><span class="line">        <span class="keyword">var</span> edgeY   = <span class="built_in">Math</span>.sin(startAngle + angle / <span class="number">2</span>) * edge; <span class="comment">/*y轴方向的直角边*/</span></span><br><span class="line">        <span class="keyword">var</span> outX    = <span class="keyword">this</span>.x + edgeX;                          <span class="comment">/*计算延伸出去的点坐标*/</span></span><br><span class="line">        <span class="keyword">var</span> outY    = <span class="keyword">this</span>.y + edgeY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//画出坐标点</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(outX,outY);</span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = color;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制文字下划线</span></span><br><span class="line">        <span class="keyword">var</span> textWidth   = <span class="keyword">this</span>.ctx.measureText(title).width + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">var</span> lineX       = outX &gt; <span class="keyword">this</span>.x ? outX + textWidth : outX - textWidth;</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(lineX,outY);</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制文字</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.font           = <span class="string">"15px KaiTi"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textAlign      = outX &gt; <span class="keyword">this</span>.x ? <span class="string">"left"</span> : <span class="string">"right"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textBaseline   = <span class="string">"bottom"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillText(title,outX,outY);</span><br><span class="line">    &#125;,</span><br><span class="line">    drawPieLegend:<span class="function"><span class="keyword">function</span>(<span class="params">index,title</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在计算的时候最好的能够反着计算</span></span><br><span class="line">        <span class="keyword">var</span> space = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">var</span> rectW = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">var</span> rectH = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">var</span> rectX = <span class="keyword">this</span>.x + <span class="keyword">this</span>.r + <span class="number">80</span>;</span><br><span class="line">        <span class="keyword">var</span> rectY = <span class="keyword">this</span>.y + (index * <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//绘制矩形</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.fillRect(rectX,rectY,rectW,rectH);</span><br><span class="line">        <span class="comment">// this.ctx.beginPath();</span></span><br><span class="line">        <span class="comment">// 绘制文字</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.textAlign      = <span class="string">'left'</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textBaseline   = <span class="string">'top'</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillStyle      = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillText(title,rectX + rectW + space,rectY);</span><br><span class="line">    &#125;,</span><br><span class="line">    getRandomColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'rgb('</span>+r+<span class="string">','</span>+g+<span class="string">','</span>+b+<span class="string">')'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    transformAngle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self    = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> total   = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.dataList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">            total += item.value;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.dataList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">            self.dataList[i].angle = <span class="number">2</span> * <span class="built_in">Math</span>.PI * item.value/total;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>  data = [&#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">title</span>:<span class="string">"UI"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">26</span>,<span class="attr">title</span>:<span class="string">"java"</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">title</span>:<span class="string">"iOS"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">63</span>,<span class="attr">title</span>:<span class="string">"H5"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">25</span>,<span class="attr">title</span>:<span class="string">"Node"</span>&#125;]</span><br><span class="line"><span class="keyword">var</span>  pie  = <span class="keyword">new</span> PieChart().init(data);</span><br></pre></td></tr></table></figure><h3 id="Canvas中的贝塞尔曲线"><a href="#Canvas中的贝塞尔曲线" class="headerlink" title="Canvas中的贝塞尔曲线"></a>Canvas中的贝塞尔曲线</h3><p><a href="">贝塞尔曲线</a>(<code>Bézier curve</code>)，最初由法国物理学家和数学家<code>Paul de Casteljau</code>发明，1962年被法国工程师皮埃尔·贝塞尔（<code>Pierre Bézier</code>）广泛发表并运用在汽车的车身设计上，现在多应用在计算机图形系统中。</p><p><a href="">贝塞尔曲线</a>分为平方(<code>quadratic</code>)贝塞尔曲线和立方(<code>cubic</code>)贝塞尔曲线两其中平方贝塞尔曲线是一种二次曲线，由两个锚点和一个控制点总共三个点来定义，而立方贝塞尔曲线是一种三次曲线，由两个锚点和两个控制点共四个点来定义。它们的区别在于立方贝塞尔曲线能够在两个方向上弯曲。</p><p><a href="">Canvas</a>支持两种贝塞尔曲线，分别由<code>quadraticCurveTo</code>和<code>bezierCurveTo</code>方法来实现。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>二次贝塞尔曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.quadraticCurveTo(x0,y0,x1,y1);;</code><br><strong><code>作用</code></strong> 通过使用表示二次贝塞尔曲线的指定控制点，向当前路径添加一个点绘制曲线。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y0 控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x1 结束点(锚点)的X轴坐标</span></li><li><span style="font-family:Georgia">y1 结束点(锚点)的Y轴坐标</span></li></ul><p><strong><code>说明</code></strong> 二次贝塞尔曲线需要两个点。分别是用于二次贝塞尔计算中的控制点和曲线的结束点。<br><strong><code>注意</code></strong> 曲线还需要一个开始点(路径最后的点)如果路径不存在，那么可以使用<code>moveTo()</code>方法来定义。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>三次贝塞尔曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.bezierCurveTo(x0,y0,x1,y1,x2,y2);;</code><br><strong><code>作用</code></strong> 通过使用表示二次贝塞尔曲线的指定控制点，向当前路径添加一个点绘制曲线。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 第一个控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y0 第一个控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x1 第二个控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y1 第二个控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x2 结束点(锚点)的X轴坐标</span></li><li><span style="font-family:Georgia">y2 结束点(锚点)的Y轴坐标</span></li></ul><p><strong><code>说明</code></strong> 三次贝塞尔曲线需要三个点，两个控制点和一个锚点。<br><strong><code>注意</code></strong> 曲线还需要一个开始点(路径最后的点)如果路径不存在，那么可以使用<code>moveTo()</code>方法来定义。</p><h3 id="Canvas贝塞尔曲线绘制示例"><a href="#Canvas贝塞尔曲线绘制示例" class="headerlink" title="Canvas贝塞尔曲线绘制示例"></a>Canvas贝塞尔曲线绘制示例</h3><p><div class="titleX"><strong>二次贝塞尔曲线示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_24.png?raw=true" height="150px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置曲线的起点(当前路径的最后点没有则通过moveTo设置)</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.quadraticCurveTo(<span class="number">100</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制文字</span></span><br><span class="line"><span class="keyword">var</span> margin = <span class="number">15</span>;</span><br><span class="line">ctx.fillText(<span class="string">"(100,100)"</span>,<span class="number">100</span> - margin,<span class="number">100</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"(100,300)"</span>,<span class="number">100</span> - margin,<span class="number">300</span> + margin);</span><br><span class="line">ctx.fillText(<span class="string">"(500,200)"</span>,<span class="number">500</span> - margin,<span class="number">200</span> + margin);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制点</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">300</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">500</span>,<span class="number">200</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>三次贝塞尔曲线示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_25.png?raw=true" height="200px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置曲线的起点(当前路径的最后点没有则通过moveTo设置)</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.bezierCurveTo(<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">50</span>,<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制文字</span></span><br><span class="line"><span class="keyword">var</span> margin = <span class="number">15</span>;</span><br><span class="line">ctx.fillText(<span class="string">"起点 (100,100)"</span>,<span class="number">100</span> - margin,<span class="number">100</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"控制点 (100,300)"</span>,<span class="number">100</span> - margin,<span class="number">300</span> + margin);</span><br><span class="line">ctx.fillText(<span class="string">"(300,50)"</span>,<span class="number">300</span> - margin,<span class="number">50</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"(500,200)"</span>,<span class="number">500</span> - margin,<span class="number">200</span> + margin);</span><br><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制点</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">300</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">500</span>,<span class="number">200</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>贝塞尔曲线复杂图形示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_26.png?raw=true" height="150px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制贝塞尔曲线</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBezierCurve</span>(<span class="params">dx,dy,n</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">var</span> x0,x1,x3,y1,y2,y3;</span><br><span class="line">    <span class="keyword">var</span> dig = <span class="built_in">Math</span>.PI / <span class="number">15</span> * n;</span><br><span class="line"></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">30</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span>  X = <span class="built_in">Math</span>.sin(i * dig);</span><br><span class="line">        <span class="keyword">var</span>  Y = <span class="built_in">Math</span>.cos(i * dig);</span><br><span class="line">        x0 = dx + X * s;</span><br><span class="line">        x1 = dx + X * s + <span class="number">100</span>;</span><br><span class="line">        x2 = dx + X * s;</span><br><span class="line"></span><br><span class="line">        y0 = dy + Y * s - <span class="number">100</span>;</span><br><span class="line">        y1 = dy + Y * s;</span><br><span class="line">        y2 = dy + Y * s;</span><br><span class="line">        ctx.bezierCurveTo(x0 , y0 , x1 , y1 , x2 , y2);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.closePath();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制和填充</span></span><br><span class="line">    ctx.fillStyle   = <span class="string">"#eee"</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawBezierCurve(<span class="number">150</span>,<span class="number">250</span>,<span class="number">13</span>);</span><br><span class="line">drawBezierCurve(<span class="number">480</span>,<span class="number">250</span>,<span class="number">24</span>);</span><br><span class="line">drawBezierCurve(<span class="number">820</span>,<span class="number">250</span>,<span class="number">31</span>);</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas中的弧度、曲线、圆弧以及文字的绘制方法以及径向渐变等内容，并提供饼状图等综合案例。&lt;/div&gt;

&lt;h3 id=&quot;Canvas中的弧度、曲线和圆弧&quot;&gt;&lt;a href=&quot;#Canvas中的弧度、曲线和圆弧&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [11]-Canvas绘图(路径)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/02/javaScript%E7%B3%BB%E5%88%97%20%5B11%5D-Canvas%E7%BB%98%E5%9B%BE(%E8%B7%AF%E5%BE%84)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/02/javaScript系列 [11]-Canvas绘图(路径)/</id>
    <published>2019-01-02T00:20:14.000Z</published>
    <updated>2019-02-19T02:45:45.484Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas中的路径、矩形以及描边和填充等绘制方法，非零正交原则以及线性渐变等内容，并提供折线图和柱状图等综合案例。</div><h3 id="Canvas路径和状态"><a href="#Canvas路径和状态" class="headerlink" title="Canvas路径和状态"></a>Canvas路径和状态</h3><div class="titleX"><strong>核心API介绍</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置绘制的起点</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.moveTo(x, y);</code><br><strong><code>参数</code></strong> 第一个参数和第二个参数都是相对于<a href="">Canvas</a>画布左上角的X轴和Y轴坐标。<br><strong><code>作用</code></strong> 设置<a href="">Canvas</a>上下文绘制路径的起点，相当于设置画笔从哪个位置开始移动。<br><strong><code>注意</code></strong> 使用<a href="">Canvas</a>上下文绘制路径前必须先设置起点，否则绘制无效。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置绘制目标点</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.lineTo(x, y);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是相对于<a href="">Canvas</a>画布左上角的X轴和Y轴坐标。<br><strong><code>作用</code></strong>  设置<a href="">Canvas</a>上下文绘制路径的目标点，相当于设置画笔移动的目标位置。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置描边</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.stroke();</code><br><strong><code>作用</code></strong>  根据路径来绘制(描边)，可以在绘制前通过<code>strokeStyle</code>来设置描边样式。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置填充</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.fill();</code><br><strong><code>作用</code></strong>  对闭合路径的内容进行绘制(填充),可以通过<code>fillStyle</code>来设置样式，默认黑色。<br><strong><code>参数</code></strong> <code>fill</code>方法有两个可选参数(<code>nonzero | evenodd</code>) ，控制填充时使用环绕原则(默认)或奇偶原则。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>矩形路径</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.rect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>注意</code></strong>  <code>rect</code>方法只是规划了矩形的路径，并没有填充和描边，因此还需要搭配<code>stroke</code>或<code>fill</code>使用。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>描边矩形</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.strokeRect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法绘制完矩形路径后立即进行<code>stroke</code>描边绘制，等价于<code>rect + stroke</code>组合。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>填充矩形</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.fillRect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法绘制完矩形路径后立即进行<code>fill</code>填充绘制，等价于<code>rect + fill</code>方法的组合。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>矩形擦除</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.clearRect(x, y, width, hegiht);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法用于擦除指定矩形内绘制的内容，需注意如果重置画布宽度，内容将自动重绘。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>开始和闭合路径</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.beginPath();</code>和<code>ctx.closePath();</code><br><strong><code>作用</code></strong>  开始路径的作用是将不同的绘制路径进行隔离，闭合路径会自动连接最开始和最后的点。<br><strong><code>注意</code></strong>  执行开始路径方法时表示将要重新绘制一个新的路径，可以分开设置和管理多个路径的样式。</p><p><div class="titleX"><strong>路径的核心属性介绍</strong></div><br><span class="prop"><strong>lineCap</strong></span> 设置或返回线条末端线帽样式，可选值有<code>butt默认</code>|<code>round圆形</code>|<code>square正方形</code><br><span class="prop"><strong>lineJoin</strong></span>设置或返回所创建边角的类型，可选值有<code>miter默认</code>|<code>round圆角</code>|<code>bevel斜角</code><br><span class="prop"><strong>lineWidth</strong></span>设置或返回当前线条的宽度，以像素计，默认值为1。<br><span class="prop"><strong>miterLimit</strong></span>设置或返回最大斜接长度。<br><span class="prop" style="background:#195;color:#fff"><strong>fillStyle</strong></span>设置或返回用于填充绘画的颜色、渐变或模式。<br><span class="prop" style="background:#195;color:#fff"><strong>strokeStyle</strong></span>设置或返回用于笔触(描边)的颜色、渐变或模式。<br><span class="prop"><strong>shadowColor</strong></span>设置或返回用于阴影的颜色，和<code>shadowBlur</code>一起使用。<br><span class="prop"><strong>shadowBlur</strong></span>设置或返回用于阴影的模糊级别，和<code>shadowColor</code>一起使用。<br><span class="prop"><strong>shadowOffsetX</strong></span>设置或返回阴影距形状的水平距离，0指示阴影位于形状的正下方。<br><span class="prop"><strong>shadowOffsetY</strong></span>设置或返回阴影距形状的垂直距离，0指示阴影位于形状的正下方。</p><h3 id="Canvas路径绘制示例"><a href="#Canvas路径绘制示例" class="headerlink" title="Canvas路径绘制示例"></a>Canvas路径绘制示例</h3><p><div class="titleX"><strong>路径绘制Demo</strong></div><br><strong><code>Demo-1 绘制交叉和平行线</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_04.png?raw=true" width="500px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 绘制一条直线</span></span><br><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">20.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">20.5</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"#195"</span>;   <span class="comment">//设置描边样式</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 绘制两条平行线</span></span><br><span class="line">ctx.moveTo(<span class="number">20.5</span>,<span class="number">40</span>);        <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">20.5</span>,<span class="number">120</span>);       <span class="comment">//设置目标点</span></span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">40.5</span>,<span class="number">40</span>);        <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">40.5</span>,<span class="number">120</span>);       <span class="comment">//设置目标点</span></span><br><span class="line">ctx.stroke();               <span class="comment">//绘制路径(描边)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//03 绘制两条交叉线条</span></span><br><span class="line">ctx.moveTo(<span class="number">60</span>,<span class="number">60</span>);          <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">100</span>);        <span class="comment">//设置目标点</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">60</span>);         <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">60</span>,<span class="number">100</span>);         <span class="comment">//设置目标点</span></span><br><span class="line">ctx.stroke();               <span class="comment">//绘制路径(描边)</span></span><br></pre></td></tr></table></figure><p><strong><code>Demo-2 开始路径和闭合路径</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_05.png?raw=true" width="400px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 绘制两条交叉的线(演示beginPath方法的使用)</span></span><br><span class="line"><span class="comment">//(1) 设置并绘制第一条线</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2) 设置并绘制第二条线</span></span><br><span class="line">ctx.beginPath();         <span class="comment">//重新开启路径</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">//设置线条和描边的样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 绘制两条相接的线(演示closePath方法的使用)</span></span><br><span class="line">ctx.beginPath();        <span class="comment">//重新开启路径</span></span><br><span class="line">ctx.moveTo(<span class="number">180.5</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">180.5</span>,<span class="number">180.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">260</span>,<span class="number">180.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置关闭路径(自动连接两个点闭合以构成封闭区域)</span></span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置图形填充和样式</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#eee"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><strong><code>Demo-3 绘制虚线的N种方式</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_06.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 绘制虚线的第一种方式(通过fillRect矩形绘制API)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一个参数：矩形的起点X</span></span><br><span class="line">    <span class="comment">//第二个参数：矩形的起点Y</span></span><br><span class="line">    <span class="comment">//第三个参数：矩形的宽度</span></span><br><span class="line">    <span class="comment">//第四个参数：矩形的高度</span></span><br><span class="line">    ctx.fillRect((i *<span class="number">2</span>),<span class="number">30</span>,<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line">    ctx.fillRect((i *<span class="number">2</span>),<span class="number">70</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    ctx.fillRect((i *<span class="number">5</span>),<span class="number">100</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 绘制虚线的第二种方式(通过路径和setLineDash绘制API)</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">130.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">130.5</span>);</span><br><span class="line">ctx.setLineDash([<span class="number">5</span>]);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启路径绘制另一条虚线</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">160.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">160.5</span>);</span><br><span class="line"><span class="comment">//参数说明[第一段的长度、第二段的长度、第三段的长度 * 重复]</span></span><br><span class="line">ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"><span class="comment">//获取虚线的排列方式(不重复那段的排列方式)</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.getLineDash()); <span class="comment">//[5, 10, 15, 5, 10, 15]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启路径绘制另一条虚线(偏移量参照)</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">180.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">180.5</span>);</span><br><span class="line"><span class="comment">//设置虚线的偏移量</span></span><br><span class="line">ctx.lineDashOffset = <span class="number">-30</span>;</span><br><span class="line">ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></p><p><strong><code>Demo-4 绘制实心三角形和矩形(四边形)</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_07.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//001 使用路径的方式绘制三角(边)形</span></span><br><span class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">80</span>,<span class="number">100</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line"><span class="comment">// ctx.lineTo(20,20);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(填充)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#195"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.stroke();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 使用路径的方式绘制四角(边)形</span></span><br><span class="line"><span class="comment">//备注：如果是填充的话，那么只需要四个点的坐标即可确定</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">150</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">350</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">350</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">// ctx.closePath();</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.strokeStyle = "red";</span></span><br><span class="line"><span class="comment">// ctx.stroke();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(填充)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure></p><p><strong><code>Demo-5 绘制矩形API使用示例</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_08.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制矩形API介绍</span></span><br><span class="line"><span class="comment">//001 使用rect + stroke|fill 方法绘制矩形(非独立路径)</span></span><br><span class="line"><span class="comment">//第一个参数：矩形左上角X</span></span><br><span class="line"><span class="comment">//第二个参数：矩形左上角Y</span></span><br><span class="line"><span class="comment">//第三个参数：矩形的宽度W</span></span><br><span class="line"><span class="comment">//第四个参数：矩形的高度H</span></span><br><span class="line">ctx.rect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.stroke();                   <span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.fill();                  //绘制(填充)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 使用fillRect绘制(独立路径)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"green"</span>;        <span class="comment">//设置填充颜色</span></span><br><span class="line">ctx.fillRect(<span class="number">20</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 使用strokeRect绘制(独立路径)</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;        <span class="comment">//设置描边颜色</span></span><br><span class="line">ctx.strokeRect(<span class="number">20</span>,<span class="number">210</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 擦除画布</span></span><br><span class="line"><span class="comment">//ctx.clearRect(20,150,50,40);</span></span><br></pre></td></tr></table></figure></p><p><div class="titleX"><strong>柱状图综合案例</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_09.png?raw=true"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制柱状图的构造函数</span></span><br><span class="line"><span class="keyword">var</span> RectChart = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rects = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx    = ctx || <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置计算参数</span></span><br><span class="line">    <span class="keyword">this</span>.m      = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">this</span>.w      = <span class="keyword">this</span>.ctx.canvas.width;</span><br><span class="line">    <span class="keyword">this</span>.h      = <span class="keyword">this</span>.ctx.canvas.height;</span><br><span class="line">    <span class="keyword">this</span>.cols   = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.w / <span class="keyword">this</span>.m);</span><br><span class="line">    <span class="keyword">this</span>.rows   = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.h / <span class="keyword">this</span>.m);</span><br><span class="line">    <span class="keyword">this</span>.pointW = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">this</span>.x      = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">this</span>.y      = <span class="number">350</span>;</span><br><span class="line">    <span class="keyword">this</span>.rectW  = <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置原型对象</span></span><br><span class="line">RectChart.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>:RectChart,</span><br><span class="line">    init:function(rects)&#123;</span><br><span class="line">        <span class="keyword">this</span>.rects = rects;</span><br><span class="line">        <span class="keyword">this</span>.drawGrid();</span><br><span class="line">        <span class="keyword">this</span>.drawAxis();</span><br><span class="line">        <span class="keyword">this</span>.drawRect();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawGrid:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//002 设置路径</span></span><br><span class="line">        <span class="comment">//[1] 绘制所有的行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span> ; i &lt; <span class="keyword">this</span>.rows ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo(<span class="number">0</span>,(i * <span class="keyword">this</span>.m)+<span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.w,(i * <span class="keyword">this</span>.m)+<span class="number">0.5</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[2] 绘制所有的列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span> ; j &lt; <span class="keyword">this</span>.cols ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo((j * <span class="keyword">this</span>.m) + <span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.ctx.lineTo((j * <span class="keyword">this</span>.m) + <span class="number">0.5</span>,<span class="keyword">this</span>.h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//003 绘制网格</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#ddd"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawAxis:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//004 绘制坐标(横坐标和纵坐标 X-Y)</span></span><br><span class="line">        <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</span><br><span class="line">            y = <span class="keyword">this</span>.y,</span><br><span class="line">            xl = <span class="number">650</span>,</span><br><span class="line">            yl = <span class="number">300</span>,</span><br><span class="line">            m  = <span class="keyword">this</span>.m;</span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制X轴坐标</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(x,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl - m,y - m/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl - m,y - m/<span class="number">2</span> + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制Y轴坐标</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(x,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x,y - yl);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x - m/<span class="number">2</span>,y - yl + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x - m/<span class="number">2</span> + m,y - yl + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x,y - yl);</span><br><span class="line">        <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawRect:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//绘制坐标点的每条连接线</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>.rects.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">rect</span>)</span>&#123;</span><br><span class="line">            self.ctx.fillStyle = rect.color;</span><br><span class="line">            self.ctx.fillRect(rect.x,self.y - rect.h,self.rectW,rect.h);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备绘制数据</span></span><br><span class="line"><span class="keyword">var</span> rects = [</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">h</span>:<span class="number">50</span>,<span class="attr">color</span>:<span class="string">"red"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">200</span>,<span class="attr">h</span>:<span class="number">250</span>,<span class="attr">color</span>:<span class="string">"pink"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">300</span>,<span class="attr">h</span>:<span class="number">120</span>,<span class="attr">color</span>:<span class="string">"#195"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">400</span>,<span class="attr">h</span>:<span class="number">300</span>,<span class="attr">color</span>:<span class="string">"#47e"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">500</span>,<span class="attr">h</span>:<span class="number">20</span>,<span class="attr">color</span>:<span class="string">"#302"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用构造函数绘制</span></span><br><span class="line"><span class="keyword">new</span> RectChart().init(rects);</span><br></pre></td></tr></table></figure><h3 id="Non-Zero-Winding-Number-Rule-amp-Odd-even-Rule"><a href="#Non-Zero-Winding-Number-Rule-amp-Odd-even-Rule" class="headerlink" title="Non-Zero Winding Number Rule &amp; Odd-even Rule"></a>Non-Zero Winding Number Rule &amp; Odd-even Rule</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_10.png?raw=true" width="300px"></p><p><div class="titleX"><strong>非零正交(环绕)原则</strong></div><br>我们在使用绘图上下文对象的<code>fill</code>方法进行填充绘制的时候，如果传递参数(<code>nonzero</code>)或默认不传递任何参数，那么在填充的时候使用<strong>非零正交(环绕)原则</strong>。</p><blockquote><p><strong>非零正交(环绕)原则 · 规则</strong><br>❐ 在路径包围的区域中，向外发射一条和所有围绕它的边相交的射线<br>❐ 开启一个计数器，计数器的初始值为0<br>❐ 如果这个射线遇到顺时针围绕，那么计数器 +1<br>❐ 如果这个射线遇到顺时针围绕，那么计数器 -1<br>❐ 如果最终计数器的值非〇，则这块区域在路径内浏览器会对其进行填充。</p></blockquote><p>这里我们可以给出两个非零正交(环绕)原则应用的典型案例-绘制镂空矩形和圆环。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_11.png?raw=true" width="300px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制正方形(顺时针)</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制正方形(逆时针)</span></span><br><span class="line">ctx.moveTo(<span class="number">75</span>,<span class="number">75</span>);</span><br><span class="line">ctx.lineTo(<span class="number">75</span>,<span class="number">125</span>);</span><br><span class="line">ctx.lineTo(<span class="number">125</span>,<span class="number">125</span>);</span><br><span class="line">ctx.lineTo(<span class="number">125</span>,<span class="number">75</span>);</span><br><span class="line">ctx.lineTo(<span class="number">75</span>,<span class="number">75</span>);</span><br><span class="line"><span class="comment">//设置填充(非零正交原则)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#299"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆环</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">60</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">true</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">"rgba(250,50,79,1)"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>奇偶填充原则</strong></div><br>我们在使用绘图上下文对象的<code>fill</code>方法进行填充绘制的时候，如果传递参数(<code>evenodd</code>)那么在填充的时候使用<strong>奇偶填充原则</strong>。</p><blockquote><p><strong>奇偶填充原则 · 规则</strong><br>❐ 在路径包围的区域中，向外发射一条和所有围绕它的边相交的射线<br>❐ 查看相交线的个数，如果为奇数，就填充，如果是偶数，就不填充。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_12.png?raw=true" width="300px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> x = ctx.canvas.width / <span class="number">2</span>,</span><br><span class="line">    y = ctx.canvas.height/ <span class="number">2</span>,</span><br><span class="line">    r = <span class="number">50</span>,</span><br><span class="line">    start = - <span class="built_in">Math</span>.PI / <span class="number">2</span>,</span><br><span class="line">    end = <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">ctx.arc(x, y, r, start, end);</span><br><span class="line">ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x, y - r);</span><br><span class="line">ctx.lineTo(x - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.lineTo(x + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x - r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(x + <span class="number">150</span>, y, r, start, end);</span><br><span class="line">ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x + <span class="number">150</span>, y - r);</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> - r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> + r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">ctx.fill(<span class="string">'evenodd'</span>);</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas中的路径、矩形以及描边和填充等绘制方法，非零正交原则以及线性渐变等内容，并提供折线图和柱状图等综合案例。&lt;/div&gt;

&lt;h3 id=&quot;Canvas路径和状态&quot;&gt;&lt;a href=&quot;#Canvas路径和状态&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [10]-Canvas绘图(基础)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/javaScript%E7%B3%BB%E5%88%97%20%5B10%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%9F%BA%E7%A1%80)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/javaScript系列 [10]-Canvas绘图(基础)/</id>
    <published>2019-01-01T00:20:13.000Z</published>
    <updated>2019-01-18T06:21:06.420Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将对Canvas绘图技术进行简单介绍，主要包括Canvas标签、CanvasRenderingContext2D对象核心API的使用以及复杂图形的绘制等内容。</div><h3 id="Canvas简单介绍"><a href="#Canvas简单介绍" class="headerlink" title="Canvas简单介绍"></a>Canvas简单介绍</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_23.png?raw=true"></p><div class="titleX"><strong>基本信息</strong></div><p><a href="">Canvas</a> 是HTML5提供的一种新标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="">Canvas</a> 是一个<strong><code>矩形区域的画布</code></strong>，在画布上面我们可以通过<code>javaScript</code>控制每一个像素来绘制图形。</p><p><a href="">Canvas</a> 标签使用<code>javaScript</code>在网页上绘制图像，其本身不具备绘图功能。通过使用<code>canvas</code>并调用相关API，可用多种方式来绘制路径、矩形、圆形、字符以及图像等。</p><p class="tip"><strong>拓展</strong> 最早<a href="">Canvas</a>由<code>Apple</code>公司引入到WebKit内核，用于<code>Mac OSX</code>的Dashboard，后来又在<strong>Safari</strong>和<strong>Google Chrome</strong>中被实现。<a href="">Canvas</a>标签是<strong><code>WhatWG Web applications 1.0 规范</code></strong>的内容，也包含于HTML5中。<br></p><p class="titleX"><strong>应用的领域和趋势</strong></p><blockquote><p><span style="color:#000"><strong>① 炫酷的场景秀</strong></span>：用Canvas实现动态的广告效果能够非常融洽的跨平台运行。<br><span style="color:#000"><strong>② 数据的可视化</strong></span>：各种统计类的图表(趋势图、饼状图、折线图等)，已经有成熟的开源框架。<br><span style="color:#000"><strong>③ 游戏开发领域</strong></span>：Canvas是<code>HTML5</code>游戏开发首选，其在基于Web的图像方面比Flash更立体和精巧。</p><p><span style="color:#000"><strong>[1] Web图形编辑器</strong></span>：<code>Photoshop</code>图形编辑器将能够100%基于Web实现。<br><span style="color:#000"><strong>[2] 远程可视化控制</strong></span>：Canvas能更好的实现基于Web的数据传输以gous可视化控制界面。<br><span style="color:#000"><strong>[3] 各种类型模拟器</strong></span>：从视觉效果和核心功能等方面来说，模拟器可以完全由<code>JavaScript</code>来实现。</p></blockquote><p><strong>参考资料</strong>  <a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">W3school</a> 、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noopener">MDN_Canvas_API</a><br><a href="https://www.w3.org/TR/2015/REC-2dcontext-20151119/" target="_blank" rel="noopener">HTML Canvas 2D Context</a></p><div class="titleX"><strong>绘图准备和初体验</strong></div><p><a href="">Canvas</a> 标签默认拥有<code>300 * 150</code>的宽高，可以通过设置边框来查看。<br><a href="">Canvas</a> 标签支持鼠标右键·(复制图片)·以及(图片另存为)的操作，同图片一致。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_01.png?raw=true"></p><p><a href="">Canvas</a> 标签的参考坐标系如上图所示，其<code>Y轴</code>的方向区别于常见的数学坐标系。<br><a href="">Canvas</a> 标签的浏览器兼容很好(<code>IE9+</code>)，若浏览器不兼容建议设置标签内容友好提示。<br><a href="">Canvas</a> 标签本身并不能绘制图形只是画布，具体绘图工作主要有Canvas上下文对象完成。<br><a href="">Canvas</a> 标签上下文对象是<code>javaScript</code>操作Canvas的接口，常用类型是<code>CanvasRenderingContext2D</code>。<br><a href="">Canvas</a> 标签在设置画布宽度和高度的时候建议在标签中直接通过<code>width</code>和<code>height</code>属性节点来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"300px"</span>&gt;</span>当前浏览器不支持canvas，请升级浏览器<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//01 获取canvas画布</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="comment">//02 获取canvas上下文对象</span></span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">//03 设置路径</span></span><br><span class="line">    <span class="comment">//开启路径(可省略)</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="comment">//设置路径的起点</span></span><br><span class="line">    ctx.moveTo(<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//设置路径对应值</span></span><br><span class="line">    ctx.lineTo(<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//设置线条(描边)颜色</span></span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">    <span class="comment">//04 绘制线条(描边)</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>代码说明</strong> 上面的代码将会在canvas画布上绘制出一条<span style="color:red">红色</span>的线条。</p><p class="tip"><strong>注意</strong> 请不要使用<code>CSS</code>来控制<a href="">Canvas</a> 标签的宽高，这样会导致内部图片拉伸和变形，如果重新设置<a href="">Canvas</a> 标签的宽高属性将会擦除画布中已有的所有内容。</p><h3 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h3><div class="titleX"><strong><span style="color:#000">CanvasRenderingContext2D</span> 核心API介绍</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_02.png?raw=true"></p><p>这里列出<code>CanvasRenderingContext2D</code>原型对象上面几乎所有的核心成员供参考。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">canvas                      //当前的画布对象</span><br><span class="line">filter                      //设置模糊和灰度等过滤效果</span><br><span class="line">globalAlpha                 //设置透明度(0~1)</span><br><span class="line">shadowBlur                  //阴影的模糊级别</span><br><span class="line">shadowColor                 //阴影的颜色</span><br><span class="line">shadowOffsetX               //阴影距形状的水平距离</span><br><span class="line">shadowOffsetY               //阴影距形状的垂直距离</span><br><span class="line">fillStyle                   //设置矩形填充的样式(颜色)</span><br><span class="line">strokeStyle                 //设置描边样式</span><br><span class="line">lineCap                     //线条末端的类型   round butt(默认) square</span><br><span class="line">lineJoin                    //相交线的拐点类型 round miter(默认) bevel</span><br><span class="line">lineWidth                   //设置线条的宽度   </span><br><span class="line">miterLimit                  //最大斜接长度(两条线交汇处内角和外角之间的距离)</span><br><span class="line">lineDashOffset              //设置虚线偏移量</span><br><span class="line">font                        //设置字体的绘制参数(字号、字体、粗体等)</span><br><span class="line">textAlign                   //设置文字的水平对齐方式</span><br><span class="line">textBaseline                //设置文字基线(垂直对齐方式)</span><br><span class="line">globalCompositeOperation    //设置如何将一个源(新)图像绘制到目标(旧)图像上</span><br><span class="line">imageSmoothingEnabled       //设置图片是否平滑(非稳定)</span><br><span class="line">imageSmoothingQuality       //设置图像平滑度的属性(非稳定)</span><br><span class="line"></span><br><span class="line">moveTo()                    //设置路径(起点)</span><br><span class="line">lineTo()                    //设置路径</span><br><span class="line">beginPath()                 //开启路径</span><br><span class="line">closePath()                 //关闭路径</span><br><span class="line">setLineDash()               //设置虚线宽度数据</span><br><span class="line">getLineDash()               //获取虚线宽度集合</span><br><span class="line"></span><br><span class="line">rect()                      //绘制矩形</span><br><span class="line">fillRect()                  //矩形填充</span><br><span class="line">strokeRect()                //设置描边(矩形)</span><br><span class="line">clearRect()                 //擦除矩形区域内容</span><br><span class="line"></span><br><span class="line">stroke()                    //设置描边</span><br><span class="line">fill()                      //设置填充</span><br><span class="line">clip()                      //剪切指定形状和尺寸的区域</span><br><span class="line">arc()                       //绘制圆弧(圆)               </span><br><span class="line">arcTo()                     //绘制曲线</span><br><span class="line">ellipse()                   //添加椭圆路径(非稳定)</span><br><span class="line">bezierCurveTo()             //绘制贝塞尔曲线(3)</span><br><span class="line">quadraticCurveTo()          //绘制贝塞尔曲线(2)</span><br><span class="line">isPointInPath()             //检查某个点是否在指定的路径中</span><br><span class="line">isPointInStroke()           //检查某个点是否在指定(范围)</span><br><span class="line">createLinearGradient()      //创建线性渐变</span><br><span class="line">createRadialGradient()      //创建放射状/环形的渐变</span><br><span class="line"></span><br><span class="line">fillText()                  //矩形填充(绘制文字)</span><br><span class="line">strokeText()                //设置描边(文字绘制)</span><br><span class="line">measureText()               //获取并计算文本宽度</span><br><span class="line"></span><br><span class="line">drawImage()                 //绘制图片</span><br><span class="line">createImageData()           //创建新的ImageData对象</span><br><span class="line">getImageData()              //获取ImageData对象(矩形区域的像素数据)</span><br><span class="line">putImageData()              //从指定ImageData对象中把图像放到画布上面</span><br><span class="line">createPattern()             //在指定的方向上重复指定的元素</span><br><span class="line">drawFocusIfNeeded()         //如有必要则绘制焦点</span><br><span class="line"></span><br><span class="line">save()                      //保存状态</span><br><span class="line">scale()                     //设置缩放</span><br><span class="line">rotate()                    //设置旋转</span><br><span class="line">restore()                   //返回之前保存过的路径状态和属性</span><br><span class="line">translate()                 //平移(重新映射画布上的(0,0)位置)</span><br><span class="line">transform()                 //替换绘图的当前转换矩阵</span><br><span class="line">setTransform()              //将当前转换重置为单位矩阵,然后运行transform()</span><br><span class="line">resetTransform()            //使用单位矩阵重新设置当前变形(非稳定)</span><br></pre></td></tr></table></figure><p>画布的上下文<code>CanvasRenderingContext2D</code>对象为图形的绘制提供了丰富的接口，我们可以直接调用相关的API来绘制路径、圆弧和矩形等图案。此外，要得到目标图案其实有很多种方法<span style="color:#195"><strong>到达罗马的路途并非只有一条</strong></span>，而所有复杂的图案都离不开点、线和面，而且它们应该是<span style="color:red"><strong>渐进的</strong></span>。</p><div style="background:#eee;color:#34495e;width:120px;text-align:center"><strong>点-线-面</strong></div><p>这里先在页面中提供一个400 * 300的画布，获取画布的上下文对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br></pre></td></tr></table></figure><p><strong>矩形点和圆形点的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">5</span>);            <span class="comment">//矩形点</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">11.5</span>,<span class="number">40</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);   <span class="comment">//圆形点</span></span><br><span class="line">ctx.fill();                         <span class="comment">//设置填充</span></span><br></pre></td></tr></table></figure><p><strong>线条的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式(一) 通过绘制连续的矩形来绘制线条</span></span><br><span class="line"><span class="comment">//示例：(实线)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">80</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">40</span> + (i * <span class="number">1</span>),<span class="number">25</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：(虚线)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">20</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">40</span> + (i * <span class="number">4</span>),<span class="number">40</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式(二) 通过路径的方式来绘制线条</span></span><br><span class="line"><span class="comment">//示例：(色度稀释的线条)</span></span><br><span class="line">ctx.moveTo(<span class="number">40</span>,<span class="number">60</span>);</span><br><span class="line">ctx.lineTo(<span class="number">320</span>,<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：(色度正常的线条)</span></span><br><span class="line">ctx.moveTo(<span class="number">40</span>,<span class="number">70.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">320</span>,<span class="number">70.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置描边</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></p><p><strong>面(矩形)的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式(一) 以“矩形点” + 循环的方式来绘制矩形</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">40</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">20</span> + (i * <span class="number">3</span>),<span class="number">100</span>,<span class="number">3</span>,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式(二) 直接绘制矩形</span></span><br><span class="line">ctx.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.fillRect(<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><p>这里贴出上面代码运行的结果图。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_03.png?raw=true" width="500px"></p><p class="tip"><strong>备注</strong> 在使用canvas上下文绘制线条的时候，我们会发现线条最终的颜色看上去并不是黑色的感觉比较淡，此外线条的宽度看上去也并不是<code>1px</code>而是<code>2px</code>。其实，主要原因是在canvas在进行绘制的时候，对齐的点是线的中心位置，因此就会把线分成上下两个0.5px，在进行显示的时候会补齐，因此其色度自然也是不饱和的。在绘制的时候，可以考虑给绘制坐标设置<code>0.5px</code>的偏移量来解决。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将对Canvas绘图技术进行简单介绍，主要包括Canvas标签、CanvasRenderingContext2D对象核心API的使用以及复杂图形的绘制等内容。&lt;/div&gt;

&lt;h3 id=&quot;Canvas简单介绍&quot;&gt;&lt;a href=&quot;#Canv
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>网络编程系列 FormData</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20FormData/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/网络编程系列 FormData/</id>
    <published>2018-12-31T16:03:00.000Z</published>
    <updated>2019-01-08T08:00:27.202Z</updated>
    
    <content type="html"><![CDATA[<p></p><p class="titleX"><strong>FormData 简单介绍</strong></p><a href="">FormData</a>是<code>Ajax 2.0</code>-<a href="https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html" target="_blank" rel="noopener">XMLHttpRequest Level 2</a> 提供的一个接口对象，可以使用该对象来模拟和处理表单并方便的进行<strong>文件上传</strong>操作。<p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(FormData)</span><br><span class="line">ƒ FormData()</span><br><span class="line">    <span class="built_in">arguments</span>: <span class="literal">null</span></span><br><span class="line">    caller: <span class="literal">null</span></span><br><span class="line">    length: <span class="number">0</span></span><br><span class="line">    name: <span class="string">"FormData"</span></span><br><span class="line">    prototype: FormData</span><br><span class="line">        append: ƒ append()</span><br><span class="line">        <span class="keyword">delete</span>: ƒ <span class="keyword">delete</span>()</span><br><span class="line">        entries: ƒ entries()</span><br><span class="line">        forEach: ƒ forEach()</span><br><span class="line">        get: ƒ ()</span><br><span class="line">        getAll: ƒ getAll()</span><br><span class="line">        has: ƒ has()</span><br><span class="line">        keys: ƒ keys()</span><br><span class="line">        set: ƒ ()</span><br><span class="line">        values: ƒ values()</span><br><span class="line">        <span class="keyword">constructor</span>: ƒ FormData()</span><br><span class="line">        Symbol(Symbol.iterator): ƒ entries()</span><br><span class="line">        Symbol(Symbol.toStringTag): "FormData"</span><br><span class="line">        __proto__: Object</span><br><span class="line">    __proto__: ƒ ()</span><br><span class="line">    [[Scopes]]: Scopes[0]</span><br></pre></td></tr></table></figure><p>通过打印并查看formData的结构，可以发现该接口对象本身非常简单。在<a href="">FormData</a>构造函数原型对象上只有<code>append</code>、<code>forEach</code>、<code>keys</code>等少数方法。</p><div class="titleX"><strong>FormData的主要用处</strong></div><blockquote><p>❐ 网络请求中模拟和处理表单数据<br>❐ 网络请求中用来异步的上传文件</p></blockquote><div class="titleX"><strong>FormData实例的创建</strong></div><p><span style="color:#888">◆</span> <strong><code>new FormData (form? : HTMLFormElement)</code></strong></p><p>在使用FormData构造函数创建实例对象的时候，可以传递一个HTML表单元素，该表单元素允许是任何形式的表单控件，包括文件输入框、复选框等。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"formTest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"wendingding"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">value</span>=<span class="string">"123456789"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//列出创建formData实例对象的几种方式</span></span><br><span class="line"><span class="comment">//001 通过构造函数创建不传递任务参数</span></span><br><span class="line"><span class="keyword">var</span> formData1 = <span class="keyword">new</span> FormData();   <span class="comment">//空的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过调用对象的方法来设置数据(模拟表单)</span></span><br><span class="line"><span class="comment">//设置数据</span></span><br><span class="line">formData1.set(<span class="string">"name"</span>,<span class="string">"文顶顶"</span>);</span><br><span class="line">formData1.set(<span class="string">"email"</span>,<span class="string">"wendingding_ios@126.com"</span>);</span><br><span class="line">formData1.set(<span class="string">"friends"</span>,<span class="string">"熊大"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置数据(追加)</span></span><br><span class="line">formData1.append(<span class="string">"friends"</span>,<span class="string">"光头强"</span>);</span><br><span class="line">formData1.append(<span class="string">"friends"</span>,<span class="string">"萝卜头"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看实例数据</span></span><br><span class="line">formData1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 获取表单标签传递给FormData构造函数</span></span><br><span class="line"><span class="keyword">var</span> formData2 = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms.namedItem(<span class="string">"formTest"</span>))</span><br><span class="line">formData2.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> 表单标签必须要设置name属性节点才能获取其数据</div><p><strong>说明</strong> 在上面的示例代码中介绍了两种创建(获取)formData实例对象的方式，可以<span style="color:#f33">先创建一个空的实例对象也可以直接通过页面中的表单标签来进行初始化处理</span>。</p><p>当formData数据装填好之后，可以直接通过ajax方法提交到服务器端，下面给出上面代码的执行结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name 文顶顶</span><br><span class="line">email wendingding_ios@126.com</span><br><span class="line">friends 熊大</span><br><span class="line">friends 光头强</span><br><span class="line">friends 萝卜头</span><br><span class="line">----------------------------------</span><br><span class="line">user wendingding</span><br><span class="line">pass 123456789</span><br></pre></td></tr></table></figure><div class="titleX"><strong>FormData的主要方法</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/formData.png?raw=true"></p><p>如上图所示，FormData构造函数的原型对象上面定义了一堆方法。这些方法使用方式都很简单，接下来我们通过代码的方式简单介绍他们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 创建空的formData实例对象</span></span><br><span class="line">   <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//02 设置数据(添加)</span></span><br><span class="line">   data.set(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">   data.set(<span class="string">"name"</span>,<span class="string">"LiuY"</span>);</span><br><span class="line">   data.set(<span class="string">"type"</span>,<span class="string">"法师"</span>);</span><br><span class="line">   data.set(<span class="string">"address"</span>,<span class="string">"泉水中心"</span>);</span><br><span class="line">   <span class="comment">//03 设置数据(修改和删除)</span></span><br><span class="line">   data.set(<span class="string">"name"</span>,<span class="string">"MiTaoer"</span>);</span><br><span class="line">   data.delete(<span class="string">"address"</span>);</span><br><span class="line">   <span class="comment">//04 设置数据(追加)</span></span><br><span class="line">   data.append(<span class="string">"type"</span>,<span class="string">"战士"</span>);</span><br><span class="line">   data.append(<span class="string">"type"</span>,<span class="string">"辅助"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//05 读取数据(指定key-one)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.get(<span class="string">"name"</span>));          <span class="comment">//MiTaoer</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.get(<span class="string">"type"</span>));          <span class="comment">//法师</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//06 读取数据(指定key-All)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.getAll(<span class="string">"type"</span>));       <span class="comment">//["法师", "战士", "辅助"]</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//07 检查是否拥有指定的key</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.has(<span class="string">"age"</span>));           <span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.has(<span class="string">"email"</span>));         <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//08 迭代器的基本使用(keys)</span></span><br><span class="line">   <span class="keyword">var</span> keyIterator = data.keys()      <span class="comment">//获取迭代器对象</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "age"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "name"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: true, value: undefined&#125;</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"___________________"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//09 迭代器的基本使用(values)</span></span><br><span class="line">   <span class="keyword">var</span> valueIterator = data.values();  <span class="comment">//获取迭代器对象</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "18"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "MiTaoer"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "法师"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "战士"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "辅助"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: true, value: undefined&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//10 迭代器的基本使用(entries)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.entries().next());     <span class="comment">//&#123;done: false, value: ["age", "18"]&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//11 formData对象的遍历</span></span><br><span class="line">   data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">       <span class="comment">//输出结果</span></span><br><span class="line">       <span class="comment">// age 18</span></span><br><span class="line">       <span class="comment">// name MiTaoer</span></span><br><span class="line">       <span class="comment">// type 法师</span></span><br><span class="line">       <span class="comment">// type 战士</span></span><br><span class="line">       <span class="comment">// type 辅助</span></span><br><span class="line">       <span class="built_in">console</span>.log(key,value);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><p><a href="">formData对象</a>的这些方法其实不用进行过多的赘述，上面的代码和说明简单易懂。总体上来说，它提供了一整套的操作数据的方法囊括了添加(set)、修改、查询和删除等操作，<code>append</code>方法和set方法的不同之处在于它不会覆盖而是以数组push的方式来处理同名的数据。</p><p><a href="">formData对象</a>的<code>keys()</code>、<code>values()</code>和<code>entries()</code>方法使用类似，调用后将得到一个<code>Iterator类型</code>的迭代器对象，该对象能够能够调用<code>next()</code>方法来进行迭代操作，打印结果中的<code>done</code>使用布尔类型的值来进行标记，如果迭代结束那么值为<strong>true</strong>。</p><p><a href="">formData对象</a>的<code>forEach()</code>接收一个回调函数参数，其中第一个参数为当前遍历数据的<code>value</code>值，第二个参数为<code>key</code>(同数组的forEach方法一致)。如果是Ajax发送GET请求，需要通过<a href="">formData对象</a>的方式来提交表单数据，那么可以借助该方法来拼接查询字符串。</p><p></p><p class="titleX"><strong>FormData的典型用法</strong></p>这里给定如下的表单数据，然后介绍如何使用FormData来处理表单数据发送GET和POST请求。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"formTest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"check"</span>&gt;</span> 是否勾选<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交表单数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><div style="background:#195;color:#fff;width:120px;text-align:center"><strong>GET请求</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"GET"</span>,<span class="string">"http://127.0.0.1:3000?"</span>+getData(),<span class="literal">true</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取页面中的表单数据并处理为查询字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms.namedItem(<span class="string">"formTest"</span>));</span><br><span class="line">    data.append(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">    data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">        arr.push(key+<span class="string">"="</span>+value);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码示例可以发现，使用formData来处理表单数据发送GET请求并没有什么优势，也需要通过循环来处理然后把键值对转换为查询字符串的形式拼接在<code>URL字符串</code>的后面。</p><div style="background:#195;color:#fff;width:120px;text-align:center"><strong>POST请求</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 处理参数</span></span><br><span class="line">    <span class="comment">//方式(1) 模拟表单数据</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">    data.set(<span class="string">"name"</span>,<span class="string">"文顶顶"</span>);</span><br><span class="line">    data.set(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">    data.set(<span class="string">"email"</span>,<span class="string">"yangyong@520it.com"</span>);</span><br><span class="line">    data.append(<span class="string">"email"</span>,<span class="string">"wendingding_ios@126.com"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式(2) 获取表单数据</span></span><br><span class="line">    <span class="comment">//var data = new FormData(document.forms.namedItem("formTest"));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//04 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>,<span class="string">"http://127.0.0.1:3000"</span>,<span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    xhr.send(data);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果发送的是POST请求，那么提交表单数据需要通过<code>setRequestHeader</code>方法来设置<code>&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;</code>，而formData数据直接作为<code>send</code>方法的参数来进行提交即可。<code>POST</code>请求通过formData提交给服务器端的数据，如果是Node服务器端则很难处理(同文件一样)。<a href="">formData</a>最主要的用途其实是用来异步的进行文件上传。</p><p><div style="background:#195;color:#fff;width:200px;text-align:center"><strong>POST请求进行文件上传</strong></div><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userID"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file-name"</span> <span class="attr">id</span>=<span class="string">"fileID"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn    = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oUser   = <span class="built_in">document</span>.getElementById(<span class="string">"userID"</span>);</span><br><span class="line"><span class="keyword">var</span> oFileID = <span class="built_in">document</span>.getElementById(<span class="string">"fileID"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 获取表单中的文件内容</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">    data.set(<span class="string">"user"</span>,oUser.value);</span><br><span class="line">    <span class="built_in">Array</span>.from(oFileID.files).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">        data.append(<span class="string">"fileName"</span>,file);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//04 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>,<span class="string">"http://127.0.0.1:5000/api"</span>,<span class="literal">true</span>);</span><br><span class="line">    xhr.send(data);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里顺便贴出测试文件上传写的Node代码以及文件上传后的监听结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：node文件名称为uploadServer.js</span></span><br><span class="line"><span class="comment">//01 导入模块(需先通过npm来进行安装)</span></span><br><span class="line"><span class="keyword">var</span> express   =   <span class="built_in">require</span>(<span class="string">'express'</span>);     </span><br><span class="line"><span class="keyword">var</span> multer    =   <span class="built_in">require</span>(<span class="string">'multer'</span>);         </span><br><span class="line"><span class="keyword">var</span> body      =   <span class="built_in">require</span>(<span class="string">'body-parser'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.listen(<span class="number">5000</span>);</span><br><span class="line">app.use(body.urlencoded( &#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125; ));</span><br><span class="line">app.use(multer( &#123; <span class="attr">dest</span>: <span class="string">'./upload/'</span> &#125; ).any());</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 监听网络请求并设置打印接收到的参数信息</span></span><br><span class="line">app.post(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">    res.send(<span class="string">"Nice ! 上传成功 ~ "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);      <span class="comment">//普通POST数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.files);     <span class="comment">//文件POST数据</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">app.use(express.static(<span class="string">'./html/'</span>));</span><br></pre></td></tr></table></figure></p><p><strong>代码说明</strong> 需要先通过<code>npm install express multer body-parser</code>命令在当前路径中安装对应的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node uploadServer.js </span><br><span class="line">&#123; user: <span class="string">'wen'</span> &#125;</span><br><span class="line">[ &#123; fieldname: <span class="string">'fileName'</span>,</span><br><span class="line">    originalname: <span class="string">'formData.png'</span>,</span><br><span class="line">    encoding: <span class="string">'7bit'</span>,</span><br><span class="line">    mimetype: <span class="string">'image/png'</span>,</span><br><span class="line">    destination: <span class="string">'./upload/'</span>,</span><br><span class="line">    filename: <span class="string">'f416da3b522ece9e4cc2eccd5b7a62e8'</span>,</span><br><span class="line">    path: <span class="string">'upload/f416da3b522ece9e4cc2eccd5b7a62e8'</span>,</span><br><span class="line">    size: 50002 &#125;,</span><br><span class="line">  &#123; fieldname: <span class="string">'fileName'</span>,</span><br><span class="line">    originalname: <span class="string">'Snip20190107_1.png'</span>,</span><br><span class="line">    encoding: <span class="string">'7bit'</span>,</span><br><span class="line">    mimetype: <span class="string">'image/png'</span>,</span><br><span class="line">    destination: <span class="string">'./upload/'</span>,</span><br><span class="line">    filename: <span class="string">'2a2dd60e217b9cc08f2cc0048a1d27ab'</span>,</span><br><span class="line">    path: <span class="string">'upload/2a2dd60e217b9cc08f2cc0048a1d27ab'</span>,</span><br><span class="line">    size: 1309894 &#125; ]</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;FormData 简单介绍&lt;/strong&gt;&lt;/p&gt;&lt;a href=&quot;&quot;&gt;FormData&lt;/a&gt;是&lt;code&gt;Ajax 2.0&lt;/code&gt;-&lt;a href=&quot;https://dvcs.w3.org/hg/x
      
    
    </summary>
    
    
      <category term="网络编程系列" scheme="https://weibo.com/u/3800117445/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-请召文</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E8%AF%B7%E5%8F%AC%E6%96%87/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 请召文/</id>
    <published>2018-12-31T16:00:03.000Z</published>
    <updated>2019-01-10T08:39:05.527Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#近代先朝， 帝主尊荣位。 勋戚侯王， 玉叶金枝贵。 #宰执中宫， 彩女嫔妃类。 梦断华胥， 来受甘露味。  #国士朝臣， 经纬匡时世。 牧化黎民， 未遂忠良志。 #失宠怀忧， 谪降边邦地。 恋国游魂， 来受甘露味。  #武将戎臣， 统领三军队。 结阵交锋， 锣鼓喧天地。 #北战南征， 失陷沙场内。 为国亡身， 来受甘露味。  #学古穷经， 锦绣文章士。 映雪偷光， 苦志寒窗内。 #命运蹉跎， 金榜无名字。 郁郁幽魂， 来受甘露味。  #割爱辞亲， 早入空门内。 访道寻师， 只为超生死。 #暑往寒来， 不觉无常至。 返照回光， 早证菩提位。  #羽服黄冠， 早发修真志。 炼药烧丹， 养性还元气。 #苦行劳神， 指望登仙位。 莫恋遗形， 来受甘露味。  #孝子贤孙， 义勇忠良士。 烈女贞妻， 视死如归去。 #仗节亡躯， 千古留英气。 耿耿灵魂， 来受甘露味。  #女道尼流， 身住黄金地。 鸾凤缘空， 不染人间事。 #未了无为， 流浪虚生死。 清净幽魂， 来受甘露味。  #地理天文， 医药阴阳类。 卜卦占龟， 风鉴并星士。 #报吉谈凶， 难免无常对。 舍伪归真， 来受甘露味。  #坐贾行商， 种种经营辈。 艺术多能， 贸易求财利。 #背井离乡， 死在他方地。 旅梦悠悠， 来受甘露味。  #犯法遭刑， 牢狱长幽系。 负命谋财， 债主冤家类。 #肿毒瘟癀， 冻死饥亡辈。 速离黄泉， 来受甘露味。  #车碾伤残， 马踏身形碎。 墙倒崖崩， 自刎悬梁缢。 #水火漂焚， 虎咬蛇伤类。 九横孤魂， 来受甘露味。  #饮血茹毛， 生长蛮夷地。 负债偿劳， 婢妾并奴隶。 #喑哑盲聋， 残疾无依恃。 受苦冤魂， 来受甘露味。  #忤逆爹娘， 怨黩天和地。 谤佛欺僧， 毁像焚经偈。 #邪见深坑， 苦报无边际。 十恶狂魂， 来受甘露味。  #大施门开， 荐拔孤魂辈。 祖祢先亡， 五姓冤家类。 #八难三途， 平等俱超济。 仗佛光明， 来受甘露味。  #阿弥陀佛， 宿有无边誓。 观见众生， 苦海常漂溺。 #垂手殷勤， 特驾慈航济。 普载众生， 同赴莲池会。 </script><script>  /*1D244F*/    $(function(){$("<canvas id='canvas' width='1156px' height='460px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1156px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=5,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-60,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("来受甘露味",r.canvas.width-32,5),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#近代先朝， 帝主尊荣位。 勋戚侯王， 玉叶金枝
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-逍遥游（下）</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E9%80%8D%E9%81%A5%E6%B8%B8(%E4%B8%8B)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 逍遥游(下)/</id>
    <published>2018-12-31T16:00:02.000Z</published>
    <updated>2019-01-10T08:36:45.884Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#堯让天下於许由， 曰： “ 日月出矣， 而爝火不息， 其與光也， 不亦难乎？ 時雨降矣， 而犹浸灌， 其於泽也， 不亦勞乎？ 夫子立而天下治， 而我犹屍之， 吾自视缺然。 请致天下。 ” 许由曰： “子治天下， 天下既已治也， 而我犹代子， 吾將為名乎？ 名者， 實之賓也， 吾將為賓乎？ 鹪鹩巢於深林， 不过一枝； 偃鼠饮河， 不过满腹。 歸休乎君， 予無所用天下為。 庖人虽不治庖， 屍祝不越樽俎而代之矣。 ” #肩吾问於连叔曰： “ 吾闻言於接舆， 大而無當， 往而不返。 吾驚怖其言， 犹河汉而無极也。 大有徑庭， 不近人情焉。 ” 连叔曰： “ 其言谓何哉？ ” 曰： “ 藐姑射之山， 有神人居焉， 肌肤若冰雪， 淖约若處子， 不食五谷， 吸风饮露， 乘雲气， 禦飞龙， 而游乎四海之外。 其神凝， 使物不疵厲而年谷熟。 吾是以狂而不信也。 ” 连叔曰： “ 然。 瞽者無以與乎文章之观， 聋者無以與乎钟鼓之聲。 豈惟形骸有聋盲哉， 夫知亦有之。 是其言也， 犹時汝也。 之人也， 之德也， 將磅礴萬物以為一。 世蕲乎亂， 孰弊弊焉以天下為事？ 之人也， 物莫之傷， 大浸稽天而不溺， 大旱金石流土山焦而不热。 是其塵垢秕糠， 將犹陶铸堯舜者也。 孰肯以物為事？ #宋人资章甫适诸越， 越人斷發文身， 無所用之。#堯平治天下之民， 平海內之政， 往见四子藐姑射之山， 汾水之阳， 杳然喪其天下焉。 ”#惠子谓莊子曰： “ 魏王贻我大瓠之种， 我树之成而實五石。 以盛水浆， 其堅不能自舉也。 剖之以為瓢， 則瓠落無所容。 非不枵然大也， 吾為其無用而掊之。 ” 莊子曰： “ 夫子固拙於用大矣。 宋人有善為不龟手之药者， 世世以並辟光為事。 客闻之， 请買其方百金。 聚族而谋曰： 我世世為並辟光， 不过數金， 今一朝而鬻技百金， 请與之。 客得之以说吳王。 越有难， 吳王使之將， 冬與越人水戰， 大败越人， 裂地而封之。 能不龟手一也， 或以封， 或不免與並辟光， 則所用之異也。 今子有五石之瓠， 何不虑以為大樽， 而浮於江湖。 而憂其瓠落無所容， 則夫子犹有蓬之心也夫？ ”#惠子曰： “ 吾有大树， 人谓之樗。 其大本臃肿而不中绳墨， 其小枝卷曲而不中规矩。 立之途， 匠者不顾。 今子之言， 大而無用， 眾所同去也。 ” 莊子曰： “ 子独不见狸生乎？ 卑身而伏， 以候敖者， 東西跳梁， 不辟高下， 中於机辟， 死於网罟。 今夫嫠牛， 其大若垂天之雲， 此能為大矣， 而不能執鼠。 今子有大树， 患其無用， 何不树之於無何有之鄉， 廣莫之野， 彷徨乎無為其側， 逍遥乎寢臥其下。 不夭斤斧， 物無害者。 無所可用， 安所困苦哉！ ”</script><script>    $(function(){$("<canvas id='canvas' width='1216px' height='540px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1216px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=62,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-30,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("逍遥游( 下)  · 庄子",r.canvas.width-32,0),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#堯让天下於许由， 曰： “ 日月出矣， 而爝火
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-逍遥游（上）</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E9%80%8D%E9%81%A5%E6%B8%B8(%E4%B8%8A)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 逍遥游(上)/</id>
    <published>2018-12-31T16:00:01.000Z</published>
    <updated>2019-01-10T09:14:30.947Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里也。 化而為鸟， 其名為鹏， 鹏之背， 不知其幾千里也。 怒而飞， 其翼若垂天之雲。 是鸟也， 海运則將徙於南冥， 南冥者， 天池也。 #齐谐者， 志怪者也。 谐之言曰： 鹏之徙於南冥也， 水擊三千里， 摶扶搖而上者九萬里。 去以六月息者也， 野马也， 塵埃也， 生物之以息相吹也。 天之苍苍， 其正色邪？ 其远而無所至极邪？ 其视下也， 亦若是則已矣。 #且夫水之积也不厚， 則其负大舟也無力。 覆杯水於坳堂之上， 則芥為之舟， 置杯焉則胶， 水浅而舟大也。 风之积也不厚， 則其负大翼也無力。 故九萬里， 則风斯在下矣， 而後乃今培风。 背负青天而莫之夭厄者， 而後乃今將圖南。 #蜩與學鸠笑之曰： “ 我決起而飞， 枪榆枋， 時則不至， 而控於地而已矣。 奚以之九萬里而南為？ ” 适莽苍者， 三飧而反， 腹犹果然。 适百里者， 宿舂粮。 适千里者， 三月聚粮。 之二虫， 又何知？ #小知不及大知， 小年不及大年。 奚以知其然也？ 朝菌不知晦朔， 惠蛄不知春秋， 此小年也。 楚之南有冥灵者， 以五百歲為春， 五百歲為秋； 上古有大椿者， 以八千歲為春， 八千歲為秋； 而彭祖乃今以久特闻， 眾人匹之， 不亦悲乎？ #汤之问棘也是已： 穷發之北有冥海者， 天池也。 有鱼焉， 其廣數千里， 未有知其修者， 其名為鲲。 有鸟焉， 其名為鹏， 背若泰山， 翼若垂天之雲， 摶扶搖羊角而上者九萬里， 绝雲气， 负青天， 然後圖南， 且适南冥也。 #斥鹌笑之曰： “ 彼且奚适也？ 我腾跃而上， 不过數仞而下， 翱翔蓬蒿之间， 耻亦飞之至也。 而彼且奚适也？ ” 此小大之辨也。 #故夫知效一官， 行比一鄉， 德合一君， 而征一國者， 其自视也， 亦若此矣。 而宋荣子犹然笑之。 且舉世誉之而不加勸， 舉世非之而不加沮。 定乎內外之分， 辨乎荣辱之境， 斯已矣。 彼其於世， 未數數焉也。 虽然， 犹有未树也。#夫列子禦风而行， 泠然善也， 旬有五日而後反。 彼於致福， 未數數然也。 此虽免乎行， 犹有所待者也。 #若夫乘天地之正， 而禦六气之辩， 以游無穷者， 彼且惡乎待哉！ 故曰： 至人無己， 神人無功， 聖人無名。 </script><script>    $(function(){$("<canvas id='canvas' width='1216px' height='540px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1216px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=62,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-60,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("逍遥游( 上)  · 庄子",r.canvas.width-32,0),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-斯人若彩虹</title>
    <link href="https://weibo.com/u/3800117445/2018/12/31/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E6%96%AF%E4%BA%BA%E8%8B%A5%E5%BD%A9%E8%99%B9/"/>
    <id>https://weibo.com/u/3800117445/2018/12/31/江湖夜雨系列 斯人若彩虹/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2018-12-31T08:54:12.819Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script>    console.log("哈哈哈");    var canvas = $("<canvas id='canvas' width='600px' height='400px'></canvas>");    canvas.appendTo($(".post-content"));    var ctx = $("#canvas").get(0).getContext("2d");    var gridSize = 15;    var canvasHeight = ctx.canvas.height;    var canvasWidth = ctx.canvas.width;    var xLineTotal = Math.floor(canvasHeight / gridSize);    for (var i = 0; i <= xLineTotal; i++) {        ctx.beginPath();        ctx.moveTo(0, i * gridSize - 0.5 );        ctx.lineTo(canvasWidth, i * gridSize - 0.5);        ctx.strokeStyle = '#eee';        ctx.stroke();    }    var yLineTotal = Math.floor(canvasWidth / gridSize);    for (var i = 0; i <= yLineTotal; i++) {        ctx.beginPath();        ctx.moveTo(i*gridSize - 0.5 ,0);        ctx.lineTo(i*gridSize - 0.5 ,canvasHeight);        ctx.strokeStyle = '#eee';        ctx.stroke();    }    ctx.font = "30px KaiTi";    ctx.fillStyle = "#2c3e50";    ctx.fillText("有人住高楼，有人在深沟;",100,100);    ctx.fillText("有人光万丈，有人一身锈;",100,150);    ctx.fillText("世人万千种，浮云莫强求;",100,200);    ctx.fillText("斯人若彩虹，遇上方知有。",100,250);    ctx.fillText("——韩寒",400,320);</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    console.log(&quot;哈哈哈&quot;);
    var canvas = $(&quot;&lt;canvas id=&#39;canvas&#39;
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-Event</title>
    <link href="https://weibo.com/u/3800117445/2018/12/08/Node%E7%B3%BB%E5%88%97-Event/"/>
    <id>https://weibo.com/u/3800117445/2018/12/08/Node系列-Event/</id>
    <published>2018-12-08T15:20:14.000Z</published>
    <updated>2018-12-08T03:42:33.047Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-0-EventEmitter介绍"><a href="#1-0-EventEmitter介绍" class="headerlink" title="1.0 EventEmitter介绍"></a>1.0 EventEmitter介绍</h4><p>Node中的<code>event</code>模块实现了事件处理相关功能，在该模块中定义了<a href="">EventEmitter类</a>。</p><p>在Node中，所有可能触发事件的对象都是继承了<a href="">EventEmitter类</a>的子类的实例对象，该类定义了诸多方法，譬如添加事件监听和移除事件监听以及自动触发事件等(通过下面的打印可以发现，这些方法均定义在原型对象上面)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.dir(events,&#123;<span class="attr">showHidden</span>:<span class="literal">true</span>,<span class="attr">colors</span>:<span class="literal">true</span>,<span class="attr">depth</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#123; [<span class="built_in">Function</span>: EventEmitter]</span><br><span class="line">  [length]: <span class="number">0</span>,</span><br><span class="line">  [name]: <span class="string">'EventEmitter'</span>,</span><br><span class="line">  [prototype]: </span><br><span class="line">   EventEmitter &#123;</span><br><span class="line">     [<span class="keyword">constructor</span>]: [Circular],</span><br><span class="line">     domain: undefined,</span><br><span class="line">     _events: undefined,</span><br><span class="line">     _maxListeners: undefined,</span><br><span class="line">     setMaxListeners: [Object],</span><br><span class="line">     getMaxListeners: [Object],</span><br><span class="line">     emit: [Object],</span><br><span class="line">     addListener: [Object],</span><br><span class="line">     on: [Object],</span><br><span class="line">     prependListener: [Object],</span><br><span class="line">     once: [Object],</span><br><span class="line">     prependOnceListener: [Object],</span><br><span class="line">     removeListener: [Object],</span><br><span class="line">     removeAllListeners: [Object],</span><br><span class="line">     listeners: [Object],</span><br><span class="line">     listenerCount: [Object],</span><br><span class="line">     eventNames: [Object] &#125;,</span><br><span class="line">  EventEmitter: [Circular],</span><br><span class="line">  usingDomains: true,</span><br><span class="line">  defaultMaxListeners: [Getter/Setter],</span><br><span class="line">  init: &#123; [<span class="built_in">Function</span>] [length]: <span class="number">0</span>, [name]: <span class="string">''</span>, [prototype]: [<span class="built_in">Object</span>] &#125;,</span><br><span class="line">  listenerCount: &#123; [<span class="built_in">Function</span>] [length]: <span class="number">2</span>, [name]: <span class="string">''</span>, [prototype]: [<span class="built_in">Object</span>] &#125; &#125;</span><br></pre></td></tr></table></figure><p><strong>EventEmitter结构说明</strong></p><p>上面的代码是在REPL环境中直接通过<code>console.dir方法</code>来打印events整个模块的输出。为了方便理解，我这里另外再提供一份EventEmitter构造函数的具体实现作为对照和参考。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventEmitter</span>(<span class="params"></span>) </span>&#123; EventEmitter.init.call(<span class="keyword">this</span>); &#125;</span><br><span class="line">EventEmitter.usingDomains = <span class="literal">false</span>;</span><br><span class="line">EventEmitter.prototype._events = <span class="literal">undefined</span>;</span><br><span class="line">EventEmitter.prototype._eventsCount = <span class="number">0</span>; <span class="comment">// 事件数量</span></span><br><span class="line">EventEmitter.prototype._maxListeners = <span class="literal">undefined</span>; <span class="comment">// 最大的监听器数</span></span><br></pre></td></tr></table></figure></p><p><code>events</code>模块中的<a href="">EventEmitter</a>指向的是模块自身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; events == events.EventEmitter</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p><a href="">EventEmitter</a>构造函数身上有个比较重要的静态方法即<code>init方法</code>，该方法主要用来根据条件执行初始化操作，所谓的初始化具体点讲其实就是设置<code>_events</code>、<code>_maxListeners</code>，下面列出该方法的具体实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EventEmitter.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._events === <span class="literal">undefined</span> || <span class="keyword">this</span>._events === <span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">this</span>)._events)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">this</span>._eventsCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._maxListeners = <span class="keyword">this</span>._maxListeners || <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><a href="">EventEmitter</a>的<code>defaultMaxListeners</code>属性内部实现了Getter和Setter方法，该属性用来设置和获取指定事件可以绑定的最大事件处理函数数量，该属性默认值为10。对于默认事件绑定数量，我们可以通过在REPL环境中直接打印<code>events.defaultMaxListeners</code>来进行查看。此外，在<a href="">EventEmitter</a>原型对象上面，提供了<code>setMaxListeners</code>和<code>getMaxListeners</code>方法来对<code>_maxListeners</code>属性进行获取和设置。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_event.png?raw=true"></p><h4 id="2-0-Event相关方法"><a href="#2-0-Event相关方法" class="headerlink" title="2.0 Event相关方法"></a>2.0 Event相关方法</h4><p>前文对<code>events</code>模块中的<a href="">EventEmitter构造函数</a>进行了简单介绍，接下来将主要说明具体事件监听绑定、移除和触发等相关的方法。</p><p><strong>事件的监听(绑定)</strong></p><p>当需要给指定对象添加事件监听(绑定事件处理函数)的时候，可以使用EventEmitter原型对象中的<code>on方法</code>或者是<code>addListener方法</code>，这两个方法的区别仅仅在于方法名，内部的实现一模一样，均调用events模块中的<code>_addListener方法</code>来实现。</p><blockquote><p><strong>_addListener方法核心过程</strong></p><p>① 验证监听器是否为函数对象。<br>② 避免类型为<code>newListener</code>的事件类型，造成递归调用。<br>③ 优化单个监听器的场景，不需使用额外的数组对象。<br>④ 基于prepend参数的值，控制监听器的添加顺序。</p></blockquote><p>这里先介绍事件监听(绑定)相关方法的语法，然后给出简短示例。</p><ul><li><code>EventEmitterInstance.on(event,listener)</code></li><li><code>EventEmitterInstance.addListener(event,listener)</code></li></ul><p><strong>参数说明</strong> <code>on</code>方法和<code>addListener</code>方法接受两个参数，其中event代表的是事件的类型(事件的名称，譬如<code>data</code>、<code>request</code>等)，而listener参数代表的是侦听器(事件处理函数)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：demo.js文件的内容</span></span><br><span class="line"><span class="comment">//001 导入模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 创建server服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 事件监听</span></span><br><span class="line"><span class="comment">// server.on("request",function(req,res)&#123;</span></span><br><span class="line">server.addListener(<span class="string">"request"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request--事件被触发"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"req.url:"</span>,req.url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//005 结束响应</span></span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 开启监听</span></span><br><span class="line">server.listen(<span class="number">4001</span>,<span class="string">"127.0.0.1"</span>);</span><br></pre></td></tr></table></figure></p><p>切换到当前所在目录，在终端中通过<code>node demo.js</code>命令执行上面的代码开启服务器端口监听，然后在浏览器中输入<a href="http://127.0.0.1:4001" target="_blank" rel="noopener">http://127.0.0.1:4001</a> 地址，能够得到下面的打印输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node demo.js </span><br><span class="line">request--事件被触发</span><br><span class="line">req.url: /</span><br><span class="line">request--事件被触发</span><br><span class="line">req.url: /favicon.ico</span><br></pre></td></tr></table></figure></p><p><strong>备注</strong> 在给指定对象绑定事件监听的时候，支持给某类型的事件(譬如<code>request</code>)绑定多个处理函数，默认最多可以绑定10个且支持给指定对象绑定多种类型的事件监听(譬如<code>request</code>事件、<code>end</code>事件等)。绑定处理函数的数量可以通过<code>getMaxListeners</code>和<code>setMaxListeners</code>方法来操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"><span class="comment">//获取events模块(EventEmitter构造函数)的defaultMaxListeners属性值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"defaultMaxListeners=="</span>,events.defaultMaxListeners);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"默认getMaxListeners =="</span>,rs.getMaxListeners());</span><br><span class="line">rs.setMaxListeners(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"设置getMaxListeners == 20"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"最新getMaxListeners =="</span>,rs.getMaxListeners());</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息</span></span><br><span class="line">defaultMaxListeners== <span class="number">10</span></span><br><span class="line">默认getMaxListeners == <span class="number">10</span></span><br><span class="line">设置getMaxListeners == <span class="number">20</span></span><br><span class="line">最新getMaxListeners == <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>除了上面介绍的<code>on</code>方法和<code>addListener</code>方法之外，<code>once</code>方法也能用来给指定的对象添加事件监听(绑定事件处理函数)，区别在于<code>once</code>方法当事件处理函数执行一次后绑定就会立即被解除，也就是该事件处理函数只会被执行一次。下面给出具体语法和简短示例：</p><ul><li><code>EventEmitterInstance.once(event,listener)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：once.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"Hi.text"</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 监听rs实例对象的data事件，当事件触发的时候执行回调函数组织读取的Buffer数据</span></span><br><span class="line">rs.addListener(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data...事件被触发"</span>);</span><br><span class="line">    data.push(chunk);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 监听rs实例对象的end事件，该事件当文件数据流读取完毕的时候触发</span></span><br><span class="line"><span class="comment">//    因为end事件只会被触发一次，所以完全可使用once方法来监听和绑定</span></span><br><span class="line">rs.once(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"end····事件被触发"</span>);</span><br><span class="line">    <span class="keyword">var</span> buf = Buffer.concat(data);</span><br><span class="line">    <span class="built_in">console</span>.log(buf.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：执行once.js文件测试once方法的使用</span></span><br><span class="line">wendingding$ node once.js </span><br><span class="line">data...事件被触发</span><br><span class="line">data...事件被触发</span><br><span class="line">data...事件被触发</span><br><span class="line">data...事件被触发</span><br><span class="line">end····事件被触发</span><br><span class="line">文顶顶：嗨，很高兴遇见你！</span><br></pre></td></tr></table></figure><p><strong>移除事件监听(解绑)</strong></p><p>若需要解除指定对象的事件侦听，则可使用移除事件相关的方法。EventEmitter提供了<code>removeListener</code>方法和<code>removeAllListeners</code>方法来进行解绑操作，<code>listeners</code>方法可以获取当前对象中指定事件绑定的所有处理函数。下面先列出语法然后给出简短代码示例：</p><ul><li><code>EventEmitterInstance.listeners(event)</code></li><li><code>EventEmitterInstance.removeListener(event,listener)</code></li><li><code>EventEmitterInstance.removeAllListeners(event)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：removeListener.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestHandleOne</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"url == "</span>,req.url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request1····事件被触发"</span>);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestHandleTwo</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"url == "</span>,req.url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request2····事件被触发"</span>);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给server对象添加request事件监听</span></span><br><span class="line">server.addListener(<span class="string">"request"</span>,requestHandleOne)</span><br><span class="line">server.addListener(<span class="string">"request"</span>,requestHandleTwo)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启服务端口监听</span></span><br><span class="line">server.listen(<span class="number">4002</span>,<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事件监听处理函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"request事件处理函数列表："</span>);</span><br><span class="line"><span class="keyword">var</span> handleList = server.listeners(<span class="string">"request"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> handleList)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"事件处理函数："</span>,handleList[key].name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"移除前："</span>,server.listenerCount(<span class="string">"request"</span>));</span><br><span class="line"><span class="comment">//移除事件监听（解除单个事件处理函数）</span></span><br><span class="line">server.removeListener(<span class="string">"request"</span>,requestHandleOne);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除事件监听（解除指定事件的所有处理函数）</span></span><br><span class="line"><span class="comment">//server.removeAllListeners("request");</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"移除后："</span>,server.listenerCount(<span class="string">"request"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"><span class="comment">//获取指定对象中指定事件侦听的数量</span></span><br><span class="line"><span class="keyword">var</span> server_request_listenerCount = events.EventEmitter.listenerCount(server,<span class="string">"request"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"server对象中request事件的侦听数量："</span>,server_request_listenerCount);</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong> </p><p>在上面的代码中我们首先创建了服务器<code>sever</code>对象，然后开启了服务器4002端口监听，并使用方法<code>addListener</code>为<code>request</code>事件添加两个侦听(分别是<code>requestHandleOne</code>和<code>requestHandleTwo</code>)函数。</p><p><code>server.listeners(&quot;request&quot;)</code>函数用来获取sever对象上所有request事件处理函数列表。<br><code>server.listenerCount(&quot;request&quot;)</code>函数用来获取sever对象上所有request事件处理函数的数量。</p><p>此外，在events模块的<a href="">EventEmitter构造函数</a>身上拥有一个<code>listenerCount</code>方法，该方法接收两个参数(<code>对象，事件</code>)以获取特定对象身上指定事件处理函数的数量。运行JavaScript代码，并在浏览器中访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node removeListener.js </span><br><span class="line">request事件处理函数列表：</span><br><span class="line">事件处理函数： requestHandleOne</span><br><span class="line">事件处理函数： requestHandleTwo</span><br><span class="line">移除前： 2</span><br><span class="line">移除后： 1</span><br><span class="line">server对象中request事件的侦听数量： 1</span><br><span class="line">url ==  /</span><br><span class="line">request2····事件被触发</span><br><span class="line">url ==  /favicon.ico</span><br><span class="line">request2····事件被触发</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-0-EventEmitter介绍&quot;&gt;&lt;a href=&quot;#1-0-EventEmitter介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 EventEmitter介绍&quot;&gt;&lt;/a&gt;1.0 EventEmitter介绍&lt;/h4&gt;&lt;p&gt;Node中的
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-OS</title>
    <link href="https://weibo.com/u/3800117445/2018/12/07/Node%E7%B3%BB%E5%88%97-os/"/>
    <id>https://weibo.com/u/3800117445/2018/12/07/Node系列-os/</id>
    <published>2018-12-07T15:20:13.000Z</published>
    <updated>2018-12-07T08:56:59.395Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-0-OS模块介绍"><a href="#1-0-OS模块介绍" class="headerlink" title="1.0 OS模块介绍"></a>1.0 OS模块介绍</h4><p> Node中的<a href="http://nodejs.cn/api/os.html" target="_blank" rel="noopener">OS模块</a>提供了和当前系统相关的一系列实用方法。在代码中可以直接用<code>os = require(&quot;os&quot;)</code>的方式来引入。OS模块本身非常的简单，本文将简单对其常用的方法和重要属性进行介绍并提供示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.dir(os,&#123;<span class="attr">showHiddren</span>:<span class="literal">true</span>,<span class="attr">depth</span>:<span class="number">0</span>,<span class="attr">colors</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">arch</span>: [<span class="built_in">Object</span>],</span><br><span class="line">  cpus: [<span class="built_in">Function</span>: cpus],</span><br><span class="line">  EOL: <span class="string">'\n'</span>,</span><br><span class="line">  endianness: [<span class="built_in">Object</span>],</span><br><span class="line">  freemem: [<span class="built_in">Object</span>],</span><br><span class="line">  homedir: [<span class="built_in">Object</span>],</span><br><span class="line">  hostname: [<span class="built_in">Object</span>],</span><br><span class="line">  loadavg: [<span class="built_in">Function</span>: loadavg],</span><br><span class="line">  networkInterfaces: [<span class="built_in">Function</span>: networkInterfaces],</span><br><span class="line">  platform: [<span class="built_in">Object</span>],</span><br><span class="line">  release: [<span class="built_in">Object</span>],</span><br><span class="line">  tmpdir: [<span class="built_in">Object</span>],</span><br><span class="line">  totalmem: [<span class="built_in">Object</span>],</span><br><span class="line">  type: [<span class="built_in">Object</span>],</span><br><span class="line">  userInfo: [<span class="built_in">Function</span>: getUserInfo],</span><br><span class="line">  uptime: [<span class="built_in">Object</span>],</span><br><span class="line">  getNetworkInterfaces: [<span class="built_in">Function</span>: deprecated],</span><br><span class="line">  tmpDir: [<span class="built_in">Function</span>: deprecated],</span><br><span class="line">  constants: [<span class="built_in">Object</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-0-基本使用"><a href="#2-0-基本使用" class="headerlink" title="2.0 基本使用"></a>2.0 基本使用</h4><p><code>OS模块</code>中的这些方法都不接受参数，全是获取(信息)型的方法，使用简单直接调用即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入模块</span></span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="comment">//002 迭代os对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> f <span class="keyword">in</span> os)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//003 获取os对象所有的方法并控制输出</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> os[f] === <span class="string">"function"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"当前方法名称："</span>,f);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"调用执行结果："</span>,os[f]());</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//004 获取os对象中所有的属性并输出名称</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"当前属性名称："</span>,f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"_____________"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用自己的电脑进行测试，执行上面的代码，打印OS模块中所有的方法名并调用这些方法输出结果，下面列出命令行执行JavaScript文件的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node os.js </span><br><span class="line">当前方法名称： arch</span><br><span class="line">调用执行结果： x64</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： cpus</span><br><span class="line">调用执行结果： [ &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 730600, nice: 0, sys: 570160, idle: 4650220, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 247120, nice: 0, sys: 137070, idle: 5566140, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 667530, nice: 0, sys: 377510, idle: 4905300, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 256200, nice: 0, sys: 137540, idle: 5556590, irq: 0 &#125; &#125; ]</span><br><span class="line">_____________</span><br><span class="line">当前属性名称： EOL</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： endianness</span><br><span class="line">调用执行结果： LE</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： freemem</span><br><span class="line">调用执行结果： 159780864</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： homedir</span><br><span class="line">调用执行结果： /Users/文顶顶</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： hostname</span><br><span class="line">调用执行结果： wendingding.local</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： loadavg</span><br><span class="line">调用执行结果： [ 1.8583984375, 1.6640625, 1.6328125 ]</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： networkInterfaces</span><br><span class="line">调用执行结果： &#123; lo0: </span><br><span class="line">   [ &#123; address: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">       netmask: <span class="string">'255.0.0.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       internal: <span class="literal">true</span>,</span><br><span class="line">       cidr: <span class="string">'127.0.0.1/8'</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 0,</span><br><span class="line">       internal: <span class="literal">true</span>,</span><br><span class="line">       cidr: <span class="string">'::1/128'</span> &#125;</span><br><span class="line">       ···省略···</span><br><span class="line">   ]&#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： platform</span><br><span class="line">调用执行结果： darwin</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： release</span><br><span class="line">调用执行结果： 17.4.0</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： tmpdir</span><br><span class="line">调用执行结果： /var/folders/6t/83z6zbfn0w56l2dzc_c2y1wh0000gn/T</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： totalmem</span><br><span class="line">调用执行结果： 8589934592</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： <span class="built_in">type</span></span><br><span class="line">调用执行结果： Darwin</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： userInfo</span><br><span class="line">调用执行结果： &#123; uid: 501,</span><br><span class="line">  gid: 20,</span><br><span class="line">  username: <span class="string">'wendingding'</span>,</span><br><span class="line">  homedir: <span class="string">'/Users/文顶顶'</span>,</span><br><span class="line">  shell: <span class="string">'/bin/bash'</span> &#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： uptime</span><br><span class="line">调用执行结果： 8730</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： getNetworkInterfaces</span><br><span class="line">调用执行结果： &#123; lo0: </span><br><span class="line">   [ &#123; address: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">       netmask: <span class="string">'255.0.0.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       internal: <span class="literal">true</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 0,</span><br><span class="line">       internal: <span class="literal">true</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'fe80::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 1,</span><br><span class="line">       internal: <span class="literal">true</span> &#125; ],</span><br><span class="line">  en0: </span><br><span class="line">   [ &#123; address: <span class="string">'192.168.51.245'</span>,</span><br><span class="line">       netmask: <span class="string">'255.255.255.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'a4:5e:60:e0:65:b1'</span>,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ],</span><br><span class="line">  awdl0: </span><br><span class="line">   [ &#123; address: <span class="string">'fe80::58c6:9eff:feb1:f896'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'5a:c6:9e:b1:f8:96'</span>,</span><br><span class="line">       scopeid: 8,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ],</span><br><span class="line">  utun0: </span><br><span class="line">   [ &#123; address: <span class="string">'fe80::18e0:16fa:bb6:ab15'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 12,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ] &#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： tmpDir</span><br><span class="line">调用执行结果： /var/folders/6t/83z6zbfn0w56l2dzc_c2y1wh0000gn/T</span><br><span class="line">_____________</span><br><span class="line">当前属性名称： constants</span><br><span class="line">_____________</span><br><span class="line">(node:2128) [DEP0023] DeprecationWarning: os.getNetworkInterfaces is deprecated.</span><br><span class="line">(node:2128) [DEP0022] DeprecationWarning: os.tmpDir() is deprecated.</span><br></pre></td></tr></table></figure><p><strong>整体结构</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_os.png?raw=true"></p><p>OS模块对象的EOL属性是一个字符串常量，该常量定义了相关操作系统的行末标志。如果是POSIX 系统，那么则对应的是<code>\n</code>符号，如果是Windows系统，那么对应的是<code>\r\n</code>符号。</p><p>现存的CPU架构可能存在：<code>&#39;arm&#39;, &#39;arm64&#39;, &#39;ia32&#39;, &#39;mips&#39;, &#39;mipsel&#39;, &#39;ppc&#39;, &#39;ppc64&#39;, &#39;s390&#39;, &#39;s390x&#39;, &#39;x32&#39;, &#39;x64&#39;</code>等情况。</p><p>二进制编译环境的字节顺序通常有两种：<code>&#39;BE&#39;</code>（大端模式）和<code>&#39;LE&#39;</code>（小端模式）</p><p>平均负载是系统活动的测量由操作系统自己计算得出，表达为一个分数. 通常理想的平均负载应该比系统的逻辑CPU的数目要少，平均负载是UNIX相关的概念，在Windows平台上，其返回值总是[0, 0, 0]。</p><p>关于OS常量和错误常量相关的信息，请参考<a href="https://nodejs.org/dist/latest-v10.x/docs/api/os.html#os_os_constants_1" target="_blank" rel="noopener">官方文档</a>。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-0-OS模块介绍&quot;&gt;&lt;a href=&quot;#1-0-OS模块介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 OS模块介绍&quot;&gt;&lt;/a&gt;1.0 OS模块介绍&lt;/h4&gt;&lt;p&gt; Node中的&lt;a href=&quot;http://nodejs.cn/api/o
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-Buffer</title>
    <link href="https://weibo.com/u/3800117445/2018/12/06/Node%E7%B3%BB%E5%88%97-Buffer/"/>
    <id>https://weibo.com/u/3800117445/2018/12/06/Node系列-Buffer/</id>
    <published>2018-12-06T15:20:13.000Z</published>
    <updated>2018-12-07T03:31:11.700Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-0-Buffer介绍"><a href="#1-0-Buffer介绍" class="headerlink" title="1.0 Buffer介绍"></a>1.0 Buffer介绍</h4><p><a href="http://nodejs.cn/api/buffer.html" target="_blank" rel="noopener">Buffer</a>是Node中特有的数据类型，它是Node作为运行时对JavaScript进行的拓展，专门用来处理二进制数据流。<a href="http://nodejs.cn/api/buffer.html" target="_blank" rel="noopener">Buffer</a>属于固有(<code>built-in</code>)类型的全局变量，在使用的时候无须使用require函数导入。</p><p>Buffer实例对象的结构和整数数组很像，但<code>Buffer的大小是固定的且在 V8 堆外分配物理内存</code>。<br>Buffer实例对象的大小在被创建时确定，且无法改变，实例对象的内容可以像操作数组一样修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(<span class="string">"Nice!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer=&gt;"</span>,buffer);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"length=&gt;"</span>,buffer.length);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer[1]=&gt;"</span>,buffer[<span class="number">1</span>]);</span><br><span class="line">buffer[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer=&gt;"</span>,buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//列出打印输出的结果</span></span><br><span class="line">buffer=&gt; <span class="xml"><span class="tag">&lt;<span class="name">Buffer</span> <span class="attr">4e</span> <span class="attr">69</span> <span class="attr">63</span> <span class="attr">65</span> <span class="attr">21</span>&gt;</span></span></span><br><span class="line"><span class="xml">length=&gt; 5</span></span><br><span class="line"><span class="xml">buffer[1]=&gt; 105</span></span><br><span class="line">buffer=&gt; &lt;Buffer 4e 64 63 65 21&gt;</span><br></pre></td></tr></table></figure><p>Buffer实例的元素为16进制的两位数，即<a href="">0~255</a>的数值(16的二次方)，可以像数组一样操作Buffer实例。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_buffer.png?raw=true"></p><p>Buffer是典型的JavaScript 和 C++ 结合的模块。<br>Buffer将性能相关的部分使用C++实现，非性能相关的部分使用JavaScript实现。</p><div class="titleX"><strong>为什么要使用 Buffer ?</strong></div><p>Node提供Buffer数据类型的主要原因是<code>基于性能方面的考虑</code>。</p><p>其实在文件I/O和网络传输过程中，不使用Buffer二进制数据也是可以的，但相较而言如果在进行I/O操作和网络数据传输之前预先把静态内容(<code>字符串</code> | <code>图片</code>等)转换为Buffer对象，那么可以有效的减少CPU的重复使用、节省服务器资源并大幅提升性能。</p><h4 id="2-0-Buffer实例的创建"><a href="#2-0-Buffer实例的创建" class="headerlink" title="2.0 Buffer实例的创建"></a>2.0 Buffer实例的创建</h4><p>Buffer实例的构建有多种方式，下面分别介绍。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>① 使用Buffer构造函数创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 使用构造函数来构建Buffer实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//new Buffer(size)</span></span><br><span class="line"><span class="comment">//new Buffer(array)</span></span><br><span class="line"><span class="comment">//new Buffer(buffer)</span></span><br><span class="line"><span class="comment">//new Buffer(string, [encoding])</span></span><br><span class="line"><span class="comment">//new Buffer(arrayBuffer, [byteOffset, [length]])</span></span><br><span class="line"><span class="comment">//001 创建指定缓冲区大小的实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf01 = <span class="keyword">new</span> Buffer(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 对创建好的实例对象执行初始化操作</span></span><br><span class="line"><span class="comment">//语法：buf.fill(value, [offset],[end]); </span></span><br><span class="line"><span class="comment">//作用：初始化缓冲区中的指定内容offset(开始位移) end(结束位移)</span></span><br><span class="line">buf01.fill(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(buf01);</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 根据数组来创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf02 = <span class="keyword">new</span> Buffer([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 根据另一个buffer对象来创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf03 = <span class="keyword">new</span> Buffer(buf01);</span><br><span class="line"><span class="built_in">console</span>.log(buf03);</span><br><span class="line"></span><br><span class="line"><span class="comment">//005 把字符串转换为buffer实例对象</span></span><br><span class="line"><span class="comment">//第一个参数：要转换的字符串</span></span><br><span class="line"><span class="comment">//第二个参数：在转换的是珍珠</span></span><br><span class="line"><span class="keyword">var</span> buf04 = <span class="keyword">new</span> Buffer(<span class="string">"Nice to meet u!"</span>);</span><br><span class="line"><span class="keyword">var</span> buf05 = <span class="keyword">new</span> Buffer(<span class="string">"刚好遇见你!"</span>,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf04);</span><br><span class="line"><span class="built_in">console</span>.log(buf05);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrM = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">2</span>);</span><br><span class="line">arrM[<span class="number">0</span>] = <span class="number">2000</span>;</span><br><span class="line">arrM[<span class="number">1</span>] = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> buf06 = <span class="keyword">new</span> Buffer(arrM.buffer)</span><br><span class="line"><span class="built_in">console</span>.log(buf06);</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：这里列出上面代码的命名行执行打印</span></span><br><span class="line">wendingding$ node index.js </span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">4</span>e <span class="number">69</span> <span class="number">63</span> <span class="number">65</span> <span class="number">20</span> <span class="number">74</span> <span class="number">6</span>f <span class="number">20</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">65</span> <span class="number">74</span> <span class="number">20</span> <span class="number">75</span> <span class="number">21</span>&gt;</span><br><span class="line">&lt;Buffer e5 <span class="number">88</span> <span class="number">9</span>a e5 a5 bd e9 <span class="number">81</span> <span class="number">87</span> e8 a7 <span class="number">81</span> e4 bd a0 <span class="number">21</span>&gt;</span><br><span class="line">&lt;Buffer d0 <span class="number">07</span> e8 <span class="number">03</span>&gt;</span><br></pre></td></tr></table></figure><p>上面的代码中列出了使用Buffer构造函数来创建实例对象的所有方法，我们发现new Buffer() 会根据参数类型的不同而提供不同的实现，而这种使用方式如果没有能够正确地校验传给 new Buffer() 的参数，那么就<a href="https://github.com/nodejs/node/issues/4660" target="_blank" rel="noopener">可能引起安全性与可靠性问题</a>。因此在6.0.0版本中这个构造对象的API已被废弃(<code>不推荐使用</code>)，在将来的版本中可能会被移除。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>② 使用Buffer.from（）创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001使用Buffer.from方法创建实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//Buffer.from(array)    返回一个包含传入字节数组拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(buffer)   返回一个包含传入的Buffer内容拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(string, [encoding])  返回一个包含传入的字符串拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(object, [offsetOrEncoding, [length]])</span></span><br><span class="line"><span class="comment">//Buffer.from(arrayBuffer, [byteOffset, [length]]) 返回一个与传入的ArrayBuffer共享内存的Buffer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf01 = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);             </span><br><span class="line"><span class="comment">//&lt;Buffer 01 02 03 04&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf02 = Buffer.from(buf01);</span><br><span class="line"><span class="built_in">console</span>.log(buf02);</span><br><span class="line"><span class="comment">//&lt;Buffer 01 02 03 04&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf03 = Buffer.from(<span class="string">"Hi! wendingding"</span>,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf03);</span><br><span class="line"><span class="comment">//&lt;Buffer 48 69 21 20 77 65 6e 64 69 6e 67 64 69 6e 67&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf04 = Buffer.from(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'this is a Demo'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf04);</span><br><span class="line"><span class="comment">//&lt;Buffer 74 68 69 73 20 69 73 20 61 20 44 65 6d 6f&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrM = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">2</span>);</span><br><span class="line">arrM[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">arrM[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> buf05 = <span class="keyword">new</span> Buffer(arrM.buffer)</span><br><span class="line"><span class="built_in">console</span>.log(buf05);</span><br><span class="line"><span class="comment">//&lt;Buffer 14 00 0a 00&gt;</span></span><br></pre></td></tr></table></figure><p><code>Buffer.from方法</code>创建实例对象的方式和使用Buffer构造函数创建的方式非常相似，这些API均为<code>5.10.0</code>版本新增。相对而言，使用<code>Buffer.from方法</code>创建实例对象会更可靠。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>③ 使用Buffer.alloc（）创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 使用Buffer.alloc方法创建实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//Buffer.alloc(size, [fill, [encoding]])</span></span><br><span class="line"><span class="comment">//Buffer.allocUnsafe(size)</span></span><br><span class="line"><span class="comment">//Buffer.allocUnsafeSlow(size) 创建一个非内存池的 Buffer 并拷贝出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)Buffer.alloc(size, [fill, [encoding]])</span></span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf01 = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，并使用A字符来进行填充</span></span><br><span class="line"><span class="keyword">var</span> buf02 = Buffer.alloc(<span class="number">10</span>,<span class="string">"A"</span>);</span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，并进行初始化(指定内容和编码模式)</span></span><br><span class="line"><span class="keyword">var</span> buf03 = Buffer.alloc(<span class="number">7</span>,<span class="string">"bWlhb1hpYQ=="</span>,<span class="string">"base64"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);     <span class="comment">//&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;   </span></span><br><span class="line"><span class="built_in">console</span>.log(buf02);     <span class="comment">//&lt;Buffer 41 41 41 41 41 41 41 41 41 41&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf03);     <span class="comment">//&lt;Buffer 6d 69 61 6f 58 69 61&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf03.toString(<span class="string">"utf8"</span>));    <span class="comment">//miaoXia</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)Buffer.allocUnsafe(size)</span></span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，未初始化</span></span><br><span class="line"><span class="keyword">var</span> buf04 = Buffer.allocUnsafe(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf04);             <span class="comment">//&lt;Buffer d8 da 84 02 01 00 00 00 01 00&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf04.fill(<span class="string">"A"</span>));   <span class="comment">//&lt;Buffer 41 41 41 41 41 41 41 41 41 41&gt;</span></span><br></pre></td></tr></table></figure><p><code>Buffer.alloc方法</code>用来创建一个指定长度的Buffer实例对象，在调用的时候可以指定<code>fill</code>初始化填充和<code>encoding</code>编码方式。如果指定了对应的参数，那么实例对象内部将调用fill方法，<code>Buffer.alloc方法</code>比 <code>Buffer.allocUnsafe方法</code>会慢一些。</p><p>当使用<code>Buffer.allocUnsafe</code>方法创建实例对象时，如果要分配的内存小于4KB，则会从一个预分配的Buffer中切割出来，这可以避免垃圾回收机制因创建太多独立的缓冲区(Buffer)而过度使用。当需要在内存池保留一小块内存时，可用<code>Buffer.allocUnsafeSlow</code>方法创建一个非内存池的Buffer并拷贝出来。</p><h4 id="3-0-Buffer和字符串的转换"><a href="#3-0-Buffer和字符串的转换" class="headerlink" title="3.0 Buffer和字符串的转换"></a>3.0 Buffer和字符串的转换</h4><p>开发中常见的需求就是Buffer对象和字符串的相互转换，而且很多情况往往需要先读取文件的内容(字符串)，然后把该内容转换为Buffer数据。这里简单介绍Buffer和字符串转换的基本方式。</p><p><strong>字符串 → Buffer</strong></p><p>如果要把字符串转换成Buffer对象，那么只需要使用Buffer.from方法即可(当然也可以直接使用Buffer构造函数来创建，但是并不推荐)，具体的语法形式为<code>Buffer.from(string, [encoding])</code>,其中第一个参数代表是要转换的字符串信息，而第二个可选的参数代表是转换时候采用的编码模式。</p><blockquote><p><strong>Node目前支持的字符编码类型</strong></p><p>❏  <span class="liYY"><strong>Hex</strong></span>  将每个字节编码成两个十六进制字符。<br>❏  <span class="liYY"><strong>Base64</strong></span>  Base64 编码。<br>❏  <span class="liYY"><strong>ASCII</strong></span>   仅支持 7 位 ASCII 数据。<br>❏  <span class="liYY"><strong>Binary</strong></span>  单字节编码的字符串，别名<code>Latin1</code>。<br>❏  <span class="liYY"><strong>UTF-8</strong></span>     多字节编码的 Unicode 字符。<br>❏  <span class="liYY"><strong>UTF-16LE</strong></span>  2或4个字节小端序编码的Unicode字符，别名<code>UCS-2</code>。</p></blockquote><p><strong>Buffer → 字符串</strong></p><p>如果要把Buffer对象转换为字符串，那么可以使用Buffer实例对象的<code>toString</code>方法，具体的语法形式为<code>buf.toString([encoding, [start, [end]]])</code> ，其中encoding参数代表的是编码模式，start和end参数用来指定开始解码和结束解码的偏移量，其中start参数的默认值为0，而end参数的默认值<code>buf.length</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strM = <span class="string">'Nice!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 把字符串转换为Buffer二进制数据</span></span><br><span class="line"><span class="comment">//var buf = new Buffer(strM)</span></span><br><span class="line"><span class="comment">//var buf = Buffer.from(strM);</span></span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(strM,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);                        <span class="comment">//&lt;Buffer 4e 69 63 65 21&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 把Buffer二进制数据转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> resultStr = buf.toString();</span><br><span class="line"><span class="built_in">console</span>.log(resultStr);                  <span class="comment">//Nice!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>));       <span class="comment">//Nice!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>,<span class="number">2</span>));     <span class="comment">//ce!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>,<span class="number">2</span>,<span class="number">4</span>));   <span class="comment">//ce</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"base64"</span>));     <span class="comment">//TmljZSE=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入文件系统模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">//读取文件的内容，得到字符串数据</span></span><br><span class="line">fs.readFile(<span class="string">"./Hi.text"</span>,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相当于会隐式的来调用toString方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);  <span class="comment">//Hi! wendingding</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件的内容，得到二进制数据</span></span><br><span class="line">fs.readFile(<span class="string">"./Hi.text"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果在读取文件内容的时候，没有指定编码那么获取的是一个二进制数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);  </span><br><span class="line">    <span class="comment">//&lt;Buffer 48 69 21 20 77 65 6e 64 69 6e 67 64 69 6e 67&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString()); <span class="comment">//Hi! wendingding</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="titleX"><strong>Buffer 的拼接</strong></div><p>Buffer实例和字符串虽然可以转换，但在处理Buffer数据的时候却不能简单的像字符串一样简单的使用 <code>+</code> 来进行拼接，因为二进制数据流中的数据可能是宽字节编码的。先看一个简短的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer2string.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"Hi.text"</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data····"</span>,chunk.length);</span><br><span class="line">    data += chunk;</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data=&gt;"</span>,data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data.length=&gt;"</span>,data.length)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码中我们通过<code>createReadStream</code>方法来读取<code>Hi.text</code>文件的内容，<code>highWaterMark</code>配置项(字面意思是最高水位线)用来控制内部缓冲区最多能够容纳的字节数，如果超过那么就停止读取资源文件，默认值为<a href="">64KB</a>。</p><p>假设文件的内容大小为150KB，那么默认情况下在执行代码的时候将会每次从文件中读取64KB的数据，触发<code>data事件</code>，在<code>data事件</code>回调函数中chunk参数的大小就是<code>highWaterMark</code>的大小，即64KB。读取两次后(128KB)，接着读取剩下的32KB大小的数据，此时将第三次触发<code>data事件</code>，继而整个文件数据均读取结束，最后触发<code>end事件</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ cat Hi.text </span><br><span class="line">Hi! wendingding</span><br><span class="line">Hi! LiuY</span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 5</span><br><span class="line">data=&gt; Hi! wendingding</span><br><span class="line">Hi! LiuY</span><br><span class="line"></span><br><span class="line">data.length=&gt; 25</span><br><span class="line"></span><br><span class="line">wendingding$ cat Hi.text </span><br><span class="line">文顶顶：嗨，很高兴遇见你！</span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data=&gt; 文顶顶���嗨，��高兴遇见你！</span><br><span class="line"></span><br><span class="line">data.length=&gt; 17</span><br></pre></td></tr></table></figure></p><p>设置<code>Hi.text</code>文件的内容，运行查看结果。如果文件的内容是全英文(字母)，那么这样拼接没有问题。可一旦文件中的存在中文，那么最后的结果中就可能会出现乱码。这是因为<code>data += chunk</code>这行代码在实际执行的时候，隐藏了调用toString()的操作，也就是说这行代码真正执行的时候其实是<code>data = data.toString() + chunk.toString()</code>这样的。</p><p>因为在<code>UTF-8</code>编码中一种中文汉字占三个字节，又因为设置了highWaterMark字段控制了每次读取的字节数，因此会出现截断，而剩下的部分则以乱码的方式显示。我们可以在<code>data事件</code>的回调函数中把每次读取的chunk都打印出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调整前文中buffer2string.js部分代码</span></span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data····"</span>,chunk);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"string····"</span>,chunk.toString());</span><br><span class="line">    data += chunk;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新运行查看打印输出</span></span><br><span class="line">data···· &lt;Buffer e6 <span class="number">96</span> <span class="number">87</span> e9 a1 b6 e9 a1 b6 ef&gt;</span><br><span class="line">string···· 文顶顶�</span><br><span class="line">data···· &lt;Buffer bc <span class="number">9</span>a e5 <span class="number">97</span> a8 ef bc <span class="number">8</span>c e5 be&gt;</span><br><span class="line">string···· ��嗨，�</span><br><span class="line">data···· &lt;Buffer <span class="number">88</span> e9 ab <span class="number">98</span> e5 <span class="number">85</span> b4 e9 <span class="number">81</span> <span class="number">87</span>&gt;</span><br><span class="line">string···· �高兴遇</span><br><span class="line">data···· &lt;Buffer e8 a7 <span class="number">81</span> e4 bd a0 ef bc <span class="number">81</span> <span class="number">0</span>a&gt;</span><br><span class="line">string···· 见你！</span><br></pre></td></tr></table></figure></p><p>通过观察可以发现，当chunk调用toString方法进行字符编码的时候，默认使用<code>UTF-8</code>模式中文每三位一组，在设置了<code>highWaterMark</code>值为10之后，就注定了会出现字符截断的情况。为了方便大家理解这个过程，下面尝试对转换和截断过程进行分析。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line"><span class="comment">//第一段</span></span><br><span class="line"><span class="comment">//截断方式 &lt;Buffer e6 96 87 e9 a1 b6 e9 a1 b6 截断① ef&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe6</span>,<span class="number">0x96</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xa1</span>,<span class="number">0xb6</span>,<span class="number">0xe9</span>,<span class="number">0xa1</span>,<span class="number">0xb6</span>]).toString();</span><br><span class="line"><span class="string">'文顶顶'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二段</span></span><br><span class="line"><span class="comment">//截断方式  &lt;Buffer bc 截断① 9a 截断② e5 97 a8 截断③ ef bc 8c 截断④ e5 be&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xbc</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0x9a</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe5</span>,<span class="number">0x97</span>,<span class="number">0xa8</span>]).toString();</span><br><span class="line"><span class="string">'嗨'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>,<span class="number">0xbc</span>,<span class="number">0x8c</span>]).toString();</span><br><span class="line"><span class="string">'，'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe5</span>,<span class="number">0xbe</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三段</span></span><br><span class="line"><span class="comment">//截断方式 &lt;Buffer 88 截断① e9 ab 98 e5 85 b4 e9 81 87&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0x88</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe9</span>,<span class="number">0xab</span>,<span class="number">0x98</span>,<span class="number">0xe5</span>,<span class="number">0x85</span>,<span class="number">0xb4</span>,<span class="number">0xe9</span>,<span class="number">0x81</span>,<span class="number">0x87</span>]).toString();</span><br><span class="line"><span class="string">'高兴遇'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第四段</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe8</span>,<span class="number">0xa7</span>,<span class="number">0x81</span>,<span class="number">0xe4</span>,<span class="number">0xbd</span>,<span class="number">0xa0</span>]).toString();</span><br><span class="line"><span class="string">'见你'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>,<span class="number">0xbc</span>,<span class="number">0x81</span>]).toString();</span><br><span class="line"><span class="string">'！'</span></span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> <code>createReadStream</code>函数中highWaterMark值的设置对Buffer内存的分配和使用有一定的影响，该值的大小与数据流的读取关系紧密(值越大，读取的速度越快)，如果这个值设置得很小可能会导致系统调用次数过多影响性能。理想的情况该值的大小应该和数据的大小等同。</div><p>如果需要在代码中对Buffer实例进行拼接，官方推荐的做法是使用<code>Buffer.concat方法</code>,该方法接收一个Buffer对象数组作为参数，返回拼接后的完整Buffer实例，下面给出简短示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer2string.js 文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"Hi.text"</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data..."</span>);</span><br><span class="line">    data.push(chunk);</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"end···"</span>);</span><br><span class="line">    <span class="keyword">var</span> buf = Buffer.concat(data);</span><br><span class="line">    <span class="built_in">console</span>.log(buf.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行细节</span></span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">end···</span><br><span class="line">文顶顶：嗨，很高兴遇见你！</span><br></pre></td></tr></table></figure></p><h4 id="4-0-Buffer的主要方法"><a href="#4-0-Buffer的主要方法" class="headerlink" title="4.0 Buffer的主要方法"></a>4.0 Buffer的主要方法</h4><p>Buffer还有很多其它可用方法，这些方法大致可以分成静态方法和实例方法。</p><blockquote><p>❏ <strong>静态方法</strong>  Buffer函数自身的方法(<code>ex Buffer.XXX</code>)<br>❏ <strong>实例方法</strong>  Buffer函数创建的实例对象的方法(<code>ex buf.XXX</code>)</p></blockquote><p>这里列出主要静态方法(类方法)，并给出简短代码示例。</p><ul><li><code>Buffer.isBuffer(obj)</code>                  检查是否是Buffer实例</li><li><code>Buffer.isEncoding(encoding)</code>           检查是否支持指定的字符编码模式</li><li><code>Buffer.byteLength(string[, encoding])</code> 获取字符串的实际字节长度</li><li><code>Buffer.compare(buf1, buf2)</code>            对Buffer实例进行排序(buf1和buf2)</li><li><code>Buffer.concat(list[, totalLength])</code>    合并list中的多个Buffer实例对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer.js文件的内容</span></span><br><span class="line"><span class="comment">//001 测试Buffer.isBuffer(obj)方法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"wendingding"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">"Nice!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj是否是Buffer:"</span>,Buffer.isBuffer(obj));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buf是否是Buffer:"</span>,Buffer.isBuffer(buf));</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 测试Buffer.isEncoding(encoding)方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"是否支持Base64："</span>,Buffer.isEncoding(<span class="string">"Base64"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"是否支持GB2312："</span>,Buffer.isEncoding(<span class="string">"GB2312"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 获取字符串的实际字节长度</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"字符串的长度为："</span>,<span class="string">"Nice to meet u! 嘻嘻"</span>.length);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"实际字节长度为："</span>,Buffer.byteLength(<span class="string">"Nice to meet u! 嘻嘻"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节：</span></span><br><span class="line">wendingding$ node buffer.js </span><br><span class="line">obj是否是Buffer: <span class="literal">false</span></span><br><span class="line">buf是否是Buffer: <span class="literal">true</span></span><br><span class="line">是否支持Base64： <span class="literal">true</span></span><br><span class="line">是否支持GB2312： <span class="literal">false</span></span><br><span class="line">字符串的长度为： <span class="number">18</span></span><br><span class="line">实际字节长度为： <span class="number">22</span></span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-0-Buffer介绍&quot;&gt;&lt;a href=&quot;#1-0-Buffer介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 Buffer介绍&quot;&gt;&lt;/a&gt;1.0 Buffer介绍&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://nodejs.cn/api/
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-require</title>
    <link href="https://weibo.com/u/3800117445/2018/12/05/Node%E7%B3%BB%E5%88%97-require/"/>
    <id>https://weibo.com/u/3800117445/2018/12/05/Node系列-require/</id>
    <published>2018-12-05T15:20:13.000Z</published>
    <updated>2018-12-06T04:53:52.642Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文作为<a href="http://wendingding.com/2018/12/04/Node%E7%B3%BB%E5%88%97-global/" target="_blank" rel="noopener">Node系列-global</a>的拓展，主要介绍require对象(函数)的结构，使用方法和注意点，对模块和CommanJS规范等内容不进行展开。</div><h4 id="1-0-require函数"><a href="#1-0-require函数" class="headerlink" title="1.0 require函数"></a>1.0 require函数</h4><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_require.png?raw=true"></p><p>在Node中，所有的文件都被认为是一个模块。根据来源的不同，我们可以人为的把模块分为<code>Node内置模块(http)</code>、<code>NPM安装的第三方模块(jquery)</code>和<code>自定义模块</code>以及项目文件等。</p><p><code>require</code>函数的作用就是加载这些模块，<code>require</code>函数直接挂载在全局对象global上，在所有的模块内部均可以直接使用，下面简单列出该函数的内部结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; global.require</span><br><span class="line">&#123; [<span class="built_in">Function</span>: <span class="built_in">require</span>]</span><br><span class="line">  resolve: &#123; [<span class="built_in">Function</span>: resolve] paths: [<span class="built_in">Function</span>: paths] &#125;,</span><br><span class="line">  main: <span class="literal">undefined</span>,</span><br><span class="line">  extensions: &#123; <span class="string">'.js'</span>: [<span class="built_in">Function</span>], <span class="string">'.json'</span>: [<span class="built_in">Function</span>], <span class="string">'.node'</span>: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  cache: &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在使用<code>require</code>函数导入模块的时候用法非常简单，该函数接收一个参数，这个参数可以是带有完整路径的模块文件名(<code>自定义|文件模块</code>)，也可以是模块名(<code>内部模块</code>)。使用<code>require</code>加载模块的时候,可以省略文件的后缀名。对于文件模块，可以使用相对路径来进行加载，其中<code>./</code>代表的是当前路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：app.js文件的内容</span></span><br><span class="line"><span class="comment">//导入Node内置的模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"http"</span>,http.get);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入npm安装的第三方模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"express"</span>,express);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入自定义的模块</span></span><br><span class="line"><span class="comment">//var other = require("./other");</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other.js"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：other.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> Info = <span class="string">"测试的字符串信息！"</span>;</span><br><span class="line">exports.Info = Info;</span><br><span class="line">--------------------------------</span><br></pre></td></tr></table></figure><p>因为测试代码中需要使用到<code>express</code>模块，所以需要先在当前目录中通过命令行工具来进行安装，下面简单列出安装的具体命令以及app.js文件的执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//列出命令行执行细节</span><br><span class="line">wendingding:npm install express</span><br><span class="line">wendingding$ node app.js </span><br><span class="line">http <span class="keyword">function</span> get(options, cb) &#123;</span><br><span class="line">  var req = request(options, cb);</span><br><span class="line">  req.end();</span><br><span class="line">  <span class="built_in">return</span> req;</span><br><span class="line">&#125;</span><br><span class="line">express <span class="keyword">function</span> <span class="function"><span class="title">createApplication</span></span>() &#123;</span><br><span class="line">  var app = <span class="keyword">function</span>(req, res, next) &#123;</span><br><span class="line">    app.handle(req, res, next);</span><br><span class="line">  &#125;;</span><br><span class="line">  ···省略···</span><br><span class="line">  app.init();</span><br><span class="line">  <span class="built_in">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line">测试的字符串信息！</span><br></pre></td></tr></table></figure></p><p><strong>模块加载的寻径</strong></p><p>如果在<code>require</code>函数中只指定文件的名称，那么Node会将该文件视为<code>node_modules</code>目录下的文件(<code>文件的优先关系为 文件名 &gt; 文件名.js &gt; 文件名.json &gt; 文件名.node</code>)。在具体加载模块的时候，Node将会依次尝试加载下面路径中对应的文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">'/Users/文顶顶/Desktop/node/require/node_modules',</span><br><span class="line">'/Users/文顶顶/Desktop/node/node_modules',</span><br><span class="line">'/Users/文顶顶/Desktop/node_modules',</span><br><span class="line">'/Users/文顶顶/node_modules',</span><br><span class="line">'/Users/node_modules',</span><br><span class="line">'/node_modules'</span><br></pre></td></tr></table></figure><p><strong>注意</strong> <span style="color:red">使用require函数加载模块的时候会执行模块中的每行代码</span>，而引入的每行代码都将被封装到一个独立的函数中，以防止和Node环境产生冲突。该函数的结构基本如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 模块源码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="2-0-require函数的成员"><a href="#2-0-require函数的成员" class="headerlink" title="2.0 require函数的成员"></a>2.0 require函数的成员</h4><p>通过上文的结构图我们可以看到，<code>require</code>函数本身的结构相对简单，只有main、cache和resolve等几个成员，这里我们调整前文中用到的app.js文件的代码，在该文件(模块)内部打印<code>require</code>函数本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注 ： app.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：执行app.js文件的命令行操作细节</span></span><br><span class="line">wendingding$ node app.js </span><br><span class="line">测试的字符串信息！</span><br><span class="line">&#123; [<span class="built_in">Function</span>: <span class="built_in">require</span>]</span><br><span class="line">  resolve: &#123; [<span class="built_in">Function</span>: resolve] paths: [<span class="built_in">Function</span>: paths] &#125;,</span><br><span class="line">  main: </span><br><span class="line">   Module &#123;</span><br><span class="line">     id: <span class="string">'.'</span>,</span><br><span class="line">     exports: &#123;&#125;,</span><br><span class="line">     parent: <span class="literal">null</span>,</span><br><span class="line">     filename: <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>,</span><br><span class="line">     loaded: <span class="literal">false</span>,</span><br><span class="line">     children: [ [<span class="built_in">Object</span>] ],</span><br><span class="line">     paths: </span><br><span class="line">      [ <span class="string">'/Users/文顶顶/Desktop/node/require/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/Desktop/node/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/Desktop/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/node_modules'</span>,</span><br><span class="line">        <span class="string">'/node_modules'</span> ] &#125;,</span><br><span class="line">  extensions: &#123; <span class="string">'.js'</span>: [<span class="built_in">Function</span>], <span class="string">'.json'</span>: [<span class="built_in">Function</span>], <span class="string">'.node'</span>: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  cache: </span><br><span class="line">   &#123; <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>: </span><br><span class="line">      Module &#123;</span><br><span class="line">        id: <span class="string">'.'</span>,</span><br><span class="line">        exports: &#123;&#125;,</span><br><span class="line">        parent: <span class="literal">null</span>,</span><br><span class="line">        filename: <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>,</span><br><span class="line">        loaded: <span class="literal">false</span>,</span><br><span class="line">        children: [<span class="built_in">Array</span>],</span><br><span class="line">        paths: [<span class="built_in">Array</span>] &#125;,</span><br><span class="line">     <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>: </span><br><span class="line">      Module &#123;</span><br><span class="line">        id: <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>,</span><br><span class="line">        exports: [<span class="built_in">Object</span>],</span><br><span class="line">        parent: [<span class="built_in">Object</span>],</span><br><span class="line">        filename: <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>,</span><br><span class="line">        loaded: <span class="literal">true</span>,</span><br><span class="line">        children: [],</span><br><span class="line">        paths: [<span class="built_in">Array</span>] &#125;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>函数的成员·说明</strong></p><p>❏  <span class="liYY"><strong>main</strong></span>  标识主模块<br>❏  <span class="liYY"><strong>cache</strong></span> 所有缓存好的模块<br>❏  <span class="liYY"><strong>resolve</strong></span> 解析一个模块名到它的绝对路径(不加载)<br>❏  <span class="liYY"><strong>extensions</strong></span>  根据不同的扩展名来处理对应的文件(已被废弃)</p></blockquote><p><code>main</code>变量用来标识主模块，包含了文件名称(filename)以及加载路径(path)等信息。</p><p><code>cache</code>对象保存缓存的模块，被引入的模块都会被缓存在这个对象中。如果从该对象象中删除指定的键值对，那么下一次require函数将重新加载被删除的模块。该对象中缓存模块的全路径作为对应的key,该模块的相关信息作为value值，在具体删除的时候可以使用<code>delete</code>关键字。</p><p><code>resolve</code>方法的作用是返回指定模块名对应的绝对路径，在实现的时候使用内部的加载机制查询模块的位置, 该操作只返回解析后的文件名，并不会加载该模块。此外，在<code>resolve</code>(对象)中的<code>paths</code>方法会返回包含解析加载模块过程中被查询的路径数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：app.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到模块的路径</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="built_in">require</span>.resolve(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"模块的路径："</span>,key);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>.resolve.paths(<span class="string">"./other"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除缓存中的模块</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache[key];</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：命令行执行细节</span></span><br><span class="line">wendingding$ node app.js </span><br><span class="line">other模块被执行----</span><br><span class="line">测试的字符串信息！</span><br><span class="line">模块的路径： /Users/文顶顶/Desktop/node/<span class="built_in">require</span>/other.js</span><br><span class="line">[ <span class="string">'/Users/文顶顶/Desktop/node/require'</span> ]</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文作为&lt;a href=&quot;http://wendingding.com/2018/12/04/Node%E7%B3%BB%E5%88%97-global/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node系列-global
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
