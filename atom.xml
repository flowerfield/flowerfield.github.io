<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2018-12-07T08:33:49.727Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node系列-OS</title>
    <link href="https://weibo.com/u/3800117445/2018/12/07/Node%E7%B3%BB%E5%88%97-os/"/>
    <id>https://weibo.com/u/3800117445/2018/12/07/Node系列-os/</id>
    <published>2018-12-07T15:20:13.000Z</published>
    <updated>2018-12-07T08:33:49.727Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-0-OS模块介绍"><a href="#1-0-OS模块介绍" class="headerlink" title="1.0 OS模块介绍"></a>1.0 OS模块介绍</h4><p> Node中的<a href="http://nodejs.cn/api/os.html" target="_blank" rel="noopener">OS模块</a>提供了和当前系统相关的一系列实用方法。在代码中可以直接用<code>os = require(&quot;os&quot;)</code>的方式来引入。OS模块本身非常的简单，本文将简单对其常用的方法和重要属性进行介绍并提供示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.dir(os,&#123;<span class="attr">showHiddren</span>:<span class="literal">true</span>,<span class="attr">depth</span>:<span class="number">0</span>,<span class="attr">colors</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">arch</span>: [<span class="built_in">Object</span>],</span><br><span class="line">  cpus: [<span class="built_in">Function</span>: cpus],</span><br><span class="line">  EOL: <span class="string">'\n'</span>,</span><br><span class="line">  endianness: [<span class="built_in">Object</span>],</span><br><span class="line">  freemem: [<span class="built_in">Object</span>],</span><br><span class="line">  homedir: [<span class="built_in">Object</span>],</span><br><span class="line">  hostname: [<span class="built_in">Object</span>],</span><br><span class="line">  loadavg: [<span class="built_in">Function</span>: loadavg],</span><br><span class="line">  networkInterfaces: [<span class="built_in">Function</span>: networkInterfaces],</span><br><span class="line">  platform: [<span class="built_in">Object</span>],</span><br><span class="line">  release: [<span class="built_in">Object</span>],</span><br><span class="line">  tmpdir: [<span class="built_in">Object</span>],</span><br><span class="line">  totalmem: [<span class="built_in">Object</span>],</span><br><span class="line">  type: [<span class="built_in">Object</span>],</span><br><span class="line">  userInfo: [<span class="built_in">Function</span>: getUserInfo],</span><br><span class="line">  uptime: [<span class="built_in">Object</span>],</span><br><span class="line">  getNetworkInterfaces: [<span class="built_in">Function</span>: deprecated],</span><br><span class="line">  tmpDir: [<span class="built_in">Function</span>: deprecated],</span><br><span class="line">  constants: [<span class="built_in">Object</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-0-基本使用"><a href="#2-0-基本使用" class="headerlink" title="2.0 基本使用"></a>2.0 基本使用</h4><p><code>OS模块</code>中的这些方法都不接受参数，全是获取(信息)型的方法，使用简单直接调用即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入模块</span></span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="comment">//002 迭代os对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> f <span class="keyword">in</span> os)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//003 获取os对象所有的方法并控制输出</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> os[f] === <span class="string">"function"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"当前方法名称："</span>,f);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"调用执行结果："</span>,os[f]());</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//004 获取os对象中所有的属性并输出名称</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"当前属性名称："</span>,f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"_____________"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用自己的电脑进行测试，执行上面的代码，打印OS模块中所有的方法名并调用这些方法输出结果，下面列出命令行执行JavaScript文件的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node os.js </span><br><span class="line">当前方法名称： arch</span><br><span class="line">调用执行结果： x64</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： cpus</span><br><span class="line">调用执行结果： [ &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 730600, nice: 0, sys: 570160, idle: 4650220, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 247120, nice: 0, sys: 137070, idle: 5566140, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 667530, nice: 0, sys: 377510, idle: 4905300, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 256200, nice: 0, sys: 137540, idle: 5556590, irq: 0 &#125; &#125; ]</span><br><span class="line">_____________</span><br><span class="line">当前属性名称： EOL</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： endianness</span><br><span class="line">调用执行结果： LE</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： freemem</span><br><span class="line">调用执行结果： 159780864</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： homedir</span><br><span class="line">调用执行结果： /Users/文顶顶</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： hostname</span><br><span class="line">调用执行结果： wendingding.local</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： loadavg</span><br><span class="line">调用执行结果： [ 1.8583984375, 1.6640625, 1.6328125 ]</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： networkInterfaces</span><br><span class="line">调用执行结果： &#123; lo0: </span><br><span class="line">   [ &#123; address: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">       netmask: <span class="string">'255.0.0.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       internal: <span class="literal">true</span>,</span><br><span class="line">       cidr: <span class="string">'127.0.0.1/8'</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 0,</span><br><span class="line">       internal: <span class="literal">true</span>,</span><br><span class="line">       cidr: <span class="string">'::1/128'</span> &#125;</span><br><span class="line">       ···省略···</span><br><span class="line">   ]&#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： platform</span><br><span class="line">调用执行结果： darwin</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： release</span><br><span class="line">调用执行结果： 17.4.0</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： tmpdir</span><br><span class="line">调用执行结果： /var/folders/6t/83z6zbfn0w56l2dzc_c2y1wh0000gn/T</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： totalmem</span><br><span class="line">调用执行结果： 8589934592</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： <span class="built_in">type</span></span><br><span class="line">调用执行结果： Darwin</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： userInfo</span><br><span class="line">调用执行结果： &#123; uid: 501,</span><br><span class="line">  gid: 20,</span><br><span class="line">  username: <span class="string">'wendingding'</span>,</span><br><span class="line">  homedir: <span class="string">'/Users/文顶顶'</span>,</span><br><span class="line">  shell: <span class="string">'/bin/bash'</span> &#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： uptime</span><br><span class="line">调用执行结果： 8730</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： getNetworkInterfaces</span><br><span class="line">调用执行结果： &#123; lo0: </span><br><span class="line">   [ &#123; address: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">       netmask: <span class="string">'255.0.0.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       internal: <span class="literal">true</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 0,</span><br><span class="line">       internal: <span class="literal">true</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'fe80::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 1,</span><br><span class="line">       internal: <span class="literal">true</span> &#125; ],</span><br><span class="line">  en0: </span><br><span class="line">   [ &#123; address: <span class="string">'192.168.51.245'</span>,</span><br><span class="line">       netmask: <span class="string">'255.255.255.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'a4:5e:60:e0:65:b1'</span>,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ],</span><br><span class="line">  awdl0: </span><br><span class="line">   [ &#123; address: <span class="string">'fe80::58c6:9eff:feb1:f896'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'5a:c6:9e:b1:f8:96'</span>,</span><br><span class="line">       scopeid: 8,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ],</span><br><span class="line">  utun0: </span><br><span class="line">   [ &#123; address: <span class="string">'fe80::18e0:16fa:bb6:ab15'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 12,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ] &#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： tmpDir</span><br><span class="line">调用执行结果： /var/folders/6t/83z6zbfn0w56l2dzc_c2y1wh0000gn/T</span><br><span class="line">_____________</span><br><span class="line">当前属性名称： constants</span><br><span class="line">_____________</span><br><span class="line">(node:2128) [DEP0023] DeprecationWarning: os.getNetworkInterfaces is deprecated.</span><br><span class="line">(node:2128) [DEP0022] DeprecationWarning: os.tmpDir() is deprecated.</span><br></pre></td></tr></table></figure><p><strong>整体结构</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_os.png?raw=true"></p><p>OS模块对象的EOL属性是一个字符串常量，该常量定义了相关操作系统的行末标志。如果是POSIX 系统，那么则对应的是<code>\n</code>符号，如果是Windows系统，那么对应的是<code>\r\n</code>符号。</p><p>现存的CPU架构可能存在：<code>&#39;arm&#39;, &#39;arm64&#39;, &#39;ia32&#39;, &#39;mips&#39;, &#39;mipsel&#39;, &#39;ppc&#39;, &#39;ppc64&#39;, &#39;s390&#39;, &#39;s390x&#39;, &#39;x32&#39;, &#39;x64&#39;</code>等情况。</p><p>二进制编译环境的字节顺序通常有两种：<code>&#39;BE&#39;</code>（大端模式）和<code>&#39;LE&#39;</code>（小端模式）</p><p>平均负载是系统活动的测量由操作系统自己计算得出，表达为一个分数. 通常理想的平均负载应该比系统的逻辑CPU的数目要少，平均负载是UNIX相关的概念，在Windows平台上，其返回值总是[0, 0, 0]。</p><p>关于OS常量和错误常量相关的信息，请参考<a href="https://nodejs.org/dist/latest-v10.x/docs/api/os.html#os_os_constants_1" target="_blank" rel="noopener">官方文档</a>。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-0-OS模块介绍&quot;&gt;&lt;a href=&quot;#1-0-OS模块介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 OS模块介绍&quot;&gt;&lt;/a&gt;1.0 OS模块介绍&lt;/h4&gt;&lt;p&gt; Node中的&lt;a href=&quot;http://nodejs.cn/api/o
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-Buffer</title>
    <link href="https://weibo.com/u/3800117445/2018/12/06/Node%E7%B3%BB%E5%88%97-Buffer/"/>
    <id>https://weibo.com/u/3800117445/2018/12/06/Node系列-Buffer/</id>
    <published>2018-12-06T15:20:13.000Z</published>
    <updated>2018-12-07T03:31:11.700Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-0-Buffer介绍"><a href="#1-0-Buffer介绍" class="headerlink" title="1.0 Buffer介绍"></a>1.0 Buffer介绍</h4><p><a href="http://nodejs.cn/api/buffer.html" target="_blank" rel="noopener">Buffer</a>是Node中特有的数据类型，它是Node作为运行时对JavaScript进行的拓展，专门用来处理二进制数据流。<a href="http://nodejs.cn/api/buffer.html" target="_blank" rel="noopener">Buffer</a>属于固有(<code>built-in</code>)类型的全局变量，在使用的时候无须使用require函数导入。</p><p>Buffer实例对象的结构和整数数组很像，但<code>Buffer的大小是固定的且在 V8 堆外分配物理内存</code>。<br>Buffer实例对象的大小在被创建时确定，且无法改变，实例对象的内容可以像操作数组一样修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(<span class="string">"Nice!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer=&gt;"</span>,buffer);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"length=&gt;"</span>,buffer.length);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer[1]=&gt;"</span>,buffer[<span class="number">1</span>]);</span><br><span class="line">buffer[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer=&gt;"</span>,buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//列出打印输出的结果</span></span><br><span class="line">buffer=&gt; <span class="xml"><span class="tag">&lt;<span class="name">Buffer</span> <span class="attr">4e</span> <span class="attr">69</span> <span class="attr">63</span> <span class="attr">65</span> <span class="attr">21</span>&gt;</span></span></span><br><span class="line"><span class="xml">length=&gt; 5</span></span><br><span class="line"><span class="xml">buffer[1]=&gt; 105</span></span><br><span class="line">buffer=&gt; &lt;Buffer 4e 64 63 65 21&gt;</span><br></pre></td></tr></table></figure><p>Buffer实例的元素为16进制的两位数，即<a href="">0~255</a>的数值(16的二次方)，可以像数组一样操作Buffer实例。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_buffer.png?raw=true"></p><p>Buffer是典型的JavaScript 和 C++ 结合的模块。<br>Buffer将性能相关的部分使用C++实现，非性能相关的部分使用JavaScript实现。</p><div class="titleX"><strong>为什么要使用 Buffer ?</strong></div><p>Node提供Buffer数据类型的主要原因是<code>基于性能方面的考虑</code>。</p><p>其实在文件I/O和网络传输过程中，不使用Buffer二进制数据也是可以的，但相较而言如果在进行I/O操作和网络数据传输之前预先把静态内容(<code>字符串</code> | <code>图片</code>等)转换为Buffer对象，那么可以有效的减少CPU的重复使用、节省服务器资源并大幅提升性能。</p><h4 id="2-0-Buffer实例的创建"><a href="#2-0-Buffer实例的创建" class="headerlink" title="2.0 Buffer实例的创建"></a>2.0 Buffer实例的创建</h4><p>Buffer实例的构建有多种方式，下面分别介绍。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>① 使用Buffer构造函数创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 使用构造函数来构建Buffer实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//new Buffer(size)</span></span><br><span class="line"><span class="comment">//new Buffer(array)</span></span><br><span class="line"><span class="comment">//new Buffer(buffer)</span></span><br><span class="line"><span class="comment">//new Buffer(string, [encoding])</span></span><br><span class="line"><span class="comment">//new Buffer(arrayBuffer, [byteOffset, [length]])</span></span><br><span class="line"><span class="comment">//001 创建指定缓冲区大小的实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf01 = <span class="keyword">new</span> Buffer(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 对创建好的实例对象执行初始化操作</span></span><br><span class="line"><span class="comment">//语法：buf.fill(value, [offset],[end]); </span></span><br><span class="line"><span class="comment">//作用：初始化缓冲区中的指定内容offset(开始位移) end(结束位移)</span></span><br><span class="line">buf01.fill(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(buf01);</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 根据数组来创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf02 = <span class="keyword">new</span> Buffer([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 根据另一个buffer对象来创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf03 = <span class="keyword">new</span> Buffer(buf01);</span><br><span class="line"><span class="built_in">console</span>.log(buf03);</span><br><span class="line"></span><br><span class="line"><span class="comment">//005 把字符串转换为buffer实例对象</span></span><br><span class="line"><span class="comment">//第一个参数：要转换的字符串</span></span><br><span class="line"><span class="comment">//第二个参数：在转换的是珍珠</span></span><br><span class="line"><span class="keyword">var</span> buf04 = <span class="keyword">new</span> Buffer(<span class="string">"Nice to meet u!"</span>);</span><br><span class="line"><span class="keyword">var</span> buf05 = <span class="keyword">new</span> Buffer(<span class="string">"刚好遇见你!"</span>,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf04);</span><br><span class="line"><span class="built_in">console</span>.log(buf05);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrM = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">2</span>);</span><br><span class="line">arrM[<span class="number">0</span>] = <span class="number">2000</span>;</span><br><span class="line">arrM[<span class="number">1</span>] = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> buf06 = <span class="keyword">new</span> Buffer(arrM.buffer)</span><br><span class="line"><span class="built_in">console</span>.log(buf06);</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：这里列出上面代码的命名行执行打印</span></span><br><span class="line">wendingding$ node index.js </span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">4</span>e <span class="number">69</span> <span class="number">63</span> <span class="number">65</span> <span class="number">20</span> <span class="number">74</span> <span class="number">6</span>f <span class="number">20</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">65</span> <span class="number">74</span> <span class="number">20</span> <span class="number">75</span> <span class="number">21</span>&gt;</span><br><span class="line">&lt;Buffer e5 <span class="number">88</span> <span class="number">9</span>a e5 a5 bd e9 <span class="number">81</span> <span class="number">87</span> e8 a7 <span class="number">81</span> e4 bd a0 <span class="number">21</span>&gt;</span><br><span class="line">&lt;Buffer d0 <span class="number">07</span> e8 <span class="number">03</span>&gt;</span><br></pre></td></tr></table></figure><p>上面的代码中列出了使用Buffer构造函数来创建实例对象的所有方法，我们发现new Buffer() 会根据参数类型的不同而提供不同的实现，而这种使用方式如果没有能够正确地校验传给 new Buffer() 的参数，那么就<a href="https://github.com/nodejs/node/issues/4660" target="_blank" rel="noopener">可能引起安全性与可靠性问题</a>。因此在6.0.0版本中这个构造对象的API已被废弃(<code>不推荐使用</code>)，在将来的版本中可能会被移除。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>② 使用Buffer.from（）创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001使用Buffer.from方法创建实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//Buffer.from(array)    返回一个包含传入字节数组拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(buffer)   返回一个包含传入的Buffer内容拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(string, [encoding])  返回一个包含传入的字符串拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(object, [offsetOrEncoding, [length]])</span></span><br><span class="line"><span class="comment">//Buffer.from(arrayBuffer, [byteOffset, [length]]) 返回一个与传入的ArrayBuffer共享内存的Buffer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf01 = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);             </span><br><span class="line"><span class="comment">//&lt;Buffer 01 02 03 04&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf02 = Buffer.from(buf01);</span><br><span class="line"><span class="built_in">console</span>.log(buf02);</span><br><span class="line"><span class="comment">//&lt;Buffer 01 02 03 04&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf03 = Buffer.from(<span class="string">"Hi! wendingding"</span>,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf03);</span><br><span class="line"><span class="comment">//&lt;Buffer 48 69 21 20 77 65 6e 64 69 6e 67 64 69 6e 67&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf04 = Buffer.from(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'this is a Demo'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf04);</span><br><span class="line"><span class="comment">//&lt;Buffer 74 68 69 73 20 69 73 20 61 20 44 65 6d 6f&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrM = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">2</span>);</span><br><span class="line">arrM[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">arrM[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> buf05 = <span class="keyword">new</span> Buffer(arrM.buffer)</span><br><span class="line"><span class="built_in">console</span>.log(buf05);</span><br><span class="line"><span class="comment">//&lt;Buffer 14 00 0a 00&gt;</span></span><br></pre></td></tr></table></figure><p><code>Buffer.from方法</code>创建实例对象的方式和使用Buffer构造函数创建的方式非常相似，这些API均为<code>5.10.0</code>版本新增。相对而言，使用<code>Buffer.from方法</code>创建实例对象会更可靠。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>③ 使用Buffer.alloc（）创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 使用Buffer.alloc方法创建实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//Buffer.alloc(size, [fill, [encoding]])</span></span><br><span class="line"><span class="comment">//Buffer.allocUnsafe(size)</span></span><br><span class="line"><span class="comment">//Buffer.allocUnsafeSlow(size) 创建一个非内存池的 Buffer 并拷贝出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)Buffer.alloc(size, [fill, [encoding]])</span></span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf01 = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，并使用A字符来进行填充</span></span><br><span class="line"><span class="keyword">var</span> buf02 = Buffer.alloc(<span class="number">10</span>,<span class="string">"A"</span>);</span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，并进行初始化(指定内容和编码模式)</span></span><br><span class="line"><span class="keyword">var</span> buf03 = Buffer.alloc(<span class="number">7</span>,<span class="string">"bWlhb1hpYQ=="</span>,<span class="string">"base64"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);     <span class="comment">//&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;   </span></span><br><span class="line"><span class="built_in">console</span>.log(buf02);     <span class="comment">//&lt;Buffer 41 41 41 41 41 41 41 41 41 41&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf03);     <span class="comment">//&lt;Buffer 6d 69 61 6f 58 69 61&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf03.toString(<span class="string">"utf8"</span>));    <span class="comment">//miaoXia</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)Buffer.allocUnsafe(size)</span></span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，未初始化</span></span><br><span class="line"><span class="keyword">var</span> buf04 = Buffer.allocUnsafe(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf04);             <span class="comment">//&lt;Buffer d8 da 84 02 01 00 00 00 01 00&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf04.fill(<span class="string">"A"</span>));   <span class="comment">//&lt;Buffer 41 41 41 41 41 41 41 41 41 41&gt;</span></span><br></pre></td></tr></table></figure><p><code>Buffer.alloc方法</code>用来创建一个指定长度的Buffer实例对象，在调用的时候可以指定<code>fill</code>初始化填充和<code>encoding</code>编码方式。如果指定了对应的参数，那么实例对象内部将调用fill方法，<code>Buffer.alloc方法</code>比 <code>Buffer.allocUnsafe方法</code>会慢一些。</p><p>当使用<code>Buffer.allocUnsafe</code>方法创建实例对象时，如果要分配的内存小于4KB，则会从一个预分配的Buffer中切割出来，这可以避免垃圾回收机制因创建太多独立的缓冲区(Buffer)而过度使用。当需要在内存池保留一小块内存时，可用<code>Buffer.allocUnsafeSlow</code>方法创建一个非内存池的Buffer并拷贝出来。</p><h4 id="3-0-Buffer和字符串的转换"><a href="#3-0-Buffer和字符串的转换" class="headerlink" title="3.0 Buffer和字符串的转换"></a>3.0 Buffer和字符串的转换</h4><p>开发中常见的需求就是Buffer对象和字符串的相互转换，而且很多情况往往需要先读取文件的内容(字符串)，然后把该内容转换为Buffer数据。这里简单介绍Buffer和字符串转换的基本方式。</p><p><strong>字符串 → Buffer</strong></p><p>如果要把字符串转换成Buffer对象，那么只需要使用Buffer.from方法即可(当然也可以直接使用Buffer构造函数来创建，但是并不推荐)，具体的语法形式为<code>Buffer.from(string, [encoding])</code>,其中第一个参数代表是要转换的字符串信息，而第二个可选的参数代表是转换时候采用的编码模式。</p><blockquote><p><strong>Node目前支持的字符编码类型</strong></p><p>❏  <span class="liYY"><strong>Hex</strong></span>  将每个字节编码成两个十六进制字符。<br>❏  <span class="liYY"><strong>Base64</strong></span>  Base64 编码。<br>❏  <span class="liYY"><strong>ASCII</strong></span>   仅支持 7 位 ASCII 数据。<br>❏  <span class="liYY"><strong>Binary</strong></span>  单字节编码的字符串，别名<code>Latin1</code>。<br>❏  <span class="liYY"><strong>UTF-8</strong></span>     多字节编码的 Unicode 字符。<br>❏  <span class="liYY"><strong>UTF-16LE</strong></span>  2或4个字节小端序编码的Unicode字符，别名<code>UCS-2</code>。</p></blockquote><p><strong>Buffer → 字符串</strong></p><p>如果要把Buffer对象转换为字符串，那么可以使用Buffer实例对象的<code>toString</code>方法，具体的语法形式为<code>buf.toString([encoding, [start, [end]]])</code> ，其中encoding参数代表的是编码模式，start和end参数用来指定开始解码和结束解码的偏移量，其中start参数的默认值为0，而end参数的默认值<code>buf.length</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strM = <span class="string">'Nice!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 把字符串转换为Buffer二进制数据</span></span><br><span class="line"><span class="comment">//var buf = new Buffer(strM)</span></span><br><span class="line"><span class="comment">//var buf = Buffer.from(strM);</span></span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(strM,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);                        <span class="comment">//&lt;Buffer 4e 69 63 65 21&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 把Buffer二进制数据转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> resultStr = buf.toString();</span><br><span class="line"><span class="built_in">console</span>.log(resultStr);                  <span class="comment">//Nice!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>));       <span class="comment">//Nice!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>,<span class="number">2</span>));     <span class="comment">//ce!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>,<span class="number">2</span>,<span class="number">4</span>));   <span class="comment">//ce</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"base64"</span>));     <span class="comment">//TmljZSE=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入文件系统模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">//读取文件的内容，得到字符串数据</span></span><br><span class="line">fs.readFile(<span class="string">"./Hi.text"</span>,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相当于会隐式的来调用toString方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);  <span class="comment">//Hi! wendingding</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件的内容，得到二进制数据</span></span><br><span class="line">fs.readFile(<span class="string">"./Hi.text"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果在读取文件内容的时候，没有指定编码那么获取的是一个二进制数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);  </span><br><span class="line">    <span class="comment">//&lt;Buffer 48 69 21 20 77 65 6e 64 69 6e 67 64 69 6e 67&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString()); <span class="comment">//Hi! wendingding</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="titleX"><strong>Buffer 的拼接</strong></div><p>Buffer实例和字符串虽然可以转换，但在处理Buffer数据的时候却不能简单的像字符串一样简单的使用 <code>+</code> 来进行拼接，因为二进制数据流中的数据可能是宽字节编码的。先看一个简短的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer2string.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"Hi.text"</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data····"</span>,chunk.length);</span><br><span class="line">    data += chunk;</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data=&gt;"</span>,data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data.length=&gt;"</span>,data.length)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码中我们通过<code>createReadStream</code>方法来读取<code>Hi.text</code>文件的内容，<code>highWaterMark</code>配置项(字面意思是最高水位线)用来控制内部缓冲区最多能够容纳的字节数，如果超过那么就停止读取资源文件，默认值为<a href="">64KB</a>。</p><p>假设文件的内容大小为150KB，那么默认情况下在执行代码的时候将会每次从文件中读取64KB的数据，触发<code>data事件</code>，在<code>data事件</code>回调函数中chunk参数的大小就是<code>highWaterMark</code>的大小，即64KB。读取两次后(128KB)，接着读取剩下的32KB大小的数据，此时将第三次触发<code>data事件</code>，继而整个文件数据均读取结束，最后触发<code>end事件</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ cat Hi.text </span><br><span class="line">Hi! wendingding</span><br><span class="line">Hi! LiuY</span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 5</span><br><span class="line">data=&gt; Hi! wendingding</span><br><span class="line">Hi! LiuY</span><br><span class="line"></span><br><span class="line">data.length=&gt; 25</span><br><span class="line"></span><br><span class="line">wendingding$ cat Hi.text </span><br><span class="line">文顶顶：嗨，很高兴遇见你！</span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data=&gt; 文顶顶���嗨，��高兴遇见你！</span><br><span class="line"></span><br><span class="line">data.length=&gt; 17</span><br></pre></td></tr></table></figure></p><p>设置<code>Hi.text</code>文件的内容，运行查看结果。如果文件的内容是全英文(字母)，那么这样拼接没有问题。可一旦文件中的存在中文，那么最后的结果中就可能会出现乱码。这是因为<code>data += chunk</code>这行代码在实际执行的时候，隐藏了调用toString()的操作，也就是说这行代码真正执行的时候其实是<code>data = data.toString() + chunk.toString()</code>这样的。</p><p>因为在<code>UTF-8</code>编码中一种中文汉字占三个字节，又因为设置了highWaterMark字段控制了每次读取的字节数，因此会出现截断，而剩下的部分则以乱码的方式显示。我们可以在<code>data事件</code>的回调函数中把每次读取的chunk都打印出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调整前文中buffer2string.js部分代码</span></span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data····"</span>,chunk);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"string····"</span>,chunk.toString());</span><br><span class="line">    data += chunk;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新运行查看打印输出</span></span><br><span class="line">data···· &lt;Buffer e6 <span class="number">96</span> <span class="number">87</span> e9 a1 b6 e9 a1 b6 ef&gt;</span><br><span class="line">string···· 文顶顶�</span><br><span class="line">data···· &lt;Buffer bc <span class="number">9</span>a e5 <span class="number">97</span> a8 ef bc <span class="number">8</span>c e5 be&gt;</span><br><span class="line">string···· ��嗨，�</span><br><span class="line">data···· &lt;Buffer <span class="number">88</span> e9 ab <span class="number">98</span> e5 <span class="number">85</span> b4 e9 <span class="number">81</span> <span class="number">87</span>&gt;</span><br><span class="line">string···· �高兴遇</span><br><span class="line">data···· &lt;Buffer e8 a7 <span class="number">81</span> e4 bd a0 ef bc <span class="number">81</span> <span class="number">0</span>a&gt;</span><br><span class="line">string···· 见你！</span><br></pre></td></tr></table></figure></p><p>通过观察可以发现，当chunk调用toString方法进行字符编码的时候，默认使用<code>UTF-8</code>模式中文每三位一组，在设置了<code>highWaterMark</code>值为10之后，就注定了会出现字符截断的情况。为了方便大家理解这个过程，下面尝试对转换和截断过程进行分析。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line"><span class="comment">//第一段</span></span><br><span class="line"><span class="comment">//截断方式 &lt;Buffer e6 96 87 e9 a1 b6 e9 a1 b6 截断① ef&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe6</span>,<span class="number">0x96</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xa1</span>,<span class="number">0xb6</span>,<span class="number">0xe9</span>,<span class="number">0xa1</span>,<span class="number">0xb6</span>]).toString();</span><br><span class="line"><span class="string">'文顶顶'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二段</span></span><br><span class="line"><span class="comment">//截断方式  &lt;Buffer bc 截断① 9a 截断② e5 97 a8 截断③ ef bc 8c 截断④ e5 be&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xbc</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0x9a</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe5</span>,<span class="number">0x97</span>,<span class="number">0xa8</span>]).toString();</span><br><span class="line"><span class="string">'嗨'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>,<span class="number">0xbc</span>,<span class="number">0x8c</span>]).toString();</span><br><span class="line"><span class="string">'，'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe5</span>,<span class="number">0xbe</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三段</span></span><br><span class="line"><span class="comment">//截断方式 &lt;Buffer 88 截断① e9 ab 98 e5 85 b4 e9 81 87&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0x88</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe9</span>,<span class="number">0xab</span>,<span class="number">0x98</span>,<span class="number">0xe5</span>,<span class="number">0x85</span>,<span class="number">0xb4</span>,<span class="number">0xe9</span>,<span class="number">0x81</span>,<span class="number">0x87</span>]).toString();</span><br><span class="line"><span class="string">'高兴遇'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第四段</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe8</span>,<span class="number">0xa7</span>,<span class="number">0x81</span>,<span class="number">0xe4</span>,<span class="number">0xbd</span>,<span class="number">0xa0</span>]).toString();</span><br><span class="line"><span class="string">'见你'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>,<span class="number">0xbc</span>,<span class="number">0x81</span>]).toString();</span><br><span class="line"><span class="string">'！'</span></span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> <code>createReadStream</code>函数中highWaterMark值的设置对Buffer内存的分配和使用有一定的影响，该值的大小与数据流的读取关系紧密(值越大，读取的速度越快)，如果这个值设置得很小可能会导致系统调用次数过多影响性能。理想的情况该值的大小应该和数据的大小等同。</div><p>如果需要在代码中对Buffer实例进行拼接，官方推荐的做法是使用<code>Buffer.concat方法</code>,该方法接收一个Buffer对象数组作为参数，返回拼接后的完整Buffer实例，下面给出简短示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer2string.js 文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"Hi.text"</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data..."</span>);</span><br><span class="line">    data.push(chunk);</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"end···"</span>);</span><br><span class="line">    <span class="keyword">var</span> buf = Buffer.concat(data);</span><br><span class="line">    <span class="built_in">console</span>.log(buf.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行细节</span></span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">end···</span><br><span class="line">文顶顶：嗨，很高兴遇见你！</span><br></pre></td></tr></table></figure></p><h4 id="4-0-Buffer的主要方法"><a href="#4-0-Buffer的主要方法" class="headerlink" title="4.0 Buffer的主要方法"></a>4.0 Buffer的主要方法</h4><p>Buffer还有很多其它可用方法，这些方法大致可以分成静态方法和实例方法。</p><blockquote><p>❏ <strong>静态方法</strong>  Buffer函数自身的方法(<code>ex Buffer.XXX</code>)<br>❏ <strong>实例方法</strong>  Buffer函数创建的实例对象的方法(<code>ex buf.XXX</code>)</p></blockquote><p>这里列出主要静态方法(类方法)，并给出简短代码示例。</p><ul><li><code>Buffer.isBuffer(obj)</code>                  检查是否是Buffer实例</li><li><code>Buffer.isEncoding(encoding)</code>           检查是否支持指定的字符编码模式</li><li><code>Buffer.byteLength(string[, encoding])</code> 获取字符串的实际字节长度</li><li><code>Buffer.compare(buf1, buf2)</code>            对Buffer实例进行排序(buf1和buf2)</li><li><code>Buffer.concat(list[, totalLength])</code>    合并list中的多个Buffer实例对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer.js文件的内容</span></span><br><span class="line"><span class="comment">//001 测试Buffer.isBuffer(obj)方法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"wendingding"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">"Nice!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj是否是Buffer:"</span>,Buffer.isBuffer(obj));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buf是否是Buffer:"</span>,Buffer.isBuffer(buf));</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 测试Buffer.isEncoding(encoding)方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"是否支持Base64："</span>,Buffer.isEncoding(<span class="string">"Base64"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"是否支持GB2312："</span>,Buffer.isEncoding(<span class="string">"GB2312"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 获取字符串的实际字节长度</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"字符串的长度为："</span>,<span class="string">"Nice to meet u! 嘻嘻"</span>.length);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"实际字节长度为："</span>,Buffer.byteLength(<span class="string">"Nice to meet u! 嘻嘻"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节：</span></span><br><span class="line">wendingding$ node buffer.js </span><br><span class="line">obj是否是Buffer: <span class="literal">false</span></span><br><span class="line">buf是否是Buffer: <span class="literal">true</span></span><br><span class="line">是否支持Base64： <span class="literal">true</span></span><br><span class="line">是否支持GB2312： <span class="literal">false</span></span><br><span class="line">字符串的长度为： <span class="number">18</span></span><br><span class="line">实际字节长度为： <span class="number">22</span></span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-0-Buffer介绍&quot;&gt;&lt;a href=&quot;#1-0-Buffer介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 Buffer介绍&quot;&gt;&lt;/a&gt;1.0 Buffer介绍&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://nodejs.cn/api/
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-require</title>
    <link href="https://weibo.com/u/3800117445/2018/12/05/Node%E7%B3%BB%E5%88%97-require/"/>
    <id>https://weibo.com/u/3800117445/2018/12/05/Node系列-require/</id>
    <published>2018-12-05T15:20:13.000Z</published>
    <updated>2018-12-06T04:53:52.642Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文作为<a href="http://wendingding.com/2018/12/04/Node%E7%B3%BB%E5%88%97-global/" target="_blank" rel="noopener">Node系列-global</a>的拓展，主要介绍require对象(函数)的结构，使用方法和注意点，对模块和CommanJS规范等内容不进行展开。</div><h4 id="1-0-require函数"><a href="#1-0-require函数" class="headerlink" title="1.0 require函数"></a>1.0 require函数</h4><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_require.png?raw=true"></p><p>在Node中，所有的文件都被认为是一个模块。根据来源的不同，我们可以人为的把模块分为<code>Node内置模块(http)</code>、<code>NPM安装的第三方模块(jquery)</code>和<code>自定义模块</code>以及项目文件等。</p><p><code>require</code>函数的作用就是加载这些模块，<code>require</code>函数直接挂载在全局对象global上，在所有的模块内部均可以直接使用，下面简单列出该函数的内部结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; global.require</span><br><span class="line">&#123; [<span class="built_in">Function</span>: <span class="built_in">require</span>]</span><br><span class="line">  resolve: &#123; [<span class="built_in">Function</span>: resolve] paths: [<span class="built_in">Function</span>: paths] &#125;,</span><br><span class="line">  main: <span class="literal">undefined</span>,</span><br><span class="line">  extensions: &#123; <span class="string">'.js'</span>: [<span class="built_in">Function</span>], <span class="string">'.json'</span>: [<span class="built_in">Function</span>], <span class="string">'.node'</span>: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  cache: &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在使用<code>require</code>函数导入模块的时候用法非常简单，该函数接收一个参数，这个参数可以是带有完整路径的模块文件名(<code>自定义|文件模块</code>)，也可以是模块名(<code>内部模块</code>)。使用<code>require</code>加载模块的时候,可以省略文件的后缀名。对于文件模块，可以使用相对路径来进行加载，其中<code>./</code>代表的是当前路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：app.js文件的内容</span></span><br><span class="line"><span class="comment">//导入Node内置的模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"http"</span>,http.get);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入npm安装的第三方模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"express"</span>,express);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入自定义的模块</span></span><br><span class="line"><span class="comment">//var other = require("./other");</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other.js"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：other.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> Info = <span class="string">"测试的字符串信息！"</span>;</span><br><span class="line">exports.Info = Info;</span><br><span class="line">--------------------------------</span><br></pre></td></tr></table></figure><p>因为测试代码中需要使用到<code>express</code>模块，所以需要先在当前目录中通过命令行工具来进行安装，下面简单列出安装的具体命令以及app.js文件的执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//列出命令行执行细节</span><br><span class="line">wendingding:npm install express</span><br><span class="line">wendingding$ node app.js </span><br><span class="line">http <span class="keyword">function</span> get(options, cb) &#123;</span><br><span class="line">  var req = request(options, cb);</span><br><span class="line">  req.end();</span><br><span class="line">  <span class="built_in">return</span> req;</span><br><span class="line">&#125;</span><br><span class="line">express <span class="keyword">function</span> <span class="function"><span class="title">createApplication</span></span>() &#123;</span><br><span class="line">  var app = <span class="keyword">function</span>(req, res, next) &#123;</span><br><span class="line">    app.handle(req, res, next);</span><br><span class="line">  &#125;;</span><br><span class="line">  ···省略···</span><br><span class="line">  app.init();</span><br><span class="line">  <span class="built_in">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line">测试的字符串信息！</span><br></pre></td></tr></table></figure></p><p><strong>模块加载的寻径</strong></p><p>如果在<code>require</code>函数中只指定文件的名称，那么Node会将该文件视为<code>node_modules</code>目录下的文件(<code>文件的优先关系为 文件名 &gt; 文件名.js &gt; 文件名.json &gt; 文件名.node</code>)。在具体加载模块的时候，Node将会依次尝试加载下面路径中对应的文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">'/Users/文顶顶/Desktop/node/require/node_modules',</span><br><span class="line">'/Users/文顶顶/Desktop/node/node_modules',</span><br><span class="line">'/Users/文顶顶/Desktop/node_modules',</span><br><span class="line">'/Users/文顶顶/node_modules',</span><br><span class="line">'/Users/node_modules',</span><br><span class="line">'/node_modules'</span><br></pre></td></tr></table></figure><p><strong>注意</strong> <span style="color:red">使用require函数加载模块的时候会执行模块中的每行代码</span>，而引入的每行代码都将被封装到一个独立的函数中，以防止和Node环境产生冲突。该函数的结构基本如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 模块源码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="2-0-require函数的成员"><a href="#2-0-require函数的成员" class="headerlink" title="2.0 require函数的成员"></a>2.0 require函数的成员</h4><p>通过上文的结构图我们可以看到，<code>require</code>函数本身的结构相对简单，只有main、cache和resolve等几个成员，这里我们调整前文中用到的app.js文件的代码，在该文件(模块)内部打印<code>require</code>函数本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注 ： app.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：执行app.js文件的命令行操作细节</span></span><br><span class="line">wendingding$ node app.js </span><br><span class="line">测试的字符串信息！</span><br><span class="line">&#123; [<span class="built_in">Function</span>: <span class="built_in">require</span>]</span><br><span class="line">  resolve: &#123; [<span class="built_in">Function</span>: resolve] paths: [<span class="built_in">Function</span>: paths] &#125;,</span><br><span class="line">  main: </span><br><span class="line">   Module &#123;</span><br><span class="line">     id: <span class="string">'.'</span>,</span><br><span class="line">     exports: &#123;&#125;,</span><br><span class="line">     parent: <span class="literal">null</span>,</span><br><span class="line">     filename: <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>,</span><br><span class="line">     loaded: <span class="literal">false</span>,</span><br><span class="line">     children: [ [<span class="built_in">Object</span>] ],</span><br><span class="line">     paths: </span><br><span class="line">      [ <span class="string">'/Users/文顶顶/Desktop/node/require/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/Desktop/node/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/Desktop/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/node_modules'</span>,</span><br><span class="line">        <span class="string">'/node_modules'</span> ] &#125;,</span><br><span class="line">  extensions: &#123; <span class="string">'.js'</span>: [<span class="built_in">Function</span>], <span class="string">'.json'</span>: [<span class="built_in">Function</span>], <span class="string">'.node'</span>: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  cache: </span><br><span class="line">   &#123; <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>: </span><br><span class="line">      Module &#123;</span><br><span class="line">        id: <span class="string">'.'</span>,</span><br><span class="line">        exports: &#123;&#125;,</span><br><span class="line">        parent: <span class="literal">null</span>,</span><br><span class="line">        filename: <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>,</span><br><span class="line">        loaded: <span class="literal">false</span>,</span><br><span class="line">        children: [<span class="built_in">Array</span>],</span><br><span class="line">        paths: [<span class="built_in">Array</span>] &#125;,</span><br><span class="line">     <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>: </span><br><span class="line">      Module &#123;</span><br><span class="line">        id: <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>,</span><br><span class="line">        exports: [<span class="built_in">Object</span>],</span><br><span class="line">        parent: [<span class="built_in">Object</span>],</span><br><span class="line">        filename: <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>,</span><br><span class="line">        loaded: <span class="literal">true</span>,</span><br><span class="line">        children: [],</span><br><span class="line">        paths: [<span class="built_in">Array</span>] &#125;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>函数的成员·说明</strong></p><p>❏  <span class="liYY"><strong>main</strong></span>  标识主模块<br>❏  <span class="liYY"><strong>cache</strong></span> 所有缓存好的模块<br>❏  <span class="liYY"><strong>resolve</strong></span> 解析一个模块名到它的绝对路径(不加载)<br>❏  <span class="liYY"><strong>extensions</strong></span>  根据不同的扩展名来处理对应的文件(已被废弃)</p></blockquote><p><code>main</code>变量用来标识主模块，包含了文件名称(filename)以及加载路径(path)等信息。</p><p><code>cache</code>对象保存缓存的模块，被引入的模块都会被缓存在这个对象中。如果从该对象象中删除指定的键值对，那么下一次require函数将重新加载被删除的模块。该对象中缓存模块的全路径作为对应的key,该模块的相关信息作为value值，在具体删除的时候可以使用<code>delete</code>关键字。</p><p><code>resolve</code>方法的作用是返回指定模块名对应的绝对路径，在实现的时候使用内部的加载机制查询模块的位置, 该操作只返回解析后的文件名，并不会加载该模块。此外，在<code>resolve</code>(对象)中的<code>paths</code>方法会返回包含解析加载模块过程中被查询的路径数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：app.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到模块的路径</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="built_in">require</span>.resolve(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"模块的路径："</span>,key);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>.resolve.paths(<span class="string">"./other"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除缓存中的模块</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache[key];</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：命令行执行细节</span></span><br><span class="line">wendingding$ node app.js </span><br><span class="line">other模块被执行----</span><br><span class="line">测试的字符串信息！</span><br><span class="line">模块的路径： /Users/文顶顶/Desktop/node/<span class="built_in">require</span>/other.js</span><br><span class="line">[ <span class="string">'/Users/文顶顶/Desktop/node/require'</span> ]</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文作为&lt;a href=&quot;http://wendingding.com/2018/12/04/Node%E7%B3%BB%E5%88%97-global/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node系列-global
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-global</title>
    <link href="https://weibo.com/u/3800117445/2018/12/04/Node%E7%B3%BB%E5%88%97-global/"/>
    <id>https://weibo.com/u/3800117445/2018/12/04/Node系列-global/</id>
    <published>2018-12-04T15:20:13.000Z</published>
    <updated>2018-12-06T01:52:31.846Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍Node中的全局对象，包括global本身以及控制台输出对象Console、require函数、定时器相关方法以及__filename和__dirname等全局变量。</div><h4 id="1-0-global全局对象"><a href="#1-0-global全局对象" class="headerlink" title="1.0 global全局对象"></a>1.0 global全局对象</h4><p>在Node中定义了一个<code>global</code>对象，代表全局命名空间，所有的全局变量、函数或对象都作为<code>global全局对象</code>的成员。我们可以在<a href="http://wendingding.com/2018/11/27/Node%E7%B3%BB%E5%88%97-PRPL/" target="_blank" rel="noopener">REPL环境</a>中直接通过变量来进行查看，下面列出核心成员(细节有省略)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; global</span><br><span class="line">&#123; <span class="attr">console</span>: [Getter],</span><br><span class="line">  DTRACE_NET_SERVER_CONNECTION: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_NET_STREAM_END: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_HTTP_SERVER_REQUEST: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_HTTP_SERVER_RESPONSE: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_HTTP_CLIENT_REQUEST: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_HTTP_CLIENT_RESPONSE: [<span class="built_in">Function</span>],</span><br><span class="line">  global: [Circular],</span><br><span class="line">  process: </span><br><span class="line">    process &#123; ···省略··· &#125;,</span><br><span class="line">  Buffer: &#123; ···省略··· &#125;,</span><br><span class="line">  clearImmediate: [<span class="built_in">Function</span>],</span><br><span class="line">  clearInterval: [<span class="built_in">Function</span>],</span><br><span class="line">  clearTimeout: [<span class="built_in">Function</span>],</span><br><span class="line">  setImmediate: &#123; [<span class="built_in">Function</span>: setImmediate] [<span class="built_in">Symbol</span>(util.promisify.custom)]: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  setInterval: [<span class="built_in">Function</span>],</span><br><span class="line">  setTimeout: &#123; [<span class="built_in">Function</span>: setTimeout] [<span class="built_in">Symbol</span>(util.promisify.custom)]: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  <span class="built_in">module</span>: </span><br><span class="line">    Module &#123; ···省略··· &#125;,</span><br><span class="line">  <span class="built_in">require</span>: &#123; ···省略··· &#125;</span><br></pre></td></tr></table></figure><p>通过打印输出我们发现，<code>global全局对象</code>中包含很多的成员，比如用于控制台输出的console对象、处理底层网络请求的一系列函数以及相对复杂的process对象等，这里先给出整体结构图然后再分别介绍。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_global.png?raw=true"></p><p>下面列出的是全局对象跟网络连接相关的一系列方法(这里不做深入)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DTRACE_NET_STREAM_END: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_NET_SERVER_CONNECTION: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_HTTP_SERVER_REQUEST: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_HTTP_SERVER_RESPONSE: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_HTTP_CLIENT_REQUEST: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_HTTP_CLIENT_RESPONSE: [<span class="built_in">Function</span>],</span><br></pre></td></tr></table></figure></p><p>在<code>global全局对象</code>中有一个<code>global</code>属性，该属性指向的是自身，而且全局对象中所有的成员都可以直接通过成员的名称来进行访问(这点跟前端开发中的<code>window</code>对象类似)，下面给出简单示例代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; global.global == global</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; global == <span class="keyword">this</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; global.module</span><br><span class="line">Module &#123;</span><br><span class="line">  id: <span class="string">'&lt;repl&gt;'</span>,</span><br><span class="line">  exports: &#123;&#125;,</span><br><span class="line">  parent: <span class="literal">undefined</span>,</span><br><span class="line">  filename: <span class="literal">null</span>,</span><br><span class="line">  loaded: <span class="literal">false</span>,</span><br><span class="line">  children: [],</span><br><span class="line">  paths: </span><br><span class="line">   [ <span class="string">'/Users/文顶顶/Desktop/global/repl/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/Desktop/global/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/Desktop/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/node_modules'</span>,</span><br><span class="line">     <span class="string">'/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/.node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/.node_libraries'</span>,</span><br><span class="line">     <span class="string">'/usr/local/lib/node'</span> ] &#125;</span><br><span class="line">&gt; <span class="built_in">module</span>.id</span><br><span class="line"><span class="string">'&lt;repl&gt;'</span></span><br></pre></td></tr></table></figure></p><h4 id="2-0-Console控制台输出"><a href="#2-0-Console控制台输出" class="headerlink" title="2.0 Console控制台输出"></a>2.0 Console控制台输出</h4><p><code>Console</code>对象主要用于控制台输出，该对象中拥有诸多方法，作用各异但差别不大。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="built_in">console</span>)</span><br><span class="line">Console &#123;</span><br><span class="line">  log: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  info: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  warn: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  error: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  dir: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  time: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  timeEnd: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  clear: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  group: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  groupCollapsed: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  groupEnd: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  Console: [<span class="built_in">Function</span>: Console],</span><br><span class="line">  ···省略···</span><br><span class="line">  context: [<span class="built_in">Function</span>: context],</span><br><span class="line">  [<span class="built_in">Symbol</span>(counts)]: <span class="built_in">Map</span> &#123;&#125; &#125;</span><br></pre></td></tr></table></figure></p><p>我们在开发中使用控制台输出常用的是<code>Console.log</code>方法，该方法用于进行标准输出流的输出，也就是在控制台中打印和显示N行字符串信息，使用方式非常简单而且灵活。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"001 我是字符串"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"002 我是需要传递参数的字符串，参数为%s"</span>,<span class="string">" XXX"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"002 我是需要传递参数的字符串，参数为%s"</span>,<span class="string">" XXX"</span>,<span class="string">"and Other"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"003 控制输出数字=&gt; %d"</span>,<span class="number">10.123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"003 控制输出符号=&gt; %%"</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"004 控制输出简单计算的结果=&gt; "</span>,<span class="number">3</span> + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>,b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a == b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"005 我也是字符串"</span>);</span><br></pre></td></tr></table></figure></p><p>列出上面代码的输出。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node Console.js </span><br><span class="line">001 我是字符串</span><br><span class="line">002 我是需要传递参数的字符串，参数为 XXX</span><br><span class="line">002 我是需要传递参数的字符串，参数为 XXX and Other</span><br><span class="line">003 控制输出数字=&gt; 10.123</span><br><span class="line">003 控制输出符号=&gt; % 30</span><br><span class="line">004 控制输出简单计算的结果=&gt;  6</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">005 我也是字符串</span><br><span class="line">wendingding$ node Console.js &gt; log.text</span><br></pre></td></tr></table></figure></p><p><code>console</code>对象的<code>log、info、error、warn</code>方法在使用上几乎没有任何的差别，而且都支持对输出流进行重定向操作(<code>使用&gt;符号</code>)，而<code>dir</code>方法则可以查看并打印对象的详细内容，在需要查看对象或函数细节的时候会比较有用，下面给出简单示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法  console.dir(obj , [ options ] )</span></span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="comment">//obj               要打印的目标对象</span></span><br><span class="line"><span class="comment">//options           用来控制打印的可选配置对象，主要配置项如下</span></span><br><span class="line"><span class="comment">//[1]  colors:      布尔类型值，输出的信息是否有颜色</span></span><br><span class="line"><span class="comment">//[2]  depth:       告诉内部的util.inspect()格式化对象时要递归多少次，默认为2，null则无限递归</span></span><br><span class="line"><span class="comment">//[3]  showHidden   设置为true则显示不可枚举属性和 symbol 属性。</span></span><br><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"zs"</span>,<span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;&#125;;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; obj</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'zs'</span>, <span class="attr">show</span>: [<span class="built_in">Function</span>: show] &#125;</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">console</span>.dir(obj,&#123;<span class="attr">showHidden</span>:<span class="literal">true</span>,<span class="attr">depth</span>:<span class="number">1</span>&#125;)</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'zs'</span>,</span><br><span class="line">  show: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: show]</span><br><span class="line">     [length]: <span class="number">0</span>,</span><br><span class="line">     [name]: <span class="string">'show'</span>,</span><br><span class="line">     [<span class="built_in">arguments</span>]: <span class="literal">null</span>,</span><br><span class="line">     [caller]: <span class="literal">null</span>,</span><br><span class="line">     [prototype]: show &#123; [<span class="keyword">constructor</span>]: [Circular] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure></p><p><code>console.time()和console.endTime()</code>方法用以计算一个操作的持续时间，两个方法需要配对使用，它们接收同一个字符串作为参数以标记开始和结束时间线，下面给出简短示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始计时(任务标记为for-10000)</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"for-10000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10000</span>;i++)&#123;&#125;</span><br><span class="line"><span class="comment">//结束计时</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"for-10000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//REPL环境中执行代码：</span></span><br><span class="line">wendingding$ node Console.js </span><br><span class="line"><span class="keyword">for</span><span class="number">-10000</span>: <span class="number">0.209</span>ms</span><br></pre></td></tr></table></figure></p><p><code>console.group()和console.groupEnd()</code>方法用来设置后面的输出缩进增加或减少两个空格，在8.5.0版本中新增的<code>groupCollapsed</code>方法是<code>group</code>方法的别名，另外<code>clear</code>方法用来清空控制台消息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bogon:fs wendingding$ node</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(<span class="string">"参照字符串"</span>);</span><br><span class="line">参照字符串</span><br><span class="line">&gt; <span class="built_in">console</span>.group(<span class="string">"将后续行的缩进增加两个空格"</span>)</span><br><span class="line">将后续行的缩进增加两个空格</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(<span class="string">"参照字符串"</span>);</span><br><span class="line">  参照字符串</span><br><span class="line">&gt; <span class="built_in">console</span>.groupEnd(<span class="string">"将后续行的缩进减少两个空格"</span>)</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(<span class="string">"参照字符串"</span>);</span><br><span class="line">参照字符串</span><br><span class="line">&gt;<span class="built_in">console</span>.clear();</span><br></pre></td></tr></table></figure></p><p>除了全局的 console 实例外，console对象(模块)还在内部提供了<a href="http://nodejs.cn/api/console.html#console_new_console_options" target="_blank" rel="noopener">Console 类</a>可用来创建一个具有可配置的输出流的简单记录器，代码中通过<code>require(&quot;console&quot;).Console</code>或 <code>console.Console</code>使用，具体的使用方式请参考官方文档，这里简单列出该类的结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.dir(<span class="built_in">console</span>.Console,&#123;<span class="attr">depth</span>:<span class="number">1</span>,<span class="attr">showHidden</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&#123; [<span class="built_in">Function</span>: Console]</span><br><span class="line">  [length]: <span class="number">2</span>,</span><br><span class="line">  [name]: <span class="string">'Console'</span>,</span><br><span class="line">  [prototype]: </span><br><span class="line">   Console &#123;</span><br><span class="line">     [<span class="keyword">constructor</span>]: [Circular],</span><br><span class="line">     log: [Object],</span><br><span class="line">     info: [Object],</span><br><span class="line">     warn: [Object],</span><br><span class="line">     error: [Object],</span><br><span class="line">     dir: [Object],</span><br><span class="line">     time: [Object],</span><br><span class="line">     timeEnd: [Object],</span><br><span class="line">     trace: [Object],</span><br><span class="line">     assert: [Object],</span><br><span class="line">     clear: [Object],</span><br><span class="line">     count: [Object],</span><br><span class="line">     countReset: [Object],</span><br><span class="line">     group: [Object],</span><br><span class="line">     groupCollapsed: [Object],</span><br><span class="line">     groupEnd: [Object] &#125; &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-0-定时器相关方法"><a href="#3-0-定时器相关方法" class="headerlink" title="3.0 定时器相关方法"></a>3.0 定时器相关方法</h4><p>Node中的<code>timer模块</code>提供了全局的定时器API，这些方法的作用和Web浏览器提供的定时器方法类似。<br><span style="color:red">在实现上，Node中的定时器方法基于Node事件循环来进行构建</span>。</p><blockquote><p><strong>定时器相关方法·语法介绍</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(callback[, ...args])            预定立即执行的回调函数，它在I/O事件回调之后被触发</span><br><span class="line">setInterval(callback, delay[, ...args])      每间隔固定时间就执行一次回调函数</span><br><span class="line">setTimeout(callback, delay[, ...args])       固定时间后执行一次回调函数</span><br><span class="line">clearImmediate(immediate)</span><br><span class="line">clearInterval(timeout)                       取消定时器</span><br><span class="line">clearTimeout(timeout)                        取消定时器</span><br></pre></td></tr></table></figure></p></blockquote><p>在上面列出的这些方法中，<code>callback</code>均表示回调函数，如果该参数不是函数类型，那么在执行代码的时候将抛出<a href="">TypeError</a>。<code>delay</code>表示时间(计量单位为毫秒)，需注意delay的取值范围为<a href="">1~2147483647</a>，如果超出该范围那么delay的值将会会被设为 1。<code>args</code>表示的是当调用回调函数时传递给回调函数的实际参数，需注意<code>args</code>的传参格式是参数列表而非数组。</p><p><code>clearxxx</code>系列方法均用来取消定时器，这些函数接收一个<code>timeout</code>类型的实例对象(该类型的实例对象是内部创建的，作为<code>setTimeout()</code> 或 <code>setInterval()</code> 的返回值)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 开启定时器</span></span><br><span class="line"><span class="comment">//2秒后执行回调函数，10和20作为回调函数的参数</span></span><br><span class="line"><span class="keyword">var</span> timer1 = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setTimeout方法=&gt;%d"</span>,(a +b));</span><br><span class="line">&#125;,<span class="number">2000</span>,<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 开启定时器</span></span><br><span class="line"><span class="comment">//每隔1秒就执行一次回调函数，Nice作为回调函数的参数</span></span><br><span class="line"><span class="keyword">var</span> timer2 = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setInterval=&gt;参数："</span>,param);</span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="string">"Nice!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 取消定时器</span></span><br><span class="line"><span class="comment">//5秒之后执行回调函数，取消time2定时器</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"取消定时器timer2"</span>);</span><br><span class="line">  clearInterval(timer2)</span><br><span class="line">&#125;,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//timer2.unref()</span></span><br><span class="line"><span class="comment">//当调用该方法时，活动的定时器对象对象不要求 Node.js 事件循环保持活动。 </span></span><br><span class="line"><span class="comment">//如果没有其他活动保持事件循环运行，则进程可能在定时器对象的回调函数被调用之前退出。</span></span><br><span class="line"><span class="comment">//注意：多次调用定时器对象的unref() 方法没有效果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//timer2.ref()</span></span><br><span class="line"><span class="comment">//当调用该方法时，只要定时器对象处于活动状态就要求Node事件循环不要退出。 </span></span><br><span class="line"><span class="comment">//注意：多次调用定时器对象的ref()方法没有效果。</span></span><br><span class="line"><span class="comment">//注意：默认所有的定时器对象都是"ref"的，通常不需要调用ref()方法，除非之前调用了unref()。</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong> 定时器对象的<code>unref</code>方法能够取消回调函数的调用。当指定定时器实例对象的回调函数被取消后，可以通过对应的<code>ref</code>方法来恢复调用，下面列出代码的执行情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node timer.js </span><br><span class="line">setInterval=&gt;参数： Nice!</span><br><span class="line">setTimeout方法=&gt;<span class="number">30</span></span><br><span class="line">setInterval=&gt;参数： Nice!</span><br><span class="line">setInterval=&gt;参数： Nice!</span><br><span class="line">setInterval=&gt;参数： Nice!</span><br><span class="line">取消定时器timer2</span><br></pre></td></tr></table></figure><h4 id="4-0-filename和-dirname"><a href="#4-0-filename和-dirname" class="headerlink" title="4.0 __filename和__dirname"></a>4.0 __filename和__dirname</h4><p><code>__filename</code>和<code>__dirname</code>是Node中预定义的两个变量，分别用来获取当前模块的文件名(全路径)以及当前的目录名，这两个变量在任何模块文件的内部均可使用。</p><blockquote><p>❏  <strong>__filename</strong> 获取当前模块文件的完整绝对路径(文件名)<br>❏  <strong>__dirname</strong>  获取当前模块所在目录的完整绝对路径(目录名)</p></blockquote><p>我们可以在JavaScript文件中打印<code>__filename</code>和<code>__dirname</code>变量，然后运行查看结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：在timer.js文件中打印变量</span></span><br><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"><span class="built_in">console</span>.log(__filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">//REPL环境执行timer.js文件结果</span></span><br><span class="line">wendingding$ node timer.js </span><br><span class="line">/Users/文顶顶/Desktop/fs</span><br><span class="line">/Users/文顶顶/Desktop/fs/timer.js</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍Node中的全局对象，包括global本身以及控制台输出对象Console、require函数、定时器相关方法以及__filename和__dirname等全局变量。&lt;/div&gt;

&lt;h4 id=&quot;1-0-global全局对象&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-fs</title>
    <link href="https://weibo.com/u/3800117445/2018/12/01/Node%E7%B3%BB%E5%88%97-fs/"/>
    <id>https://weibo.com/u/3800117445/2018/12/01/Node系列-fs/</id>
    <published>2018-12-01T04:20:13.000Z</published>
    <updated>2018-12-04T09:51:17.894Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文对Node的内置模块fs进行介绍，包括模块的基本情况和简单使用。</div><h4 id="1-0-模块介绍"><a href="#1-0-模块介绍" class="headerlink" title="1.0 模块介绍"></a>1.0 模块介绍</h4><p><a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html" target="_blank" rel="noopener">fs文件模块(File System)</a>是Node的内置核心模块之一，代码中可以通过<code>var fs = require(&quot;fs&quot;)</code>直接加载和使用，该模块提供了操作文件系统的诸多API，且所有方法均提供了<strong>同步</strong>和<strong>异步</strong>操作两个版本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node </span><br><span class="line">&gt; fs</span><br><span class="line">&#123; <span class="attr">constants</span>: &#123; ··省略··· &#125;,</span><br><span class="line">  Stats: [<span class="built_in">Function</span>: Stats],</span><br><span class="line">  F_OK: <span class="number">0</span>,</span><br><span class="line">  R_OK: <span class="number">4</span>,</span><br><span class="line">  W_OK: <span class="number">2</span>,</span><br><span class="line">  X_OK: <span class="number">1</span>,</span><br><span class="line">  access: [<span class="built_in">Function</span>],</span><br><span class="line">  accessSync: [<span class="built_in">Function</span>],</span><br><span class="line">  exists: [<span class="built_in">Function</span>],</span><br><span class="line">  existsSync: [<span class="built_in">Function</span>],</span><br><span class="line">  readFile: [<span class="built_in">Function</span>],</span><br><span class="line">  readFileSync: [<span class="built_in">Function</span>],</span><br><span class="line">  close: [<span class="built_in">Function</span>],</span><br><span class="line">  closeSync: [<span class="built_in">Function</span>],</span><br><span class="line">  open: [<span class="built_in">Function</span>],</span><br><span class="line">  openSync: [<span class="built_in">Function</span>],</span><br><span class="line">  read: [<span class="built_in">Function</span>],</span><br><span class="line">  readSync: [<span class="built_in">Function</span>],</span><br><span class="line">  write: [<span class="built_in">Function</span>],</span><br><span class="line">  writeSync: [<span class="built_in">Function</span>],</span><br><span class="line">  rename: [<span class="built_in">Function</span>],</span><br><span class="line">  renameSync: [<span class="built_in">Function</span>],</span><br><span class="line">  truncate: [<span class="built_in">Function</span>],</span><br><span class="line">  truncateSync: [<span class="built_in">Function</span>],</span><br><span class="line">  ftruncate: [<span class="built_in">Function</span>],</span><br><span class="line">  ftruncateSync: [<span class="built_in">Function</span>],</span><br><span class="line">  rmdir: [<span class="built_in">Function</span>],</span><br><span class="line">  rmdirSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fdatasync: [<span class="built_in">Function</span>],</span><br><span class="line">  fdatasyncSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fsync: [<span class="built_in">Function</span>],</span><br><span class="line">  fsyncSync: [<span class="built_in">Function</span>],</span><br><span class="line">  mkdir: [<span class="built_in">Function</span>],</span><br><span class="line">  mkdirSync: [<span class="built_in">Function</span>],</span><br><span class="line">  readdir: [<span class="built_in">Function</span>],</span><br><span class="line">  readdirSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fstat: [<span class="built_in">Function</span>],</span><br><span class="line">  lstat: [<span class="built_in">Function</span>],</span><br><span class="line">  stat: [<span class="built_in">Function</span>],</span><br><span class="line">  fstatSync: [<span class="built_in">Function</span>],</span><br><span class="line">  lstatSync: [<span class="built_in">Function</span>],</span><br><span class="line">  statSync: [<span class="built_in">Function</span>],</span><br><span class="line">  readlink: [<span class="built_in">Function</span>],</span><br><span class="line">  readlinkSync: [<span class="built_in">Function</span>],</span><br><span class="line">  symlink: [<span class="built_in">Function</span>],</span><br><span class="line">  symlinkSync: [<span class="built_in">Function</span>],</span><br><span class="line">  link: [<span class="built_in">Function</span>],</span><br><span class="line">  linkSync: [<span class="built_in">Function</span>],</span><br><span class="line">  unlink: [<span class="built_in">Function</span>],</span><br><span class="line">  unlinkSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fchmod: [<span class="built_in">Function</span>],</span><br><span class="line">  fchmodSync: [<span class="built_in">Function</span>],</span><br><span class="line">  lchmod: [<span class="built_in">Function</span>],</span><br><span class="line">  lchmodSync: [<span class="built_in">Function</span>],</span><br><span class="line">  chmod: [<span class="built_in">Function</span>],</span><br><span class="line">  chmodSync: [<span class="built_in">Function</span>],</span><br><span class="line">  lchown: [<span class="built_in">Function</span>],</span><br><span class="line">  lchownSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fchown: [<span class="built_in">Function</span>],</span><br><span class="line">  fchownSync: [<span class="built_in">Function</span>],</span><br><span class="line">  chown: [<span class="built_in">Function</span>],</span><br><span class="line">  chownSync: [<span class="built_in">Function</span>],</span><br><span class="line">  _toUnixTimestamp: [<span class="built_in">Function</span>: toUnixTimestamp],</span><br><span class="line">  utimes: [<span class="built_in">Function</span>],</span><br><span class="line">  utimesSync: [<span class="built_in">Function</span>],</span><br><span class="line">  futimes: [<span class="built_in">Function</span>],</span><br><span class="line">  futimesSync: [<span class="built_in">Function</span>],</span><br><span class="line">  writeFile: [<span class="built_in">Function</span>],</span><br><span class="line">  writeFileSync: [<span class="built_in">Function</span>],</span><br><span class="line">  appendFile: [<span class="built_in">Function</span>],</span><br><span class="line">  appendFileSync: [<span class="built_in">Function</span>],</span><br><span class="line">  watch: [<span class="built_in">Function</span>],</span><br><span class="line">  watchFile: [<span class="built_in">Function</span>],</span><br><span class="line">  unwatchFile: [<span class="built_in">Function</span>],</span><br><span class="line">  realpathSync: [<span class="built_in">Function</span>: realpathSync],</span><br><span class="line">  realpath: [<span class="built_in">Function</span>: realpath],</span><br><span class="line">  mkdtemp: [<span class="built_in">Function</span>],</span><br><span class="line">  mkdtempSync: [<span class="built_in">Function</span>],</span><br><span class="line">  copyFile: [<span class="built_in">Function</span>],</span><br><span class="line">  copyFileSync: [<span class="built_in">Function</span>],</span><br><span class="line">  createReadStream: [<span class="built_in">Function</span>],</span><br><span class="line">  ReadStream: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: ReadStream]</span><br><span class="line">     super_: </span><br><span class="line">      &#123; [<span class="built_in">Function</span>: Readable]</span><br><span class="line">        ReadableState: [<span class="built_in">Function</span>: ReadableState],</span><br><span class="line">        super_: [<span class="built_in">Object</span>],</span><br><span class="line">        _fromList: [<span class="built_in">Function</span>: fromList] &#125; &#125;,</span><br><span class="line">  FileReadStream: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: ReadStream]</span><br><span class="line">     super_: </span><br><span class="line">      &#123; [<span class="built_in">Function</span>: Readable]</span><br><span class="line">        ReadableState: [<span class="built_in">Function</span>: ReadableState],</span><br><span class="line">        super_: [<span class="built_in">Object</span>],</span><br><span class="line">        _fromList: [<span class="built_in">Function</span>: fromList] &#125; &#125;,</span><br><span class="line">  createWriteStream: [<span class="built_in">Function</span>],</span><br><span class="line">  WriteStream: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: WriteStream]</span><br><span class="line">     super_: &#123; [<span class="built_in">Function</span>: Writable] WritableState: [<span class="built_in">Function</span>: WritableState], </span><br><span class="line">     super_: [<span class="built_in">Object</span>] &#125; &#125;,</span><br><span class="line">  FileWriteStream: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: WriteStream]</span><br><span class="line">     super_: &#123; [<span class="built_in">Function</span>: Writable] WritableState: [<span class="built_in">Function</span>: WritableState],</span><br><span class="line">     super_: [<span class="built_in">Object</span>] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>在该模块中，所有的文件操作都提供了<code>同步</code>和<code>异步</code>两种方法(譬如：<code>readFile</code>和<code>readFileSync</code>方法)。这些方法在使用的时候，其使用方式和参数情况基本都是一致的。</p><p><strong>如果是异步方法</strong>，那么其语法形式总是为<code>function (err,callback)</code>，最后一个参数代表操作完成的回调函数，第一个参数通常是操作错误的异常(如果操作成功，该参数的值为<code>null</code>或<code>undefined</code>)，需注意异步方法不能保证执行顺序，如果对多个异步任务的执行顺序有要求，那么应该把后面的任务写在前面任务的回调函数中。</p><p><strong>如果是同步方法</strong>，那么任何异常都会立即抛出，可以使用<code>try/catch</code>结构来处理异常。同步方法总是按顺序从上向下执行，是阻塞的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入内置模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 演示同步方法的执行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//方法说明：追加数据到文件中，如果文件不存在那么就创建</span></span><br><span class="line">    fs.appendFileSync(<span class="string">'./Hi.text'</span>, <span class="string">'文本数据'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Success Info：创建文件成功!'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(err)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Error Info:'</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 演示异步方法的使用</span></span><br><span class="line"><span class="comment">//方法说明：对文件执行重命名操作</span></span><br><span class="line">fs.rename(<span class="string">'./Hi.text'</span>, <span class="string">'./Hello.text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success Info: 文件重命名成功！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法说明：查看重命名后的文件信息</span></span><br><span class="line">    <span class="comment">//依赖关系：需保证Hello.text文件已经存在</span></span><br><span class="line">    fs.stat(<span class="string">'./Hello.text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`File Info: \n <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(stats,<span class="literal">null</span>,<span class="number">4</span>)&#125;</span>`</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong> 上面给出了同步和异步方法使用的简单示例，代码中首先导入了fs模块，然后在当前目录中使用同步的方法(<code>appendFileSync</code>)来创建<code>Hi.text</code>文件并写入数据，随后调用异步方法(<code>rename</code>)来对文件执行重命名操作，继而打印(<code>stat</code>)该文件的信息。下面列出示例代码的执行细节。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node app.js </span><br><span class="line">Success Info：创建文件成功!</span><br><span class="line">Success Info: 文件重命名成功！</span><br><span class="line">File Info: </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"dev"</span>: 16777220,</span><br><span class="line">    <span class="string">"mode"</span>: 33188,</span><br><span class="line">    <span class="string">"nlink"</span>: 1,</span><br><span class="line">    <span class="string">"uid"</span>: 501,</span><br><span class="line">    <span class="string">"gid"</span>: 20,</span><br><span class="line">    <span class="string">"rdev"</span>: 0,</span><br><span class="line">    <span class="string">"blksize"</span>: 4194304,</span><br><span class="line">    <span class="string">"ino"</span>: 8601332359,</span><br><span class="line">    <span class="string">"size"</span>: 12,</span><br><span class="line">    <span class="string">"blocks"</span>: 8,</span><br><span class="line">    <span class="string">"atimeMs"</span>: 1543633694668.5117,</span><br><span class="line">    <span class="string">"mtimeMs"</span>: 1543633694669.2383,</span><br><span class="line">    <span class="string">"ctimeMs"</span>: 1543633694671.2622,</span><br><span class="line">    <span class="string">"birthtimeMs"</span>: 1543633694668.5117,</span><br><span class="line">    <span class="string">"atime"</span>: <span class="string">"2018-12-01T03:08:14.669Z"</span>,</span><br><span class="line">    <span class="string">"mtime"</span>: <span class="string">"2018-12-01T03:08:14.669Z"</span>,</span><br><span class="line">    <span class="string">"ctime"</span>: <span class="string">"2018-12-01T03:08:14.671Z"</span>,</span><br><span class="line">    <span class="string">"birthtime"</span>: <span class="string">"2018-12-01T03:08:14.669Z"</span></span><br><span class="line">&#125;</span><br><span class="line">wendingding$ cat Hello.text </span><br><span class="line">文本数据</span><br></pre></td></tr></table></figure></p><h4 id="2-0-核心方法"><a href="#2-0-核心方法" class="headerlink" title="2.0 核心方法"></a>2.0 核心方法</h4><p><a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html" target="_blank" rel="noopener">fs文件模块(File System)</a>中提供的方法很多，在具体介绍之前，为方便阅读我先简单列出这些方法并对它们进行功能性的区分。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span> 读取和写入文件</span><br><span class="line">open()       打开文件</span><br><span class="line">close()      关闭文件</span><br><span class="line">readFile()   读取文件的完整内容</span><br><span class="line">writeFile()  把完整内容写入文件</span><br><span class="line">read()       读取文件中指定部分的内容</span><br><span class="line">write()      写入指定部分的内容到文件</span><br><span class="line">appendFile() 追加数据到文件，如果文件不存在那么就创建</span><br><span class="line"></span><br><span class="line"><span class="number">002</span> 操作文件目录</span><br><span class="line">mkdir()      创建文件夹(目录)</span><br><span class="line">rmdir()      删除文件夹(目录)</span><br><span class="line">readdir()    读取文件夹(目录)</span><br><span class="line"></span><br><span class="line"><span class="number">003</span> 文件或目录的信息</span><br><span class="line"><span class="comment">//获取信息</span></span><br><span class="line">stat()       查看文件或目录信息</span><br><span class="line">fstat()      查询文件的信息(open方法打开文件后可用)</span><br><span class="line">lstat()      查看文件或目录信息(查看符号连接文件信息 only)</span><br><span class="line">exists()     检查文件或目录是否存在</span><br><span class="line">realpath()   获取文件或目录的绝对路径</span><br><span class="line">access()     检查指定目录或文件的用户权限</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改信息</span></span><br><span class="line">utimes()     修改文件的访问时间和修改时间</span><br><span class="line">futimes()    修改文件的访问时间和修改时间(open方法打开文件后可用)</span><br><span class="line">chmod()      修改文件或目录的读写权限</span><br><span class="line">fchmod()     修改文件或目录的读写权限(open方法打开文件后可用)</span><br><span class="line">rename()     修改文件的名称(重命名)</span><br><span class="line">truncate()   截断文件</span><br><span class="line">ftruncate()  截断文件(open方法打开文件后可用)</span><br><span class="line">watch()      监视文件</span><br><span class="line">watchFile()  监视文件</span><br></pre></td></tr></table></figure></p><div style="border:1px solid #000;padding:5px 5px;background:#666;color:#fff">① 读写文件</div><p><span style="border:1px solid #000;padding:5px 20px;background:#195;color:#fff"><strong>readFile 和 readFileSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)读取文件的内容。<br><strong>语法</strong> <code>fs.readFile( path ,[ options ], callback ) | fs.readFileSync( path ,[ options ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL | integer类型</code>) 指定文件名或文件描述符。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | string类型</code>) 指定编码和处理文件系统的<code>flag值</code>。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err, data</code>)，其中data是文件的内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span>    文件系统的flag</span><br><span class="line"><span class="string">'a'</span>    打开文件用于追加，如不存在则创建。</span><br><span class="line"><span class="string">'ax'</span>   类似 <span class="string">'a'</span>，但如果文件已存在则抛出异常。</span><br><span class="line"><span class="string">'a+'</span>   打开文件用于读取和追加，如不存在则创建。</span><br><span class="line"><span class="string">'ax+'</span>  类似 <span class="string">'a+'</span>，但如果文件已存在则抛出异常。</span><br><span class="line"><span class="string">'as'</span>   以同步模式打开文件用于追加，如不存在则创建。</span><br><span class="line"><span class="string">'as+'</span>  以同步模式打开文件用于读取和追加，如不存在则创建。</span><br><span class="line"></span><br><span class="line"><span class="string">'r'</span>    打开文件用于读取。如不存在则抛出异常。</span><br><span class="line"><span class="string">'r+'</span>   打开文件用于读取和写入。如不存在则抛出异常。</span><br><span class="line"><span class="string">'rs+'</span>  以同步模式打开文件用于读取和写入。指示操作系统绕开本地文件系统缓存(不建议使用)。</span><br><span class="line"></span><br><span class="line"><span class="string">'w'</span>    打开文件用于写入，不存在则创建，存在则截断。</span><br><span class="line"><span class="string">'wx'</span>   类似 <span class="string">'w'</span>，但如果文件已存在则抛出异常。</span><br><span class="line"><span class="string">'w+'</span>   打开文件用于读取和写入，不存在则创建，存在则截断。</span><br><span class="line"><span class="string">'wx+'</span>  类似 <span class="string">'w+'</span>，但如果文件已存在则抛出异常。</span><br><span class="line"></span><br><span class="line"><span class="number">002</span> 参数使用注意</span><br><span class="line">options参数可以接收对象对象，如&#123;<span class="string">"encoding"</span>:<span class="string">"utf8"</span>,<span class="attr">flag</span>:<span class="string">'r'</span>&#125;;</span><br><span class="line">options参数也可以接收字符串，如<span class="string">"utf8"</span>,表示读取文件使用utf编码模式。</span><br><span class="line">默认情况下encoding的值为<span class="literal">null</span>,flag的值为r表示读取文件。</span><br><span class="line"></span><br><span class="line"><span class="number">003</span> fs.readFile() 会缓存整个文件。 为了最小化内存占用，尽可能优先使用 fs.createReadStream()。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #000;padding:5px 20px;"><strong>writeFile 和 writeFileSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)写入文件。<br><strong>语法</strong> <code>fs.writeFile(file,data,[ options ],callback) | fs.writeFileSync(file,data,[ options])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> file</span> (<code>string | Buffer | URL | integer类型</code>) 指定完整路径的文件名或文件描述符。</li><li><span class="liX" style="width:100px"> data</span> (<code>string | Buffer | TypedArray | DataView类型</code>) 指定需要写入的内容。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | string类型</code>) 配置对象，可选项有<code>encoding、mode和flag</code>。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>),参数值为错误对象。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：readAndWrite.js文件内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">//001 读取文件内容(readFile)</span></span><br><span class="line">fs.readFile(<span class="string">"./Hello.text"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"001 第二个参数省略返回Buffer类型:\n"</span>,data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">"./Hello.text"</span>,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"002 第二个参数为字符编码:"</span>,data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">"./Hello.text"</span>,&#123;<span class="string">"encoding"</span>:<span class="string">"utf8"</span>,<span class="attr">flag</span>:<span class="string">'r'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"003 第二个参数为对象:"</span>,data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 写入文件内容(writeFile)</span></span><br><span class="line"><span class="keyword">var</span> fullPath = <span class="string">"./Hi.text"</span></span><br><span class="line">fs.writeFile(fullPath,<span class="string">"Beautiful"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="comment">//读取指定文件的内容</span></span><br><span class="line">  <span class="keyword">var</span> textContent = fs.readFileSync(fullPath,<span class="string">"utf8"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(textContent);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行和输出的结果为：</span></span><br><span class="line">wendingding$ node readAndWrite.js </span><br><span class="line"><span class="number">001</span> 第二个参数省略返回Buffer类型:</span><br><span class="line"> &lt;Buffer e6 <span class="number">96</span> <span class="number">87</span> e6 <span class="number">9</span>c ac <span class="number">3</span>a <span class="number">4</span>e <span class="number">69</span> <span class="number">63</span> <span class="number">65</span> <span class="number">20</span> <span class="number">74</span> <span class="number">6</span>f <span class="number">20</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">65</span> <span class="number">74</span> <span class="number">20</span> <span class="number">75</span> <span class="number">20</span>&gt;</span><br><span class="line">Beautiful</span><br><span class="line"><span class="number">002</span> 第二个参数为字符编码: 文本:Nice to meet u </span><br><span class="line"><span class="number">003</span> 第二个参数为对象: 文本:Nice to meet u</span><br></pre></td></tr></table></figure></p><p><strong>说明</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span> 方法说明</span><br><span class="line">在写数据到文件时候，如果文件不存在，则创建文件，如果文件已存在，则覆盖文件。</span><br><span class="line">如果 data 是一个 buffer，则忽略 encoding。</span><br><span class="line">options参数可以是对象，也可以是字符串，如果该参数是一个字符串，则用来指定字符编码。</span><br><span class="line"></span><br><span class="line"><span class="number">002</span> 对同一个文件多次使用 fs.writeFile() 且不等待回调，是不安全的。</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;background:#195;color:#fff"><strong>open 和 openSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)打开文件。<br><strong>语法</strong> <code>fs.open( path, flags , [ mode ], callback ) | fs.openSync( path, flags , [ mode ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> flags</span> (<code>integer类型</code>) 指定对文件的操作，具体取值参考文件系统的<code>flag</code>值。</li><li><span class="liX" style="width:100px"> mode</span> (<code>integer类型</code>) 指定文件的模式，仅在创建时有效(默认可读可写)。</li><li><span class="liX" style="width:100px"> callback</span> (<code>Function类型</code>) 执行完毕的回调函数(<code>err</code>,<code>fd</code>)。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>close 和 closeSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)关闭文件。<br><strong>语法</strong> <code>fs.close( fd, callback ) | fs.closeSync( fd )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> fd</span> (<code>integer类型</code>) 指定的文件描述符。</li><li><span class="liX" style="width:100px"> callback</span> (<code>Function类型</code>) 执行完毕的回调函数(<code>err</code>, <code>fd</code>)，参数值为错误对象。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>read 和 readSync </strong></span>  <span style="border:1px solid #000;padding:5px 20px;margin-left:20px"> <strong> write 和 writeSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)的<a href="">读取</a>或<a href="">写入</a>文件。<br><strong>语法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步 | 异步读取文件的内容。</span></span><br><span class="line">fs.readSync(fd, buffer, offset, length, position)</span><br><span class="line">fs.read(fd, buffer, offset, length, position, callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步 | 异步写入数据到文件中。</span></span><br><span class="line">fs.writeSync(fd, buffer, offset, length, position)</span><br><span class="line">fs.write(fd, buffer, offset, length, position, callback)</span><br></pre></td></tr></table></figure></p><p><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> fd</span> (<code>integer类型</code>) 通常为open方法回调中返回的文件描述符。</li><li><span class="liX" style="width:100px"> buffer</span> (<code>Buffer | TypedArray | DataView类型</code>)  指定将文件数据读取到哪个缓存区。</li><li><span class="liX" style="width:100px"> offset</span> (<code>integer类型</code>) 写入数据的开始位置(字节单位)。</li><li><span class="liX" style="width:100px"> length</span> (<code>integer类型</code>) 指定从文件读取的字节数。</li><li><span class="liX" style="width:100px"> position</span> (<code>integer类型</code>) 指定读取文件时的开始位置。</li><li><span class="liX" style="width:100px"> callback</span> (<code>Function类型</code>) 回调函数(<code>err</code>,<code>bytes(Read | Written)</code>,<code>buffer</code>)。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：openAndClose.js 文件的内容</span></span><br><span class="line"><span class="comment">//备注：在当前目录中先准备好Hi.text文件，内容为Nice !</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> fullPath = <span class="string">"./Hi.text"</span>;</span><br><span class="line"><span class="keyword">var</span> bufferWrite = <span class="keyword">new</span> Buffer(<span class="string">",请保持微笑 &gt;.&lt;"</span>);</span><br><span class="line"><span class="keyword">var</span> bufferRead = <span class="keyword">new</span> Buffer(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"000 打印文件的内容："</span>,fs.readFileSync(fullPath,<span class="string">"utf8"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 打开文件</span></span><br><span class="line"><span class="comment">//语法：fs.open( path, flags , [ mode ], callback ) </span></span><br><span class="line"><span class="comment">//参数：r+表示读取和写入文件，文件不存在则抛出异常</span></span><br><span class="line">fs.open(fullPath,<span class="string">"r+"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,fd</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"001 打开文件成功！"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//002 写入文件</span></span><br><span class="line">  <span class="comment">//语法：fs.write(fd, buffer, offset, length, position, callback)</span></span><br><span class="line">  fs.write(fd,bufferWrite,<span class="number">0</span>,bufferWrite.length,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,writtenBytes,bufferData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"002 写入的数据大小:"</span>,writtenBytes);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"002 写入的Buffer数据:"</span>,bufferData);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"002 写入的Buffer数据字符串:"</span>,bufferData.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 读取文件内容</span></span><br><span class="line">    <span class="comment">//fs.read(fd, buffer, offset, length, position, callback)</span></span><br><span class="line">    fs.read(fd,bufferRead,<span class="number">0</span>,bufferRead.length,<span class="number">0</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,readBytes,bufferData</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"003 读取的数据大小："</span>,readBytes);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"003 读取的Buffer数据:"</span>,bufferData);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"003 读取的Buffer数据字符串:"</span>,bufferData.toString());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//004 关闭文件</span></span><br><span class="line">      fs.close(fd,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"004 关闭文件成功！"</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节：</span></span><br><span class="line">wendingding$ node openAndClose.js </span><br><span class="line"><span class="number">000</span> 打印文件的内容： Nice !</span><br><span class="line"></span><br><span class="line"><span class="number">001</span> 打开文件成功！</span><br><span class="line"></span><br><span class="line"><span class="number">002</span> 写入的数据大小: <span class="number">20</span></span><br><span class="line"><span class="number">002</span> 写入的Buffer数据:</span><br><span class="line"> &lt;Buffer <span class="number">2</span>c e8 af b7 e4 bf <span class="number">9</span>d e6 <span class="number">8</span>c <span class="number">81</span> e5 be ae e7 ac <span class="number">91</span> <span class="number">20</span> <span class="number">3</span>e <span class="number">2</span>e <span class="number">3</span>c&gt;</span><br><span class="line"><span class="number">002</span> 写入的Buffer数据字符串: ,请保持微笑 &gt;.&lt;</span><br><span class="line"></span><br><span class="line"><span class="number">003</span> 读取的数据大小： <span class="number">25</span></span><br><span class="line"><span class="number">003</span> 读取的Buffer数据: </span><br><span class="line">&lt;Buffer <span class="number">4</span>e <span class="number">69</span> <span class="number">63</span> <span class="number">65</span> <span class="number">20</span> <span class="number">2</span>c e8 af b7 e4 bf <span class="number">9</span>d e6 <span class="number">8</span>c <span class="number">81</span> e5 be ae e7 ac <span class="number">91</span> <span class="number">20</span> <span class="number">3</span>e <span class="number">2</span>e <span class="number">3</span>c ···<span class="number">00</span>&gt;</span><br><span class="line"><span class="number">003</span> 读取的Buffer数据字符串: Nice ,请保持微笑 &gt;.&lt;</span><br><span class="line"></span><br><span class="line"><span class="number">004</span> 关闭文件成功！</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>appendFile 和 appendFileSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)追加数据到指定文件，如果文件不存在那么就先创建。<br><strong>语法</strong><br><code>fs.appendFileSync(path, data, [options])</code><br><code>fs.appendFile(path, data, [options], callback)</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> data</span> (<code>string | Buffer类型</code>) 追加的具体数据。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | string类型</code>) 配置<code>encoding、flag和mode</code>等字段。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>)，参数值为错误对象。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> filePath = <span class="string">"./Nice.text"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 同步追加数据到指定的文件(文件不存在)</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//语法：fs.appendFileSync(path, data, [options])</span></span><br><span class="line">  fs.appendFileSync(filePath,<span class="string">"妙：Nice!"</span>,&#123;<span class="attr">encoding</span>:<span class="string">"utf8"</span>&#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'创建文件，并追加数据到文件'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Error Info:"</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 异步方法追加数据</span></span><br><span class="line">fs.appendFile(filePath,<span class="string">" Best"</span>,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info: 追加数据成功！"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//003 读取文件的内容验证</span></span><br><span class="line">  <span class="keyword">var</span> resultData = fs.readFileSync(filePath,<span class="string">"utf8"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success resultData:"</span>,resultData);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节</span></span><br><span class="line">wendingding$ node appendFile.js </span><br><span class="line">创建文件，并追加数据到文件</span><br><span class="line">Success Info: 追加数据成功！</span><br><span class="line">Success resultData: 妙：Nice! Best</span><br><span class="line">wendingding$ cat Nice.text </span><br><span class="line">妙：Nice! Best</span><br></pre></td></tr></table></figure></p><p></p><p style="border:1px solid #000;padding:5px 5px;background:#666;color:#fff">② 目录操作</p><br><span style="border:1px solid #000;padding:5px 20px;"><strong>mkdir 和 mkdirSync</strong></span><p></p><p><strong>作用</strong> 异步(<code>同步</code>)创建文件夹(目录)。<br><strong>语法</strong> <code>fs.mkdir( path , [ options ], callback ) | fs.mkdirSync( path , [ options ] )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | integer类型</code>) 配置选项有<code>recursive</code>(是否创建父目录 10+)和<code>mode</code>。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>)，参数值为错误对象。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>readdir 和 readSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)读取文件夹(目录)。<br><strong>语法</strong> <code>fs.readdir( path , [ options ] , callback ) | fs.readdirSync( path , [ options ] )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | integer类型</code>) 配置选项有<code>encoding</code>和<code>withFileTypes</code>。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>,<code>files</code>)，表示错误对象和目录数组。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Options配置项说明</span><br><span class="line"></span><br><span class="line">[1]字符串作为参数，用于指定字符编码。</span><br><span class="line">[2]对象类型作为参数</span><br><span class="line">  encoding字段设置字符编码，默认为utf8 , 如果 encoding 设为 'buffer'，则返回的文件名是 Buffer。</span><br><span class="line">  withFileTypes字段设置回调函数files数组的元素结构，设置为true则数组的元素是fs.Dirent，默认为false。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #000;padding:5px 20px;"><strong>rmdir 和 rmdirSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)移除文件夹(目录)。<br><strong>语法</strong> <code>fs.rmdir( path , callback ) | fs.rmdirSync( path )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>)，表示错误对象。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：file.js文件内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 创建文件目录</span></span><br><span class="line">fs.mkdir(<span class="string">"./test"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info: "</span>,<span class="string">"创建目录成功"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//002 读取目录</span></span><br><span class="line">  fs.readdir(<span class="string">"./nodefs"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,files</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success Info: "</span>,<span class="string">"读取目录成功"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"列出具体的内容:\n "</span>,files);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 删除目录</span></span><br><span class="line">    <span class="comment">// fs.rmdir("./test",function()&#123;</span></span><br><span class="line">    <span class="comment">//   if(error) throw error;</span></span><br><span class="line">    <span class="comment">//   console.log("Success Info: ","删除test目录成功")</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 删除目录(遍历删除nodefs下面所有的子目录)</span></span><br><span class="line">    files.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> fullPath = <span class="string">"./nodefs/"</span> + element;</span><br><span class="line">      <span class="built_in">console</span>.log(fullPath);</span><br><span class="line">      fs.rmdir(fullPath,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Success Info: "</span>,<span class="string">"删除"</span>+fullPath+<span class="string">"目录成功"</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行和输出的结果为：</span></span><br><span class="line">wendingding$ node file.js</span><br><span class="line">Success Info:  创建目录成功</span><br><span class="line">Success Info:  读取目录成功</span><br><span class="line">列出具体的内容:</span><br><span class="line">  [ <span class="string">'.DS_Store'</span>, <span class="string">'a'</span>, <span class="string">'b'</span> ]</span><br><span class="line">./nodefs/.DS_Store</span><br><span class="line">./nodefs/a</span><br><span class="line">./nodefs/b</span><br><span class="line">Success Info:  删除./nodefs/.DS_Store目录成功</span><br><span class="line">Success Info:  删除./nodefs/a目录成功</span><br><span class="line">Success Info:  删除./nodefs/b目录成功</span><br></pre></td></tr></table></figure></p><div style="border:1px solid #000;padding:5px 5px;background:#666;color:#fff">③ 文件信息</div><p><span style="border:1px solid #000;padding:5px 20px;"><strong>access 和 accessSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)检查指定文件或目录的用户权限。<br><strong>语法</strong> <code>fs.access( path, [ mode ], callback ) | fs.accessSync( path , [ mode ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行检查完成的回调函数，如果失败则唯一的error参数有值。</li><li><span class="liX" style="width:100px"> mode</span> (<code>integer类型</code>)  默认值为<code>fs.constants.F_OK</code>   要执行的可访问性检查。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">001 文件的可访问性常量</span><br><span class="line">F_OK 文件可见 == 0</span><br><span class="line">R_OK 文件可读 == 4</span><br><span class="line">W_OK 文件可写 == 2</span><br><span class="line">X_OK 文件可执行(在 Windows上无效,效果同 fs.constants.F_OK) == 1</span><br><span class="line"></span><br><span class="line">002 使用建议</span><br><span class="line">不建议在调用 fs.open()、fs.readFile() 或 fs.writeFile() 之前使用 fs.access() 检查文件的可访问性。</span><br><span class="line">因为其他进程可能在两个调用的间隙改变文件的状态。 应该直接打开、读取或写入文件，当文件无法访问时再处理错误。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #000;padding:5px 20px;"><strong>stat 和 statSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)查看文件的属性。<br><strong>语法</strong> <code>fs.stat( path ,[ options ], callback) | fs.statSync( path )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> options</span> (<code>对象类型</code>)配置项bigint(布尔类型值)控制数值是否为 bigint 型。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)回调函数(<code>err</code>,<code>stats</code>)，<code>stats</code>保存文件信息对象。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：test.js 文件内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 stat方法说明：查看文件的属性</span></span><br><span class="line"><span class="comment">//不建议在调用 fs.open()、fs.readFile() 或 fs.writeFile() 之前使用 fs.stat() 检查文件是否存在。</span></span><br><span class="line"><span class="comment">//应该直接打开、读取或写入文件，当文件无效时再处理错误</span></span><br><span class="line">fs.stat(<span class="string">"./app.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,Info</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success Info:"</span>,Info);</span><br><span class="line">    <span class="comment">//查看是否为文件</span></span><br><span class="line">    <span class="built_in">console</span>.log(Info.isFile());</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 statSync方法说明：查看目录(文件夹)属性</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fileInfo = fs.statSync(<span class="string">"./nodefs"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info:"</span>,fileInfo);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Error Info: "</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行和输出的结果为：</span></span><br><span class="line">wendingding$ node test.js </span><br><span class="line">Success Info: Stats &#123;</span><br><span class="line">  dev: <span class="number">16777220</span>,</span><br><span class="line">  mode: <span class="number">16877</span>,</span><br><span class="line">  nlink: <span class="number">4</span>,</span><br><span class="line">  uid: <span class="number">501</span>,</span><br><span class="line">  gid: <span class="number">20</span>,</span><br><span class="line">  rdev: <span class="number">0</span>,</span><br><span class="line">  blksize: <span class="number">4194304</span>,</span><br><span class="line">  ino: <span class="number">8601434025</span>,</span><br><span class="line">  size: <span class="number">128</span>,</span><br><span class="line">  blocks: <span class="number">0</span>,</span><br><span class="line">  atimeMs: <span class="number">1543821747020.0398</span>,</span><br><span class="line">  mtimeMs: <span class="number">1543821696833.2778</span>,</span><br><span class="line">  ctimeMs: <span class="number">1543821701216.544</span>,</span><br><span class="line">  birthtimeMs: <span class="number">1543821692999.7283</span>,</span><br><span class="line">  atime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">22</span>:<span class="number">27.020</span>Z,</span><br><span class="line">  mtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">21</span>:<span class="number">36.833</span>Z,</span><br><span class="line">  ctime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">21</span>:<span class="number">41.217</span>Z,</span><br><span class="line">  birthtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">21</span>:<span class="number">33.000</span>Z &#125;</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">Success Info: Stats &#123;</span><br><span class="line">  dev: <span class="number">16777220</span>,</span><br><span class="line">  mode: <span class="number">33188</span>,</span><br><span class="line">  nlink: <span class="number">1</span>,</span><br><span class="line">  uid: <span class="number">501</span>,</span><br><span class="line">  gid: <span class="number">20</span>,</span><br><span class="line">  rdev: <span class="number">0</span>,</span><br><span class="line">  blksize: <span class="number">4194304</span>,</span><br><span class="line">  ino: <span class="number">8601330263</span>,</span><br><span class="line">  size: <span class="number">839</span>,</span><br><span class="line">  blocks: <span class="number">8</span>,</span><br><span class="line">  atimeMs: <span class="number">1543821852077.4976</span>,</span><br><span class="line">  mtimeMs: <span class="number">1543633822104.2488</span>,</span><br><span class="line">  ctimeMs: <span class="number">1543633822104.2488</span>,</span><br><span class="line">  birthtimeMs: <span class="number">1543632135491.0122</span>,</span><br><span class="line">  atime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">24</span>:<span class="number">12.077</span>Z,</span><br><span class="line">  mtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span>T03:<span class="number">10</span>:<span class="number">22.104</span>Z,</span><br><span class="line">  ctime: <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span>T03:<span class="number">10</span>:<span class="number">22.104</span>Z,</span><br><span class="line">  birthtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span>T02:<span class="number">42</span>:<span class="number">15.491</span>Z &#125;</span><br><span class="line">bogon:fs wendingding$</span><br></pre></td></tr></table></figure></p><p>在上面代码中异步方法回调函数中的<code>Info</code>和同步方法的返回值<code>fileInfo</code>都是<code>fs.Stats</code>类型对象。</p><blockquote><p><strong><code>fs.Stats</code>对象核心成员</strong><br><span class="spaceX backColor">mode</span>  当前文件的权限标识。<br><span class="spaceX backColor">nlink</span>  当前文件的硬链接数量。<br><span class="spaceX backColor" style="background:#195;color:#fff"><strong>size</strong></span>   当前文件的大小(字节数)。<br><span class="spaceX backColor">atime</span>  当前文件的访问时间。<br><span class="spaceX backColor">mtime</span>  当前文件的修改时间。<br><span class="spaceX backColor">ctime</span>  最后改变文件状态的时间。<br><span class="spaceX backColor">birthtime</span>  创建文件的时间。<br><span class="spaceX backColor" style="width:180px">isFile（）</span>  是否是一个文件。<br><span class="spaceX backColor" style="width:180px">isDirectory（）</span> 是否是一个目录。<br><span class="spaceX backColor" style="width:180px">isSymbolicLink（）</span>  是否是符号链接文件。</p></blockquote><p><span style="border:1px solid #000;padding:5px 20px;"><strong>fstat 和 fstatSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)查看文件的属性。<br><strong>语法</strong> <code>fs.fstat(fd ,[ options ], callback) | fs.fstatSync(fd ,[ options ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> fd</span> (<code>integer类型</code>) 使用open方法打开后返回的文件描述符。</li><li><span class="liX" style="width:100px"> options</span> (<code>对象类型</code>)配置项bigint(布尔类型值)控制数值是否为长整型。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)回调函数(<code>err</code>,<code>stats</code>)，<code>stats</code>保存文件信息对象。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>realpath 和 realpathSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)计算文件路径，解析 .、.. 与符号链接。<br><strong>语法</strong> <code>fs.realpath(path ,[ options ], callback) | fs.realpathSync(path ,[ options ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> options</span> (<code>对象类型</code>)配置项encoding设置字符编码(默认为<code>utf8</code>)。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)回调函数(<code>err</code>,<code>resolvedPath</code>)，<code>resolvedPath</code>保存完整路径。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：fileInfo.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> fullPath = <span class="string">"./Hi.text"</span>;</span><br><span class="line"><span class="comment">//001 打开文件</span></span><br><span class="line">fs.open(fullPath,<span class="string">"r"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fd</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info: 打开文件成功！"</span>);</span><br><span class="line">  <span class="comment">//002 查看文件信息</span></span><br><span class="line">  <span class="comment">//语法：fs.fstat(fd ,[ options ], callback)</span></span><br><span class="line">  fs.fstat(fd,<span class="function"><span class="keyword">function</span>(<span class="params">err,fileInfo</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Success fileInfo:"</span>,fileInfo);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//003 打印文件的完整路径</span></span><br><span class="line">      fs.realpath(fullPath,<span class="function"><span class="keyword">function</span>(<span class="params">err,resultPath</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"Successs Info =&gt; "</span>,resultPath);</span><br><span class="line"></span><br><span class="line">          fs.close(fd,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Success Info: 关闭文件成功！"</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节</span></span><br><span class="line">wendingding$ node fileInfo.js </span><br><span class="line">Success Info: 打开文件成功！</span><br><span class="line">Success fileInfo: Stats &#123;</span><br><span class="line">  dev: <span class="number">16777220</span>,</span><br><span class="line">  mode: <span class="number">33188</span>,</span><br><span class="line">  nlink: <span class="number">1</span>,</span><br><span class="line">  uid: <span class="number">501</span>,</span><br><span class="line">  gid: <span class="number">20</span>,</span><br><span class="line">  rdev: <span class="number">0</span>,</span><br><span class="line">  blksize: <span class="number">4194304</span>,</span><br><span class="line">  ino: <span class="number">8601453682</span>,</span><br><span class="line">  size: <span class="number">25</span>,</span><br><span class="line">  blocks: <span class="number">8</span>,</span><br><span class="line">  atimeMs: <span class="number">1543894023563.2808</span>,</span><br><span class="line">  mtimeMs: <span class="number">1543894022418.2258</span>,</span><br><span class="line">  ctimeMs: <span class="number">1543894022418.2258</span>,</span><br><span class="line">  birthtimeMs: <span class="number">1543633825190.9485</span>,</span><br><span class="line">  atime: <span class="number">2018</span><span class="number">-12</span><span class="number">-04</span>T03:<span class="number">27</span>:<span class="number">03.563</span>Z,</span><br><span class="line">  mtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-04</span>T03:<span class="number">27</span>:<span class="number">02.418</span>Z,</span><br><span class="line">  ctime: <span class="number">2018</span><span class="number">-12</span><span class="number">-04</span>T03:<span class="number">27</span>:<span class="number">02.418</span>Z,</span><br><span class="line">  birthtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span>T03:<span class="number">10</span>:<span class="number">25.191</span>Z &#125;</span><br><span class="line">Successs Info =&gt;  <span class="regexp">/Users/</span>文顶顶/Desktop/fs/Hi.text</span><br><span class="line">Success Info: 关闭文件成功</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;;background:#195;color:#fff"><strong>rename 和 renameSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)对文件进行重命名操作。<br><strong>语法</strong> <code>fs.rename( oldPath, newPath, callback ) | fs.renameSync( oldPath, newPath )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> oldPath</span> (<code>string | Buffer | URL类型</code>)原来的文件全路径。</li><li><span class="liX" style="width:100px"> newPath</span> (<code>string | Buffer | URL类型</code>)目标文件全路径名称。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)回调函数(<code>err</code>)，若文件已存在则覆盖。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：rename.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> oldPath = <span class="string">"./Hi.text"</span>;</span><br><span class="line"><span class="keyword">var</span> newPath = <span class="string">"./newHi.text"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 执行重命名操作</span></span><br><span class="line">fs.rename(oldPath,newPath,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info:文件重命名成功！"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//002 读取文件的内容</span></span><br><span class="line">  fs.readFile(newPath,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fileData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success fileData:"</span>,fileData);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节</span></span><br><span class="line">wendingding$ node rename.js </span><br><span class="line">Success Info:文件重命名成功！</span><br><span class="line">Success fileData: Nice ,请保持微笑 &gt;.&lt;</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文对Node的内置模块fs进行介绍，包括模块的基本情况和简单使用。&lt;/div&gt;

&lt;h4 id=&quot;1-0-模块介绍&quot;&gt;&lt;a href=&quot;#1-0-模块介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 模块介绍&quot;&gt;&lt;/a&gt;1.0
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-http</title>
    <link href="https://weibo.com/u/3800117445/2018/11/28/Node%E7%B3%BB%E5%88%97-http/"/>
    <id>https://weibo.com/u/3800117445/2018/11/28/Node系列-http/</id>
    <published>2018-11-28T15:20:13.000Z</published>
    <updated>2018-12-04T09:50:37.573Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文对Node的内置模块http进行介绍，包括该模块的基本情况和简单使用。</div><h4 id="1-0-模块简介"><a href="#1-0-模块简介" class="headerlink" title="1.0 模块简介"></a>1.0 模块简介</h4><p><a href="">http</a>是Node的内置核心模块，包含了对HTTP处理的封装。</p><p>在Nodejs文件中可以直接在代码里通过<code>var http = require(&quot;http&quot;)</code>的方式来进行加载，该模块主要用来处理客户端HHTP请求以及服务器端的响应。在传统的HTTP服务器可能会使用<code>Apache</code>、<code>Nginx</code>或<code>IIS</code>之类的服务器端软件来处理，但在Node中并不需要这么复杂，我们使用它内置的http模块就可以非常方便的来构建服务器而且稳定可靠(<span style="color:#2c3e50"><strong>Node中的HTTP服务器继承自TCP服务器的<code>net</code>模块，它能够与多个客户端保持连接，因为其采用事件驱动的形式而并不会为每个连接都创建额外的线程，这保证了服务器的低内存占用率以实现高并发</strong></span>)。</p><p>我们可以非常方便的使用http模块来创建服务器或者是发起客户端网络请求。下面给代码示例：</p><blockquote><p><strong>创建Node服务器</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：文件名为server.js</span></span><br><span class="line"><span class="comment">//001 引入Node内置的http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 创建http服务器</span></span><br><span class="line"><span class="keyword">var</span> httpServer = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置响应头信息</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">"Content-type"</span>:<span class="string">"text/plain;charset=utf-8"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置具体的响应信息</span></span><br><span class="line">    response.write(<span class="string">"Hi! Nice to meet u ...\n\n"</span>);</span><br><span class="line">    response.write(<span class="string">"这是响应的信息01---\n"</span>);</span><br><span class="line">    response.write(<span class="string">"这是响应的信息02---\n"</span>);</span><br><span class="line">    response.write(<span class="string">"这是响应的信息03---\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//响应结束(end)</span></span><br><span class="line">    response.end(<span class="string">"这是响应的信息04---end"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 开启服务监听</span></span><br><span class="line">httpServer.listen(<span class="number">3000</span>,<span class="string">"127.0.0.1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"开启服务监听：3000端口"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行这段代码(<code>在命令中通过node server.js运行</code>)，终端打印<code>开启服务监听：3000端口</code>信息。<br>在浏览器中访问<a href="">http://127.0.0.1:3000/</a>页面将显示下面的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hi! Nice to meet u ...</span><br><span class="line"></span><br><span class="line">这是响应的信息01---</span><br><span class="line">这是响应的信息02---</span><br><span class="line">这是响应的信息03---</span><br><span class="line">这是响应的信息04---end</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>发起HTTP网络请求</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 声明变量(组织数据)</span></span><br><span class="line"><span class="keyword">var</span> responseData = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="string">"host"</span>:<span class="string">"127.0.0.1"</span>, <span class="comment">//请求的主机地址</span></span><br><span class="line">    <span class="string">"port"</span>:<span class="string">"3000"</span>,      <span class="comment">//请求的端口号</span></span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"get"</span>      <span class="comment">//请求的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//003 创建并发起Http网络Get请求</span></span><br><span class="line">http.request(options,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事件监听：接收服务器端返回的数据(响应数据)</span></span><br><span class="line">    response.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        responseData += data;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事件监听：如果接收完成那么就打印服务器返回的所有数据</span></span><br><span class="line">    response.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"服务器端响应完成，接收到的数据："</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(responseData);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).end();</span><br></pre></td></tr></table></figure><p>上面的代码通过http模块中的<code>http.request</code>方法创建并发起一个网络请求，并监听服务器的响应，当接收完服务器返回的响应数据之后打印并显示，给出执行情况。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wendingding:node wendingding$ node request.js </span><br><span class="line">服务器端响应完成，接收到的数据：</span><br><span class="line">Hi! Nice to meet u ...</span><br><span class="line"></span><br><span class="line">这是响应的信息01---</span><br><span class="line">这是响应的信息02---</span><br><span class="line">这是响应的信息03---</span><br><span class="line">这是响应的信息04---end</span><br></pre></td></tr></table></figure></p><h4 id="2-0-HTTP报文"><a href="#2-0-HTTP报文" class="headerlink" title="2.0 HTTP报文"></a>2.0 HTTP报文</h4><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_http.png?raw=true"></p><p>HTTP全称<code>HyperText Transfer Protocol</code>，即超文本传协议，属于应用层协议构建于TCP协议之上。</p><p>HTTP协议规定了客户端和服务器端之间应该如何进行通信。在<code>请求-响应模型</code>中，请求是客户端向服务器端索要数据或服务的过程，响应是服务器端把数据返回给客户端(为客户端提供服务)的过程，我们把它们在通信过程中的消息内容称为HTTP报文，下面简单介绍HTTP报文的结构(<a href="http://wendingding.com/2018/01/17/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8CHTTP%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">也可以参考这篇文章</a>)。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_http02.png?raw=true"></p><blockquote><p><strong>HTTP请求报文结构</strong><br><strong>❏</strong> <code>请求行</code>   请求的方法和协议等信息<br><strong>❏</strong> <code>请求头</code>   客户端以及请求本身的描述信息<br><strong>❏</strong> <code>请求体</code>  提交给服务器端的参数(GET请求没有请求体信息)</p></blockquote><p><div></div></p><blockquote><p><strong>HTTP响应报文结构</strong><br><strong>❏</strong> <code>状态行</code>   请求的状态码<br><strong>❏</strong> <code>响应头</code>   服务器端以及对响应本身的描述信息<br><strong>❏</strong> <code>响应体</code>   服务器返回给客户端的具体数据(<code>JSON/XML/Other</code>)。</p></blockquote><p>为了方便理解，这里我们使用命令行工具中的curl来发起网络请求并打印报文详情。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">wendingding:node wendingding$ curl -v 127.0.0.1:3000</span><br><span class="line">* Rebuilt URL to: 127.0.0.1:3000/</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 3000 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1:3000</span><br><span class="line">&gt; User-Agent: curl/7.49.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Content-type: text/plain;charset=utf-8</span><br><span class="line">&lt; Date: Thu, 29 Nov 2018 03:05:54 GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; </span><br><span class="line">* Connection <span class="comment">#0 to host 127.0.0.1 left intact</span></span><br><span class="line">Hi ! Nice to meet u ~</span><br></pre></td></tr></table></figure></p><p><strong>备注</strong> HTTP协议采用的是请求-响应模式，基本上以一问一答的方式来实现服务，需要注意虽然HTTP服务基于TCP会话实现但其本身却没有会话的特点且HTTP协议传递的消息都是明文的。</p><h4 id="3-0-服务端核心方法"><a href="#3-0-服务端核心方法" class="headerlink" title="3.0 服务端核心方法"></a>3.0 服务端核心方法</h4><p><span style="border:1px solid #000;padding:5px 20px;"><strong>createServer方法</strong></span></p><p><strong>作用</strong> 创建HTTP服务器。<br><strong>语法</strong> <code>var server = http.createServer([ RequsetListener ])</code><br><strong>参数</strong>  &nbsp;&nbsp;<span class="liX" style="width:150px"> RequsetListener</span>           可选的函数类型 | 用于指定当接收到客户端请求时执行的回调函数。<br><strong>展开</strong><br><span style="color:#607B8B"><strong>声明</strong></span><code>function RequsetListener(request,response){//...函数体}</code><br><span style="color:#607B8B"><strong>形参</strong></span></p><ul><li><div class="liX">request</div>   <strong>http.IncomingMessage</strong>对象 | 包含客户端请求信息。</li><li><div class="liX">response</div>  <strong>http.ServerResponse</strong>对象&nbsp;&nbsp;&nbsp;  | 包含服务器响应相关的信息和方法。</li></ul><blockquote><p><span style="color:#607B8B"><strong>第一个参数 → request的核心成员</strong></span> </p></blockquote><p><span class="spaceXX backColor">request.method</span> 请求方法。<br><span class="spaceXX backColor">request.url</span> 请求的路径。<br><span class="spaceXX backColor">request.headers</span> 请求头信息(对象)。<br><span class="spaceXX backColor">request.rawHeaders</span> 接收到的原始请求头信息。<br><span class="spaceXX backColor">request.httpVersion</span> 请求使用的HTTP协议版本。</p><blockquote><p><span style="color:#607B8B"><strong>第二个参数 → response的核心成员</strong></span> </p></blockquote><p><span class="spaceXX backColor ">response.finished</span> 响应是否已完成(默认<code>false</code>)。<br><span class="spaceXX backColor ">response.statusCode</span> 隐式响应头返回的状态码。<br><span class="spaceXX backColor ">response.statusMessage</span> 隐式响应头返回的状态信息。<br><span class="spaceXX backColor wMax">response.getHeaders()</span> 获取所有响应头信息(浅拷贝)。<br><span class="spaceXX backColor wMax">response.getHeader(name)</span> 读取指定的响应头信息。<br><span class="spaceXX backColor wMax">response.getHeaderNames()</span> 获取响应头信息字段数组。<br><span class="spaceXX backColor wMax">response.removeHeader(name)</span> 删除指定的响应头信息。<br><span class="spaceXX backColor wMax">response.setHeader(name, value)</span> 设置响应头信息同<code>writeHead</code>。<br><span class="spaceXX backColor wMax">response.setTimeout(msecs，[callback])</span> 设置 socket 的超时时间。<br><span class="spaceXX backColor wMax" style="background:#195;color:#fff">response.write(chunk,[encoding],[callback])</span> 设置响应体数据。<br><span class="spaceXX backColor wMax" style="background:#195;color:#fff">response.end([data],[encoding],[callback])</span> 设置响应体数据(结束)。<br><span class="spaceXX backColor wMax" style="background:#195;color:#fff">response.writeHead(statusCode,[msg],[headers])</span> 设置响应头信息，优先级更高。</p><p>在<code>createServer</code>回调函数中两个参数分别是请求对象和响应对象，其中请求对象封装了对TCP连接的读操作，而响应对象则封装了对底层连接的写操作。这里做深入的展开：</p><p>当接收到客户端发起的网络请求后，HTTP请求报文的头部将通过模块内的<code>http_parser</code>进行解析，在解析的过程中，请求行(第一行:<code>GET / HTTP/1.1</code>)被分解为<code>method(GET)、url(/)、httpVersion(1.1)</code>属性，而请求头中的信息被保存到<code>headers</code>属性。</p><p>如果客户端请求中存在请求体(参数)，那么可以通过<code>url</code>模块的parse方法来解析路径获取参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 引入Node内置的http模块</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 创建http服务器</span></span><br><span class="line"><span class="keyword">var</span> httpServer = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用url模块把请求路径解析为对象</span></span><br><span class="line">    <span class="keyword">var</span> urlObj = url.parse(request.url,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印请求对象中的核心属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"method "</span> + request.method); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"url "</span> + request.url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"query "</span>,urlObj.query);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"httpVersion "</span> + request.httpVersion); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"headers "</span>,request.headers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取客户端提交的参数(请求体信息)</span></span><br><span class="line">     <span class="comment">//设置响应头信息</span></span><br><span class="line">     response.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">"Content-type"</span>:<span class="string">"text/plain;"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置响应信息</span></span><br><span class="line">    response.end(<span class="string">"Hi! Nice to meet u ~"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;).listen(<span class="number">3000</span>,<span class="string">"127.0.0.1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"开启服务监听：3000端口"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在命令行窗口中通过<code>node</code>命令来执行，下面列出打印结果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wendingding:node wendingding$ node server.js </span><br><span class="line">开启服务监听：3000端口</span><br><span class="line">method GET</span><br><span class="line">url    /?username=wendingding&amp;password=123</span><br><span class="line">query  &#123; username: <span class="string">'wendingding'</span>, password: <span class="string">'123'</span> &#125;</span><br><span class="line">httpVersion 1.1</span><br><span class="line"></span><br><span class="line">headers  </span><br><span class="line">&#123; <span class="string">'host'</span>: <span class="string">'127.0.0.1:3000'</span>,</span><br><span class="line">  <span class="string">'connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">  <span class="string">'cache-control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line">  <span class="string">'upgrade-insecure-requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">  <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 AppleWebKit/537.36 Chrome/70.0.3538.102 Safari/537.36'</span>,</span><br><span class="line">  <span class="string">'accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/apng,*/*;q=0.8'</span>,</span><br><span class="line">  <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">  <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">  <span class="string">'cookie'</span>: <span class="string">'io=6oIwtImAumUxvtIvAACD'</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以通过响应对象（<code>response</code>）来设置响应头信息以及构建响应体。</p><p>响应对象的<code>setHeader</code>方法和<code>writeHead</code>方法都能够设置响应头信息，它们的区别在于<span style="color:#195"><strong>只有当调用writeHead方法后，通过setHeader设置(可以调用N次)的信息才会被写入到连接(响应头)中</strong></span>。</p><p>响应对象的<code>write</code>方法和<code>end</code>方法均能够用来构建响应体信息，它们的区别在于<code>end</code>方法执行的时候会先调用内部的<code>write</code>方法来发送数据，然后发送信号告知服务器本次响应结束，响应结束后，HTTP服务器可能会将当前连接直接用于后面的请求或者是关闭网络连接。</p><p><strong>注意点</strong> 设置响应头信息需要在write和end方法前，响应结束后应该调用end方法结束请求，否则客户端将一直处于等待状态。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>listen方法</strong></span></p><p><strong>作用</strong> 开启服务器监听。<br><strong>语法</strong> <code>http.createServer().listen(port,[host],[backlog],[callBack])</code><br><strong>参数</strong>  </p><ul><li><span class="liX" style="width:100px"> port</span> 指定需要监听的端口号。</li><li><span class="liX" style="width:100px"> host</span> 指定需要监听的地址，省略表示监听所有的客户端连接。</li><li><span class="liX" style="width:100px"> backlog</span> 指定允许客户端连接的最大数量，默认511。</li><li><span class="liX" style="width:100px"> callBack</span> 指定<code>listening</code>事件触发的回调函数(没有任何参数)。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>writeHead方法</strong></span></p><p><strong>作用</strong> 设置响应头信息。<br><strong>语法</strong> <code>response.writeHead(statusCode,[msg],[headers])</code><br><strong>参数</strong>  </p><ul><li><span class="liX" style="width:100px"> statusCode</span> 响应状态吗，譬如200。</li><li><span class="liX" style="width:100px"> msg</span> 响应状态信息，譬如<code>Not found</code>。</li><li><span class="liX" style="width:100px"> headers</span> 具体的响应头信息(<code>以key:value</code>组织成对象)。</li></ul><h4 id="4-0-客户端核心方法"><a href="#4-0-客户端核心方法" class="headerlink" title="4.0 客户端核心方法"></a>4.0 客户端核心方法</h4><p>HTTP客户端的处理方式同服务器端的处理方式几乎一致，不同在于服务器端主要设置响应头和构建响应体信息，而客户端主要设置请求信息(请求头和请求体)，它本身其实就是服务器端服务模型的另一部分。我们可以使用<code>request</code>方法来发起一个网络请求，或者也可以直接使用<code>get</code>方法来快速的发起一个get请求，其结构同Ajax异步发送网络请求基本一致。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>request方法</strong></span></p><p><strong>作用</strong> 创建并发送网络请求。<br><strong>语法</strong> <code>http.request(url,[ options ],[ callBack ]) | http.request(options,[ callBack ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> options</span> 请求的配置对象。</li><li><span class="liX" style="width:100px"> callBack</span> 获取服务器端响应时执行的函数，参数为响应对象。</li></ul><blockquote><p><strong>Options主要配置项</strong><br><strong>❏</strong> <span class="liYY">host</span>        服务器的域名或IP地址，默认为<code>localhost</code>。<br><strong>❏</strong> <span class="liYY">hostname</span>    服务器的名称。<br><strong>❏</strong> <span class="liYY">port</span>         服务器端口，默认为<code>80</code>。<br><strong>❏</strong> <span class="liYY">method</span>       请求方法，默认为<code>GET</code>。<br><strong>❏</strong> <span class="liYY">path</span>         请求路径，默认为<code>/</code>。<br><strong>❏</strong> <span class="liYY">agent</span>      用于指定HTTP代理。<br><strong>❏</strong> <span class="liYY">headers</span>      用于指定客户端的请求头信息。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 创建并发起Http网络Get请求</span></span><br><span class="line"><span class="keyword">var</span> httpRequest = http.request(&#123;</span><br><span class="line">    <span class="string">"host"</span>:<span class="string">"127.0.0.1"</span>, <span class="comment">//请求的主机地址</span></span><br><span class="line">    <span class="string">"port"</span>:<span class="string">"3000"</span>,      <span class="comment">//请求的端口号</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取响应对象中的信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"statusCode "</span>,res.statusCode);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"响应头信息 "</span>,res.headers);</span><br><span class="line">    res.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"响应体数据 ==&gt; "</span>,data.toString(<span class="string">"utf8"</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 结束请求</span></span><br><span class="line">httpRequest.end();</span><br></pre></td></tr></table></figure><p>在命令行工具中通过<code>node</code>命令来发起网络请求，并打印服务器返回的响应信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wendingding:node wendingding$ node request.js </span><br><span class="line">statusCode  200</span><br><span class="line">响应头信息  &#123; <span class="string">'content-type'</span>: <span class="string">'text/plain;'</span>,</span><br><span class="line">  date: <span class="string">'Thu, 29 Nov 2018 07:53:36 GMT'</span>,</span><br><span class="line">  connection: <span class="string">'close'</span>,</span><br><span class="line">  <span class="string">'transfer-encoding'</span>: <span class="string">'chunked'</span> &#125;</span><br><span class="line">响应体数据 ==&gt;  Hi! Nice to meet u ~</span><br></pre></td></tr></table></figure><h4 id="5-0-事件"><a href="#5-0-事件" class="headerlink" title="5.0 事件"></a>5.0 事件</h4><p>为了方便应用层的使用，HTTP服务器和客户端都抽象了一些事件，这些事件都能够使用<code>on</code>方法来进行监听，不同的事件对应请求或响应的不同阶段。</p><blockquote><p><strong>HTTP服务事件</strong> </p></blockquote><p><span class="prop"><strong>connection</strong></span>  当客户端和服务器建立连接的时候触发。<br><span class="prop" style="background:#e96900;color:#fff"><strong>request</strong></span>  在请求发送到服务器端并解析出请求头后触发。<br><span class="prop"><strong>close</strong></span>  当调用close方法停止接受新连接已有连接都断开的时候触发。<br><span class="prop"><strong>connect</strong></span>  当客户端发起CONNECT请求(代理)的时候触发。<br><span class="prop"><strong>timeout</strong></span>  当服务器超时的时候触发(可以通过<code>server.setTimeOut</code>来设置)。</p><blockquote><p><strong>HTTP请求事件</strong> </p></blockquote><p><span class="spaceX"><strong>timeout</strong></span> 当客户端请求超时的触发。<br><span class="spaceX" style="background:#195;color:#fff"><strong>abort</strong></span>  当请求已被客户端终止时触发。<br><span class="spaceX" style="background:#195;color:#fff"><strong>response</strong></span>  当接收到服务器响应的时候触发。<br><span class="spaceX"><strong>socket</strong></span>  当底层连接池中建立的连接分配给当前请丢对象时触发。<br><span class="spaceX"><strong>connect</strong></span>  当客户端发起CONNECT请求时，如果服务器端返回200则触发。</p><p>http模块中事件的监听和触发比较恶心，这里简单在下面列出具体的情况。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">如果请求成功，则以下事件会被依次触发：</span><br><span class="line">    ① 'socket' 事件。</span><br><span class="line">    ② 'response' 事件。</span><br><span class="line">        [1] res 对象的 'data' 事件（多次，若响应体为空，则不触发）。</span><br><span class="line">        [2] res 对象的 'end' 事件。</span><br><span class="line">    ③ 'close' 事件。</span><br><span class="line"></span><br><span class="line">如果连接出错，则以下事件会被依次触发：</span><br><span class="line">    ① 'socket' 事件。</span><br><span class="line">    ② 'error'  事件。</span><br><span class="line">    ③ 'close'  事件。</span><br><span class="line"></span><br><span class="line">如果连接成功之前调用 req.abort()，则以下事件会被依次触发：</span><br><span class="line">    ① 'socket' 事件。</span><br><span class="line">        (此时调用 req.abort())</span><br><span class="line">    ② 'abort' 事件。</span><br><span class="line">    ③ 'close' 事件。</span><br><span class="line">    ④ 'error' 事件并带上错误信息 'Error: socket hang up' 和错误码 'ECONNRESET'。</span><br><span class="line"></span><br><span class="line">如果响应接收到之后调用 req.abort()，则以下事件会被依次触发：</span><br><span class="line">    ① 'socket' 事件。</span><br><span class="line">    ② 'response' 事件。</span><br><span class="line">        [1] res 对象的 'data' 事件（多次）。</span><br><span class="line">        (此时调用 req.abort())</span><br><span class="line">    ③ 'abort' 事件。</span><br><span class="line">    ④ 'close' 事件。</span><br><span class="line">        res 对象的 'aborted' 事件。</span><br><span class="line">        res 对象的 'end' 事件。</span><br><span class="line">        res 对象的 'close' 事件。</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文对Node的内置模块http进行介绍，包括该模块的基本情况和简单使用。&lt;/div&gt;

&lt;h4 id=&quot;1-0-模块简介&quot;&gt;&lt;a href=&quot;#1-0-模块简介&quot; class=&quot;headerlink&quot; title=&quot;1.0 模块简介&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-REPL</title>
    <link href="https://weibo.com/u/3800117445/2018/11/27/Node%E7%B3%BB%E5%88%97-PRPL/"/>
    <id>https://weibo.com/u/3800117445/2018/11/27/Node系列-PRPL/</id>
    <published>2018-11-26T16:22:13.000Z</published>
    <updated>2018-11-28T03:56:35.752Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_repl.png?raw=true"></p><div class="tip">本文主要介绍Node提供的交互式运行环境REPL，包括常见操作以及基础命令等内容。</div><h4 id="1-0-REPL介绍"><a href="#1-0-REPL介绍" class="headerlink" title="1.0 REPL介绍"></a>1.0 REPL介绍</h4><p>在Node.js中，提供了一个交互式的运行环境-REPL(<strong><code>Read-Eval-Print-Loop</code></strong>)。</p><div><br><span style="border:1px solid #000;padding:5px"><strong>REPL解释器执行任务的方式</strong></span><br><br>❏  <div class="liYY"><strong>Read</strong></div>  <strong>读取</strong>用户输入并存储。<br>❏  <div class="liYY"><strong>Eval</strong></div>  <strong>执行</strong>用户输入的代码。<br>❏  <div class="liYY"><strong>Print</strong></div> <strong>输出</strong>代码的执行结果。<br>❏  <div class="liYY"><strong>Loop</strong></div>  <strong>循环</strong>执行以上步骤，直到退出。<br></div><p>在REPL环境中我们可以<strong>操作变量</strong>、<strong>执行JavaScript文件</strong>、<strong>访问和使用Node内置的模块</strong>、<strong>声明和调用函数</strong>甚至<strong>开启服务器</strong>，在该环境中可以方便的对JavaScript代码进行调试操作。</p><h4 id="2-0-基本操作"><a href="#2-0-基本操作" class="headerlink" title="2.0 基本操作"></a>2.0 基本操作</h4><p>在安装好Node.js之后，打开命令行窗口输入<code>node</code>指令即可进入到REPL环境。此时，命令行窗口中将会显示REPL运行环境的提示符<code>&gt;</code></p><p><span style="border:1px solid #000;padding:5px"><strong>操作变量</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; name = <span class="string">"wendingding"</span></span><br><span class="line"><span class="string">'wendingding'</span></span><br><span class="line">&gt; age = <span class="number">18</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">"姓名："</span>+name,<span class="string">"年龄："</span>+age)</span><br><span class="line">姓名：wendingding 年龄：<span class="number">18</span></span><br><span class="line"></span><br><span class="line">&gt; obj = &#123;<span class="attr">className</span>:<span class="string">"太乙金仙"</span>,<span class="attr">id</span>:<span class="number">01</span>&#125;;</span><br><span class="line">&#123; <span class="attr">className</span>: <span class="string">'太乙金仙'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;</span><br><span class="line">&gt; obj.className</span><br><span class="line"><span class="string">'太乙金仙'</span></span><br><span class="line">&gt; obj.id</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>上面的命令行中我们直接把字符串赋值给<code>name</code>，把数字18赋值给<code>age</code>。此外，还以字面量的方式创建了<code>obj对象</code>，而且通常观察发现REPL环境对JavaScript代码的支持还是比较好的。上面命令行在演示操作变量的时候，并没有使用<code>var</code>关键字，需要注意的是在REPL环境中如果<span style="color:#666"><strong>把表达式赋值给var 关键字声明的变量，那么回车之后得到的结果将是undefined</strong></span>。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wendingding:JQuery wendingding$ node</span><br><span class="line">&gt; <span class="keyword">var</span> name = <span class="string">"LiuY"</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; name</span><br><span class="line"><span class="string">'LiuY'</span></span><br><span class="line">&gt; <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"LiuY"</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">birthday</span>:<span class="string">"1993-08-22"</span>&#125;;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; obj</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">birthday</span>: <span class="string">'1993-08-22'</span> &#125;</span><br><span class="line">&gt; obj.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) &#125;</span><br><span class="line">[<span class="built_in">Function</span>]</span><br><span class="line">&gt; obj.showName</span><br><span class="line">[<span class="built_in">Function</span>]</span><br><span class="line">&gt; obj.showName();</span><br><span class="line">LiuY</span><br></pre></td></tr></table></figure><div class="titleX"> <span style="color:#666">★</span> 为什么输出的是undefined而不是具体的值？</div><p>变量是否使用var声明其结果截然不同，是因为<code>REPL环境内部使用eval函数来评估表达式的执行结果</code>。</p><p>eval函数的作用主要是把字符串转换为JavaScript的代码并且马上执行，在早期开发中常用来处理JSON数据的反序列化处理(具体的详情可以参考<a href="http://wendingding.com/2018/04/16/javaScript%E7%B3%BB%E5%88%97%20[05]-javaScript%E5%92%8CJSON/" target="_blank" rel="noopener">JSON数据解析</a>)，但因为eval函数的使用存在严重的安全隐患问题且会破坏JavaScript代码本身的词法作用域影响性能，所以不建议使用(在严格模式下禁用)。我们可以通过执行下面的代码来进行比较和验证。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">"name='wendingding'"</span>));</span><br><span class="line">wendingding</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">"var newName='wendingding'"</span>));</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure></p><p><strong>备注</strong> 在REPL环境中访问对象方法(函数)的时候，并不会完整的打印整个函数的内容而总是简单的显示和输出<code>[Function]</code>，这是因为函数内容可能又臭又长，做人做事呐还是简单点好 <span style="color:#195"> <strong>：）</strong></span></p><p><span style="border:1px solid #000;padding:5px"><strong>下划线字符</strong></span></p><p>在REPL环境中，我们可以通过下划线字符(<code>_</code>)来访问最近使用的表达式。您可以通过(<code>_</code>)来访问最近的变量，对象甚至是对象的属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wendingding:JQuery wendingding$ node</span><br><span class="line">&gt; index = <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; _ + <span class="number">4</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">&gt;  obj = &#123;<span class="attr">name</span>:<span class="string">"LiuY"</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age)&#125;&#125;</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">show</span>: [<span class="built_in">Function</span>: show] &#125;</span><br><span class="line">&gt; obj.name</span><br><span class="line"><span class="string">'LiuY'</span></span><br><span class="line">&gt; _</span><br><span class="line"><span class="string">'LiuY'</span></span><br><span class="line">&gt; obj.show</span><br><span class="line">[<span class="built_in">Function</span>: show]</span><br><span class="line">&gt; _</span><br><span class="line">[<span class="built_in">Function</span>: show]</span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> 在使用下划线字符(<code>_</code>)访问最近表达式的时候并不能修改变量的值。</div><p><span style="border:1px solid #000;padding:5px"><strong>多行输入</strong></span></p><p>在REPL环境中支持输入多行代码，如果需要在REPL环境中声明和执行函数而且函数体较长，那么可以将函数分成多行来书写(直接回车即可)，当该表达式还没有完成的时候，REPL环境将为每一行添加<code>···</code>符号，下面给出简单的使用示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding:JQuery wendingding$ node</span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">... var result = a + b;</span><br><span class="line">... console.log(result);</span><br><span class="line">... return result;</span><br><span class="line">... &#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><h4 id="3-0-基础命令"><a href="#3-0-基础命令" class="headerlink" title="3.0 基础命令"></a>3.0 基础命令</h4><p><span class="spaceX">.break </span> 返回命令提示符的起点，常用于重写代码(调整)。<br><span class="spaceX">.clear </span> 返回命令提示符的起点，同<code>.break</code>命令。<br><span class="spaceX">.exit </span>  退出当前的REPL运行环境。<br><span class="spaceX">.help</span>  显示REPL环境中所有的基础命令。<br><span class="spaceX">.save </span>  把REPL环境中输入的所有表达式保存到文件。<br><span class="spaceX">.load </span>  把指定文件中的所有表达式依次加载到当前的REPL运行环境。</p><p><strong><code>说明</code></strong> 在Node.js中提供了一些基础命令来帮助我们更好的使用REPL运行环境，这些基础命令都以点(<code>.</code>)开始，下面给出简单示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">wendingding:JQuery wendingding$ cd /Users/文顶顶/Desktop/node </span><br><span class="line">wendingding:node wendingding$ touch index.js</span><br><span class="line">wendingding:node wendingding$ vim index.js </span><br><span class="line">wendingding:node wendingding$ cat index.js </span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"文顶顶"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name:<span class="string">"zs"</span>,</span><br><span class="line">class:"Node",</span><br><span class="line">show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name+<span class="string">" 班级："</span>+ <span class="keyword">this</span>.class)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 测试.load命令</span></span><br><span class="line">wendingding:node wendingding$ node</span><br><span class="line">&gt; .load ./index.js</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"文顶顶"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name:<span class="string">"zs"</span>,</span><br><span class="line">class:"Node",</span><br><span class="line">show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name+<span class="string">" 班级："</span>+ <span class="keyword">this</span>.class)</span><br><span class="line">&#125;        </span><br><span class="line">&#125;        </span><br><span class="line">&gt; obj.name</span><br><span class="line"><span class="string">'zs'</span></span><br><span class="line">&gt; name</span><br><span class="line"><span class="string">'文顶顶'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 测试.help命令</span></span><br><span class="line">&gt; .help</span><br><span class="line">.break    Sometimes you get stuck, <span class="keyword">this</span> gets you out</span><br><span class="line">.clear    Alias <span class="keyword">for</span> .break</span><br><span class="line">.editor   Enter editor mode</span><br><span class="line">.exit     Exit the repl</span><br><span class="line">.help     Print <span class="keyword">this</span> help message</span><br><span class="line">.load     Load JS <span class="keyword">from</span> a file into the REPL session</span><br><span class="line">.save     Save all evaluated commands <span class="keyword">in</span> <span class="keyword">this</span> REPL session to a file</span><br><span class="line">&gt; index = <span class="string">"我是测试的内容"</span>;</span><br><span class="line"><span class="string">'我是测试的内容'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//003 测试.save命令</span></span><br><span class="line">&gt; .save ./save.js</span><br><span class="line">Session saved to:./save.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 测试.exit命令</span></span><br><span class="line">&gt; .exit</span><br><span class="line">wendingding:node wendingding$ cat save.js </span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"文顶顶"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name:<span class="string">"zs"</span>,</span><br><span class="line">class:"Node",</span><br><span class="line">show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name+<span class="string">" 班级："</span>+ <span class="keyword">this</span>.class)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.name</span><br><span class="line">name</span><br><span class="line">index = <span class="string">"我是测试的内容"</span>;</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/node_repl.png?raw=true&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;本文主要介绍Node提供的交互式运行环境REPL，包
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-Query String</title>
    <link href="https://weibo.com/u/3800117445/2018/11/26/Node%E7%B3%BB%E5%88%97-queryString/"/>
    <id>https://weibo.com/u/3800117445/2018/11/26/Node系列-queryString/</id>
    <published>2018-11-26T15:20:13.000Z</published>
    <updated>2018-11-26T10:08:51.061Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文对Node的内置模块Query String进行介绍，包括基本情况和简单使用。</div><h4 id="1-0-模块简介"><a href="#1-0-模块简介" class="headerlink" title="1.0 模块简介"></a>1.0 模块简介</h4><p><a href="">Query String</a>是Node的内置核心模块之一，无需单独安装。在Nodejs文件中可以直接在代码里通过<code>var querystring = require(&quot;querystring&quot;)</code>的方式来进行加载，该模块主要用来处理URL路径中查询字符串的转换工作。</p><p><strong>查询字符串</strong> 在GET请求的URL路径中，请求的参数会以键值对的方式拼接(键和值之间使用=连接，多个键值对之间使用&amp;符号连接)并以?分隔符跟在请求路径的后面。这一段参数字符串其实就是查询字符串，譬如在<code>http://www.wendingding.com/doc?name=node系列-NPM&amp;page=1</code>这个URL路径中，<code>name=node系列-NPM&amp;page=1</code>就是所谓的查询字符串。</p><p>在命令行环境中可以直接通过REPL来查看Query String模块的内容，这个模块本身返回一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bogon:~ wendingding$ node</span><br><span class="line">&gt; querystring</span><br><span class="line">&#123; <span class="attr">unescapeBuffer</span>: [<span class="built_in">Function</span>: unescapeBuffer],</span><br><span class="line">  <span class="built_in">unescape</span>: [<span class="built_in">Function</span>: qsUnescape],</span><br><span class="line">  <span class="built_in">escape</span>: [<span class="built_in">Function</span>: qsEscape],</span><br><span class="line">  stringify: [<span class="built_in">Function</span>: stringify],</span><br><span class="line">  encode: [<span class="built_in">Function</span>: stringify],</span><br><span class="line">  parse: [<span class="built_in">Function</span>: parse],</span><br><span class="line">  decode: [<span class="built_in">Function</span>: parse] &#125;</span><br></pre></td></tr></table></figure><p><strong>Query String模块中两个比较重要的方法</strong></p><ul><li><code>parse方法</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于将查询字符串转换为对象。</li><li><code>stringify方法</code>&nbsp;用于将对象序列化为查询字符串。</li></ul><h4 id="2-0-基本使用"><a href="#2-0-基本使用" class="headerlink" title="2.0 基本使用"></a>2.0 基本使用</h4><p>这里主要介绍Query String模块中常用方法的基本使用、这些方法的作用、参数传递以及返回值结构等情况，并提供简短的代码示例。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>parse方法</strong></span></p><p><strong>作用</strong> 把查询字符串转换(反序列化)为对象。<br><strong>语法</strong> <code>querystring.parse( str , [ sep ] , [ eq ] , [ options ])</code><br><strong>参数</strong></p><ul><li><div class="liX widthX">str</div>           字符串类型 | 指定待转换的查询字符串。</li><li><div class="liX widthX">sep</div> 字符串类型 | 指定查询字符串中的分隔字符，默认为<code>&amp;</code>。</li><li><div class="liX widthX">eq</div> 字符串类型 | 指定查询字符串中的分配字符(连接键和值)，默认为<code>=</code>。</li><li><div class="liX widthX">options</div> 对象类型 | 设置maxKeys字段的值可以来控制转换结果中属性的个数。</li></ul><p><strong>返回值</strong> 反序列化成功后，将返回转换后的对象。<br><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 最简单的使用方式</span></span><br><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="keyword">var</span> str = <span class="string">"name=LiuY&amp;password=931007&amp;star=best"</span>;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; <span class="keyword">var</span> obj = querystring.parse(str);</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; obj</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">password</span>: <span class="string">'931007'</span>, <span class="attr">star</span>: <span class="string">'best'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 测试分割字符参数</span></span><br><span class="line">&gt; querystring.parse(<span class="string">"name=LiuY&amp;password=931007&amp;star=best"</span>);</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">password</span>: <span class="string">'931007'</span>, <span class="attr">star</span>: <span class="string">'best'</span> &#125;</span><br><span class="line">&gt; querystring.parse(<span class="string">"name=LiuY&amp;password=931007&amp;star=best"</span>,<span class="string">"@"</span>);</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY&amp;password=931007&amp;star=best'</span> &#125;</span><br><span class="line">&gt; querystring.parse(<span class="string">"name=LiuY@password=931007@star=best"</span>,<span class="string">"@"</span>);</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">password</span>: <span class="string">'931007'</span>, <span class="attr">star</span>: <span class="string">'best'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 测试分配字符</span></span><br><span class="line">&gt; querystring.parse(<span class="string">"name=LiuY&amp;password=931007&amp;star=best"</span>,<span class="string">"&amp;"</span>,<span class="string">"="</span>);</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">password</span>: <span class="string">'931007'</span>, <span class="attr">star</span>: <span class="string">'best'</span> &#125;</span><br><span class="line">&gt; querystring.parse(<span class="string">"name=LiuY&amp;password=931007&amp;star=best"</span>,<span class="string">"&amp;"</span>,<span class="string">":"</span>);</span><br><span class="line">&#123; <span class="string">'name=LiuY'</span>: <span class="string">''</span>, <span class="string">'password=931007'</span>: <span class="string">''</span>, <span class="string">'star=best'</span>: <span class="string">''</span> &#125;</span><br><span class="line">&gt; querystring.parse(<span class="string">"name:LiuY&amp;password:931007&amp;star:best"</span>,<span class="string">"&amp;"</span>,<span class="string">":"</span>);</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">password</span>: <span class="string">'931007'</span>, <span class="attr">star</span>: <span class="string">'best'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 测试配置对象</span></span><br><span class="line">&gt; querystring.parse(<span class="string">"name=LiuY&amp;password=931007&amp;star=best"</span>,<span class="string">"&amp;"</span>,<span class="string">"="</span>,&#123;<span class="attr">maxKeys</span>:<span class="number">2</span>&#125;);</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">password</span>: <span class="string">'931007'</span> &#125;</span><br><span class="line">&gt; querystring.parse(<span class="string">"name=LiuY&amp;password=931007&amp;star=best"</span>,<span class="string">"&amp;"</span>,<span class="string">"="</span>,&#123;<span class="attr">maxKeys</span>:<span class="number">1</span>&#125;);</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span> &#125;</span><br><span class="line">&gt; querystring.parse(<span class="string">"name=LiuY&amp;password=931007&amp;star=best"</span>,<span class="string">"&amp;"</span>,<span class="string">"="</span>,&#123;<span class="attr">maxKeys</span>:<span class="number">0</span>&#125;);</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">password</span>: <span class="string">'931007'</span>, <span class="attr">star</span>: <span class="string">'best'</span> &#125;</span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> options配置对象中当字段maxKeys的值为0时等价于没有设置该参数。</div><p><span style="border:1px solid #000;padding:5px 20px;"><strong>stringify方法</strong></span></p><p><strong>作用</strong> 把对象序列化为查询字符串。<br><strong>语法</strong> <code>querystring.stringify( obj , [ sep ] , [ eq ] )</code><br><strong>参数</strong></p><ul><li><div class="liX widthX">obj</div>           对象类型 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| 指定待转换的对象。</li><li><div class="liX widthX">sep</div> 字符串类型 | 指定查询字符串中的分隔字符，默认为<code>&amp;</code>。</li><li><div class="liX widthX">eq</div> 字符串类型 | 指定查询字符串中的分配字符(连接键和值)，默认为<code>=</code>。</li></ul><p><strong>返回值</strong> 序列化成功后，返回转换后的查询字符串。<br><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 基本用法</span></span><br><span class="line">wendingding$ node</span><br><span class="line">&gt;  <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'wendingding'</span>, <span class="attr">password</span>: <span class="string">'911021'</span>, <span class="attr">star</span>: <span class="string">'other'</span> &#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; querystring.stringify(obj);</span><br><span class="line"><span class="string">'name=wendingding&amp;password=911021&amp;star=other'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 测试分隔字符参数</span></span><br><span class="line">&gt; querystring.stringify(obj,<span class="string">"@"</span>);</span><br><span class="line"><span class="string">'name=wendingding@password=911021@star=other'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//003 测试分配字符参数</span></span><br><span class="line">&gt; querystring.stringify(obj,<span class="string">"&amp;"</span>,<span class="string">":"</span>);</span><br><span class="line"><span class="string">'name:wendingding&amp;password:911021&amp;star:other'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//004 如果生成的查询字符串中有中文那么默认进行转码处理</span></span><br><span class="line">&gt; querystring.stringify(&#123; <span class="attr">name</span>: <span class="string">'文顶顶'</span>, <span class="attr">password</span>: <span class="string">'911021'</span>, <span class="attr">star</span>: <span class="string">'other'</span> &#125;);</span><br><span class="line"><span class="string">'name=%E6%96%87%E9%A1%B6%E9%A1%B6&amp;password=911021&amp;star=other'</span></span><br></pre></td></tr></table></figure></p><h4 id="3-0-番外篇"><a href="#3-0-番外篇" class="headerlink" title="3.0 番外篇"></a>3.0 番外篇</h4><p>通过学习我们发现，Query String模块不论是内部结构还是其主要方法的使用相对都是比较简单的。如果您对JavaScript语言比较熟悉那么就会发现Query String模块中的序列化和反序列方法同JavaScript语言中原生的<code>JSON.parse</code>和<code>JSON.stringify</code>方法很像，而转换的过程和jQuery框架中<code>$().serialize()</code>内部依赖的<code>$.param</code>方法也几乎无差。</p><p>其实，如果要自己动手来实现也不会很复杂，下面列出示例代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringify</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrM = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj)</span><br><span class="line">    &#123;</span><br><span class="line">        arrM.push(key + <span class="string">"="</span> + obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURI</span>(arrM.join(<span class="string">"&amp;"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> objM = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> arrM = <span class="built_in">decodeURI</span>(str).split(<span class="string">"&amp;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrM.length; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> keyAndValueArr = arrM[i].split(<span class="string">"="</span>);</span><br><span class="line">        objM[keyAndValueArr[<span class="number">0</span>]] = keyAndValueArr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码和运行结果</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"文顶顶"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(stringify(obj));         <span class="comment">//name=%E6%96%87%E9%A1%B6%E9%A1%B6&amp;age=18</span></span><br><span class="line"><span class="built_in">console</span>.log(parse(stringify(obj)));  <span class="comment">//&#123;name: "文顶顶", age: "18"&#125;</span></span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文对Node的内置模块Query String进行介绍，包括基本情况和简单使用。&lt;/div&gt;

&lt;h4 id=&quot;1-0-模块简介&quot;&gt;&lt;a href=&quot;#1-0-模块简介&quot; class=&quot;headerlink&quot; title=&quot;1.0 模块简介&quot;&gt;
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-url</title>
    <link href="https://weibo.com/u/3800117445/2018/11/25/Node%E7%B3%BB%E5%88%97-url/"/>
    <id>https://weibo.com/u/3800117445/2018/11/25/Node系列-url/</id>
    <published>2018-11-25T15:20:13.000Z</published>
    <updated>2018-12-01T01:32:39.187Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文对Node的内置模块url进行介绍，包括基本情况和简单使用。</div><h4 id="1-0-模块的内容"><a href="#1-0-模块的内容" class="headerlink" title="1.0 模块的内容"></a>1.0 模块的内容</h4><p><a href="https://nodejs.org/dist/latest-v10.x/docs/api/url.html" target="_blank" rel="noopener">url</a>是Node的内置核心模块之一，无需单独安装可以直接在代码中通过<code>var url = require(&quot;url&quot;)</code>的方式加载，该模块提供了很多使用的函数专门用于URL的处理和解析。</p><p>在命令行环境中可以直接通过REPL来查看URL模块的内容，这个模块本身返回一个对象。</p><p><strong>URL模块中有三个比较重要的方法</strong></p><ul><li><code>parse方法</code> &nbsp;&nbsp;&nbsp;&nbsp;用于将URL字符串转换为对象</li><li><code>format方法</code>&nbsp;&nbsp;&nbsp;用于将特定的对象还原为URL字符串</li><li><code>resolve方法</code>&nbsp;用于将两个(字符串 base url对象和href url对象)路径合成一个路径。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bogon:~ wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.dir(url);</span><br><span class="line">&#123; <span class="attr">Url</span>: [<span class="built_in">Function</span>: Url],</span><br><span class="line">  parse: [<span class="built_in">Function</span>: urlParse],</span><br><span class="line">  resolve: [<span class="built_in">Function</span>: urlResolve],</span><br><span class="line">  resolveObject: [<span class="built_in">Function</span>: urlResolveObject],</span><br><span class="line">  format: [<span class="built_in">Function</span>: urlFormat],</span><br><span class="line">  URL: [<span class="built_in">Function</span>: URL],</span><br><span class="line">  URLSearchParams: [<span class="built_in">Function</span>: URLSearchParams],</span><br><span class="line">  domainToASCII: [<span class="built_in">Function</span>: domainToASCII],</span><br><span class="line">  domainToUnicode: [<span class="built_in">Function</span>: domainToUnicode] &#125;</span><br></pre></td></tr></table></figure><p><strong>URL的结构</strong></p><p>Node内置的url模块提供了两套API来处理URL字符串</p><ul><li>Node.js特有的API，是旧版本的遗留；</li><li>实现了<a href="http://nodejs.cn/api/url.html#url_class_url" target="_blank" rel="noopener">WHATWG URL Standard</a>的API ，该标准也在各种浏览器中被使用。</li></ul><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_url.png?raw=true"></p><p>上图给出的是两套API的结构比较情况。其中网址上方是Node API中的的<code>url.parse()方法</code>解析后返回的对象结构，网址下方的则是WHATWG URL对象的结构，在具体使用的时候需要注意区分。</p><p>使用示例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WHATWG URL Standard API</span></span><br><span class="line"><span class="keyword">const</span> &#123; URL &#125; = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> myURL =</span><br><span class="line">  <span class="keyword">new</span> URL(<span class="string">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Node API</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> myURL =</span><br><span class="line">  url.parse(<span class="string">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="2-0-基本使用"><a href="#2-0-基本使用" class="headerlink" title="2.0 基本使用"></a>2.0 基本使用</h4><p>这里主要介绍URL模块中常用方法的基本使用、这些方法的作用、参数传递以及返回值结构等情况，并提供简短的代码示例。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>parse方法</strong></span></p><p><strong>作用</strong> 解析URL字符串并返回URL对象。<br><strong>语法</strong> <code>url.parse( urlStr , [ parseQueryString ] , [ slashesDenoteHost ])</code><br><strong>参数</strong></p><ul><li><div class="liX">urlStr</div>           字符串类型 | 待解析的 URL 字符串</li><li><div class="liX">parseQueryString</div> 布尔值类型 | 是否把查询字符串转换为对象。</li><li><div class="liX">slashesDenoteHost</div> 布尔值类型 | 是否把<code>//后...下一个/之前</code>的字符串会解析为host。</li></ul><p><strong>返回值</strong></p><ul><li><div class="liY">解析成功</div> URL对象。</li><li><div class="liY">解析失败</div> 报错(若参数非字符串抛出<code>TypeError</code>|若无法编码抛出<code>URIError</code>) 。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">url.parse(<span class="string">"https://user:pass@www.wendingding.com:8080/p/a/t/h?query=string#hash"</span>)</span><br><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="string">'https:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="string">'user:pass'</span>,</span><br><span class="line">  host: <span class="string">'www.wendingding.com:8080'</span>,</span><br><span class="line">  port: <span class="string">'8080'</span>,</span><br><span class="line">  hostname: <span class="string">'www.wendingding.com'</span>,</span><br><span class="line">  hash: <span class="string">'#hash'</span>,</span><br><span class="line">  search: <span class="string">'?query=string'</span>,</span><br><span class="line">  query: <span class="string">'query=string'</span>,</span><br><span class="line">  pathname: <span class="string">'/p/a/t/h'</span>,</span><br><span class="line">  path: <span class="string">'/p/a/t/h?query=string'</span>,</span><br><span class="line">  href: <span class="string">'https://user:pass@www.wendingding.com:8080/p/a/t/h?query=string#hash'</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>URL对象字段说明</strong><br><span class="spaceX">href</span> 被转换的原URL字符串。<br><span class="spaceX" style="background:#195;color:#fff">protocol</span> 请求使用的协议。<br><span class="spaceX">auth</span> URL字符串中的认证信息。<br><span class="spaceX">host</span> URL字符串中的完整地址和端口号。<br><span class="spaceX">port</span> URL字符串中的端口号。<br><span class="spaceX">slashes</span>  协议和路径中间是否使用//分隔符。<br><span class="spaceX">hostname</span> URL字符串中的完整地址(<code>主机名</code>|<code>IP地址</code>)。<br><span class="spaceX">hash</span> URL字符串中的散列字符串，包含起始字符<code>#</code>。<br><span class="spaceX">search</span> URL字符串中的查询字符串，包含起始字符<code>?</code>。<br><span class="spaceX">path</span> URL字符串中的路径，包含查询字符串。<br><span class="spaceX" style="background:#195;color:#fff">pathname</span> URL字符串中的路径，不包含查询字符串。<br><span class="spaceX" style="background:#195;color:#fff">query</span> 查询字符串(如果parseQueryString参数传递true，则保存为对象)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt;<span class="keyword">var</span> obj = url.parse(<span class="string">"https://www.wendingding.com/doc?name=mitaoer&amp;password=931007"</span>,<span class="literal">true</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt;obj</span><br><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="string">'https:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="literal">null</span>,</span><br><span class="line">  host: <span class="string">'www.wendingding.com'</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  hostname: <span class="string">'www.wendingding.com'</span>,</span><br><span class="line">  hash: <span class="literal">null</span>,</span><br><span class="line">  search: <span class="string">'?name=mitaoer&amp;password=931007'</span>,</span><br><span class="line">  query: &#123; <span class="attr">name</span>: <span class="string">'mitaoer'</span>, <span class="attr">password</span>: <span class="string">'931007'</span> &#125;,</span><br><span class="line">  pathname: <span class="string">'/doc'</span>,</span><br><span class="line">  path: <span class="string">'/doc?name=mitaoer&amp;password=931007'</span>,</span><br><span class="line">  href: <span class="string">'https://www.wendingding.com/doc?name=mitaoer&amp;password=931007'</span> &#125;</span><br><span class="line">&gt; obj.query</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'mitaoer'</span>, <span class="attr">password</span>: <span class="string">'931007'</span> &#125;</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #000;padding:5px 20px;"><strong>format方法</strong></span></p><p><strong>作用</strong> 把URL对象转换(序列化)为URL字符串。<br><strong>语法</strong> <code>url.format( url , [ options ])</code><br><strong>参数</strong></p><ul><li><div class="liX">url</div>           <a href="http://nodejs.cn/api/url.html#url_the_whatwg_url_api" target="_blank" rel="noopener">WHATWG URL</a>类型的对象。</li><li><div class="liX">options</div>       对象类型 | 用于控制转换(序列化)的配置。</li></ul><p><strong>返回值</strong> 如果解析成功，那么就返回对应的URL字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">obj</span><br><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="string">'https:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="literal">null</span>,</span><br><span class="line">  host: <span class="string">'www.wendingding.com'</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  hostname: <span class="string">'www.wendingding.com'</span>,</span><br><span class="line">  hash: <span class="literal">null</span>,</span><br><span class="line">  search: <span class="string">'?name=mitaoer&amp;password=931007'</span>,</span><br><span class="line">  query: &#123; <span class="attr">name</span>: <span class="string">'mitaoer'</span>, <span class="attr">password</span>: <span class="string">'931007'</span> &#125;,</span><br><span class="line">  pathname: <span class="string">'/doc'</span>,</span><br><span class="line">  path: <span class="string">'/doc?name=mitaoer&amp;password=931007'</span>,</span><br><span class="line">  href: <span class="string">'https://www.wendingding.com/doc?name=mitaoer&amp;password=931007'</span> &#125;</span><br><span class="line">&gt; obj.query</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'mitaoer'</span>, <span class="attr">password</span>: <span class="string">'931007'</span> &#125;</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">var</span> urlStr = url.format(obj)</span><br><span class="line">&gt; urlStr</span><br><span class="line"><span class="string">'https://www.wendingding.com/doc?name=mitaoer&amp;password=931007'</span></span><br></pre></td></tr></table></figure><p><strong>备注</strong> 该方法第二个参数Options参数是可选的接受一个配置对象，可以配置下面列出的四个字段它们都是布尔类型的值，如果不配置那么默认均为true。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search      是否应该包含搜索查询。</span><br><span class="line">auth        是否应该包含用户名和密码。</span><br><span class="line">fragment    结果字符串是否应该包含分段。</span><br><span class="line">unicode     Unicode字符是否应该被直接编码。</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>resolve方法</strong></span></p><p><strong>作用</strong> 同浏览器那样把URL转换为完整的目标地址。<br><strong>语法</strong> <code>url.resolve( from , to )</code><br><strong>参数</strong></p><ul><li><div class="liX">from</div>           字符串类型 | 解析时相对的基本 URL(起点路径)</li><li><div class="liX">to</div>             字符串类型 | 要解析的超链接的 URL(参考路径)。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; url.resolve(<span class="string">'/one/two/three'</span>, <span class="string">'four'</span>);  </span><br><span class="line"><span class="string">'/one/two/four'</span></span><br><span class="line">&gt; url.resolve(<span class="string">'http://www.wendingding.com/'</span>, <span class="string">'/one'</span>);</span><br><span class="line"><span class="string">'http://www.wendingding.com/one'</span></span><br><span class="line">&gt; url.resolve(<span class="string">'http://www.wendingding.com/one'</span>, <span class="string">'/two'</span>);</span><br><span class="line"><span class="string">'http://www.wendingding.com/two'</span></span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文对Node的内置模块url进行介绍，包括基本情况和简单使用。&lt;/div&gt;

&lt;h4 id=&quot;1-0-模块的内容&quot;&gt;&lt;a href=&quot;#1-0-模块的内容&quot; class=&quot;headerlink&quot; title=&quot;1.0 模块的内容&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-cnpm</title>
    <link href="https://weibo.com/u/3800117445/2018/11/25/Node%E7%B3%BB%E5%88%97-cnpm/"/>
    <id>https://weibo.com/u/3800117445/2018/11/25/Node系列-cnpm/</id>
    <published>2018-11-24T16:22:13.000Z</published>
    <updated>2018-11-27T08:55:31.949Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/b674d29f60a0c9b6474843a70d305b7ab6c8da99/68747470733a2f2f7261772e6769746875622e636f6d2f636e706d2f636e706d6a732e6f72672f6d61737465722f6c6f676f2e706e67" style="width:200px"></p><div class="tip">本文输出Node中另一款包管理工具CNPM相关的内容，包括基本情况和简单使用。</div><h4 id="1-0-简单介绍"><a href="#1-0-简单介绍" class="headerlink" title="1.0 简单介绍"></a>1.0 简单介绍</h4><p><a href="https://github.com/cnpm/cnpm" target="_blank" rel="noopener">CNPM</a>是阿里的Node团队开发的一款NPM工具，由蚂蚁金服Node技术专家<a href="http://fengmk2.github.io/" target="_blank" rel="noopener">苏千</a>(<code>袁锋·Node技术专家</code>)和<a href="https://github.com/dead-horse" target="_blank" rel="noopener">死马</a>(<code>何翊宇·Node技术专家·koa.js和egg.js框架核心维护者</code>)主导，内核使用了自主研发的<a href="https://github.com/cnpm/npminstall" target="_blank" rel="noopener">npminstall</a>实现。CNPM依托于<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a>，在国内能够更快速的进行包和依赖的安装。</p><p>在<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像网站</a>上面有关于镜像的说明：<span style="color:#195">“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步”</span>。</p><p>也就是说，我们在管理和安装包的时候使用淘宝NPM镜像跟直接使用npm来进行安装的资源其实是相同的，因为国内网络环境的原因，我们直接使用淘宝NPM镜像来下载包速度会更快一些。</p><h4 id="2-0-基本使用"><a href="#2-0-基本使用" class="headerlink" title="2.0 基本使用"></a>2.0 基本使用</h4><div class="titleX"><strong>安装CNPM</strong></div><p><span class="spaceY spaceL" style="width:410px;">$ npm install -g cnpm </span> 全局安装CNPM<br><span class="spaceY spaceL" style="width:410px;">$ npm install -g cnpm - -registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></span> 全局安装CNPM并切换源</p><p><strong>注意</strong> 在命令行工具中执行上面命令的时候<code>--</code>中间没有空格。</p><p>在全局安装<code>CNPM</code>的时候如果切换了源，将会从<a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">Registry.npm.taobao.org</a>来安装模块。当安装的时候如果发现安装的模块还没有同步过来, 那么淘宝NPM会自动在后台进行同步, 并且会让你从官方NPM <a href="https://registry.npmjs.org/" target="_blank" rel="noopener">Registry.npmjs.org</a>进行安装. 当下次再安装这个模块的时候则直接从淘宝NPM安装。</p><div class="titleX"><strong>查看CNPM版本</strong></div><br><span class="spaceY" style="width:100px;">$ cnpm -v</span> 查看cnpm的版本信息<br><br><div class="titleX"><strong>包的安装</strong></div><p><code>CNPM</code>支持 <code>npm</code> 除了 <code>publish</code> 之外的所有命令，而且这些命令的使用方式和<code>npm</code>完全一致。</p><p><span class="spaceY spaceL" style="width:160px;">$ cnpm install xxx</span> 安装指定包到当前路径(<code>局部安装</code>)<br><span class="spaceY spaceL" style="width:160px;">$ cnpm install -g xxx</span> 安装指定包到全局包安装路径(<code>全局安装</code>)</p><p>这里简单列出上面几个命令的执行演示。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br><span class="line">npm WARN deprecated socks@1.1.10: If using 2.x branch, please upgrade to at least 2.1.6 </span><br><span class="line">to avoid a serious bug with socket data flow and an import issue introduced <span class="keyword">in</span> 2.1.0</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/cnpm -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/cnpm/bin/cnpm</span><br><span class="line">+ cnpm@6.0.0</span><br><span class="line">added 12 packages, removed 8 packages and updated 58 packages <span class="keyword">in</span> 29.841s</span><br><span class="line"></span><br><span class="line">wendingding$ cnpm -v</span><br><span class="line">cnpm@6.0.0 (/usr/<span class="built_in">local</span>/lib/node_modules/cnpm/lib/parse_argv.js)</span><br><span class="line">npm@6.4.1 (/usr/<span class="built_in">local</span>/lib/node_modules/cnpm/node_modules/npm/lib/npm.js)</span><br><span class="line">node@8.9.3 (/usr/<span class="built_in">local</span>/bin/node)</span><br><span class="line">npminstall@3.16.0 (/usr/<span class="built_in">local</span>/lib/node_modules/cnpm/node_modules/npminstall/lib/index.js)</span><br><span class="line">prefix=/usr/<span class="built_in">local</span> </span><br><span class="line">darwin x64 17.4.0 </span><br><span class="line">registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">wendingding$ cnpm install jquery</span><br><span class="line">✔ Installed 1 packages</span><br><span class="line">✔ Run 0 scripts</span><br><span class="line">✔ All packages installed (1 packages installed from npm registry, </span><br><span class="line">used 624ms(network 622ms), speed 660.5kB/s, json 1(5.19kB), tarball 405.64kB)</span><br><span class="line"></span><br><span class="line">dingding:cnpm wendingding$ cnpm install -g jquery</span><br><span class="line">Downloading jquery to /usr/<span class="built_in">local</span>/lib/node_modules/jquery_tmp</span><br><span class="line">Copying /usr/<span class="built_in">local</span>/lib/node_modules/jquery_tmp/_jquery@3.3.1@jquery </span><br><span class="line">to /usr/<span class="built_in">local</span>/lib/node_modules/jquery</span><br><span class="line">Installing jquery<span class="string">'s dependencies </span></span><br><span class="line"><span class="string">to /usr/local/lib/node_modules/jquery/node_modules</span></span><br><span class="line"><span class="string">All packages installed (used 4ms(network 2ms), speed 0B/s, json 0(0B), tarball 0B)</span></span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>同步模块</strong></div><p><span class="spaceY" style="width:200px;">$ cnpm sync xxx</span> 同步指定的模块。</p><p><code>CNPM</code>还支持同步模块，只需要使用<code>sync</code>命令即可，下面列出同步模块命令的执行细节。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ cnpm sync jquery</span><br><span class="line">Start sync [<span class="string">"jquery"</span>].</span><br><span class="line">sync jquery, PUT https://registry.npm.taobao.org/jquery/sync?publish=<span class="literal">false</span>&amp;nodeps=<span class="literal">false</span></span><br><span class="line">logurl: https://npm.taobao.org/sync/jquery<span class="comment">#logid=6065624</span></span><br><span class="line">[2018-11-27 10:16:56] </span><br><span class="line">    user: anonymous, sync jquery worker start, 1 concurrency, </span><br><span class="line">    nodeps: <span class="literal">false</span>, publish: <span class="literal">false</span>, syncUpstreamFirst: <span class="literal">false</span></span><br><span class="line">[2018-11-27 10:16:56] ----------------- Syncing jquery -------------------</span><br><span class="line">[2018-11-27 10:16:56] </span><br><span class="line">  [c<span class="comment">#0] [jquery] package(https://r.cnpmjs.org/jquery) status: 200,</span></span><br><span class="line">  dist-tags: &#123;<span class="string">"beta"</span>:<span class="string">"3.3.1"</span>,<span class="string">"latest"</span>:<span class="string">"3.3.1"</span>&#125;, </span><br><span class="line">  time.modified: 2018-01-20T17:27:17.000Z, unpublished: null, start...</span><br><span class="line">[2018-11-27 10:16:56]   [jquery] found 0 missing star users</span><br><span class="line">[2018-11-27 10:16:56]   [jquery] all versions are exists</span><br><span class="line">[2018-11-27 10:16:56]   [jquery] no versions need to deleted</span><br><span class="line">[2018-11-27 10:16:56]   [jquery] all 383 npm users exists</span><br><span class="line">[2018-11-27 10:16:56] [c<span class="comment">#0] [jquery] synced success, 0 versions: </span></span><br><span class="line">[2018-11-27 10:16:56] ----------------- Synced jquery success -------------------</span><br><span class="line">[2018-11-27 10:16:56] [<span class="keyword">done</span>] Sync jquery package finished, 1 success, 0 fail</span><br><span class="line">Success: [ jquery ]</span><br><span class="line">Fail: [  ]</span><br><span class="line">Sync all packages <span class="keyword">done</span>, successed: [<span class="string">"jquery"</span>], failed: []</span><br></pre></td></tr></table></figure></p><h4 id="3-0-番外篇"><a href="#3-0-番外篇" class="headerlink" title="3.0 番外篇"></a>3.0 番外篇</h4><p>我们使用CNPM的主要原因在于它在处理包的时候速度更快，很多人认为它的可取之处仅在于使用了国内的镜像，其实就算不用国内的镜像，CNPM的安装速度相对NPM也要更快一些。这是因为<strong>CNPM在处理的时候会把一些包缓存到<code>node_module/.npminstall</code>目录下，再以符号链接的方式将依赖目录链接到其对应的路径，这样做的好处是相同版本的包在安装的过程中实际上只有一份实体</strong>。</p><p><code>CNPM</code>截止本文最新的版本<code>6.0.0</code>,在目录结构和依赖支持方面它的4.2以及4.3+版本是比较重要的一个分水岭。在4.2的版本里，它的目录结构和<code>NPM 2</code>保持一致，是嵌入式的结构。后来因为<code>NPM 3</code>的原因导致很多前端以及部分Node依赖在NPM 2下无法正常工作。</p><p>因此，在4.3版本中CNMP为前端开发者加入了扁平化的支持，即后期的版本中除按照嵌入式目录结构安装依赖外，还会顺便将计算得到的依赖(<strong>依赖</strong> 、<strong>依赖的依赖</strong>或者是<strong>依赖的特定版本</strong>)存放一份到node_moudles目录下，不过这也导致<strong style="color:#f00">node_moubles下目录成群···</strong></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b674d29f60a0c9b6474843a70d305b7ab6c8da99/68747470733a2f2f7261772e6769746875622e636f6d2f636e7
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-npm</title>
    <link href="https://weibo.com/u/3800117445/2018/11/24/Node%E7%B3%BB%E5%88%97-npm/"/>
    <id>https://weibo.com/u/3800117445/2018/11/24/Node系列-npm/</id>
    <published>2018-11-24T15:21:13.000Z</published>
    <updated>2018-11-27T05:13:33.842Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://npm.community/uploads/npm1/original/1X/ddff80661892358cd69fe28b6ca91718589a7aa0.png" style="width:100px"></p><div class="tip">本文输出Node中和包管理有关的基本内容，即npm的使用。</div><h4 id="1-0-简单介绍"><a href="#1-0-简单介绍" class="headerlink" title="1.0 简单介绍"></a>1.0 简单介绍</h4><p><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>全称<code>Node packAge Manager</code>是<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node</a>官方提供的<strong>包管理工具</strong>，下面列出包管理工具的功能边界。</p><blockquote><p>❏  注册机制<br>❏  文件存储<br>❏  上传下载<br>❏  依赖分析</p></blockquote><p>对于普通开发者而言包管理工具最主要的作用就是下载和安装(<code>Node</code>)包，前端开发中常用的包管理工具还有<a href="https://bower.io/" target="_blank" rel="noopener">Bower</a>，Bower的具体使用可以参考<a href="http://wendingding.com/2018/05/14/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%B3%BB%E5%88%97[01]%20%20Bower%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Bower包管理工具的使用</a>。Node应用开发中类似的包管理工具还有<a href="https://github.com/cnpm/cnpm" target="_blank" rel="noopener">CNPM</a>以及<a href="https://yarn.bootcss.com/" target="_blank" rel="noopener">Yarn</a>等。</p><p>在<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>网站上有数以万计的Node包，具体使用的时候我们可以在命令行窗口中通过执行npm相关的命令来下载和管理需要的(<code>Node</code>)包。npm的相关命令主要涉及包的<strong>搜索</strong>、<strong>下载&amp;&amp;安装</strong>、<strong>卸载</strong>以及<strong>更新</strong>等。</p><h4 id="2-0-基本命令"><a href="#2-0-基本命令" class="headerlink" title="2.0 基本命令"></a>2.0 基本命令</h4><div class="titleX"><strong>安装</strong></div><p>通常npm工具在安装Node.js环境(<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node的安装直接到官网点击下载链接</a>)的时候会跟随<code>Node</code>一起安装，可以通过在命令行中输入下面的命令来查看安装是否成功。</p><p><span class="spaceY">$ node -v</span> 查看node的版本信息<br><span class="spaceY">$ npm  -v</span> 查看npm的版本信息，也可以使用<code>$npm -version</code>或者<code>$npm --v</code>指令。</p><p><strong>技巧</strong> 使用<code>$ npm version</code>可以查看更详细的信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wendingding:npm wendingding$ npm -version</span><br><span class="line">5.5.1</span><br><span class="line"></span><br><span class="line">wendingding:npm wendingding$ npm version</span><br><span class="line">&#123; npm: <span class="string">'5.5.1'</span>,</span><br><span class="line">  ares: <span class="string">'1.10.1-DEV'</span>,</span><br><span class="line">  cldr: <span class="string">'31.0.1'</span>,</span><br><span class="line">  http_parser: <span class="string">'2.7.0'</span>,</span><br><span class="line">  icu: <span class="string">'59.1'</span>,</span><br><span class="line">  modules: <span class="string">'57'</span>,</span><br><span class="line">  nghttp2: <span class="string">'1.25.0'</span>,</span><br><span class="line">  node: <span class="string">'8.9.3'</span>,</span><br><span class="line">  openssl: <span class="string">'1.0.2n'</span>,</span><br><span class="line">  tz: <span class="string">'2017b'</span>,</span><br><span class="line">  unicode: <span class="string">'9.0'</span>,</span><br><span class="line">  uv: <span class="string">'1.15.0'</span>,</span><br><span class="line">  v8: <span class="string">'6.1.534.48'</span>,</span><br><span class="line">  zlib: <span class="string">'1.2.11'</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>帮助</strong></div><p>在通过命令行工具来练习和学习的时候，建议总是从工具的帮助指令开始。</p><p><span class="spaceY">$ npm help</span>  查看node的使用帮助，也可以使用<code>$npm -h</code>或者<code>$npm --h</code>指令。</p><p>这里列出<code>help指令</code>的执行细节。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">wendingding:~ wendingding$ npm <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage: npm &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;<span class="built_in">command</span>&gt; is one of:</span><br><span class="line">    access, adduser, bin, bugs, c, cache, completion, config,</span><br><span class="line">    ddp, dedupe, deprecate, dist-tag, docs, doctor, edit,</span><br><span class="line">    explore, get, <span class="built_in">help</span>, <span class="built_in">help</span>-search, i, init, install,</span><br><span class="line">    install-test, it, link, list, ln, login, <span class="built_in">logout</span>, ls,</span><br><span class="line">    outdated, owner, pack, ping, prefix, profile, prune,</span><br><span class="line">    publish, rb, rebuild, repo, restart, root, run, run-script,</span><br><span class="line">    s, se, search, <span class="built_in">set</span>, shrinkwrap, star, stars, start, stop, t,</span><br><span class="line">    team, <span class="built_in">test</span>, token, tst, un, uninstall, unpublish, unstar,</span><br><span class="line">    up, update, v, version, view, whoami</span><br><span class="line"></span><br><span class="line">npm &lt;<span class="built_in">command</span>&gt; -h     quick <span class="built_in">help</span> on &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">npm -l           display full usage info</span><br><span class="line">npm <span class="built_in">help</span> &lt;term&gt;  search <span class="keyword">for</span> <span class="built_in">help</span> on &lt;term&gt;</span><br><span class="line">npm <span class="built_in">help</span> npm     involved overview</span><br><span class="line"></span><br><span class="line">Specify configs <span class="keyword">in</span> the ini-formatted file:</span><br><span class="line">    /Users/文顶顶/.npmrc</span><br><span class="line">or on the <span class="built_in">command</span> line via: npm &lt;<span class="built_in">command</span>&gt; --key value</span><br><span class="line">Config info can be viewed via: npm <span class="built_in">help</span> config</span><br><span class="line"></span><br><span class="line">npm@5.5.1 /usr/<span class="built_in">local</span>/lib/node_modules/npm</span><br></pre></td></tr></table></figure></p><p>通过查看上面的帮助信息，我们可以知道npm的主要命令<code>where &lt;command&gt; is one of下面的列表项</code>以及这些命令的主要使用方式<code>npm &lt;command&gt;</code>。我们可以通过<code>npm &lt;command&gt; -h</code>的方式来学习某个特定命令的使用，下面给出示例。</p><p><span class="spaceY spaceL">$ npm init  -h</span>    查看init初始化命令的使用方式。<br><span class="spaceY spaceL">$ npm search  -h</span>  查看search搜索命令的使用方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wendingding:~ wendingding$ npm init -h</span><br><span class="line">npm init [--force|-f|--yes|-y]</span><br><span class="line">wendingding:~ wendingding$ npm search -h</span><br><span class="line">npm search [--long] [search terms ...]</span><br><span class="line"></span><br><span class="line">aliases: s, se, find</span><br></pre></td></tr></table></figure><p>通过命令行执行的结果我们清楚了<code>init</code>初始化指令后面还可以跟<code>--force或--yes</code>等指令，而<code>search</code>搜索指令后面可以跟<code>--long</code>指令(以更详细的方式显示搜索结果)且支持搜索多个关键词。<code>aliases:s , se , find</code>表明<code>search</code>指令可以使用<code>s , se 或者是find</code>来替换，它们的作用是等价的。</p><div class="titleX"><strong>搜索和查看包信息</strong></div><p>我们可以通过下面的搜索命令来搜索和查看<a href="https://www.npmjs.com/" target="_blank" rel="noopener">Node官方包仓库</a>中的包信息。</p><p><span class="spaceY spaceL">$ npm search xx</span>    搜索指定的包，使用<code>--long</code>可以查看更详细的信息。<br><span class="spaceY spaceL">$ npm view xxxx</span>             查看指定包所使用的<code>package.json</code>文件信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">wendingding:~ wendingding$ npm search jquery</span><br><span class="line">NAME                      | DESCRIPTION          | AUTHOR          | DATE       </span><br><span class="line">jquery                    | JavaScript library…  | =dmethvin…      | 2018-01-20 </span><br><span class="line">jquery-ui                 | A curated <span class="built_in">set</span> of…    | =scott.gonzalez… | 2016-09-14</span><br><span class="line">...省略剩下内容</span><br><span class="line"></span><br><span class="line">wendingding:~ wendingding$ npm search --long jquery</span><br><span class="line">NAME                      | DESCRIPTION          | AUTHOR          | DATE       </span><br><span class="line">jquery                    | JavaScript library   | =dmethvin =mgol | 2018-01-20 </span><br><span class="line">                          | <span class="keyword">for</span> DOM operations   | =scott.gonzalez |            </span><br><span class="line">                          |                      | =timmywil       |               </span><br><span class="line">jquery-ui                 | A curated <span class="built_in">set</span> of     | =scott.gonzalez | 2016-09-14 </span><br><span class="line">                          | user interface       | =jzaefferer     |            </span><br><span class="line">                          | interactions,        | =devongovett    |            </span><br><span class="line">                          | effects, widgets,    |                 |            </span><br><span class="line">                          | and themes built on  |                 |            </span><br><span class="line">                          | top of the jQuery    |                 |            </span><br><span class="line">                          | JavaScript Library.  |                 |            </span><br><span class="line">···省略剩下内容      </span><br><span class="line"></span><br><span class="line">wendingding:~ wendingding$ npm view jquery</span><br><span class="line">&#123; name: <span class="string">'jquery'</span>,</span><br><span class="line">  description: <span class="string">'JavaScript library for DOM operations'</span>,</span><br><span class="line">  <span class="string">'dist-tags'</span>: &#123; beta: <span class="string">'3.3.1'</span>, latest: <span class="string">'3.3.1'</span> &#125;,</span><br><span class="line">  versions: </span><br><span class="line">   [ <span class="string">'1.5.1'</span>，···<span class="string">'3.3.1'</span> ]</span><br><span class="line">  repository: &#123; <span class="built_in">type</span>: <span class="string">'git'</span>, url: <span class="string">'git+https://github.com/jquery/jquery.git'</span> &#125;,</span><br><span class="line">  readmeFilename: <span class="string">'README.md'</span>,</span><br><span class="line">  homepage: <span class="string">'https://jquery.com'</span>,</span><br><span class="line">  keywords: [ <span class="string">'jquery'</span>, <span class="string">'javascript'</span>, <span class="string">'browser'</span>, <span class="string">'library'</span> ],</span><br><span class="line">  bugs: &#123; url: <span class="string">'https://github.com/jquery/jquery/issues'</span> &#125;,</span><br><span class="line">  license: <span class="string">'MIT'</span>,</span><br><span class="line">  title: <span class="string">'jQuery'</span>,</span><br><span class="line">  version: <span class="string">'3.3.1'</span>,</span><br><span class="line">  main: <span class="string">'dist/jquery.js'</span>,</span><br><span class="line">  dependencies: &#123;&#125;,</span><br><span class="line">  devDependencies: &#123; ···省略··· &#125;</span><br><span class="line">  scripts: &#123; ···省略··· &#125;</span><br><span class="line">  commitplease: &#123; ···省略··· &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip"><strong>拓展</strong> 前面列出了以jquery为例执行搜索命令的细节，除使用<code>$ npm search &lt;pkg&gt;</code>命令来执行搜索外，使  用<code>$ npm find xx</code>或<code>$ npm s xx</code>或<code>$ npm se xx</code>命令也能达到同样的效果。</div><p><code>NPM</code>模块仓库本身提供了一个查询服务<code>Registry</code>，<a href="https://registry.npmjs.org/" target="_blank" rel="noopener">点击跳转查询服务网址</a> 。在这个网址后面跟上模块名，就会得到一个里面保存着该模块所有版本相关信息的JSON对象。譬如访问<a href="https://registry.npmjs.org/jquery" target="_blank" rel="noopener">https://registry.npmjs.org/jquery</a> 就能够获得jquery模块相关的信息(等价于使用<code>$ npm view jquery</code>指令)。</p><p>此外，在查询网址模块名的后面，还可以跟上版本号或者标签，用来查询某个具体版本的信息。比如， 访问 <a href="https://registry.npmjs.org/jquery/1.6.2" target="_blank" rel="noopener">https://registry.npmjs.org/jquery/1.6.2</a> 就能够得到jquery模块<code>1.6.2版本</code>相关的信息。在获取的JSON对象中，存在一个dist字段，该字段的<code>tarball属性</code>指向的是该版本压缩包的网址，跳转到这个网址下载压缩包，在本地解压，就能够得到当前模块的源码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dist: &#123;</span><br><span class="line">shasum: "01757a4c5beea29e8ae697527c3131abbe997a28",</span><br><span class="line">tarball: "https://registry.npmjs.org/jquery/-/jquery-1.6.2.tgz"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="titleX"><strong>初始化</strong></div><p><span class="spaceY spaceL">$ npm init </span>    初始化操作，用于生成描述文件。<br><span class="spaceY spaceL">$ npm init -y</span>    初始化操作，使用默认值自动生成描述文件。</p><p><code>init</code>指令用来生成项目的配置(描述)文件(<code>package.json</code>)。该文件中包含了项目的名称、版本、作者、包依赖关系等信息，每个Npm包都拥有自己的<code>package.json</code>文件。在进行初始化的时候，如果使用<code>-y</code>或者<code>--yes</code>选项那么系统将会使用默认值来自动的生成描述文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wendingding:npm wendingding$ npm init --yes</span><br><span class="line">Wrote to /Users/文顶顶/Desktop/npm/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"npm"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"^3.3.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>列出<code>init</code>初始化命令在使用<code>-y或--yes选项</code>时，从当前目录中提取的默认值填充规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- name：当前目录名称</span><br><span class="line">- version：总是为<span class="number">1.0</span><span class="number">.0</span>版本</span><br><span class="line">- description：来自README的信息，或空字符串 <span class="string">""</span></span><br><span class="line">- main：总是为index.js文件</span><br><span class="line">- scripts：默认情况下会创建一个空test脚本</span><br><span class="line">- keywords：空数组[]</span><br><span class="line">- author：空字符串</span><br><span class="line">- license： ISC</span><br><span class="line">- bugs：当前目录中的信息（如果存在）</span><br><span class="line">- homepage：当前目录中的信息（如果存在）</span><br><span class="line">- dependencies：空对象，如果当前目录存在已安装的包则显示。</span><br><span class="line">- devDependencies：空对象。</span><br></pre></td></tr></table></figure><div class="titleX"><strong>包的安装和卸载</strong></div><p>在下载和安装相关Node包的时候，我们可以选择<strong>局部安装</strong>或<strong>全局安装</strong>，如果采用了全局安装的策略那么系统中所有的项目均能使用该包。</p><p><span class="spaceY spaceL">$ npm install </span>    安装配置文件中列出的所有依赖包。<br><span class="spaceY spaceL">$ npm install less</span>    安装指定的包到当前路径(<code>局部安装</code>)。<br><span class="spaceY spaceL">$ npm install -g less</span> 安装指定的包到全局包安装路径(<code>全局安装</code>)</p><p><code>install</code>命令会将指定的包安装在当前目录下的<code>node_modules</code>子文件夹中，安装好后在当前项目中(如果是node项目)可以通过require来进行加载。<code>-g</code>选项是global全局的意思，表示把指定的包安装在全局包的安装路径中(<code>/usr/local/lib/node_modules</code>)。</p><p>下面列出<code>less</code>的安装细节。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wendingding:npm wendingding$ npm install less</span><br><span class="line">+ less@3.8.1</span><br><span class="line">added 60 packages <span class="keyword">in</span> 12.456s</span><br><span class="line">wendingding:npm wendingding$ npm install -g less</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/lessc -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/less/bin/lessc</span><br><span class="line">+ less@3.8.1</span><br><span class="line">added 60 packages <span class="keyword">in</span> 2.299s</span><br><span class="line">wendingding:npm wendingding$</span><br></pre></td></tr></table></figure><p><code>install</code> 命令同<code>i, isntall, add</code>等命令等价。<br><code>install</code> 命令的可选参数还有[–save-prod|–save-dev|–save-optional] [–save-exact] [–no-save]等。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--save     选项在安装包的时候会更新package.json文件的dependencies字段。</span><br><span class="line">--save-dev 选项在安装包的时候会更新package.json文件devDependencies字段(保存包名:版本信息)。</span><br></pre></td></tr></table></figure></p><p>如果我们需要把项目或系统中某些特定的Node模块移除，那么可以使用<code>uninstall</code>命令来卸载，该命令同<code>un, unlink, remove, rm, r</code>等命令等价。</p><p><span class="spaceY spaceL">$ npm uninstall less</span>    卸载当前项目中的指定包(<code>局部</code>)。<br><span class="spaceY spaceL">$ npm uninstall -g less</span> 卸载全局包安装路径下指定的包(<code>全局</code>)</p><p>下面列出<code>less</code>的卸载细节(如果是要卸载全局安装的包那么请使用-g选项)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wendingding:npm wendingding$ npm remove less</span><br><span class="line">npm WARN saveError ENOENT:no such file or directory, open <span class="string">'/Users/文顶顶/npm/package.json'</span></span><br><span class="line">npm WARN enoent ENOENT:no such file or directory, open <span class="string">'/Users/文顶顶/npm/package.json'</span></span><br><span class="line">npm WARN npm No description</span><br><span class="line">removed 1 package <span class="keyword">in</span> 0.737s</span><br><span class="line"></span><br><span class="line">wendingding:npm wendingding$ npm remove -g less</span><br><span class="line">removed 60 packages <span class="keyword">in</span> 0.827s</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>更新</strong></div><p>我们可以通过<code>update</code>命令来执行更新操作，在进行更新的时候可以指定包名，也可以通过<code>-g</code>选项来指定要更新全局安装的包，<code>&lt;pkg&gt;</code>指代的是包的名称，譬如jsonfile或者jquery等。</p><p><span class="spaceY spaceL">$ npm update </span>      更新当前项目中所有的包。<br><span class="spaceY spaceL">$ npm update -g </span>   更新全局安装路径下所有的包。<br><span class="spaceY spaceL">$ npm update  pkg</span>      更新当前项目中安装的指定包。<br><span class="spaceY spaceL">$ npm update -g  pkg</span>   更新全局安装路径下安装的指定包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wendingding:npm wendingding$ npm list</span><br><span class="line">/Users/文顶顶/Desktop/npm</span><br><span class="line">└── (empty)</span><br><span class="line"></span><br><span class="line">wendingding:npm wendingding$ npm install jquery@3.1.0</span><br><span class="line">···省略内容</span><br><span class="line">+ jquery@3.1.0</span><br><span class="line">added 1 package <span class="keyword">in</span> 5.569s</span><br><span class="line"></span><br><span class="line">wendingding:npm wendingding$ npm update jquery</span><br><span class="line">···省略内容</span><br><span class="line"></span><br><span class="line">+ jquery@3.3.1</span><br><span class="line">updated 1 package <span class="keyword">in</span> 0.547s</span><br><span class="line"></span><br><span class="line">wendingding:npm wendingding$ npm list</span><br><span class="line">/Users/文顶顶/Desktop/npm</span><br><span class="line">└── jquery@3.3.1</span><br></pre></td></tr></table></figure><p>上面的命令行中，我们首先通过<code>$ npm list</code>命令列出当前项目中已经安装的Node模块，然后下载并安装了jQuery框架的3.1.0版本，继而通过<code>$ npm update jquery</code>指令来把jQuery更新到<code>jquery@3.3.1</code>最新版本。<code>update</code>命令也可以使用简写<code>up</code>来替代。</p><p><div class="titleX"><strong>其它常用命令</strong></div><br><span class="spaceY spaceL">$ npm run </span>       运行script字段定义的命令。<br><span class="spaceY spaceL">$ npm list </span>      列出当前项目中安装的所有包。<br><span class="spaceY spaceL">$ npm list -g</span>      列出系统中全局安装的所有包。<br><span class="spaceY spaceL">$ npm root -g</span>      列出系统中全局安装包的安装路径。<br><span class="spaceY spaceL">$ npm config get cache</span>       查看本地的缓存目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding:npm wendingding$ npm root -g</span><br><span class="line">/usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line"></span><br><span class="line">wendingding$ npm config get cache</span><br><span class="line">/Users/文顶顶/.npm</span><br></pre></td></tr></table></figure></p><h4 id="3-0-番外篇"><a href="#3-0-番外篇" class="headerlink" title="3.0 番外篇"></a>3.0 番外篇</h4><p>npm工具最初由<a href="https://github.com/isaacs" target="_blank" rel="noopener">Isaac Z. Schlueter</a>(<code>艾萨克·施吕特</code>)开发，完全使用JavaScript实现。作者有说明实现npm项目的初衷，主要是当时考虑到模块管理问题的重要性，又因为其它平台如PHP的PEAR或Perl的CPAN等工具都存在诸多缺陷(<a href="https://github.com/nodejs/node-v0.x-archive/issues/5132#issuecomment-15432598" target="_blank" rel="noopener">点击查看作者实现npm的初衷</a>)，所以就自己动手实现了。</p><p><a href="https://github.com/isaacs" target="_blank" rel="noopener">Isaac Z. Schlueter</a>简介：npm作者 CEO ，Node.js的前BDFL，<a href="http://blog.izs.me" target="_blank" rel="noopener">Github主页</a>和<a href="http://blog.izs.me/" target="_blank" rel="noopener">个人博客</a>。</p><p class="titleX"> <strong>资料</strong> </p><p><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a><br><a href="https://docs.npmjs.com/" target="_blank" rel="noopener">npm文档</a><br><a href="https://github.com/npm/cli" target="_blank" rel="noopener">npm源码</a><br><a href="https://npm.community/" target="_blank" rel="noopener">npm讨论</a></p><p>截止日前，npm管理的模块(包)总量已经超出70万，下面给出和其他同类型工具的横向对比(<a href="http://www.modulecounts.com/" target="_blank" rel="noopener">数据来源</a>)。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_count.png?raw=true" style="width:500px"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://npm.community/uploads/npm1/original/1X/ddff80661892358cd69fe28b6ca91718589a7aa0.png&quot; style=&quot;width:100px&quot;&gt;&lt;/p&gt;
&lt;div clas
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-package</title>
    <link href="https://weibo.com/u/3800117445/2018/11/24/Node%E7%B3%BB%E5%88%97-package/"/>
    <id>https://weibo.com/u/3800117445/2018/11/24/Node系列-package/</id>
    <published>2018-11-24T15:20:13.000Z</published>
    <updated>2018-11-26T14:37:59.673Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文输出Node中和包有关的基本内容。</div><h4 id="1-0-Node中的模块和包"><a href="#1-0-Node中的模块和包" class="headerlink" title="1.0 Node中的模块和包"></a>1.0 Node中的模块和包</h4><p><div style="background:#ddd;padding-left:20px"><strong>模块</strong></div><br>在Node中，<strong>以模块为单位来划分所有的功能。</strong></p><p>从某种角度来说，Node应用都由大量模块组成，每个模块都是一个JavaScript文件。Node提供了完成的模块加载机制，<code>模块</code>和<code>模块加载机制</code>这种设计让我们能够将应用程序划分成多个不同的部分，可以对这些部分进行协同管理，还能够——</p><ul><li>提高应用程序的开发效率</li><li>提高应用程序代码的可读性</li><li>减少应用程序的代码量(重用代码)</li></ul><p><div style="background:#ddd;padding-left:20px"><strong>包</strong></div><br>在Node中，<strong>通过包来对一组具有相互依赖关系的模块进行统一管理。</strong></p><p>Node中的包事实上所指代的是一个文件目录，该目录中主要包含以下内容：</p><blockquote><p>①  &nbsp;&nbsp;在<code>bin</code>子目录中存放二进制文件。<br>②  &nbsp;&nbsp;在<code>lib</code>子目录中存放JavaScript文件。<br>③  &nbsp;&nbsp;在<code>doc</code>子目录中存放与包使用相关的说明性文档。<br>④  &nbsp;&nbsp;在<code>dist</code>子目录中存放JavaScript文件(发布)。<br>⑤  &nbsp;&nbsp;在<code>test</code>子目录中存放用于对包进行单元测试的文件。<br>⑥  &nbsp;&nbsp;在包的根目录中存放包含用于描述包信息的<code>package.json</code>文件。</p></blockquote><p>这里列出典型的包的目录结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//该目录结构通过使用$ npm install less命令安装并进入到less包文件目录获取。</span><br><span class="line">.</span><br><span class="line">├── CHANGELOG.md</span><br><span class="line">├── CONTRIBUTING.md</span><br><span class="line">├── Gruntfile.js</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── appveyor.yml</span><br><span class="line">├── bin</span><br><span class="line">│   └── lessc</span><br><span class="line">├── bower.json</span><br><span class="line">├── browser.js</span><br><span class="line">├── dist</span><br><span class="line">│   ├── less.js</span><br><span class="line">│   └── less.min.js</span><br><span class="line">├── index.js</span><br><span class="line">├── lib</span><br><span class="line">│   ├── less</span><br><span class="line">│   ├── less-browser</span><br><span class="line">│   ├── less-node</span><br><span class="line">│   └── <span class="built_in">source</span>-map</span><br><span class="line">├── package.json</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line">    ├── browser</span><br><span class="line">    ├── copy-bom.js</span><br><span class="line">    ├── css</span><br><span class="line">    ├── data</span><br><span class="line">    ├── import-module</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── less</span><br><span class="line">    ├── less-bom</span><br><span class="line">    ├── less-test.js</span><br><span class="line">    ├── modify-vars.js</span><br><span class="line">    ├── plugins</span><br><span class="line">    └── sourcemaps</span><br></pre></td></tr></table></figure></p><h4 id="2-0-package-json文件"><a href="#2-0-package-json文件" class="headerlink" title="2.0 package.json文件"></a>2.0 package.json文件</h4><p><strong><code>package.json文件</code></strong>用于对包进行描述，JSON格式文件。</p><blockquote><p><strong>package.json文件的主要字段</strong></p></blockquote><p><span class="spaceX" style="background:#195;color:#fff">name </span>包的名称。<br><span class="spaceX" style="background:#195;color:#fff">scripts </span>定义脚本命令。<br><span class="spaceX">main </span>包的主文件。<br><span class="spaceX" style="background:#195;color:#fff">version </span>包的版本号。<br><span class="spaceX">homepage </span>包的主页地址。<br><span class="spaceX">bugs </span>bug的提交地址，可能是url地址或邮箱地址。<br><span class="spaceX">author </span>作者信息(对象)，包含作者姓名(<code>name</code>)和主页(<code>url</code>)以及邮箱(<code>email</code>)等。<br><span class="spaceX">license </span>该包采用的开源协议，常见的有MIT、Apache 和GPL等。<br><span class="spaceX">keywords </span>用于搜索的关键字数组( <code>$ npm search xxx</code>)。<br><span class="spaceX">description </span>包描述信息，对包进行简单的说明。<br><span class="spaceX">repository </span>托管仓库相关的信息，通常包括仓库的类型(<code>type</code>)和托管地址(<code>url</code>)。<br><span class="spaceX" style="background:#195;color:#fff">dependencies </span>运行时需要依赖的包(对象类型：由包名和版本信息组成)。<br><span class="spaceX" style="background:#195;color:#fff">devDependencies </span>开发时需要依赖的包(对象类型：由包名和版本信息组成),上线时不会打包。</p><p>这里列出典型的json文件的内容：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">//备注：列出的是jQuery框架的package.josn文件,可通过$ npm install jquery安装</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"author"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"JS Foundation and other contributors"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/jquery/jquery/blob/3.3.1/AUTHORS.txt"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/jquery/jquery/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"bundleDependencies"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"commitplease"</span>: &#123;</span><br><span class="line">    <span class="attr">"nohook"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"components"</span>: [</span><br><span class="line">      <span class="string">"Docs"</span>,</span><br><span class="line">      <span class="string">"Tests"</span>,</span><br><span class="line">      <span class="string">"Build"</span>,</span><br><span class="line">      <span class="string">"Support"</span>,</span><br><span class="line">      <span class="string">"Release"</span>,</span><br><span class="line">      <span class="string">"Core"</span>,</span><br><span class="line">      <span class="string">"Ajax"</span>,</span><br><span class="line">      <span class="string">"Attributes"</span>,</span><br><span class="line">      <span class="string">"Callbacks"</span>,</span><br><span class="line">      <span class="string">"CSS"</span>,</span><br><span class="line">      <span class="string">"Data"</span>,</span><br><span class="line">      <span class="string">"Deferred"</span>,</span><br><span class="line">      <span class="string">"Deprecated"</span>,</span><br><span class="line">      <span class="string">"Dimensions"</span>,</span><br><span class="line">      <span class="string">"Effects"</span>,</span><br><span class="line">      <span class="string">"Event"</span>,</span><br><span class="line">      <span class="string">"Manipulation"</span>,</span><br><span class="line">      <span class="string">"Offset"</span>,</span><br><span class="line">      <span class="string">"Queue"</span>,</span><br><span class="line">      <span class="string">"Selector"</span>,</span><br><span class="line">      <span class="string">"Serialize"</span>,</span><br><span class="line">      <span class="string">"Traversing"</span>,</span><br><span class="line">      <span class="string">"Wrap"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"markerPattern"</span>: <span class="string">"^((clos|fix|resolv)(e[sd]|ing))|^(refs?)"</span>,</span><br><span class="line">    <span class="attr">"ticketPattern"</span>: <span class="string">"^((Closes|Fixes) ([a-zA-Z]&#123;2,&#125;-)[0-9]+)|^(Refs? [^#])"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"deprecated"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"JavaScript library for DOM operations"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"7.0.0-beta.0"</span>,</span><br><span class="line">    <span class="attr">"babel-plugin-transform-es2015-for-of"</span>: <span class="string">"7.0.0-beta.0"</span>,</span><br><span class="line">    <span class="attr">"commitplease"</span>: <span class="string">"2.7.10"</span>,</span><br><span class="line">    <span class="attr">"core-js"</span>: <span class="string">"2.4.1"</span>,</span><br><span class="line">    <span class="attr">"eslint-config-jquery"</span>: <span class="string">"1.0.1"</span>,</span><br><span class="line">    <span class="attr">"grunt"</span>: <span class="string">"1.0.1"</span>,</span><br><span class="line">    <span class="attr">"grunt-babel"</span>: <span class="string">"7.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-cli"</span>: <span class="string">"1.2.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-compare-size"</span>: <span class="string">"0.4.2"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-uglify"</span>: <span class="string">"3.0.1"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-watch"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-eslint"</span>: <span class="string">"20.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-git-authors"</span>: <span class="string">"3.2.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-jsonlint"</span>: <span class="string">"1.1.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-karma"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-newer"</span>: <span class="string">"1.3.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-npmcopy"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="attr">"gzip-js"</span>: <span class="string">"0.3.2"</span>,</span><br><span class="line">    <span class="attr">"husky"</span>: <span class="string">"0.14.3"</span>,</span><br><span class="line">    <span class="attr">"insight"</span>: <span class="string">"0.8.4"</span>,</span><br><span class="line">    <span class="attr">"jsdom"</span>: <span class="string">"5.6.1"</span>,</span><br><span class="line">    <span class="attr">"karma"</span>: <span class="string">"1.7.0"</span>,</span><br><span class="line">    <span class="attr">"karma-browserstack-launcher"</span>: <span class="string">"1.3.0"</span>,</span><br><span class="line">    <span class="attr">"karma-chrome-launcher"</span>: <span class="string">"2.2.0"</span>,</span><br><span class="line">    <span class="attr">"karma-firefox-launcher"</span>: <span class="string">"1.0.1"</span>,</span><br><span class="line">    <span class="attr">"karma-qunit"</span>: <span class="string">"1.2.1"</span>,</span><br><span class="line">    <span class="attr">"load-grunt-tasks"</span>: <span class="string">"3.5.2"</span>,</span><br><span class="line">    <span class="attr">"native-promise-only"</span>: <span class="string">"0.8.1"</span>,</span><br><span class="line">    <span class="attr">"promises-aplus-tests"</span>: <span class="string">"2.1.2"</span>,</span><br><span class="line">    <span class="attr">"q"</span>: <span class="string">"1.5.0"</span>,</span><br><span class="line">    <span class="attr">"qunit-assert-step"</span>: <span class="string">"1.0.3"</span>,</span><br><span class="line">    <span class="attr">"qunitjs"</span>: <span class="string">"1.23.1"</span>,</span><br><span class="line">    <span class="attr">"raw-body"</span>: <span class="string">"2.2.0"</span>,</span><br><span class="line">    <span class="attr">"requirejs"</span>: <span class="string">"2.3.3"</span>,</span><br><span class="line">    <span class="attr">"sinon"</span>: <span class="string">"2.3.7"</span>,</span><br><span class="line">    <span class="attr">"sizzle"</span>: <span class="string">"2.3.3"</span>,</span><br><span class="line">    <span class="attr">"strip-json-comments"</span>: <span class="string">"2.0.1"</span>,</span><br><span class="line">    <span class="attr">"testswarm"</span>: <span class="string">"1.1.0"</span>,</span><br><span class="line">    <span class="attr">"uglify-js"</span>: <span class="string">"3.3.4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://jquery.com"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"jquery"</span>,</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"browser"</span>,</span><br><span class="line">    <span class="string">"library"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist/jquery.js"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"jquery"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git+https://github.com/jquery/jquery.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"npm install &amp;&amp; grunt"</span>,</span><br><span class="line">    <span class="attr">"commitmsg"</span>: <span class="string">"node node_modules/commitplease"</span>,</span><br><span class="line">    <span class="attr">"jenkins"</span>: <span class="string">"npm run test:browserless"</span>,</span><br><span class="line">    <span class="attr">"precommit"</span>: <span class="string">"grunt lint:newer qunit_fixture"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"grunt watch"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"grunt &amp;&amp; grunt test:slow &amp;&amp; grunt karma:main"</span>,</span><br><span class="line">    <span class="attr">"test:browser"</span>: <span class="string">"grunt &amp;&amp; grunt karma:main"</span>,</span><br><span class="line">    <span class="attr">"test:browserless"</span>: <span class="string">"grunt &amp;&amp; grunt test:slow"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"jQuery"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"3.3.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文输出Node中和包有关的基本内容。&lt;/div&gt;

&lt;h4 id=&quot;1-0-Node中的模块和包&quot;&gt;&lt;a href=&quot;#1-0-Node中的模块和包&quot; class=&quot;headerlink&quot; title=&quot;1.0 Node中的模块和包&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [09]-javaScript和JSON (拓展)</title>
    <link href="https://weibo.com/u/3800117445/2018/11/15/javaScript%E7%B3%BB%E5%88%97%20%5B09%5D-javaScript%E5%92%8CJSON(%E6%89%A9%E5%B1%95)/"/>
    <id>https://weibo.com/u/3800117445/2018/11/15/javaScript系列 [09]-javaScript和JSON(扩展)/</id>
    <published>2018-11-15T00:20:13.000Z</published>
    <updated>2018-11-21T07:40:12.358Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文输出JSON搜索和JSON转换相关的内容，是对前两篇文章的补充。</div><h3 id="JSON搜索"><a href="#JSON搜索" class="headerlink" title="JSON搜索"></a>JSON搜索</h3><p>在特定的开发场景中，如果服务器端返回的JSON数据异常复杂(可能超过上万行)，那么必然就有对JSON文档进行搜索的需求。在对JSON文档进行搜索的时候，建议使用专业的JSON搜索类库和工具来实现，这可以极大的简化JSON文档搜索的工作并降低工作难度。</p><p>JSON搜索的具体适用场景：<span style="color:#195">对于某次API调用，我们只需要其中的部分数据，这种情况我们就可以根据某个标准来对返回的JSON内容进行搜索和过滤。</span></p><p>本文将会先后介绍多款处理JSON搜索的类库(工具)，包括但不限于<strong><code>JSONPath</code></strong>、<strong><code>JSON Pointer</code></strong>、<strong><code>jq</code></strong>等，在对各种方案进行介绍的时候将会从<strong>方案的优缺点、具体的使用方式</strong>等角度切入，开发中可以根据实际的开发场景和各工具自身的特点来进行选择。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>工具001 → jq</strong></span></p><p><strong><code>jq</code></strong>&nbsp;&nbsp;&nbsp;&nbsp;是一个提供了命令行界面的JSON搜索工具。<br><strong><code>功能</code></strong> 可使用自身特定的查询语法来过滤JSON和截取数组，类似于JSON中的sed。<br><strong><code>生态</code></strong> 除命令行外，拥有优秀的基于Web的jq测试器，甚至Node社区还以npm模块形式发布了<a href="https://www.npmjs.com/package/jq-tutorial" target="_blank" rel="noopener">教程</a>。<br><strong><code>优势</code></strong></p><ul><li>提供丰富的搜索和过滤功能。</li><li>大多数编程语言都对jq提供良好的支持。</li><li>jq相关文档质量较高，且拥有友好的交互式教程。</li><li>拥有优秀的<a href="https://jqplay.org/" target="_blank" rel="noopener">在线测试工具</a>，能够对查询提供快速反馈。</li><li>在命令行中能够很好的与cURL以及管道操作等协同工作。</li><li>使用C语言编写的，没有运行时依赖，可运行在Linux，OS X和Windows等平台。</li></ul><p><strong><code>资料</code></strong> <a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">官网</a> 、<a href="https://github.com/stedolan/jq" target="_blank" rel="noopener">Github仓库</a> 、 <a href="http://manpages.ubuntu.com/manpages/bionic/man1/jq.1.html?_ga=2.163034492.1318091186.1542254580-1927231673.1542254580" target="_blank" rel="noopener">Ubuntu-jq手册</a> 、 <a href="http://hyperpolyglot.org/json" target="_blank" rel="noopener">Hyperpolyglot JSON工具</a>、<a href="https://github.com/FasterXML/jackson" target="_blank" rel="noopener">Jackson类库</a>、<a href="https://rubygems.org/gems/ruby-jq" target="_blank" rel="noopener">Ruby-jq gem</a><br><strong><code>语法</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">======基本语法======</span><br><span class="line">.     输出所有的文档内容。</span><br><span class="line">|     管道符，传递数据流。</span><br><span class="line">.key  输出指定key对应的部分文档。</span><br><span class="line">.[ ]  输出数组中指定索引对应的元素。</span><br><span class="line"></span><br><span class="line">======查询语法示例========</span><br><span class="line">.person[0]获取JSON文档person数组中的第一个元素。</span><br><span class="line">.person[-1]获取JSON文档person数组中的最后一个元素。</span><br><span class="line">.person[0:3]获取JSON文档person数组中的前面三个元素。</span><br><span class="line">.person[] | select (.age&gt;20 ) 获取JSON文档中满足要求(age &gt; 20)的所有数据。</span><br></pre></td></tr></table></figure></p><p><strong><code>安装</code></strong></p><ul><li>OSX系统 建议使用<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>来安装，具体命令为：<code>$ brew install jq</code></li><li>windows系统 建议使用<a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey NuGet</a>来安装，具体命令为：<code>$ chocolatey install jq</code></li><li>当然也可以通过<code>git clone</code>仓库源码来进行安装，具体细节以及其它系统处理请参考<a href="https://stedolan.github.io/jq/download/" target="_blank" rel="noopener">Download jq</a></li></ul><p>这里给出OSX系统中通过命令行安装<code>jq</code>的具体细节和示例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ brew install jq</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Installing dependencies <span class="keyword">for</span> jq: oniguruma</span><br><span class="line">==&gt; Installing jq dependency: oniguruma</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/oniguruma-6.8.2.high_sierra</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Pouring oniguruma-6.8.2.high_sierra.bottle.tar.gz</span><br><span class="line">🍺  /usr/<span class="built_in">local</span>/Cellar/oniguruma/6.8.2: 17 files, 1.2MB</span><br><span class="line">==&gt; Installing jq</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/jq-1.5_3.high_sierra.bottle</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Pouring jq-1.5_3.high_sierra.bottle.tar.gz</span><br><span class="line">🍺  /usr/<span class="built_in">local</span>/Cellar/jq/1.5_3: 19 files, 946.6KB</span><br><span class="line"></span><br><span class="line">wendingding$ jq --version</span><br><span class="line">jq-1.5</span><br></pre></td></tr></table></figure></p><div class="tip">在安装jq的时候，如果命令行报<span style="color:red">Error: Failure while executing: git config –local –replace-all homebrew.private true</span>错误，可以尝试先执行<code>$ xcode-select --install</code>命令然后重新安装。在安装的时候如果总是卡在Updating Homebrew…可以<code>control + C</code>停止更新。</div><p><strong><code>工具(jq-tutorial)</code></strong></p><p><a href="https://www.npmjs.com/package/jq-tutorial" target="_blank" rel="noopener">jq-tutorial</a>是node社区以npm模块的形式发布的jq教程，是学习jq使用的一个比较好用的工具，这里简单列出该模块的安装和使用示例，并对命令进行简单的说明。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ npm search jq-tutorial</span><br><span class="line">NAME                      | DESCRIPTION          | AUTHOR          | DATE       </span><br><span class="line">jq-tutorial               | Exercises <span class="keyword">for</span>…       | =rjz            | 2016-09-29 </span><br><span class="line"></span><br><span class="line">wendingding$ npm install -g jq-tutorial</span><br><span class="line">npm WARN notice [SECURITY] lodash has the following vulnerability: 1 low. </span><br><span class="line">Go here <span class="keyword">for</span> more details: https://nodesecurity.io/advisories?search=lodash version=2.4.2 </span><br><span class="line">-Run `npm i npm@latest -g` to upgrade npm version, and <span class="keyword">then</span> `npm audit` to get more info.</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/jq-tutorial -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/jq-tutorial/bin/jq-tutorial</span><br><span class="line">+ jq-tutorial@0.0.5</span><br><span class="line">added 4 packages <span class="keyword">in</span> 20.012s</span><br><span class="line"></span><br><span class="line">wendingding$ jq-tutorial </span><br><span class="line">Run jq-tutorial with one of the following:</span><br><span class="line">  * pick</span><br><span class="line">  * objects</span><br><span class="line">  * mapping</span><br><span class="line">  * filtering</span><br><span class="line">  * output</span><br><span class="line">  * reduce</span><br><span class="line"></span><br><span class="line">wendingding$ jq-tutorial pick</span><br><span class="line">Pick</span><br><span class="line">========================================</span><br><span class="line"><span class="comment">### Pick fields from an object</span></span><br><span class="line">`jq` retrieves named properties from objects by using `.` syntax:</span><br><span class="line">    $ <span class="built_in">echo</span> <span class="string">'&#123;"foo": &#123; "bar": "a value" &#125;&#125;'</span> | jq .foo</span><br><span class="line">Nested values are accessible as well:</span><br><span class="line">    $ <span class="built_in">echo</span> <span class="string">'&#123;"foo": &#123; "bar": "a value" &#125;&#125;'</span> | jq .foo.bar</span><br><span class="line"><span class="comment">### Pick elements from an array:</span></span><br><span class="line">Elements <span class="keyword">in</span> an array may be extracted by index:</span><br><span class="line">    $ <span class="built_in">echo</span> <span class="string">'["snap","crackle","pop"]'</span> | jq .[1]</span><br><span class="line">More than one index? No problem!</span><br><span class="line">    $ <span class="built_in">echo</span> <span class="string">'["snap","crackle","pop"]'</span> | jq .[1, 2]</span><br><span class="line">We can even extract *all* elements at once by omitting the indices:</span><br><span class="line">    $ <span class="built_in">echo</span> <span class="string">'["snap","crackle","pop"]'</span> | jq .[]</span><br><span class="line"><span class="built_in">type</span> <span class="string">"data?"</span> to see dataset or <span class="string">"help?"</span> <span class="keyword">for</span> more options</span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line">Given:    <span class="string">'product'</span> (<span class="built_in">type</span> <span class="string">"data?"</span> to view)</span><br><span class="line">Challenge: Select the entire item (hint: don<span class="string">'t overthink this!):</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong><code>工具(jqPlay)</code></strong></p><p><a href="https://jqplay.org/" target="_blank" rel="noopener">jqPlay</a>是一个基于web的jq在线测试游乐场，它提供了对JSON数据进行jq查询的基本功能，而且提供了简单的jq查询语法示例，能够对查询进行快速反馈。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/json_03.gif?raw=true"></p><p><strong>基本用法演示</strong></p><p>这里我先提供一个稍复杂的JSON数据,数据保存在<code>/JSON-Demo/data.json路径</code>(<a href="https://github.com/flowerField/Source/blob/master/Blog/data.json" target="_blank" rel="noopener">您可以点击此链接获取该数据</a>)。为了演示方便，这里我将会把该文档的数据部署为RESTful API，从而创建一个模拟的API服务。在具体的处理中，将使用到名为<a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">json-server</a>的Node模块，下面列出具体的细节。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ <span class="built_in">pwd</span></span><br><span class="line">/Users/文顶顶/Desktop/JSON-Demo</span><br><span class="line"></span><br><span class="line">wendingding$ npm install -g json-server</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/json-server -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/json-server/bin/index.js</span><br><span class="line">+ json-server@0.14.0</span><br><span class="line">added 223 packages <span class="keyword">in</span> 23.03s</span><br><span class="line"></span><br><span class="line">wendingding$ json-server -p 5000 ./data.json</span><br><span class="line"></span><br><span class="line">  \&#123;^_^&#125;/ hi!</span><br><span class="line"></span><br><span class="line">  Loading ./data.json</span><br><span class="line">  Done</span><br><span class="line"></span><br><span class="line">  Resources</span><br><span class="line">  http://localhost:5000/person</span><br><span class="line"></span><br><span class="line">  Home</span><br><span class="line">  http://localhost:5000</span><br><span class="line"></span><br><span class="line">  Type s + enter at any time to create a snapshot of the database</span><br><span class="line">GET /person 304 16.355 ms - -</span><br></pre></td></tr></table></figure><p>执行<code>$json-server -p 5000 ./data.json</code>命令之后，我们可以在浏览器中通过<a href="">http://localhost:5000/person</a>地址来访问JSON文档中的数据，下面是显示结果。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/json_04.png?raw=true"></p><p><strong>备注：</strong>如果经常需要通过浏览器访问和显示JSON数据，建议安装相应的JSON扩展插件，我电脑Chrome安装的是<a href="http://jsonhandle.sinaapp.com/" target="_blank" rel="noopener">JSON-handle</a>，同类型的还有<a href="https://github.com/gildas-lormeau/JSONView-for-Chrome/tree/master/WebContent" target="_blank" rel="noopener">JSONView</a>。</p><p>下面列出jq命令行工具的使用示例以及主要命令行的解读说明。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   169k      0 --:--:-- --:--:-- --:--:--  255k</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"age"</span>: 18,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"mitaoer"</span>,</span><br><span class="line">    <span class="string">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"mitaoer@126.com"</span>,</span><br><span class="line">    <span class="string">"interest"</span>: [</span><br><span class="line">      <span class="string">"文学"</span>,</span><br><span class="line">      <span class="string">"音乐"</span>,</span><br><span class="line">      <span class="string">"绘画"</span>,</span><br><span class="line">      <span class="string">"IT"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"car"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"英菲尼迪"</span>,</span><br><span class="line">      <span class="string">"number"</span>: <span class="string">"京A 000001"</span>,</span><br><span class="line">      <span class="string">"price"</span>: 200012.66</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"age"</span>: 28,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">    <span class="string">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"wenidngding_ios@126.com"</span>,</span><br><span class="line">    <span class="string">"interest"</span>: [</span><br><span class="line">      <span class="string">"文学"</span>,</span><br><span class="line">      <span class="string">"音乐"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"car"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"奥迪"</span>,</span><br><span class="line">      <span class="string">"number"</span>: <span class="string">"京A 000002"</span>,</span><br><span class="line">      <span class="string">"price"</span>: 200000.66</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"age"</span>: 23,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"xiaxiaoxia"</span>,</span><br><span class="line">    <span class="string">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"mitaoer@126.com"</span>,</span><br><span class="line">    <span class="string">"interest"</span>: [</span><br><span class="line">      <span class="string">"文学"</span>,</span><br><span class="line">      <span class="string">"IT"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"car"</span>: null</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"age"</span>: 24,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"LiuY"</span>,</span><br><span class="line">    <span class="string">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"LiuY@126.com"</span>,</span><br><span class="line">    <span class="string">"interest"</span>: [</span><br><span class="line">      <span class="string">"文学"</span>,</span><br><span class="line">      <span class="string">"音乐"</span>,</span><br><span class="line">      <span class="string">"绘画"</span>,</span><br><span class="line">      <span class="string">"IT"</span>,</span><br><span class="line">      <span class="string">"阅读"</span>,</span><br><span class="line">      <span class="string">"健身"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"car"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"ATS"</span>,</span><br><span class="line">      <span class="string">"number"</span>: <span class="string">"京A 000003"</span>,</span><br><span class="line">      <span class="string">"price"</span>: 888888.66</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[1]'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   140k      0 --:--:-- --:--:-- --:--:--  255k</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"age"</span>: 28,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">  <span class="string">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"email"</span>: <span class="string">"wenidngding_ios@126.com"</span>,</span><br><span class="line">  <span class="string">"interest"</span>: [</span><br><span class="line">    <span class="string">"文学"</span>,</span><br><span class="line">    <span class="string">"音乐"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"car"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"奥迪"</span>,</span><br><span class="line">    <span class="string">"number"</span>: <span class="string">"京A 000002"</span>,</span><br><span class="line">    <span class="string">"price"</span>: 200000.66</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[1].name'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   171k      0 --:--:-- --:--:-- --:--:--  255k</span><br><span class="line"><span class="string">"wendingding"</span></span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[1].email'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   106k      0 --:--:-- --:--:-- --:--:--  127k</span><br><span class="line"><span class="string">"wenidngding_ios@126.com"</span></span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[1] | &#123;name,age&#125;'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   161k      0 --:--:-- --:--:-- --:--:--  204k</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">  <span class="string">"age"</span>: 28</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[1] | &#123;newName:.name,newAge:.age&#125;'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   153k      0 --:--:-- --:--:-- --:--:--  204k</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"newName"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">  <span class="string">"newAge"</span>: 28</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[] | select (.age &gt;=24)'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   167k      0 --:--:-- --:--:-- --:--:--  255k</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"age"</span>: 28,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">  <span class="string">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"email"</span>: <span class="string">"wenidngding_ios@126.com"</span>,</span><br><span class="line">  <span class="string">"interest"</span>: [</span><br><span class="line">    <span class="string">"文学"</span>,</span><br><span class="line">    <span class="string">"音乐"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"car"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"奥迪"</span>,</span><br><span class="line">    <span class="string">"number"</span>: <span class="string">"京A 000002"</span>,</span><br><span class="line">    <span class="string">"price"</span>: 200000.66</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"age"</span>: 24,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"LiuY"</span>,</span><br><span class="line">  <span class="string">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"email"</span>: <span class="string">"LiuY@126.com"</span>,</span><br><span class="line">  <span class="string">"interest"</span>: [</span><br><span class="line">    <span class="string">"文学"</span>,</span><br><span class="line">    <span class="string">"音乐"</span>,</span><br><span class="line">    <span class="string">"绘画"</span>,</span><br><span class="line">    <span class="string">"IT"</span>,</span><br><span class="line">    <span class="string">"阅读"</span>,</span><br><span class="line">    <span class="string">"健身"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"car"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"ATS"</span>,</span><br><span class="line">    <span class="string">"number"</span>: <span class="string">"京A 000003"</span>,</span><br><span class="line">    <span class="string">"price"</span>: 888888.66</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[1,3] | &#123;name,email&#125;'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   162k      0 --:--:-- --:--:-- --:--:--  255k</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">  <span class="string">"email"</span>: <span class="string">"wenidngding_ios@126.com"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"LiuY"</span>,</span><br><span class="line">  <span class="string">"email"</span>: <span class="string">"LiuY@126.com"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[1,3] | [&#123;name,email&#125;]'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   165k      0 --:--:-- --:--:-- --:--:--  255k</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"wenidngding_ios@126.com"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"LiuY"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"LiuY@126.com"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">wendingding$ touch test.json</span><br><span class="line"></span><br><span class="line">wendingding$ curl http://localhost:5000/person | jq <span class="string">'.[1,3] | [&#123;name,email&#125;]'</span> &gt; test.json</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1047  100  1047    0     0   143k      0 --:--:-- --:--:-- --:--:--  204k</span><br><span class="line">wendingding$ cat test.json </span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"wenidngding_ios@126.com"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"LiuY"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"LiuY@126.com"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong><code>主要命令说明[为方便阅读，命令行中的xxx均代表的是http://localhost:5000/person路径]</code></strong></p><p><code>$ curl xxx | jq &#39;.&#39;</code> 获取API返回的所有JSON数据。<br><code>$ curl xxx | jq &#39;.[1]&#39;</code> 获取JSON文档中person数组的第2个元素内容。<br><code>$ curl xxx | jq &#39;.[1].name&#39;</code> 获取JSON文档中person数组的第2个元素(对象)中的name属性值。<br><code>$ curl xxx | jq &#39;.[1] | {name,age}&#39;</code> 获取数组第2个元素(对象)的name和age键值对组成新对象。<br><code>$ curl xxx | jq &#39;.[1,3] | {name,email}&#39;</code> 获取数组第2和第4个元素中的name和email值组成对象。<br><code>$ curl xxx | jq &#39;.[] | select (.age &gt;=24)&#39;</code> 获取JSON文档中所有age属性值&gt;=24的对象元素集合。</p><p><strong><code>补充</code></strong> 如果需要在Node中使用jq,那么可以安装并使用require导入<a href="https://www.npmjs.com/package/node-jq" target="_blank" rel="noopener">node-jq</a>模块。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>工具002 → JSONPath</strong></span></p><p><strong><code>定位</code></strong> 是一款可用于对JSON文档进行搜索和数据提取操作类库。<br><strong><code>历史</code></strong> 由<a href="https://goessner.net" target="_blank" rel="noopener">Stefan Goessner</a>于2007年开发，最开始的版本使用JavaScript实现。<br><strong><code>功能</code></strong> 能够对JSON文档进行搜索和数据提取，它的查询语法基于<a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">XPath</a>实现。<br><strong><code>生态</code></strong> JSONPath没有提供命令行操作实现，但提供了优秀的<a href="http://jsonpath.com/" target="_blank" rel="noopener">在线测试工具</a>和<a href="https://www.npmjs.com/package/jsonpath" target="_blank" rel="noopener">Node模块</a>。<br><strong><code>优势</code></strong></p><ul><li>具有丰富的查询语法。</li><li>查询语句可以返回文档中的多个元素。</li><li>大多数的主流平台都对JSONPath提供支持。</li><li>拥有很高的社区使用率，优秀的在线测试工具对开发者更友好。</li></ul><p><strong><code>资料</code></strong> <a href="https://www.npmjs.com/package/jsonpath" target="_blank" rel="noopener">jsonpath Node模块</a> 、<a href="http://jsonpath.com/" target="_blank" rel="noopener">在线测试网站</a> 、<a href="https://github.com/json-path/JsonPath" target="_blank" rel="noopener">Github仓库</a>、<a href="https://goessner.net/" target="_blank" rel="noopener">Stefan Goessner主页</a></p><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>$</code></td><td style="text-align:left">根节点</td></tr><tr><td style="text-align:left"><code>@</code></td><td style="text-align:left">当前节点的筛选器属性处理</td></tr><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">通配符，匹配任何属性名称</td></tr><tr><td style="text-align:left"><code>..</code></td><td style="text-align:left">通配符，匹配任意层次的节点</td></tr><tr><td style="text-align:left"><code>[]</code></td><td style="text-align:left">迭代器标示，同数组索引</td></tr><tr><td style="text-align:left"><code>[,]</code></td><td style="text-align:left">迭代器标示，迭代器多选</td></tr><tr><td style="text-align:left"><code>[start:end]</code></td><td style="text-align:left">数组切片运算符</td></tr><tr><td style="text-align:left"><code>[?(&lt;expression&gt;)]</code></td><td style="text-align:left">过滤表达式，求值必须为布尔值</td></tr></tbody></table><hr><p><strong><code>查询语法示例</code></strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//备注：参考的JSON数据为前文使用的data.json文件</span><br><span class="line">$                       获取整个JSON文档的内容</span><br><span class="line">$.person                获取JSON文档中person数组的内容</span><br><span class="line">$.person.length         获取JSON文档中person数组的长度(元素个数)</span><br><span class="line"></span><br><span class="line">$.person[0]             获取JSON文档中person数组第一个元素的内容</span><br><span class="line">$.person[:1]            获取JSON文档中person数组第一个元素的内容</span><br><span class="line">$.person[-1:]           获取JSON文档中person数组最后一个元素的内容</span><br><span class="line">$.person[(@.length-1)]  获取JSON文档中person数组最后一个元素的内容</span><br><span class="line"></span><br><span class="line">$.person[:2]            获取JSON文档中person数组前两个元素的内容</span><br><span class="line">$.person[0,3]           获取JSON文档中person数组第1和4第个元素的内容</span><br><span class="line">$.person[0::2]          获取JSON文档中person数组指定元素的内容(隔一个元素抽取)</span><br><span class="line">$.person[:2].name       获取JSON文档中person数组前两个元素中的name值</span><br><span class="line"></span><br><span class="line">$..name                 获取JSON文档中所有的name子元素内容</span><br><span class="line">$.person[?(@.age &gt;23)]  获取JSON文档中age值大于23的所有元素</span><br><span class="line">$.person[?(@.age &gt;23)].age  获取JSON文档中age值大于23的所有元素中的age值信息</span><br><span class="line">$.person[?(@.age &gt;20 &amp;&amp; @.interest.length == 2)].name 满足多个条件的筛选</span><br></pre></td></tr></table></figure></p><p><strong><code>工具(jsonpath在线测试网站)</code></strong></p><p>jsonpath提供了对应的<a href="http://jsonpath.com/" target="_blank" rel="noopener">在线测试网站</a>，给指定JSON文档输入对应的jsonpath查询语句能够快速看到最终效果。使用该测试工具来可以”重量级的”复杂JSON数据进行快速的筛选，输入查询语句后马上就能够在右侧看到查询后的结果。如果开发者原本不了解查询语法，那也可以通过该工具来快速的学习，下面给出简单的图示。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/json_06.png?raw=true"></p><div class="tip"><strong>注意</strong> <a href="https://jsonpath.org/" target="_blank" rel="noopener">jsonpath</a>在线测试工具在使用的时候，总是会把查询的结果保存到[ ]的结构中。</div><p><strong><code>工具(node模块jsonpath)</code></strong></p><p>JSONPath本身没有命令行工具，除了上面介绍的在线测试网站之外，我们还能在代码中使用node社区发布的<a href="https://www.npmjs.com/package/jsonpath" target="_blank" rel="noopener">jsonpath模块</a>实现JSON的搜索任务。下面给出一个简单的单元测试示例(列出源码和执行情况)。</p><p><strong>001 先列出单元测试相关的代码</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jsonpath-test.js文件内容</span></span><br><span class="line"><span class="keyword">var</span> unirest  = <span class="built_in">require</span>(<span class="string">"unirest"</span>);</span><br><span class="line"><span class="keyword">var</span> jsonPath = <span class="built_in">require</span>(<span class="string">"jsonpath"</span>);</span><br><span class="line"><span class="keyword">var</span> expect   = <span class="built_in">require</span>(<span class="string">"chai"</span>).expect;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"wendingding-test"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request ;</span><br><span class="line">    beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        request = unirest.get(<span class="string">"http://localhost:5000/person"</span>)</span><br><span class="line">        .header(<span class="string">"Accept"</span>,<span class="string">"application/json"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return 200 状态码"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            expect(response.statusCode).to.eql(<span class="number">200</span>);</span><br><span class="line">            expect(response.headers[<span class="string">"content-type"</span>])</span><br><span class="line">            .to.eql(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return 所有的JOSN数据"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            expect(response.body.length).to.eql(<span class="number">4</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return 所有的JOSN数据中第一个元素      -- $[1]"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> resultData = jsonPath.query(response.body,<span class="string">"$[1]"</span>);</span><br><span class="line">            expect(resultData[<span class="number">0</span>].name).to.eql(<span class="string">"wendingding"</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return 所有的JOSN数据中最后一个元素[1] -- $[-1:]"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> resultData = jsonPath.query(response.body,<span class="string">"$[-1:]"</span>);</span><br><span class="line">            expect(resultData[<span class="number">0</span>].email).to.eql(<span class="string">"LiuY@126.com"</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return 所有的JOSN数据中最后一个元素[2] -- $[(@.length-1)]"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123; </span><br><span class="line">            <span class="keyword">var</span> resultData = jsonPath.query(response.body,<span class="string">"$[(@.length-1)]"</span>);</span><br><span class="line">            expect(resultData[<span class="number">0</span>].email).to.eql(<span class="string">"LiuY@126.com"</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return 所有的JOSN数据中满足条件元素     -- $[?(@.age &gt;= 23)]"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = response.body;  </span><br><span class="line">            <span class="keyword">var</span> resultData = jsonPath.query(data,<span class="string">"$[?(@.age &gt;= 23)]"</span>);</span><br><span class="line">            <span class="comment">//console.log(resultData)</span></span><br><span class="line">            expect(resultData.length).to.eql(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i&lt;resultData.length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                expect(resultData[i].age).to.be.at.least(<span class="number">23</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>002 列出代码的具体执行细节</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ <span class="built_in">pwd</span> </span><br><span class="line">/Users/文顶顶/Desktop/jsonPath-demo</span><br><span class="line">wendingding$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">&gt; jsonpath-demo@1.0.0 <span class="built_in">test</span> /Users/文顶顶/Desktop/jsonPath-demo</span><br><span class="line">&gt; mocha</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  wendingding-test</span><br><span class="line">    ✓ <span class="built_in">return</span> 200 状态码</span><br><span class="line">    ✓ <span class="built_in">return</span> 所有的JOSN数据</span><br><span class="line">    ✓ <span class="built_in">return</span> 所有的JOSN数据中第一个元素      -- $[1]</span><br><span class="line">    ✓ <span class="built_in">return</span> 所有的JOSN数据中最后一个元素[1] -- $[-1:]</span><br><span class="line">    ✓ <span class="built_in">return</span> 所有的JOSN数据中最后一个元素[2] -- $[(@.length-1)]</span><br><span class="line">    ✓ <span class="built_in">return</span> 所有的JOSN数据中满足条件元素    -- $[?(@.age &gt;= 23)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  6 passing (92ms)</span><br></pre></td></tr></table></figure></p><p><strong>003 代码说明</strong></p><p>〇 示例代码中使用了<a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a>、<a href="http://unirest.io/" target="_blank" rel="noopener">Unirest</a>测试框架，jsonpath查询模块以及<a href="https://www.chaijs.com/" target="_blank" rel="noopener">Chai</a>模块中的断言结构。<br>① 示例代码中的每一个<code>it</code>就代表着一个测试用例。<br>② 示例代码中我们在Mocha的<code>beforeEach()方法</code>中对请求信息进行了配置。<br>③ 示例代码中在describe语句定义的范围内，每次执行测试用例之前都会先运行一次beforeEach方法。</p><p><strong>004 执行备注</strong></p><p>这里简单说明上面代码的执行环境和处理过程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[1]  在电脑中指定的路径创建文件夹，并通过命令行进入到该路径。</span><br><span class="line"></span><br><span class="line">$ mkdir JSON-TEST</span><br><span class="line">$ <span class="built_in">cd</span> JSON-TEST/</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">    /Users/文顶顶/Desktop/JSON-TEST</span><br><span class="line"></span><br><span class="line">[2] 初始化并安装必要的node模块。</span><br><span class="line"></span><br><span class="line">$ npm init  //默认回车即可</span><br><span class="line">$ npm install -g mocha</span><br><span class="line">$ npm install --save-dev mocha</span><br><span class="line">$ npm install --save-dev unirest</span><br><span class="line">$ npm install -save-dev jsonpath</span><br><span class="line">$ npm install --save-dev chai</span><br><span class="line"></span><br><span class="line">[3] 修改package.json文件中的scripts项为<span class="string">"test"</span>: <span class="string">"mocha"</span>。</span><br><span class="line"></span><br><span class="line">wendingding$ cat package.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"json-test"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"mocha"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"chai"</span>: <span class="string">"^4.2.0"</span>,</span><br><span class="line">    <span class="string">"jsonpath"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"mocha"</span>: <span class="string">"^5.2.0"</span>,</span><br><span class="line">    <span class="string">"unirest"</span>: <span class="string">"^0.5.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[4] 在当前目录下创建<span class="built_in">test</span>文件夹，并在该文件夹中创建测试文件(此处命名为json-test.js)。</span><br><span class="line"></span><br><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">$ touch json-test.js</span><br><span class="line"></span><br><span class="line">[5] 编辑json-test.js文件的内容(前文已经给出),列出文件目录。</span><br><span class="line">.</span><br><span class="line">├── node_modules</span><br><span class="line">│   ├── JSONSelect</span><br><span class="line">│   ...省略</span><br><span class="line">│   ├── chai</span><br><span class="line">│   ├── jsonpath</span><br><span class="line">│   ├── mocha</span><br><span class="line">│   ├── unirest</span><br><span class="line">│   └── xtend</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line">    └── json-test.js</span><br><span class="line"></span><br><span class="line">[6] 执行测试。</span><br><span class="line"></span><br><span class="line">$ npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>工具003 → JSON Pointer</strong></span></p><p><a href="https://tools.ietf.org/html/rfc6901" target="_blank" rel="noopener">JSON Pointer</a>本身是一项用于获取JSON文档中特定值的标准。JSON Pointer设计的主要目标在于支持JSON Schema标准中的$ref（请参考JSON进阶一文）。</p><p>目前，大多数的主流平台(包括<span style="color:#f09"><strong>Node\Ruby on Rails\Ptyhon\Java</strong></span>等)都已经包含JSON Pointer相关的类库。Java，Jackson已支持JSON Pointer查询语法，javaEE 8将提供原生支持；Node中则可以在社区中找到并使用<a href="https://www.npmjs.com/package/json-pointer" target="_blank" rel="noopener">json-pointer模块</a>来对JSON文档进行处理。</p><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>/data</code></td><td style="text-align:left">获取JSON文档中某个key对应的所有数据</td></tr><tr><td style="text-align:left"><code>/data/index</code></td><td style="text-align:left">获取指定索引对应的数据</td></tr><tr><td style="text-align:left"><code>/data/index/key</code></td><td style="text-align:left">获取指定索引对应的数据并通过key来取值</td></tr></tbody></table><p><a href="https://tools.ietf.org/html/rfc6901" target="_blank" rel="noopener">JSON Pointer</a>的查询语法简洁高效，其工作机制是以<code>/</code>来表示路径分隔，以<code>索引|下标</code>来获取指定的内容，索引总是从0开始。下面给出简短的查询语法示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//备注：参考的JSON数据为前文使用的data.json文件</span><br><span class="line">/person                 获取JSON文档中person的内容</span><br><span class="line">/person/0               获取JSON文档中person数组的第一项内容</span><br><span class="line">/person/0/name          获取JSON文档中person数组的第一项内容中的name值</span><br></pre></td></tr></table></figure></p><div class="tip"><strong>注意</strong> JSON Pointer标准中，查询操作的结果总只包含数据值而不会包含相关的键名。</div><p>这里将使用node社区的<a href="https://www.npmjs.com/package/json-pointer" target="_blank" rel="noopener">json-pointer</a>模块简单演示node平台中对JSON文档的处理。下面列出核心单元测试代码(在测试的时候需要先安装对应的模块)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">"chai"</span>).expect;</span><br><span class="line"><span class="keyword">var</span> pointer = <span class="built_in">require</span>(<span class="string">"json-pointer"</span>);</span><br><span class="line"><span class="keyword">var</span> unirest = <span class="built_in">require</span>(<span class="string">"unirest"</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"wendingding-test"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request ;</span><br><span class="line">    beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        request = unirest.get(<span class="string">"http://localhost:5000/person"</span>)</span><br><span class="line">        .header(<span class="string">"Accept"</span>,<span class="string">"application/json"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return 200 状态码"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            expect(response.statusCode).to.eql(<span class="number">200</span>);</span><br><span class="line">            expect(response.headers[<span class="string">"content-type"</span>])</span><br><span class="line">            .to.eql(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return 所有的JOSN数据"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            expect(response.body.length).to.eql(<span class="number">4</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return Person数组中的第一个元素 /person/0"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> resultData = pointer.get(response.body,<span class="string">"/0"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"\n"</span>,resultData,<span class="string">"\n"</span>);</span><br><span class="line">            expect(resultData.name).to.eql(<span class="string">"mitaoer"</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"return Person数组中的第三个元素中interest的值 /person/2/interest"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        request.end(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> resultData = pointer.get(response.body,<span class="string">"/2/interest"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"\t"</span>,resultData);</span><br><span class="line">            expect(resultData.length).to.eql(<span class="number">2</span>);</span><br><span class="line">            done();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简单列出执行情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ npm <span class="built_in">test</span></span><br><span class="line">&gt; json-pointer-demo@1.0.0 <span class="built_in">test</span> /Users/文顶顶/Desktop/JSON-Pointer</span><br><span class="line">&gt; mocha</span><br><span class="line"></span><br><span class="line">  wendingding-test</span><br><span class="line">    ✓ <span class="built_in">return</span> 200 状态码</span><br><span class="line">    ✓ <span class="built_in">return</span> 所有的JOSN数据</span><br><span class="line"></span><br><span class="line">      &#123; age: 18,</span><br><span class="line">        name: <span class="string">'mitaoer'</span>,</span><br><span class="line">        hasBrother: <span class="literal">true</span>,</span><br><span class="line">        email: <span class="string">'mitaoer@126.com'</span>,</span><br><span class="line">        interest: [ <span class="string">'文学'</span>, <span class="string">'音乐'</span>, <span class="string">'绘画'</span>, <span class="string">'IT'</span> ],</span><br><span class="line">        car: &#123; <span class="built_in">type</span>: <span class="string">'英菲尼迪'</span>, number: <span class="string">'京A 000001'</span>, price: 200012.66 &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    ✓ <span class="built_in">return</span> Person数组中的第一个元素 /person/0</span><br><span class="line">    [ <span class="string">'文学'</span>, <span class="string">'IT'</span> ]</span><br><span class="line">    ✓ <span class="built_in">return</span> Person数组中的第三个元素中interest的值 /person/2/interest</span><br><span class="line"></span><br><span class="line">  4 passing (66ms)</span><br></pre></td></tr></table></figure></p><h3 id="JSON转换"><a href="#JSON转换" class="headerlink" title="JSON转换"></a>JSON转换</h3><h4 id="JSON-→-HTML结构-渲染"><a href="#JSON-→-HTML结构-渲染" class="headerlink" title="JSON → HTML结构(渲染)"></a>JSON → HTML结构(渲染)</h4><p>将JSON数据转换(处理)为HTML的操作我们应该都很熟悉，在前端开发和移动端开发领域中，这一部分的操作通常和网络请求紧密联系，业务流程基本都是先发请求获取服务器端返回的(JSON)数据，然后通过序列化的方法来对数据进行解析，也就是反序列化处理(通常是将JSON数据转换为编程语言中对应的数据结构比如数组或者是对象)，最终再根据得到的数据来更新UI。</p><p>现在前端开发中这都属于基本操作，甚至像Vue这样类似的框架中<code>数据绑定</code>已经是其最最基础的一部分了。虽然如此，为了文章的完整性，这里还是会简单介绍<code>Mustache</code>和<code>Handlebars</code>两个类库在JSON转换中的运用。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>Mustache</strong></span></p><p><strong><code>简介</code></strong> Mustache使用声明式模板来转换数据格。<br><strong><code>资料</code></strong> <a href="https://mustache.github.io/" target="_blank" rel="noopener">Mustache</a>、<a href="https://github.com/mustache/mustache.github.com" target="_blank" rel="noopener">Mustache Github</a>、<a href="http://mustache.github.io/mustache.5.html" target="_blank" rel="noopener">Mustache 5说明文档</a><br><strong><code>优势</code></strong> 使用模板可以从代码中抽取具体的数据信息，并将数据保存在外部的文件中，实现关注点分离。</p><p>接下来我将通过一个简短的示例来说明Mustache的语法以及其使用方式，<a href="https://github.com/flowerField/Source/blob/master/Blog/Tem-TEST.zip" target="_blank" rel="noopener">您可以点击该链接获取完整的项目内容</a>。为了对介绍Mustache的使用，这里我列出项目中的部分内容并做简要说明。</p><p>001 列出模板核心内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//备注：../Tem-TEST/src/index.mustache文件的核心内容</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"tb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>interest<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>car-type<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>car-number<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;#person&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;interest.1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;&#123;#car&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;type&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;&#123;/car&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;/person&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>002 列出单元测试代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：../Tem-TEST/test/mustache-test.js文件内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">"chai"</span>).expect;</span><br><span class="line"><span class="keyword">var</span> jsonfile = <span class="built_in">require</span>(<span class="string">"jsonfile"</span>);</span><br><span class="line"><span class="keyword">var</span> mustache = <span class="built_in">require</span>(<span class="string">"mustache"</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"wendingding-mustache-test"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//文件的目录结构：json文件路径 + 模板文件路径 + 目标文件路径</span></span><br><span class="line">    <span class="keyword">var</span> jsonFileFullPath     = __dirname + <span class="string">"/../src/data.json"</span>;</span><br><span class="line">    <span class="keyword">var</span> templateFileFullPath = __dirname + <span class="string">"/../src/index.mustache"</span>;</span><br><span class="line">    <span class="keyword">var</span> targetFileFunllPath  = __dirname + <span class="string">"/../src/index.html"</span>;</span><br><span class="line"></span><br><span class="line">    it(<span class="string">"JSON -&gt; HTML"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        jsonfile.readFile(jsonFileFullPath,<span class="function"><span class="keyword">function</span>(<span class="params">readJsonFileError,jsonData</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!readJsonFileError)</span><br><span class="line">            &#123;</span><br><span class="line">                fs.readFile(templateFileFullPath,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">readTemplateFileError,templateData</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!readTemplateFileError)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> template = templateData.toString();</span><br><span class="line">                        <span class="keyword">var</span> html = mustache.render(template,jsonData);</span><br><span class="line"></span><br><span class="line">                        fs.writeFile(targetFileFunllPath, html,  <span class="function"><span class="keyword">function</span>(<span class="params">errorStatus</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (!errorStatus) &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"转换成功并保存为HTML文件！"</span>);</span><br><span class="line">                                done();</span><br><span class="line">                            &#125;<span class="keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                done(errorStatus);</span><br><span class="line">                            &#125;  </span><br><span class="line">                         &#125;); </span><br><span class="line">                    &#125;<span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        done(readTemplateFileError)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                done(readJsonFileError)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>通过<code>$ npm test</code>执行单元测试代码，将会执行JSON数组到HTML的转换，处理完毕后结果保存到index.html文件中，下面贴出该页面的效果图。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/json_07.png?raw=true"></p><blockquote><p><strong>Mustache模板工作机制</strong><br>❐  模板基于HTML,  Mustache使用JSON数据来解析标签。<br>❐  模板中的标签可以表示单个字段，使用<code>双大括号</code>的形式来包裹。<br>❐  模板中的区块都需要由<code>开始标签和结尾标签</code>组成，例如上例中的person。<br>❐  模板中的区块对应JSON数据中的数组或者是对象，例如上例中的person和car。<br>❐  模板中的区块可以为内部的标签定义上下文，比如car区块内部的type和number。</p></blockquote><p><strong><code>Mustache工具(命令行 &amp;&amp; 在线网站)</code></strong></p><p>Mustache除上面演示的使用方式之外，还能直接在命令行中使用，下面给出简短的使用示例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1) 全局安装Mustache模块。</span><br><span class="line">$ npm install -g mustache </span><br><span class="line"></span><br><span class="line">(2) 执行mustache命令转换。</span><br><span class="line">$ mustache /Users/文顶顶/Desktop/Tem-TEST/src/data.json /Users/文顶顶/Desktop/Tem-TEST/src/index.mustache &gt; target.html</span><br><span class="line"></span><br><span class="line">$ open target.html</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/json_08.png?raw=true"></p><p>这里再推荐一款好用的在线模板编辑器<a href="http://rowno.github.io/architect/" target="_blank" rel="noopener">Architect</a>，使用该工具可以有效的简化测试和开发模板的工作，当修改模板的时候，可以实时的看到渲染的结果。该网站支持多款主流模板引擎(包括<span style="color:#f09"><strong>doT.js、Dustjs、EJS、Handlebars.js、Hogan.js、Jade、Mustache、Nunjucks和Underscore.js等</strong></span>)的编辑和渲染，可以有效的加速开发和调试工作。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>Handlebars</strong></span></p><p><strong><code>简介</code></strong> <a href="http://handlebarsjs.com/" target="_blank" rel="noopener">Handlebars</a>是Mustache的扩展，使用hash或对象来渲染模板中的标签。<br><strong><code>资料</code></strong> <a href="http://handlebarsjs.com/" target="_blank" rel="noopener">Handlebars</a>、<a href="https://github.com/wycats/handlebars.js/" target="_blank" rel="noopener">Handlebars Github</a>、<a href="http://rowno.github.io/architect/" target="_blank" rel="noopener">Architect</a>、<a href="http://tryhandlebarsjs.com/" target="_blank" rel="noopener">在线测试网站</a>、<a href="https://www.npmjs.com/package/handlebars" target="_blank" rel="noopener">Handlebars的Node模块</a><br><strong><code>说明</code></strong> Handlebars与Mustache高度兼容，相对而言Handlebars自身增加了一些特性来增强转换操作。它们的差异主要在于Handlebars提供了<code>if</code>和<code>unless</code>等内联的辅助语句且允许开发者通过注册自定义辅助语义的方式来进行扩展，功能更加强大。</p><p><strong><code>优势</code></strong></p><ul><li>模板语言丰富，能满足大多数的转换需求。</li><li>拥有优秀的在线编辑和测试工具用起来更加方便。</li><li>采用声明式，但也支持在自定义辅助指令中编写逻辑代码。</li><li>因为拥有内置的条件逻辑，所以在渲染的时候几乎可以不用编写额外的处理代码。</li><li>跨平台的支持度很好，支持<code>JavaScript</code>、<code>Node.js</code>、<code>Java</code>和<code>Ruby on Rails</code>等平台。</li></ul><p>这里将简单介绍Handlebars在Node中的使用，并提供node和命令行两种执行示例供参考，更多的细节请自行参考其官网文档。</p><p><strong>001 列出模板文件的核心代码</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//备注(1)：/Users/文顶顶/Desktop/Handlebars-Test/index.hbs文件的核心内容</span><br><span class="line">//备注(2)：转换过程中使用的json数据为前文中的data.json文件</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"tb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>car-type<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>car-Other<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;#each person&#125;&#125;</span><br><span class="line">        &#123;&#123;#if car&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;car.type&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>号码：&#123;&#123;car.number&#125;&#125;  |  价格：&#123;&#123;car.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;/if&#125;&#125;</span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>002 列出命令行执行的细节</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1) 先通过命令行全局安装hb-interpolate模块</span><br><span class="line">$ npm install -g hb-interpolate</span><br><span class="line"></span><br><span class="line">(2) 执行渲染命令。</span><br><span class="line">$ hb-interpolate -j /Users/文顶顶/Desktop/Handlebars-Test/data.json -t  /Users/文顶顶/Desktop/Handlebars-Test/index.hbs &gt; target.html</span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 上面的命令行中<code>-j</code>表示后面跟的是json文件，<code>-t</code>表示后面跟的是模板文件，转换后的结果被输出并保存到target.html文件中。在模板文件中的<code>#each</code>表示遍历数组，<code>#if</code>是逻辑控制指令，在渲染的时候过滤了car为null的数据情况，浏览器打开target.html文件可以看到下面的显示结果。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/json_09.png?raw=true"></p><p><strong>003 Handlebars在Node中的使用</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：handlebars-test.js文件的内容</span></span><br><span class="line"><span class="comment">//001 导入node模板</span></span><br><span class="line"><span class="keyword">var</span> fs          = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> jsonfile    = <span class="built_in">require</span>(<span class="string">"jsonfile"</span>);</span><br><span class="line"><span class="keyword">var</span> handlebars  = <span class="built_in">require</span>(<span class="string">"handlebars"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 处理文件路径</span></span><br><span class="line"><span class="keyword">var</span> jsonFullPath     = __dirname + <span class="string">"/data.json"</span>;</span><br><span class="line"><span class="keyword">var</span> templateFullPath = __dirname + <span class="string">"/index.hbs"</span>;</span><br><span class="line"><span class="keyword">var</span> outPutFullPath  = __dirname + <span class="string">"/output.html"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 读取JSON文件的内容</span></span><br><span class="line">jsonfile.readFile(jsonFullPath,<span class="function"><span class="keyword">function</span>(<span class="params">readJsonError,jsonData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!readJsonError)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//004 读取模板文件的内容</span></span><br><span class="line">        fs.readFile(templateFullPath,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">readTemplateError,templateData</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!readTemplateError)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//005 JSON数据 + 模板 = &gt; 渲染</span></span><br><span class="line">                <span class="keyword">var</span> template = handlebars.compile(templateData);</span><br><span class="line">                <span class="keyword">var</span> html = template(jsonData);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//006 把渲染后的结果保存到指定文件中</span></span><br><span class="line">                fs.writeFile(outPutFullPath, html,  <span class="function"><span class="keyword">function</span>(<span class="params">errorStatus</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(! errorStatus)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"渲染成功！请打开"</span>+outPutFullPath+<span class="string">"查看结果!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 在指定文件目录中(我这里是<code>/Users/文顶顶/Desktop/Handlebars-Test</code>)创建handlebars-test.js文件，并编写上述对应的代码。通过命令行安装必要的Node模块，执行即可得到前文所示的图片结果。下面给出命令行执行的细节：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(1) 切换到当前目录</span><br><span class="line">$ <span class="built_in">cd</span> Handlebars-Test/</span><br><span class="line">$ <span class="built_in">pwd</span> </span><br><span class="line">/Users/文顶顶/Desktop/Handlebars-Test</span><br><span class="line"></span><br><span class="line">(2) 使用npm初始化并安装必要的Node模块。</span><br><span class="line">$ npm init</span><br><span class="line">$ npm install --save-dev jsonfile</span><br><span class="line">$ npm install --save-dev handlebars</span><br><span class="line"></span><br><span class="line">(3) 执行。</span><br><span class="line">$ node handlebars-test.js</span><br></pre></td></tr></table></figure></p><p><strong>补充</strong> Mustache和Handlebars除用来把JSON转换为HTML(渲染)之外，还能够对JSON数据本身的格式进行转换工作(主要是对JSON数据进行二次处理，譬如删减或结构调整等)，但Mustache在具体进行格式化的时候因为无法确定当前所处理的元素是否为数组或对象的最后一个元素，所以可能存在<span style="color:#f09">“无谓逗号”</span>的问题。Handlebars可以通过使用<code>#unless 和@last</code>的形式对”无谓逗号”的问题进行规避，具体的细节请参考其官方文档说明。另外，JSON格式转换的工具在Node环境中推荐使用<a href="https://www.npmjs.com/package/json2json" target="_blank" rel="noopener">Json2Json</a>和<a href="https://www.npmjs.com/package/jsonapter" target="_blank" rel="noopener">jsonapter</a>，也可以参考<a href="https://www.npmjs.com/package/json-patch" target="_blank" rel="noopener">JSON Patch</a>和<a href="https://www.npmjs.com/package/json-templater" target="_blank" rel="noopener">JSON-T</a>的实现，这里不再展开。</p><h4 id="JSON数据-←→-XML文档"><a href="#JSON数据-←→-XML文档" class="headerlink" title="JSON数据 ←→ XML文档"></a>JSON数据 ←→ XML文档</h4><p>最后简单介绍JSON数据和XML数据之间的相互转换，虽然这种场景通常可能很少出现(因为开发中常见的场景一般是对JSON或XML数据进行序列化或反序列化处理，JSON和XML两种数据格式之间直接相互转换的情况真的很少见)。</p><p><a href="https://www.xml.com/" target="_blank" rel="noopener">XML</a>全称<code>Extensible Markup Language</code>(可扩展标记语言)，主要流行于(1998~2008年)。同JSON类似，XML也能用于表示和传输数据，现在很多大公司的API都提供XML和JSON两种格式的数据响应。</p><p>XML数据和JSON数据的转换难易程度主要看XML文档的结构，如果文档中所有的数据都以XML元素和文本的方式保存那么转换为JSON数据是比较简单的，如果XML文档的元素上存在这大量的属性节点(<span style="color:#f09">早年的时候很多XML的设计人员把数据保存在XML的属性节点上，这样有助于减少文件体积和简化多平台之间的转换工作</span>)，那么这种转换就会比较困难。不过，好在我们可以使用很多现成的工具(譬如：Parker和<a href="http://www.jsonml.org/" target="_blank" rel="noopener">JsonML</a>以及<a href="http://badgerfish.ning.com/" target="_blank" rel="noopener">Badgerfish</a>等)来完成这种具体的转换工作。</p><p>对于上面这些工具的具体使用情况，大家可以自行了解。需要说明的是即便如此，这些工具仍然存在很大的局限性(譬如<code>文档不全</code>、<code>缺乏跨平台的支持</code>和<code>完整实现</code>以及<code>有损转换</code>等等)。所以，在实际的使用过程中其实可以考虑先把JSON|XML转换为当前编程语言中的数据结构形式，然后再转换成XML|JSON)。下面以JavaScript(Node)平台为例加以简单说明。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>XML文档 → JSON数据</strong></span></p><ul><li>先把XML数据解析为JavaScript中的对象|数组(<code>xml2js模块</code>)。</li><li>把JavaScript的对象|数组序列化为JSON格式的数据(<code>JSON.stringify方法</code>)。</li></ul><p>列出核心示例代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlFullPath      = __dirname + <span class="string">"/data.xml"</span>;</span><br><span class="line">fs.readFile(xmlFullPath,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">readFileError,xmlData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parser = <span class="keyword">new</span> xml2js.Parser();</span><br><span class="line">    parser.parseString(xmlData,<span class="function"><span class="keyword">function</span>(<span class="params">error,xmlObj</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(xmlObj,<span class="literal">null</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>JSON数据 → XML文档</strong></span></p><ul><li>先将JSON数据解析(反序列化)为JavaScript中的对象|数组数据(<code>eval函数或者是JSON.parse方法</code>)。</li><li>根据JavaScript数据来生成(marshaling)对应的XML文档(<code>xml2js模块</code>)</li></ul><p>这里列出json数据转换为xml数据的代码示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入node模板</span></span><br><span class="line"><span class="keyword">var</span> fs          = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> xml2js      = <span class="built_in">require</span>(<span class="string">"xml2js"</span>);</span><br><span class="line"><span class="keyword">var</span> jsonfile    = <span class="built_in">require</span>(<span class="string">"jsonfile"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 处理文件路径</span></span><br><span class="line"><span class="keyword">var</span> jsonFullPath     = __dirname + <span class="string">"/data.json"</span>;</span><br><span class="line"><span class="keyword">var</span> xmlFullPath      = __dirname + <span class="string">"/data.xml"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 读取JSON文件的内容并解析为JavaScript对象(jsonData)</span></span><br><span class="line">jsonfile.readFile(jsonFullPath,<span class="function"><span class="keyword">function</span>(<span class="params">readJsonError,jsonData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!readJsonError)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//004 创建并返回bulider实例对象</span></span><br><span class="line">        <span class="keyword">var</span> bulider = <span class="keyword">new</span> xml2js.Builder();</span><br><span class="line">        <span class="comment">//005 使用bulider对象将jsonData转换为xml格式的字符串</span></span><br><span class="line">        <span class="keyword">var</span> xml = bulider.buildObject(jsonData);</span><br><span class="line">        <span class="comment">//006 写文件操作(把最终的数据保存到指定的文件中)</span></span><br><span class="line">        fs.writeFile(xmlFullPath, xml,  <span class="function"><span class="keyword">function</span>(<span class="params">errorStatus</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(! errorStatus)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"json-&gt;XML 转换成功"</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(xml);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>列出用于转换的初始json数据。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"person"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"mitaoer"</span>,</span><br><span class="line">        <span class="attr">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"mitaoer@126.com"</span>,</span><br><span class="line">        <span class="attr">"car"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"英菲尼迪"</span>,</span><br><span class="line">          <span class="attr">"number"</span>: <span class="string">"京A 000001"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">200012.66</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">28</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">        <span class="attr">"hasBrother"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"wenidngding_ios@126.com"</span>,</span><br><span class="line">        <span class="attr">"car"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"奥迪"</span>,</span><br><span class="line">          <span class="attr">"number"</span>: <span class="string">"京A 000002"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">200000.66</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>列出最终输出的xml数据内容。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mitaoer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hasBrother</span>&gt;</span>true<span class="tag">&lt;/<span class="name">hasBrother</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">email</span>&gt;</span>mitaoer@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">car</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>英菲尼迪<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">number</span>&gt;</span>京A 000001<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>200012.66<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">car</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>28<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>wendingding<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hasBrother</span>&gt;</span>true<span class="tag">&lt;/<span class="name">hasBrother</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">email</span>&gt;</span>wenidngding_ios@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">car</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>奥迪<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">number</span>&gt;</span>京A 000002<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>200000.66<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">car</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure></p><div class="tip">注意：如果JSON数据中存在数组这种结构那么使用xml2js模块的处理其实不甚理想，更新信息请参考<a href="https://www.npmjs.com/package/xml2js" target="_blank" rel="noopener">官方文档说明</a>。</div><div class="tip"><strong>后记</strong> ！ MD，这篇文章写了我好久中间一度放弃，玩了两天农药。好在，我终于完成了。</div><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文输出JSON搜索和JSON转换相关的内容，是对前两篇文章的补充。&lt;/div&gt;

&lt;h3 id=&quot;JSON搜索&quot;&gt;&lt;a href=&quot;#JSON搜索&quot; class=&quot;headerlink&quot; title=&quot;JSON搜索&quot;&gt;&lt;/a&gt;JSON搜索&lt;/h
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [08]-javaScript和JSON (进阶)</title>
    <link href="https://weibo.com/u/3800117445/2018/11/11/javaScript%E7%B3%BB%E5%88%97%20%5B08%5D-javaScript%E5%92%8CJSON(%E8%BF%9B%E9%98%B6)/"/>
    <id>https://weibo.com/u/3800117445/2018/11/11/javaScript系列 [08]-javaScript和JSON(进阶)/</id>
    <published>2018-11-11T00:20:13.000Z</published>
    <updated>2018-11-16T01:26:58.884Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">在<a href="http://wendingding.com/2018/04/16/javaScript%E7%B3%BB%E5%88%97%20[05]-javaScript%E5%92%8CJSON/" target="_blank" rel="noopener">javaScript和JSON</a>这篇博文中已经对JSON的基础知识进行了系统的介绍，此文是JSON知识的<strong>进阶内容</strong>，本文输出和JSON有关的以下内容：</div><blockquote><p>❐  JSON核心<br>❐  JSON的校验(JSON Schema)</p></blockquote><h3 id="JSON核心"><a href="#JSON核心" class="headerlink" title="JSON核心"></a>JSON核心</h3><p>JSON是一种数据交换格式，是当前网络通信中使用的主流数据格式。</p><p><span style="color:#000">JSON本身并不局限(依赖)于某项特定的技术，非私有且可移植，几乎所有的现代编程语言(<code>javaScript</code> | <code>java</code> | <code>Ruby</code> | <code>C#</code> | <code>PHP</code> | <code>Object-C</code>等)和平台都支持对JSON数据的序列化和反序列化处理，JSON主要应用在<strong><code>网络通信的数据格式</code>、<code>Node用来存储项目元数据</code>、<code>Kafka类似的消息平台</code></strong>以及<strong><code>MongoDB等NoSQL数据库</code></strong>中。</span></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>JSON流行的主要原因</strong></span></p><ul><li><strong>JavaScript语言的复兴和崛起</strong>。</li><li><strong>JSON自身数据结构的简洁和紧凑特性</strong>。</li><li><strong>基于JSON的RESTful API呈现大规模增长</strong>。</li><li><strong>Ecma国际和IETF相关的标准化工作让JSON获得行业认可</strong>。</li></ul><p>JSON的作者<a href="https://en.wikipedia.org/wiki/Douglas_Crockford" target="_blank" rel="noopener">Douglas Crockford</a>在创作时借鉴了JavaScript对象字面量的语法，也就是说JSON本身就是JavaScript对象字面量表示法的一个子集和JavaScript开发能够无缝融合，而JavaScript编程语言的复兴和崛起(<code>前端 + Node后端生态</code>)极大的推动了JSON的流行。</p><p>JSON的数据表示方式非常简洁，结构紧凑易于阅读而且其本身的结构与高级编程语言中的<code>对象|字典|数组</code>结构天然一致，与XML相比更适合面向对象的设计和开发。此外，JSON格式的文档通常比相同内容的XML文档更小，因此在进行网络传输和处理的时候更快、效率更高，JSON本身的这些特性加上相关技术环境的发展让它逐步替代XML成为互联网中主要的数据交换格式。 </p><p>近些年，基于JSON的RESTful API呈现大规模爆炸式增长，包括LinkedIn、Github、Twitter、Facebook、Tumblr和Amazon等公司都提供基于JSON的RESTful API(<strong><code>备注</code></strong> 相关API可以访问<a href="https://www.programmableweb.com" target="_blank" rel="noopener">programmableweb</a>查询)。</p><p>JSON的标准化(成为一项技术标准)，让JSON获得了行业内的认可，下面简单列出主要的标准化进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2001 年 JSON由Douglas Crockford提出。</span><br><span class="line">2006 年 JSON由IETF通过RFC 4627进行首次标准化。</span><br><span class="line">2013 年 Ecma国际通过ECMA 404 将JSON正式标准化。</span><br><span class="line">2014 年 Tim Bray发布了RFC 7158和RFC 7159作为原始标准的改进版本(主要修正了4627标准中的一些错误)。</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>JSON数值的类型</strong></span></p><p>JSON数值的类型主要指的是在JSON文档中，键值对冒号(:)后侧值的数据类型，主要包括：</p><ul><li><span style="color:#196"><strong>null</strong></span></li><li><span style="color:#196"><strong>数值</strong></span></li><li><span style="color:#196"><strong>对象</strong></span></li><li><span style="color:#196"><strong>数组</strong></span></li><li><span style="color:#196"><strong>字符串</strong></span></li><li><span style="color:#196"><strong>布尔值</strong></span></li></ul><p><strong><code>null</code></strong>是JSON中的一个特殊值，用来表示某个key(属性)没有值用作占位符，注意不能由引号括起来。</p><p><strong><code>数值</code></strong>遵循JavaScript双精度浮点数格式，支持指数形式，但仅支持十进制数不支持8进制和16进制数。</p><p><strong><code>对象</code></strong>由 { 和 } 把键值对(key-value)括起来，允许设置为空对象，可以内嵌在其他的对象或者是数组中。</p><p><strong><code>数组</code></strong>由 [ 和 ] 把元素括起来，允许设置为空数组且不限制类型，可以内嵌在其他的对象或者是数组中。</p><p><strong><code>字符串</code></strong>由包含在双引号间的N(&gt;=0)个Unicode字符组成可包含由转义字符，但<span style="color:#972">单引号字符串是非法的</span>。</p><p><strong><code>布尔值</code></strong>只存在true和false这两种值，且不能用引号把它们括起来，需注意JSON中没有为<strong>undefined</strong>值。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>More …</strong></span></p><p><strong>版本 ➤</strong>JSON的核心标准不会再有新的版本，适用”无版本”理念。</p><p><strong>类型 ➤</strong>JSON数据在文件系统中存储的标准文件类型为.json，IANA为JSON文档指定的MIME(媒体类型)为<span style="color:red">application/json</span>。</p><p><strong>缩进 ➤</strong>JSON的编码规范并不存在与JSON数据缩进相关的话题，主要因为JSON本身是一种序列化格式而非呈现格式，所以缩进对JSON本身而言意义不大，在优化JSON现实的时候，常见的缩进方案是两格缩进或四格缩进。</p><p><strong>工具 ➤</strong> </p><p>在线生成合法JSON文档的工具(1)  <a href="http://jsonmate.com" target="_blank" rel="noopener">JSONmate</a><br>在线生成合法JSON文档的工具(2)  <a href="https://jsoneditoronline.org" target="_blank" rel="noopener">JSON Editor Online</a><br>在线校验JSON文档是否合法的工具(1) <a href="http://json-schema.org" target="_blank" rel="noopener">JSON Schema</a><br>在线校验JSON文档是否合法的工具(2) <a href="http://jsonvalidate.com" target="_blank" rel="noopener">JSON Validate</a><br>快速生成大量测试JSON数据的工具推荐 <a href="https://www.json-generator.com" target="_blank" rel="noopener">JSON Generator</a><br>在线对复杂JSON数据格式化的工具推荐 <a href="http://tool.oschina.net/codeformat/json" target="_blank" rel="noopener">JSON 在线格式化</a></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/json_01.png?raw=true"></p><div class="tip">创建|编辑JSON文件的时候，建议使用<a href="https://jsoneditoronline.org" target="_blank" rel="noopener">JSON Editor Online</a>在线工具，上图是其基本工作界面。</div><h3 id="JSON-Schema"><a href="#JSON-Schema" class="headerlink" title="JSON Schema"></a>JSON Schema</h3><p><a href="http://json-schema.org" target="_blank" rel="noopener">JSON Schema</a>是对JSON文档中的内容、结构和格式进行的声明，用于校验JSON文档。区别于普通的JSON校验工具，JSON Schema能够对JSON文档执行<strong>语法校验</strong>和严格的<strong>语义校验</strong>。<a href="http://json-schema.org" target="_blank" rel="noopener">JSON Schema</a>这种能够用于校验JSON文档内容和语义的工具能够有效提供服务的安全性，在消息系统中的应用能够确保数据格式的正确性，在API设计领域还能够帮助定义API协议等。</p><p><strong>建议</strong> 从零开始对JSON文档的内容进行声明非常麻烦也没有必要，建议先使用<a href="https://jsonschema.net" target="_blank" rel="noopener">JSONSchema.net网站</a>来根据已有的JSON文档生成对应的Schema文档，然后再根据具体的校验规则来逐步修缮。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>基本示例</strong></span></p><p>这里先给出一份简单的JSON文档和对该文档的JSON Schema描述，然后再介绍<code>JSON Schema的核心关键词</code>和具体规则。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 文件名 demo.json 注意该行不作为json文件的内容</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"wendingding"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"wendingding_ios@126.com"</span>,</span><br><span class="line">    <span class="attr">"height"</span>: <span class="number">1.73</span>,</span><br><span class="line">    <span class="attr">"isGoodMan"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"tags"</span>: [</span><br><span class="line">        <span class="string">"javaScript"</span>,</span><br><span class="line">        <span class="string">"object-C"</span>,</span><br><span class="line">        <span class="string">"C++"</span>,</span><br><span class="line">        <span class="string">"swift"</span>,</span><br><span class="line">        <span class="string">"php"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"car"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"A"</span>,</span><br><span class="line">        <span class="attr">"number"</span>: <span class="string">"粤A 66666"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="number">21344.88</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 文件名 demo-schema.json 注意该行不作为json文件的内容</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"http://json-schema.org/draft-07/schema#"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"required"</span>: [<span class="string">"name"</span>,<span class="string">"age"</span>,<span class="string">"email"</span>,<span class="string">"height"</span>,<span class="string">"isGoodMan"</span>,<span class="string">"tags"</span>,<span class="string">"car"</span>],</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"examples"</span>: [ <span class="string">"wendingding"</span> ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"age"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">      <span class="attr">"examples"</span>: [ <span class="number">18</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"email"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"examples"</span>: [<span class="string">"wendingding_ios@126.com"</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"height"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"number"</span>,</span><br><span class="line">      <span class="attr">"examples"</span>: [ <span class="number">1.73</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"isGoodMan"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"boolean"</span>,</span><br><span class="line">      <span class="attr">"examples"</span>: [ <span class="literal">true</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tags"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"examples"</span>: [<span class="string">"javaScript"</span>, <span class="string">"object-C"</span>, <span class="string">"C++"</span>,<span class="string">"swift"</span>,<span class="string">"php"</span>]  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"car"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">      <span class="attr">"required"</span>: [<span class="string">"type"</span>,<span class="string">"number"</span>, <span class="string">"price"</span>],</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"examples"</span>: [<span class="string">"A"</span>] </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"number"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"examples"</span>: [<span class="string">"粤A 66666"</span>]   </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"price"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"number"</span>,</span><br><span class="line">          <span class="attr">"examples"</span>: [<span class="number">21344.88</span> ] </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用命令行工具的validate模块来使用Schema对准备好的JSON文档进行校验，列出执行细节：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ npm install -g ujs-jsonvalidate</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/validaten -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/ujs-jsonvalidate/bin/validaten</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/validate -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/ujs-jsonvalidate/bin/validate</span><br><span class="line">+ ujs-jsonvalidate@0.1.2</span><br><span class="line">added 4 packages <span class="keyword">in</span> 7.353s</span><br><span class="line">wendingding$ validate demo.json demo-schema.json </span><br><span class="line">JSON content <span class="keyword">in</span> file demo.json is valid</span><br></pre></td></tr></table></figure><p>因为在Schema文档中name字段是必要的，这里尝试删除demo.json文档中的<code>name:&quot;wendingding&quot;</code>部分，然后重新执行校验会发现提示错误信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ cat demo.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"age"</span>: 18,</span><br><span class="line">  <span class="string">"email"</span>: <span class="string">"wendingding_ios@126.com"</span>,</span><br><span class="line">  <span class="string">"height"</span>: 1.73,</span><br><span class="line">  <span class="string">"isGoodMan"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"tags"</span>: [</span><br><span class="line">    <span class="string">"javaScript"</span>,</span><br><span class="line">    <span class="string">"object-C"</span>,</span><br><span class="line">    <span class="string">"C++"</span>,</span><br><span class="line">    <span class="string">"swift"</span>,</span><br><span class="line">    <span class="string">"php"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"car"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"A"</span>,</span><br><span class="line">    <span class="string">"number"</span>: <span class="string">"粤A 66666"</span>,</span><br><span class="line">    <span class="string">"price"</span>: 21344.88</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">wendingding$ validate demo.json demo-schema.json </span><br><span class="line">Invalid: Missing required property: name</span><br><span class="line">JSON Schema element: /required/0</span><br><span class="line">JSON Content path:</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>核心关系词说明</strong></span></p><p><strong><code>type</code></strong> 声明对应字段的类型。<br><strong><code>pattern</code></strong> 使用正则表达式来限定字段的值。<br><strong><code>properties</code></strong> 声明对象中的字段，其中包含具体字段的type值等信息。<br><strong><code>$schema</code></strong> 声明遵循的<a href="http://json-schema.org" target="_blank" rel="noopener">JSON Schema</a>标准版本，校验文档时使用该版本的规则。</p><p><strong><code>items</code></strong> 如果字段是数组类型(array)，那么对数组元素的类型等进行限定。<br><strong><code>minimum | maximum</code></strong> 如果是数值类型(number)，那么限定其取值的范围。<br><strong><code>minItems | maxItems</code></strong> 用于校验数组成员的数目，设定最小数目和最大数目。<br><strong><code>examples</code></strong> 提供该字段对应值的示例，在创建schema文档的时候通常根据JSON模板文件的内容生成。<br><strong><code>enum</code></strong> 定义固定的枚举值来限制数组元素的取值，即数组的元素值只能是enum限定集合中的数据。</p><p><strong><code>additionalProperties</code></strong> 将该字段设置为false可以禁止JSON文档当前节点中出现额外的字段。<br><strong><code>required</code></strong> 该数组用于声明JSON文档中所有的必需字段，即必需包含这些字段，否则视为非法文档。<br><strong><code>dependencies</code></strong> 设置字段的依赖关系，即JSON文档中出现了某个字段的出现必须依赖某个特定字段。<br><strong><code>patternProperties</code></strong> 模式属性可以基于正则表达式来声明部分重复的字段名，如<code>^string[1-3]$</code>。</p><div class="tip"><strong>建议</strong> 在工作中如果需要对JSON数据进行严格的语法和语义校验，那么建议先使用典型的JSON文档利用<a href="http://json-schema.org" target="_blank" rel="noopener">JSON Schema在线工具</a>自动生成对应的Schema校验文件，然后再对该文件进行二次编辑，这样效率会更高一些。</div><p>这里给出<code>JSON Schema在线工具</code>的使用示例。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/json_02.gif?raw=true"></p><p><strong>扩展</strong> 前文中在对JSON文档和对应Schema进行校验的时候，在命令行中使用的是<code>validate模块</code>，该模块是<a href="http://jsonvalidate.com" target="_blank" rel="noopener">JSON Validate</a>网站所对应的npm包，具体使用的是名为<a href="https://www.npmjs.com/package/ujs-jsonvalidate" target="_blank" rel="noopener">ujs-jsonvalidate</a>的处理器。此外，<a href="https://github.com/epoberezkin/ajv" target="_blank" rel="noopener">ajv</a>也是Node中优秀的一款JSON校验类库，它本身很简洁且兼容性很好，更多信息可以参考链接地址。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;在&lt;a href=&quot;http://wendingding.com/2018/04/16/javaScript%E7%B3%BB%E5%88%97%20[05]-javaScript%E5%92%8CJSON/&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序实战[03]-衣橱商城首页功能实现</title>
    <link href="https://weibo.com/u/3800117445/2018/10/24/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%5B03%5D-%E8%A1%A3%E6%A9%B1%E5%95%86%E5%9F%8E%E9%A6%96%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://weibo.com/u/3800117445/2018/10/24/微信小程序实战[03]-衣橱商城首页功能实现/</id>
    <published>2018-10-24T10:30:39.000Z</published>
    <updated>2018-11-11T13:30:01.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文简单说明衣橱商城首页界面的实现过程，包括对商城首页的结构分析、首页各个区域模块的数据处理以及模块化的抽取等内容。</p></blockquote><h3 id="1-0-最终实现效果"><a href="#1-0-最终实现效果" class="headerlink" title="1.0 最终实现效果"></a>1.0 最终实现效果</h3><p>这里先给出最终实现效果图，并贴出首页(<code>home/index.wxml</code>和<code>home/index.wxss</code>)文件中的代码结构。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx50.gif?raw=true"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//(1) home/index.wxml文件内容</span><br><span class="line"><span class="comment">&lt;!-- 000 引入模板文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">'../../src/lib/template/bannerSwiper/bannerSwiper.wxml'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">'../../src/lib/template/timeLimit/timeLimit.wxml'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">'../../src/lib/template/hotCategory/hotCategory.wxml'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">'../../src/lib/template/mustBuy/mustBuy.wxml'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">'../../src/lib/template/weekly/weekly.wxml'</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 001 首页头部视图的处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'bannerSwiperTemplate'</span> <span class="attr">data</span>=<span class="string">'&#123;&#123;banners&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 002 首页我的订单等(自定义组件) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i-tabview</span> <span class="attr">itemArray</span>=<span class="string">'&#123;&#123; itemArray &#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">i-tabview</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 003 限时优惠模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'timeLimitViewTemplate'</span> <span class="attr">data</span>=<span class="string">'&#123;&#123;timeLimitListData&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 004 每周推荐模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'weeklyViewTemplate'</span> <span class="attr">data</span>=<span class="string">'&#123;&#123;weeklyData&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 005 必买爆品模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'mustBuyTemplate'</span> <span class="attr">data</span>=<span class="string">'&#123;&#123;topListObj&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 006 热门分类模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'hotViewTemplate'</span> <span class="attr">data</span>=<span class="string">'&#123;&#123;hotListData&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//(2) home/index.wxss文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入模板对应的样式文件 */</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../../src/lib/style/headerView.wxss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../../src/lib/template/timeLimit/timeLimit.wxss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../../src/lib/template/hotCategory/hotCategory.wxss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../../src/lib/template/mustBuy/mustBuy.wxss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../../src/lib/template/weekly/weekly.wxss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../../src/lib/template/bannerSwiper/bannerSwiper.wxss"</span>;</span><br></pre></td></tr></table></figure><p><strong>总结</strong> <strong>我们在做任何应用的时候，其实要做的无非两件事件，<span style="color:red">界面处理和业务逻辑处理</span></strong>。简单来说我们可以把任何的需求拆分成<code>UI界面效果</code>和<code>数据处理</code>两部分，通常UI界面效果需要根据特定的数据来实现，或者UI界面由数据进行驱动。如果还要再加一点能力，那也许就是拆分的能力了，即把大的模块拆分成一个个小的适合处理模块的能力。比如这个商城项目，我们首先把整个应用划分为<code>首页商品展示</code>、<code>购物车</code>、<code>订单和支付</code>等大的模块，然后每个大的模块中都包含一堆页面，这样就划分到具体页面的粒度了，如果页面相对来说比较复杂，那么还可以继续拆分。</p><p>这里我们需要实现首页这个模块，需要设计并实现首页的UI视图，该视图需要根据服务器端提供的数据来显示，下文将主要从<strong>UI界面的处理</strong>和<strong>服务器端数据</strong>处理两个维度来说明具体的实现过程。</p><h3 id="2-0-首页数据的处理"><a href="#2-0-首页数据的处理" class="headerlink" title="2.0 首页数据的处理"></a>2.0 首页数据的处理</h3><p>首页的数据处理相对简单，大概可以分成几个步骤。</p><blockquote><p>❏ 开通云开发功能创建环境并在文件存储模块保存图片资源<br>❏ 在数据库中创建界面中需要用到的数据集合，并把具体数据以记录的方式保存<br>❏ 在小程序前端js文件中通过调用云开发平台的API来对数据库中的数据进行操作<br>❏ 获取数据后通过调用this.setData方法来设置属性并重新渲染页面</p></blockquote><p>这里简单给出首页视图和需要用到数据之间的对应关系。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/wx51.png?raw=true"></p><p>在实现首页的时候，我们可以把整个页面简单划分为：<code>(1) 顶部bannaer区域</code>、<code>(2) 订单|售后区域</code>、<code>(3) 限时优惠区域</code>、<code>(4) 每周推荐区域</code>、<code>(5) 必买爆品区域</code>以及<code>(6)热门分类</code>等6个模块。这些模块中除<code>订单|售后区域</code>使用之前封装的自定义组件传递itemArray数组外，其它模块的数据都需要通过和服务器端数据库进行通信来进行获取，其中部分数据在获取后可能还需要做额外的处理。这里贴出js文件中对应的业务逻辑处理相关代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/home/index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    hotListData: [],</span><br><span class="line">    timeLimitListData:[],</span><br><span class="line">    banners: [],</span><br><span class="line">    itemArray: [</span><br><span class="line">      &#123;</span><br><span class="line">        srcImg: <span class="string">"../../../../src/img/order.png"</span>,</span><br><span class="line">        des: <span class="string">"我的订单"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        srcImg: <span class="string">"../../../../src/img/size.png"</span>,</span><br><span class="line">        des: <span class="string">"衣物尺寸"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        srcImg: <span class="string">"../../../../src/img/service.png"</span>,</span><br><span class="line">        des: <span class="string">"售后服务"</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    weeklyData:[],</span><br><span class="line">    topListObj:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//生命周期函数--监听页面加载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;  <span class="comment">//保存全局的this指针</span></span><br><span class="line">    wx.cloud.init();  <span class="comment">//初始化操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> db = wx.cloud.database(); <span class="comment">//连接数据库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//000 获取数据库中banners中对应的数据</span></span><br><span class="line">    db.collection(<span class="string">"banners"</span>).get(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功那么就使用得到的数据来设置渲染界面</span></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          banners:res.data</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">PrefixInteger</span>(<span class="params">num, length</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">Array</span>(length).join(<span class="string">'0'</span>) + num).slice(-length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//001 获取数据库中timeLimt中对应的数据</span></span><br><span class="line">    db.collection(<span class="string">"timeLimitList"</span>).doc(<span class="string">"5bcbf152b91567be916f95ce"</span>).get(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = res.data.timeLimitList</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求成功那么就使用得到的数据来设置渲染界面</span></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          timeLimitListData: data</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length ; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">         (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> endTimeStr = data[j].end;</span><br><span class="line">           <span class="keyword">var</span> startTimeStr = data[j].start;</span><br><span class="line">           <span class="keyword">var</span> timer = <span class="string">'timeLimitListData['</span> + j + <span class="string">'].timer'</span></span><br><span class="line">           <span class="keyword">var</span> isStart = <span class="string">'timeLimitListData['</span> + j + <span class="string">'].isStart'</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//设置倒计时</span></span><br><span class="line">           setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">var</span> resultIsStart = <span class="literal">true</span>;</span><br><span class="line">             <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">//获取当前时间</span></span><br><span class="line">             <span class="keyword">var</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>(endTimeStr).getTime(); <span class="comment">// //设置截止时间</span></span><br><span class="line">             <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>(startTimeStr).getTime(); <span class="comment">// //设置开始时间</span></span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span>(now - start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               resultIsStart = <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span><br><span class="line">             <span class="keyword">var</span> d, h, m, s, timeResult = <span class="string">"已结束"</span>;</span><br><span class="line">             <span class="keyword">var</span> leftTime = end - now;    <span class="comment">//计算时间差</span></span><br><span class="line">             <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">               h = PrefixInteger(<span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>), <span class="number">2</span>);</span><br><span class="line">               m = PrefixInteger(<span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>), <span class="number">2</span>);</span><br><span class="line">               s = PrefixInteger(<span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> % <span class="number">60</span>), <span class="number">2</span>);</span><br><span class="line">               timeResult = <span class="string">"距结束"</span> + h + <span class="string">":"</span> + m + <span class="string">":"</span> + s;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             that.setData(&#123;</span><br><span class="line">               [timer]: timeResult,</span><br><span class="line">               [isStart]: resultIsStart,</span><br><span class="line">             &#125;);</span><br><span class="line"></span><br><span class="line">           &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">         &#125;)(i)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//002 获取数据库中weeklyData中对应的数据</span></span><br><span class="line">    db.collection(<span class="string">"weeklyData"</span>).doc(<span class="string">"5bcaa4acb91567be916f204a"</span>).get(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功那么就使用得到的数据来设置渲染界面</span></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          weeklyData: res.data.weeklyData</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// console.log("---", res.data.weeklyData);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 获取数据库中topList中对应的数据</span></span><br><span class="line">    db.collection(<span class="string">"topList"</span>).doc(<span class="string">"5bcae5eeb91567be916f3837"</span>).get(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功那么就使用得到的数据来设置渲染界面</span></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          topListObj: res.data,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//004 获取数据库中hotList中对应的数据</span></span><br><span class="line">    db.collection(<span class="string">"hotList"</span>).doc(<span class="string">"5bcb3457b91567be916f5510"</span>).get(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功那么就使用得到的数据来设置渲染界面</span></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          hotListData: res.data.hotList,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//生命周期函数--监听页面初次渲染完成</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//生命周期函数--监听页面显示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//生命周期函数--监听页面隐藏</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//生命周期函数--监听页面卸载</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面上拉触底事件的处理函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用户点击右上角分享</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>代码说明</strong> 代码中在设置页面数据的时候调用的是<code>that.setData</code>方法，为什么不用<code>this.setData</code>呢？需要注意的是因为JavaScript语言本身的特性，导致<strong>success回调函数中this的指向跟页面中全局this不同</strong>，所以如果直接使用this来调用setData方法是不正确的。上面的代码中我们先把全局的this保存给that变量，然后当我们需要修改data属性中数据的时候都通过调用<code>that.setData</code>方法实现。还有一个注意点，就是在调用API访问数据库中数据的时候<span style="color:#195">一定要保证拥有对当前数据的操作权限</span>，切记。</p><h3 id="3-0-首页界面的处理"><a href="#3-0-首页界面的处理" class="headerlink" title="3.0 首页界面的处理"></a>3.0 首页界面的处理</h3><p>UI界面的处理其实也很简单，给出建议的处理流程：</p><blockquote><p>❏  <strong><code>拆分</code></strong> 根据最终效果图(高保真图片)来对UI整体界面进行拆分，拆分成更小的模块。<br>❏  <strong><code>标签</code></strong> 先分析每个模块(小的视图结构)需要用到的标签(组件)情况，写具体的标签。<br>❏  <strong><code>样式</code></strong> 根据最终效果图来为标签添加样式完成布局等操作，每个模块都进行处理，写样式。<br>❏  <strong><code>数据</code></strong> 使用js中对应的数据(可以是data中写好的数据 | 网络请求得到的数据)来完成数据填充。<br>❏  <strong><code>事件</code></strong> 如果当前视图拥有交互和事件，则还需给对应标签绑定事件并在js文件中进行逻辑处理。</p></blockquote><p>因为首页的UI界面本身比较复杂，所以这里我尝试以如下的方式进行拆分，再各个击破。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/wx52.png?raw=true"></p><p>在前文中相信大家已经看到最终的时候我是把每个小的模块都抽取成了模板，然后在<code>home/index.wxml</code>和<code>home/index.wxss</code>文件中导入模板(模板的样式)，使用模板并传递参数来实现的。这是简单优化后的代码，我自己在实现的时候开始其实是把所有代码都写在一坨的，<strong>建议大家在开发的时候直接一步到位多使用模板和自定义组件的方式来组织代码</strong>，这样会更清晰，可读性也更好。</p><p>在所有的这些模块中，我个人认为<code>限时优惠模块</code>、<code>每周推荐模块</code>和<code>必买爆品模块</code>是稍微复杂一点的，其中最难处理的应该要数<code>限时优惠模块</code>，因为该模块中用到的组件相对较多，而且数据处理的js代码也会更多一些。该项目中所有的代码您都可以在我文末提供的源码中获取，所以这里就不一个劲的贴代码了。我仅仅指出比较复杂或者需要注意的地方。</p><p><strong>复杂UI界面和数据处理：</strong> 限时优惠的进度限时和倒计时处理、 每周推荐模块的UI处理等。</p><p>这里简单贴一下现在项目的文件结构吧。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">bogon:weapp wendingding$ tree -L 5</span><br><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── pages</span><br><span class="line">│   ├── cart</span><br><span class="line">│   ├── category</span><br><span class="line">│   ├── home</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── index.json</span><br><span class="line">│   │   ├── index.wxml</span><br><span class="line">│   │   └── index.wxss</span><br><span class="line">│   └── mine</span><br><span class="line">├── project.config.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── img</span><br><span class="line">│   │   ├── cart.png</span><br><span class="line">|   |   | ... 省略</span><br><span class="line">│   │   ├── size.png</span><br><span class="line">│   │   └── stayPayment.png</span><br><span class="line">│   └── lib</span><br><span class="line">│       ├── component</span><br><span class="line">│       │   ├── iview</span><br><span class="line">│       │   └── tabview</span><br><span class="line">│       │       ├── tabview.js</span><br><span class="line">│       │       ├── tabview.json</span><br><span class="line">│       │       ├── tabview.wxml</span><br><span class="line">│       │       └── tabview.wxss</span><br><span class="line">│       ├── style</span><br><span class="line">│       │   └── headerView.wxss</span><br><span class="line">│       └── template</span><br><span class="line">│           ├── bannerSwiper</span><br><span class="line">│           │   ├── bannerSwiper.wxml</span><br><span class="line">│           │   └── bannerSwiper.wxss</span><br><span class="line">│           ├── hotCategory</span><br><span class="line">│           │   ├── hotCategory.wxml</span><br><span class="line">│           │   └── hotCategory.wxss</span><br><span class="line">│           ├── mustBuy</span><br><span class="line">│           │   ├── mustBuy.wxml</span><br><span class="line">│           │   └── mustBuy.wxss</span><br><span class="line">│           ├── timeLimit</span><br><span class="line">│           │   ├── timeLimit.wxml</span><br><span class="line">│           │   └── timeLimit.wxss</span><br><span class="line">│           └── weekly</span><br><span class="line">│               ├── weekly.wxml</span><br><span class="line">│               └── weekly.wxss</span><br><span class="line">└── utils</span><br><span class="line">    └── util.js</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/flowerField/weapp-yichu" target="_blank" rel="noopener">点击获取项目源码仓库</a></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文简单说明衣橱商城首页界面的实现过程，包括对商城首页的结构分析、首页各个区域模块的数据处理以及模块化的抽取等内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-0-最终实现效果&quot;&gt;&lt;a href=&quot;#1-0-最终实现效果&quot; class
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [07]-Date日期类型和定时器方法</title>
    <link href="https://weibo.com/u/3800117445/2018/10/22/javaScript%E7%B3%BB%E5%88%97%20%5B07%5D-%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AE%A1%E6%97%B6%E5%99%A8/"/>
    <id>https://weibo.com/u/3800117445/2018/10/22/javaScript系列 [07]-日期类型和计时器/</id>
    <published>2018-10-22T05:41:37.000Z</published>
    <updated>2018-11-11T13:30:01.184Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍JavaScript语言中的<code>Date日期类型</code>，常见的日期格式处理方式以及计时器相关方法(主要包含<code>setInterval</code>以及<code>setTimeOut</code>)。</p></blockquote><p><span style="border:1px solid #000;padding:5px 20px;"><strong>倒计时实现</strong> </span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"timeID"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> endTimeStr = <span class="string">"2018/10/30 20:00:00"</span>;</span><br><span class="line">   <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.querySelector(<span class="string">"#timeID"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取当前时间</span></span><br><span class="line">       <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       <span class="comment">//获取截止时间</span></span><br><span class="line">       <span class="keyword">var</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>(endTimeStr).getTime();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//计算时间差</span></span><br><span class="line">       <span class="keyword">var</span> leftTime = end - now;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//定义变量 d,h,m,s保存倒计时的时间</span></span><br><span class="line">       <span class="keyword">var</span> d, h, m, s, timeResult = <span class="string">"已结束"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (leftTime &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">        h = <span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">        m = <span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">        s = <span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> % <span class="number">60</span>);</span><br><span class="line">        timeResult=<span class="string">"距离结束的时间为："</span> + d + <span class="string">" 天 "</span> + h + <span class="string">" 小时 "</span> + m + <span class="string">" 分钟 "</span> + s + <span class="string">" 秒"</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//更新页面信息</span></span><br><span class="line">       oDiv.innerHTML = timeResult;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   setInterval(count,<span class="number">1000</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>这里给出实现的效果</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/date_01.gif?raw=true"></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>数据填充 |  补零处理</strong> </span></p><p>我们在真实的开发场景中可能需要在对一些数据进行处理的时候进行<span style="color:#195">补零操作</span>。什么意思呢，譬如在上面实现倒计时效果的案例中如果我需要得到的倒计时效果是：<code>05天 04小时 27分钟 32秒</code>的格式，那么就需要在最后进行拼接之前再进行额外的格式化处理。</p><p>我们在显示一个数字的时候(<code>比如是5</code>)，那么想要呈现出的结果可以是<code>5</code>也可以是<code>05</code>，这里我们主要探讨后一种情况。这里给出三种具体的实现方案，推荐使用最后一种(更高效也更直接)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数说明：</span></span><br><span class="line"><span class="comment">//第一个参数:num   要具体处理的数据</span></span><br><span class="line"><span class="comment">//第二个参数:length  目标数据的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种实现方案</span></span><br><span class="line"><span class="comment">// function PrefixInteger(num, length) &#123;</span></span><br><span class="line"><span class="comment">//     return (num/Math.pow(10,length)).toFixed(length).substr(2);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种实现方案</span></span><br><span class="line"><span class="comment">// function PrefixInteger(num, length) &#123;</span></span><br><span class="line"><span class="comment">//     return ( "0000000000000000" + num ).substr( -length );</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种实现方案</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrefixInteger</span>(<span class="params">num, length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Array</span>(length).join(<span class="string">'0'</span>) + num).slice(-length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PrefixInteger(<span class="number">4</span>, <span class="number">2</span>));       <span class="comment">//04</span></span><br><span class="line"><span class="built_in">console</span>.log(PrefixInteger(<span class="number">41</span>, <span class="number">10</span>));     <span class="comment">//0000000041</span></span><br></pre></td></tr></table></figure></p><p>如果前面示例程序中倒计时中具体的时间数值需要2位对齐，不够两位的补零，那么就可以考虑在最终拼接之前调用<code>PrefixInteger方法</code>并指定<code>length的值为2</code>来进行格式化操作。这里给出对具体时间进行格式化的调用代码和结果示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = PrefixInteger(<span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>),<span class="number">2</span>);</span><br><span class="line">h = PrefixInteger(<span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>),<span class="number">2</span>);</span><br><span class="line">m = PrefixInteger(<span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>),<span class="number">2</span>);</span><br><span class="line">s = PrefixInteger(<span class="built_in">Math</span>.floor(leftTime / <span class="number">1000</span> % <span class="number">60</span>),<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">timeResult = <span class="string">"距离结束的时间为："</span> + d + <span class="string">" 天 "</span> + h + <span class="string">" 小时 "</span> + m + <span class="string">" 分钟 "</span> + s + <span class="string">" 秒"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//timeResult的结果示例：距离结束的时间为：08 天 04 小时 27 分钟 07 秒</span></span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍JavaScript语言中的&lt;code&gt;Date日期类型&lt;/code&gt;，常见的日期格式处理方式以及计时器相关方法(主要包含&lt;code&gt;setInterval&lt;/code&gt;以及&lt;code&gt;setTimeOut&lt;/code&gt;)。&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序实战[02]-衣橱商城云开发数据处理</title>
    <link href="https://weibo.com/u/3800117445/2018/10/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%5B02%5D-%E8%A1%A3%E6%A9%B1%E5%95%86%E5%9F%8E%E4%BA%91%E5%BC%80%E5%8F%91%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>https://weibo.com/u/3800117445/2018/10/19/微信小程序实战[02]-衣橱商城云开发数据处理/</id>
    <published>2018-10-19T10:30:39.000Z</published>
    <updated>2018-11-11T13:30:01.336Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文简单说明衣橱商城小程序开发过程中的服务器端和数据处理方式。</p></blockquote><h3 id="1-0-服务器端和数据处理方式说明"><a href="#1-0-服务器端和数据处理方式说明" class="headerlink" title="1.0 服务器端和数据处理方式说明"></a>1.0 服务器端和数据处理方式说明</h3><p>在做小程序开发的时候，基本都需要进行服务器端和数据的处理。</p><p>目前来看，服务器端的处理可以有两种方式，一种是自己搭建服务器来处理(可以使用<code>Node</code>、<code>Apache</code>等)也可以选择直接使用小程序开发工具中已经集成的<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_blank" rel="noopener">云开发</a>来处理。</p><p>在<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_blank" rel="noopener">小程序.云开发官方文档</a>中有如下描写。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开发者在开发小程序、小游戏时，无需搭建服务器，即可使用云端能力。</span><br><span class="line">云开发为开发者提供完整的云端支持，弱化了后端和运维的概念，无需搭建服务器。</span><br><span class="line">只需要使用平台提供的 API 进行核心业务开发，即可实现快速上线和迭代，同时这与云服务相互兼容。</span><br></pre></td></tr></table></figure></p><p><strong>云开发提供3种基础能力支持</strong></p><blockquote><p>❏ <strong>云函数</strong> &nbsp;&nbsp;&nbsp;云端运行的代码，微信私有协议天然鉴权，只需编写业务逻辑代码<br>❏ <strong>数据库</strong> &nbsp;&nbsp;&nbsp;支持既能在小程序前端操作，也能在云函数中读写的 JSON 数据库<br>❏ <strong>文件存储</strong> 支持小程序前端直接上传/下载云端文件，在云开发控制台可视化管理</p></blockquote><div class="tip"> 使用云开发功能必须填写 AppID，且云开发能力从基础库 2.2.3 开始支持，需要考虑兼容性问题。APPID可以在登录微信公众平台后的设置 → 开发者设置中获取。</div><h3 id="2-0-开始使用云开发"><a href="#2-0-开始使用云开发" class="headerlink" title="2.0 开始使用云开发"></a>2.0 开始使用云开发</h3><p><strong>001 开通云开发功能</strong></p><p>当<code>使用APPID新建微信小程序项目</code>后，在开发者工具工具栏左侧，点击 “云开发” 按钮即可开通云开发。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx40.png?raw=true"></p><p><strong>002 创建云开发环境</strong></p><p>开通后我们能获得一套云开发环境，各个环境相互隔离，每个环境都包含独立的数据库实例、存储空间、云函数配置等资源。每个环境都有唯一的环境 ID 标识，初始创建的环境自动成为默认环境。</p><p>在创建开发环境的时候需要填写：<code>环境的名称</code>和<code>环境的ID</code>。其中<span style="color:#195">环境的ID 是在使用云服务时需要用到的全局唯一标识符，一经创建便不可修改</span>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx41.png?raw=true"></p><div class="tip"><strong>注意</strong> 每个小程序帐号可免费创建两个环境，环境的ID可以直接使用系统默认生成的。在实际开发中，建议每一个正式环境都搭配一个测试环境，所有功能先在测试环境测试完毕后再上到正式环境。</div><p><strong>003 云开发控制台说明</strong></p><p>当云开发环境创建好之后，我们将能够看到如下图所示的功能界面。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx42.png?raw=true"></p><p>云开发控制台是管理云开发资源的地方，主要提供以下支持:</p><blockquote><p>❏ <strong>概览</strong>        &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看云开发的基础使用数据。<br>❏ <strong>云函数</strong>    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;查看云函数列表、配置、日志和监控。<br>❏ <strong>数据库</strong>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;管理数据库，支持对数据进行增删改查、管理索引和数据库访问权限等操作。<br>❏ <strong>统计分析</strong> &nbsp;&nbsp;查看云开发资源具体使用的统计信息，包括<code>API调用图表</code>以及<code>存储容量和CDN浏览</code>等。<br>❏ <strong>存储管理</strong>  &nbsp;&nbsp;管理存储空间，可用于保存图片等资源，支持创建文件夹、批量上传和删除等操作。<br>❏ <strong>用户管理</strong>  &nbsp;&nbsp;查看小程序用户的具体信息，包括<code>头像</code>、<code>昵称</code>、<code>城市</code>、<code>最后一次进入时间</code>等信息。</p></blockquote><h3 id="3-0-数据库和文件存储"><a href="#3-0-数据库和文件存储" class="headerlink" title="3.0 数据库和文件存储"></a>3.0 数据库和文件存储</h3><p><span style="border:1px solid #000;padding:5px 20px;"><strong>数据库说明</strong> </span></p><p>云开发环境为我们提供了一个 <code>JSON 数据库</code>，与典型的关系型数据库所不同的是<span style="color:#195">JSON数据库中的每条记录都是一个 JSON 格式的对象</span>。一个数据库可以有多个集合（相当于关系型数据中的表），集合可看做一个 JSON 数组，数组中的每个对象就是一条记录，记录的格式是 JSON 对象。<strong>[备注]</strong> 关于json相关知识点可以参考<a href="http://wendingding.com/2018/04/16/javaScript%E7%B3%BB%E5%88%97%20[05]-javaScript%E5%92%8CJSON/" target="_blank" rel="noopener">javaScript和JSON</a>这篇文章。</p><p><strong> ✧ 云开发环境中对数据库的操作</strong></p><p>云开发环境中的数据库对<span style="color:red"><strong>集合</strong></span>(相当于关系型数据库中的表)的操作主要有：<strong>添加集合</strong>、<strong>删除集合</strong>。</p><p>在添加集合的时候需要给集合设置一个名称，对某个特定集合的操作主要有：<code>添加记录</code>、<code>编辑记录</code>、<code>删除记录</code>等操作，每条记录中可以包含多个字段。其中记录就相当于是关系型数据库中的某一行，而字段则相当于是关系型数据库中的某一列。</p><p>在添加记录的时候支持手动创建也支持直接导入<code>json</code>或<code>csv</code>文件，因为小程序中需要使用到的数据通常都会比较大，所以建议在具体处理的时候选择直接导入文件会更方便一些。这里给出手动创建和导入json文件两种具体的操作示例。</p><p><strong><code>001 手动创建</code></strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 新建集合</span><br><span class="line">(2) 添加记录</span><br><span class="line">(3) 添加字段，选择字段类型，设置值</span><br><span class="line">(4) 确定保存</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx43.gif?raw=true"></p><p><strong><code>002 直接导入</code></strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 新建集合</span><br><span class="line">(2) 提前准备好json文件(动图中已提前准备好demo.json文件)</span><br><span class="line">(3) 导入文件，选择文件路径(导入)</span><br><span class="line">(4) 确定保存</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx44.gif?raw=true"></p><p><strong> ✧ 小程序端对数据库的操作</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx45.png?raw=true"></p><p>云开发环境中的数据库其主要作用是为前端的小程序应用提供具体的数据。</p><p>这部分主要介绍在具体写小程序代码时，如何连接到对应的数据库并通过代码的方式来对数据库中的数据进行操作。在小程序的js文件中我们可以通过直接调用云开发中数据库相关的API即可对数据库中的数据进行增删改查操作，更多的细节可以参考<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database.html" target="_blank" rel="noopener">官方文档</a>的说明。这里仅简单说明连接和操作数据库的基本流程并给出示例代码。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx46.png?raw=true"></p><p><strong>小程序端操作数据库的基本流程</strong></p><blockquote><p>① <strong>云能力初始化</strong><br>② <strong>获取数据库的引用</strong><br>③ <strong>获取数据库指定集合的引用</strong><br>④ <strong>调用相关API执行CRUD操作</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 初始化操作(云能力)</span></span><br><span class="line">wx.cloud.init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 连接数据库</span></span><br><span class="line"><span class="keyword">const</span> db = wx.cloud.database();</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 获取数据库中指定的集合并查询获取所有的内容返回</span></span><br><span class="line">db.collection(<span class="string">"banners"</span>).get(&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 请求成功的回调</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印查看返回的数据(默认已转换为js数据)</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">//&#123;data:[...],errMsg:"collection.get.ok'"&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><p>注意用到的<code>wx.cloud.init</code>和<code>wx.cloud.database</code>等方法都是小程序提供的系统API，您可以通过查看<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/" target="_blank" rel="noopener">官方API文档</a>来学习这些方法的具体用法。上面的代码中我们首先进行了初始化操作，然后连接上了云开发环境中默认的数据库(<span style="color:#f39">如果存在多套开发环境那么需要通过给函数传递参数的方式来区分</span>)，之后通过<code>collection</code>方法获取默认数据库中<code>banners集合</code>的引用并调用get方法来获取集合中所有的数据。如果调用成功，那么在success回调函数中我们可以通过该回调的参数来获取具体的数据，该数据默认已完成了反序列处理。</p><div class="tip"><br>您在使用上面代码连接和管理数据库中数据的时候，如果操作失败很大可能是因为数据库中对应集合读写权限的问题。<br>在设置集合读写权限的时候，您需要根据具体的场景来处理，调试阶段建议设置为所有用户可读。<br><pre><br><div>数据中每个集合的读写权限有如下情况：</div><br><div>[1] 所有用户可读，仅创建者及管理员可写</div><br><div>[2] 仅创建者及管理员可读写</div><br><div>[3] 所有用户可读，仅管理员可写</div><br><div>[4] 仅管理员可读写</div></pre><br></div><p><strong> ✧ 数据库操作核心API简单说明</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx47.png?raw=true"></p><p><strong>注意</strong>  数据库API都是懒执行的，也就是说只有真实需要网络请求的 API 调用才会发起网络请求，其余如获 s取数据库、集合、记录的引用、在集合上构造查询条件等都不会触发网络请求。</p><p><strong>这里列出数据库操作中会触发网络请求的 API </strong><br><span class="propWX-green ">remove</span>       删除一个记录数据<br><span class="propWX-green ">update</span>       更新集合/记录数据<br><span class="propWX-green bg-red">set</span>       替换更新一个记录数据<br><span class="propWX-green bg-red">get</span>       获取集合/记录的数据<br><span class="propWX-green ">add</span>       在集合上添加新的记录<br><span class="propWX-green ">count</span>       统计查询语句对应的记录条数</p><p>假设我们在进行小程序开发的过程中，使用了云开发功能并在数据库中拥有名为<code>banners</code>的集合，在该集合中拥有多条记录，其中有一条记录的_id值为<code>W8mGeAIrVDZJFtFt</code>，这里给出一段对数据库中数据操作的示例代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 初始化操作(云能力)</span></span><br><span class="line">wx.cloud.init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 连接数据库</span></span><br><span class="line"><span class="keyword">const</span> db = wx.cloud.database();</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示[01] 查询数据库中指定集合的所有记录数据</span></span><br><span class="line">db.collection(<span class="string">"banners"</span>).get(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"集合数据"</span>,res.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示[02] 查询数据库中指定集合的特定记录的数据</span></span><br><span class="line">db.collection(<span class="string">"banners"</span>).doc(<span class="string">"W8mGeAIrVDZJFtFt"</span>).get(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"集合中某条记录的数据"</span>,res.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示[03] 查询数据库中指定集合的特定记录的数据并限定返回字段</span></span><br><span class="line">db.collection(<span class="string">"banners"</span>)</span><br><span class="line">  .doc(<span class="string">"W8mGeAIrVDZJFtFt"</span>)</span><br><span class="line">  .field(&#123;</span><br><span class="line">      id:<span class="literal">true</span></span><br><span class="line">  &#125;).get(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"限定字段"</span>, res.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示[04] 使用Promise风格的方式调用</span></span><br><span class="line">db.collection(<span class="string">'banners'</span>).doc(<span class="string">'W8mGeAIrVDZJFtFt'</span>).get().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Promise风格"</span>,res.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>给出上面js代码的执行结果<br><img src="https://github.com/flowerField/Source/blob/master/Blog/wx48.png?raw=true"></p><div class="tip">说明：调用api的时候可以选择使用回调函数或Promise风格的方式。</div><p><span style="border:1px solid #000;padding:5px 20px;"><strong>文件存储说明</strong> </span></p><p>小程序的云开发环境<span style="color:#195">支持小程序前端对云端文件直接进行上传和下载的操作，且可以在云开发控制台对文件进行可视化的管理，支持对文件进行访问权限的控制</span>，使用简单而且非常的方便。</p><p>我们可以把项目中需要用到的图片等资源通过云开发控制台直接上传并保存到<strong><code>存储管理模块</code></strong>中，然后在项目中需要用到的地方(或者数据库的对应字段中)直接以URL路径的方式进行引用即可。</p><p>此外，存储管理模块还提供了小程序客户端以及后端对文件进行上传、下载、删除等操作的两组API，直接调用即可。这里简单列出小程序客户端中相关的API操作，更多细节请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/" target="_blank" rel="noopener">官方文档</a>。</p><blockquote><p>❏ 上传文件  <code>uploadFile()</code><br>❏ 下载文件  <code>downloadFile()</code><br>❏ 删除文件  <code>deleteFile()</code><br>❏ 临时换链  <code>getTempFileURL()</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 文件上传</span></span><br><span class="line"><span class="comment">//参数说明:</span></span><br><span class="line"><span class="comment">//success成功回调</span></span><br><span class="line"><span class="comment">//fail        失败回调</span></span><br><span class="line"><span class="comment">//complete结束回调</span></span><br><span class="line"><span class="comment">//cloudPath云存储路径String类型</span></span><br><span class="line"><span class="comment">//filePath要上传文件资源的路径String类型</span></span><br><span class="line"><span class="comment">//headerHTTP 请求 Header, header 中不能设置 RefererObject类型</span></span><br><span class="line">wx.cloud.uploadFile(&#123;</span><br><span class="line">  cloudPath: <span class="string">'/wendingding.png'</span>,</span><br><span class="line">  filePath: <span class="string">''</span>, <span class="comment">// 小程序临时文件路径</span></span><br><span class="line">  success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// get resource ID</span></span><br><span class="line">    <span class="built_in">console</span>.log(res.fileID)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 文件下载</span></span><br><span class="line"><span class="comment">//参数说明:</span></span><br><span class="line"><span class="comment">//fileID云文件 IDString类型</span></span><br><span class="line"><span class="comment">//success成功回调</span></span><br><span class="line"><span class="comment">//   tempFilePath临时文件路径    String类型</span></span><br><span class="line"><span class="comment">//   statusCode    返回的HTTP状态码Number类型</span></span><br><span class="line">wx.cloud.downloadFile(&#123;</span><br><span class="line">  fileID: <span class="string">'a7xzcb'</span>,</span><br><span class="line">  success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// get temp file path</span></span><br><span class="line">    <span class="built_in">console</span>.log(res.tempFilePath)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//003 文件删除</span></span><br><span class="line"><span class="comment">//参数说明:</span></span><br><span class="line"><span class="comment">//fileList云文件ID字符串数组</span></span><br><span class="line">wx.cloud.deleteFile(&#123;</span><br><span class="line">  fileList: [<span class="string">'a7xzcb'</span>],</span><br><span class="line">  success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle success</span></span><br><span class="line">    <span class="built_in">console</span>.log(res.fileList)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip">说明：文件操作api的调用同样支持回调函数和Promise两种风格。</div><h3 id="4-0-衣橱商城中部分数据的处理"><a href="#4-0-衣橱商城中部分数据的处理" class="headerlink" title="4.0 衣橱商城中部分数据的处理"></a>4.0 衣橱商城中部分数据的处理</h3><p>前面的篇幅一直在介绍小程序中云开发平台相关的知识点，接下来我们回到衣橱商城这个实际的项目中，该小程序中的所有数据我都暂时直接使用云开发环境来处理。在项目中实际进行处理的时候，主要分成三部分内容。</p><p><strong>001 把项目中需要用到的图片等资源上传并保存到云开发环境的存储管理模块</strong>。支持批量上传，而可以自己创建|设置文件的具体路径，图片上传后点击详情能获取URL地址。</p><p><strong>002 根据项目的情况在云开发环境数据库中创建多个对应的数据集合并添加详细的信息(记录)</strong>。首页模块中需要的数据集合为：<code>banners</code>(顶部轮播图)、<code>hotList</code>(热门分类数据)、<code>timeLimitList</code>(限时优惠数据)、<code>topList</code>(热门商品数据)、<code>weeklyData</code>(每周推荐数据)。</p><p><strong>003 在小程序客户端通过调用对应的api来对数据库的数据进行操作</strong>。这里主要是在首页的javaScript文件(<code>home.js</code>)文件中调用api用来获取数据。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx49.gif?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文简单说明衣橱商城小程序开发过程中的服务器端和数据处理方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-0-服务器端和数据处理方式说明&quot;&gt;&lt;a href=&quot;#1-0-服务器端和数据处理方式说明&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序实战[01]-衣橱商城结构和我的页面</title>
    <link href="https://weibo.com/u/3800117445/2018/10/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%5B01%5D-%E8%A1%A3%E6%A9%B1%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84/"/>
    <id>https://weibo.com/u/3800117445/2018/10/18/微信小程序实战[01]-衣橱商城项目整体结构/</id>
    <published>2018-10-18T10:30:39.000Z</published>
    <updated>2018-11-11T13:30:01.381Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为需要完整的综合项目来贯穿小程序开发中的基础知识，所以我在自己使用的小程序清单中选择了一款优秀小程序(<code>MatchU码尚</code>)来进行实现和学习，项目中用到的数据和图片等资源有部分来源于此，该项目<code>仅做技术演示和个人学习使用</code>。本文先对该综合项目、开发小程序项目前期的准备工作进行说明，然后从零开始构建<code>&quot;衣橱定制商城小程序&quot;</code>，并完成tabbar栏和我的页面视图搭建。</p></blockquote><p><strong>说明</strong> 这是篇说明性博文，不会过多涉及项目的具体代码，该系列文章的源码您可以<a href="https://github.com/flowerField/weapp-yichu" target="_blank" rel="noopener">点击此处下载</a>。</p><p><strong>1.0 开发前准备</strong></p><p>[1] <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">官网注册微信小程序开发者账号</a>。<br>[2] <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">官网注册并完善小程序基本信息后，下载微信开发者工具并安装</a>。<br>[3] <a href="">在电脑合适的位置新建空的项目目录，在设置-开发设置中获取APPID初始化项目</a>。</p><p><strong>2.0 项目的功能模块</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx35.png?raw=true"></p><p><strong>3.0 项目的初始化</strong></p><p>在使用微信开发者工具选择项目目录，输入appID（也可以使用测试的appID）后勾选<code>建立普通快速模板</code>，那么我们将得到一个最简单的项目，该项目的整体结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── pages</span><br><span class="line">│   ├── index</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── index.wxml</span><br><span class="line">│   │   └── index.wxss</span><br><span class="line">│   └── logs</span><br><span class="line">│       ├── logs.js</span><br><span class="line">│       ├── logs.json</span><br><span class="line">│       ├── logs.wxml</span><br><span class="line">│       └── logs.wxss</span><br><span class="line">├── project.config.json</span><br><span class="line">└── utils</span><br><span class="line">    └── util.js</span><br></pre></td></tr></table></figure><p>对默认的项目结构进行调整。具体调整内容为:</p><pre><code>001 删除默认的两个页面 index 和 logs文件夹。 002 在pages文件夹中新建home、cart、mine和category文件夹并创建对应的pages页面(命名为index)。 003 在项目根目录下面新建src目录，该目录用于存放项目中需要用到的资源，并调整app.json文件的配置项。 004 在src目录下新建img目录用于存储项目中需要用到的图片资源，新建lib目录用于存放需要用到的第三方库和组件。</code></pre><p>调整后的项目文件结构如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── pages</span><br><span class="line">│   ├── cart</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── index.json</span><br><span class="line">│   │   ├── index.wxml</span><br><span class="line">│   │   └── index.wxss</span><br><span class="line">│   ├── category</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── index.json</span><br><span class="line">│   │   ├── index.wxml</span><br><span class="line">│   │   └── index.wxss</span><br><span class="line">│   ├── home</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── index.json</span><br><span class="line">│   │   ├── index.wxml</span><br><span class="line">│   │   └── index.wxss</span><br><span class="line">│   └── mine</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       ├── index.json</span><br><span class="line">│       ├── index.wxml</span><br><span class="line">│       └── index.wxss</span><br><span class="line">├── project.config.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── lib</span><br><span class="line">└── utils</span><br><span class="line">    └── util.js</span><br><span class="line"></span><br><span class="line">9 directories, 31 files</span><br></pre></td></tr></table></figure></p><p><strong>4.0 项目tabbar实现</strong></p><p>[1] 准备好项目tabbar部分需要的图标，存放到src/img目录下，这些图标可以在<a href="http://iconfont.cn/collections/detail?cid=918" target="_blank" rel="noopener">iconfont</a>网站获取。</p><p>[2] <code>对app.json</code>文件的字段进行配置，主要设置项目的导航背景、标题文字以及设置tabBar选项信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//app.json文件中的部分配置项</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/home/index"</span>,</span><br><span class="line">     ...省略</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>: &#123;</span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>: <span class="string">"light"</span>,</span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#110e1e"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"衣橱商城"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"white"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="attr">"selectedColor"</span>: <span class="string">"#000000"</span>,</span><br><span class="line">    <span class="attr">"list"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/home/index"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"首页"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>: <span class="string">"src/img/home.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"src/img/homeSelected.png"</span></span><br><span class="line">      &#125;</span><br><span class="line">      ....省略</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx36.gif?raw=true"></p><p><strong>5.0 我的页面视图实现</strong></p><p>在项目的整体结构和tabbar选项卡配置好之后，先尝试实现<code>我的</code>页面视图。</p><p>先给出<code>我的</code>页面的整体界面实现效果。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx37.gif?raw=true"></p><p>因为该页面的布局相对来说比较简单，而且要处理的数据也相对较少，这里在页面中需要用到数据的地方我们先暂时使用假数据来代替，稍微后面一点的时候再进行具体的优化。通过观察上面的实现效果，我们可以把<code>我的</code>页面分解成几个组成部分，每个部分则采用不同的策略来进行实现。</p><blockquote><p>❏  <span style="color:#195"><strong>头部视图</strong></span><br>    采用小程序中的基础组件<code>text</code>、<code>image</code>、<code>view</code>等并设置样式来实现。</p><p>❏  <span style="color:#195"><strong>cell视图(多组)</strong></span><br>    采用第三方组件库来实现，这里使用到的是iview中的<code>cell</code>和<code>panel</code>以及<code>cell-group</code>组件。<br>    <strong>[步骤]</strong> 把第三方库下载并导入到项目中(<code>src/lib/iview</code>) → 在json文件中配置<code>usingComponents</code> → 在wxml中使用组件并设置属性。</p><p>❏  <span style="color:#195"><strong>待付款、已付款区域视图</strong></span><br>    因为该视图在首页中也有用到，所以这里考虑把这一块的视图封装成自定义组件来处理。<br>    <strong>[步骤]</strong> 自定义组件(<code>src/lib/tabview</code>) →  在json文件中配置 -&gt; 在wxml中使用自定义组件。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx39.png?raw=true"></p><p><strong><code>附录01: tabview自定义组件内部实现细节</code></strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">001 自定义组件的基本操作</span><br><span class="line">    (1) 在项目的src/lib目录下新建tabview文件夹。</span><br><span class="line">    (2) 在<span class="selector-tag">tabview</span>目录下新建<span class="selector-tag">component</span>文件并命名为<span class="selector-tag">tabview</span>。</span><br><span class="line">    (3) 新建<span class="selector-tag">component</span>的时候会默认生成<span class="selector-tag">js</span>\<span class="selector-tag">wxml</span>\<span class="selector-tag">json</span>\<span class="selector-tag">wxss</span>四个文件，其中<span class="selector-tag">json</span>文件中已配置<span class="selector-tag">component</span>为<span class="selector-tag">true</span>.</span><br><span class="line">    (4) 在<span class="selector-tag">wxml</span>文件中编辑内容。</span><br><span class="line">    (5) 在<span class="selector-tag">wxss</span>文件中设置样式。</span><br><span class="line">    (6) 在<span class="selector-tag">js</span>文件中设置初始数据和事件方法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">002 <span class="selector-tag">wxml</span>文件中的内容</span><br><span class="line">&lt;view class='content-view'&gt;</span><br><span class="line">    &lt;view class='content-view-cell' wx:for='&#123;&#123;itemArray&#125;&#125;'&gt;</span><br><span class="line">      &lt;image class='content-view-cell-img' src='&#123;&#123;item.srcImg&#125;&#125;'&gt;&lt;/image&gt;</span><br><span class="line">      &lt;text  class='content-view-cell-des'&gt;&#123;&#123;item.des&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">003 <span class="selector-tag">wxss</span>文件中的内容</span><br><span class="line"><span class="selector-class">.content-view</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150</span>rpx;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">40</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-view-cell</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150</span>rpx;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">150</span>rpx;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-view-cell-img</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-view-cell-des</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">120</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">150</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">004 <span class="selector-tag">js</span>文件中内容</span><br><span class="line"><span class="selector-tag">Component</span>(&#123;</span><br><span class="line">  //设置自定义组件的属性列表</span><br><span class="line">  <span class="selector-tag">properties</span>: &#123;</span><br><span class="line">    <span class="attribute">itemArray</span>:&#123;</span><br><span class="line">      type:Array</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong><code>附录02: mine页面wxml文件内容</code></strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 001 头部视图区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'mine-info'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'mine-info-left'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'mine-info-left-name'</span>&gt;</span>&#123;&#123; userName &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span>  <span class="attr">class</span>=<span class="string">'mine-info-left-edit'</span> <span class="attr">src</span>=<span class="string">'../../src/img/edit.png'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'mine-info-left-des'</span>&gt;</span>衣橱，定制您成功的起点。<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'mine-info-right'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">'&#123;&#123; userPic &#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 002 cell视图处理[第一组] --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i-panel</span> <span class="attr">title</span>=<span class="string">" "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i-cell</span> <span class="attr">value</span>=<span class="string">'全部订单'</span> <span class="attr">title</span>=<span class="string">"我的订单"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">i-panel</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 003 自定义组件处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i-tabview</span> <span class="attr">itemArray</span>=<span class="string">'&#123;&#123;itemArray&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">i-tabview</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 004 cell视图处理[第二组] --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">i-panel</span> <span class="attr">title</span>=<span class="string">" "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i-cell-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"心意卡"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"优惠券"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">i-cell-group</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">i-panel</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 005 cell视图处理[都三组] --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i-panel</span> <span class="attr">title</span>=<span class="string">" "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i-cell-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"我的地址"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"我的尺寸"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"关于我们"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">i-cell-group</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">i-panel</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 006 退出功能模块 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'mine-logout'</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;因为需要完整的综合项目来贯穿小程序开发中的基础知识，所以我在自己使用的小程序清单中选择了一款优秀小程序(&lt;code&gt;MatchU码尚&lt;/code&gt;)来进行实现和学习，项目中用到的数据和图片等资源有部分来源于此，该项目&lt;code&gt;仅做技术演示和个人学
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>网络编程系列 术语</title>
    <link href="https://weibo.com/u/3800117445/2018/10/16/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97-%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/"/>
    <id>https://weibo.com/u/3800117445/2018/10/16/网络编程系列-基本术语/</id>
    <published>2018-10-16T01:31:25.000Z</published>
    <updated>2018-11-11T13:30:01.390Z</updated>
    
    <content type="html"><![CDATA[<p><span class="item-class">Web</span> <code>World Wide Web</code>，万维网(<code>www</code>)。</p><p><span class="item-class">W3C</span> <code>World Wide Web Consortium</code>，万维网联盟。</p><p><span class="item-class">DOM</span> <code>Document Object Model</code>，文档对象模型。</p><p><span class="item-class">BOM</span> <code>Browser Object Model</code>，浏览器对象模型。</p><p><span class="item-class">js</span> <code>javaScript</code>，我们常说的 js 文件其实指的是JavaScript文件。</p><p><span class="item-class">HTML</span> <code>HyperText Markup Language</code>，超文本标记语言(Web技术的核心)。</p><p><span class="item-class">XML</span> <code>Extensible Markup Language</code>，可扩展标记语言(一种标准的数据格式)。</p><p><span class="item-class">CSS</span> <code>Cascading Style Sheets</code>，层叠样式表(用于给HTML或XML设置样式和布局的语言)。</p><p><span class="item-class">Api</span> <code>Application Programming Interface</code>，应用程序编程接口（一堆有用函数的名称）。</p><p><span class="item-class">HTTP</span> <code>HyperText Transfer Protocol</code>，超文本传协议(互联网中应用最广泛的的协议之一)。</p><p><span class="item-class">SSL</span> <code>Secure Sockets Layer</code>，安全套接层协议(对网络连接进行加密处理)。</p><p><span class="item-class">TLS</span> <code>Transport Layer Security</code>，安全传输层协议(同SSL，由记录协议和握手协议组成)。</p><p><span class="item-class">HTTPS</span> <code>HyperText Transfer Protocol over Secure Socket Layer</code>，<span style="color:#195"><strong>HTTPS = HTTP + SSL</strong></span>。</p><p><span class="item-class">URN</span> <code>Uniform Resource Name</code>，统一资源名称(唯一标识实体但无位置信息)。</p><p><span class="item-class">URL</span> <code>Uniform Resource Locator</code>，统一资源定位符(互联网资源的身份证，唯一标识)。</p><p><span class="item-class">URI</span> <code>Uniform Resource Identifier</code>，统一资源标识符(标识网络资源)，<span style="color:#195"><strong>URI = URN + URL</strong></span>。</p><p><span class="item-class">WXSS</span> <code>WeiXin Style sheets</code>，微信小程序中基于CSS扩展的样式语言。</p><p><span class="item-class">WXML</span> <code>WeiXin Markup Language</code>，微信小程序中专用的标记语言(类似HTML)。</p><p><span class="item-class">JSON</span> <code>JavaScript Object Notation</code>，JavaScript对象表示法，用于表示和传输数据。</p><p><span class="item-class">Ajax</span> <code>Asynchronous Javascript And XML</code>，异步JavaScript和XML用于异步请求和局部刷新。</p><p><span class="item-class">npm</span> <code>Node Package Manager</code>，基于Node.js的包管理和分发工具。</p><p><span class="item-class">LAMP</span> <code>Linux Apache MySQL 和 PHP/Python/Perl</code>，用于搭建Web服务器的开源软件。</p><p><span class="item-class">MAMP</span> <code>Mac Apache MySQL 和 PHP Server</code>，Mac中构建网站和搭建Web服务器的开源软件。</p><p><span class="item-class">WAMP</span> <code>Windows Apache MySQL 和 PHP Server</code>，用于构建网站和搭建Web服务器的开源软件。</p><p><span class="item-class">SPA</span> <code>Single Page Application</code>，单页应用程序，主要特点是轻量级请求和局部更新。</p><p><span class="item-class">ORM</span> <code>Object Relational Mapping</code>，对象关系映射(数据转换)。</p><p><span class="item-class">MEAN</span> <code>MongoDB Express Angular Node</code>，前端开发中常用的技术栈。</p><p><span class="item-class">MERN</span> <code>MongoDB Express React Node</code>，常用的技术栈，React为Facebook推出的前端框架。</p><p><span class="item-class">CRUD</span> <code>Create Read Update Delete</code>，对数据库的常规操作(<span style="color:#195">创建|添加、读取、更新和删除</span>)。</p><p><span class="item-class">BFC</span> <code>Block Formatting Context</code>，块级格式化上下文。</p><p><span class="item-class">OO</span> <code>Object Oriented</code>，面向对象。</p><p><span class="item-class">OOD</span> <code>Object Oriented Design</code>，面向对象设计。</p><p><span class="item-class">OOP</span> <code>Object Oriented Programming</code>，面向对象编程。</p><p><span class="item-class">OOA</span> <code>Object Oriented Analysis</code>，面向对象分析方法。</p><p><span class="item-class">UML</span> <code>Unified Modeling Language</code>，统一(标准)建模语言。</p><p><span class="item-class">NoSQL</span> <code>Not only SQL</code>，非关系型数据库，譬如<code>redis</code>，<code>memcache</code>，<code>MongoDb</code>等。</p><p><span class="item-class">REPL</span> <code>Request-Eval-Print-Loop</code>，读取-求值-输出-循环结构(Node解释器)。</p><p><span class="item-class">TDD</span> <code>Test-Driven Development</code>，测试驱动开发(用单元测试来驱动开发的一种策略)。</p><p><span class="item-class">BDD</span> <code>Behavior-Driven Development</code>，行为驱动开发(用验收标准来驱动开发的一种策略)。</p><p><span class="item-class">Mustache</span> 经典(重要 | 基础)的前端模板引擎，也指模板使用的那种无逻辑的模板语法。</p><p><span class="item-class">Handlebars</span> 经典(重要 | 基础)的前端模板引擎，同Mustache类似。</p><p><span class="item-class">JSON Schema</span> 表示对JSON文档的内容、结构和格式的声明，用于对JSON文档进行严格校验(语义)。</p><p><span class="item-class">MongoDB</span> MongoDB是一种NoSQL数据库，允许开发人员以文档(JSON)的形式存储数据。</p><p><span class="item-class">BSON</span> <code>Binary JSON</code> 二进制的JSON数据，用于序列化JSON文档的一种二进制数据格式。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;item-class&quot;&gt;Web&lt;/span&gt; &lt;code&gt;World Wide Web&lt;/code&gt;，万维网(&lt;code&gt;www&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;item-class&quot;&gt;W3C&lt;/span&gt; &lt;code&gt;W
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信小程序基础[13]-小程序中的基础组件(五)</title>
    <link href="https://weibo.com/u/3800117445/2018/10/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97%5B13%5D-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6(%E4%BA%94)/"/>
    <id>https://weibo.com/u/3800117445/2018/10/14/微信小程序序列[13]-小程序中的基础组件(五)/</id>
    <published>2018-10-14T10:36:08.000Z</published>
    <updated>2018-11-11T13:30:01.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍小程序中的基础组件，主要包括picker滚动选择器、checkbox多项选择器和progress进度条等组件的基本使用和综合示例。</p></blockquote><h4 id="1-0-progress组件"><a href="#1-0-progress组件" class="headerlink" title="1.0 progress组件"></a>1.0 progress组件</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/progress.html" target="_blank" rel="noopener">progress组件</a>就是进度条。</p><p><strong>这里列出progress组件的主要属性</strong></p><p><span class="propWX-green ">color</span>     进度条的颜色(activeColor)。<br><span class="propWX-green ">activeColor</span>     已执行的进度条的颜色。<br><span class="propWX-green ">backgroundColor</span>     尚未执行的进度条的颜色。<br><span class="propWX-green bg-red">percent</span>     百分比的数值，取值范围是0~100。<br><span class="propWX-green ">show-info</span>     在进度条的右侧是否显示百分比，布尔类型，默认值为false。<br><span class="propWX-green ">stroke-width</span>     进度条线的宽度，数值类型，默认值为6，单位是px。<br><span class="propWX-green ">active</span>     是否设置进度条从左到右的动画，布尔类型，默认值为false。<br><span class="propWX-green ">active-mode</span>     设置动画执行的方式，<code>backwards</code>表示 从头播放；<code>forwards</code>表示从上次结束点接着播放。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认的progress样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- percent：进度值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- color|activeColor：已完成部分的进度颜色 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- backgroundColor：  未完成部分的进度颜色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">color</span>=<span class="string">'pink'</span> <span class="attr">percent</span>=<span class="string">'30'</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">activeColor</span>=<span class="string">'#802314'</span> <span class="attr">percent</span>=<span class="string">'30'</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">color</span>=<span class="string">'#195'</span> <span class="attr">percent</span>=<span class="string">'50'</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">color</span>=<span class="string">'#195'</span> <span class="attr">percent</span>=<span class="string">'50'</span> <span class="attr">backgroundColor</span>=<span class="string">'#004'</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- show-info：在进度条的右侧显示百分比 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">color</span>=<span class="string">'#195'</span> <span class="attr">percent</span>=<span class="string">'70'</span> <span class="attr">backgroundColor</span>=<span class="string">'#004'</span> <span class="attr">show-info</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- stroke-width:设置进度条的宽度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">color</span>=<span class="string">'#3504a5'</span> <span class="attr">percent</span>=<span class="string">'70'</span>  <span class="attr">show-info</span>  <span class="attr">stroke-width</span>=<span class="string">'20'</span> &gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- active：是否开启动画效果 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- active-mode：动画模式，可选值有[backwards][forwards]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">active</span> <span class="attr">color</span>=<span class="string">'#195'</span> <span class="attr">percent</span>=<span class="string">'70'</span> <span class="attr">show-info</span>  <span class="attr">stroke-width</span>=<span class="string">'20'</span> &gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span>  <span class="attr">active</span> <span class="attr">active-mode</span>=<span class="string">'forwards'</span> <span class="attr">color</span>=<span class="string">'#195'</span> <span class="attr">percent</span>=<span class="string">'90'</span> <span class="attr">show-info</span>  <span class="attr">stroke-width</span>=<span class="string">'20'</span> &gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx28.png?raw=true"></p><h4 id="2-0-多项选择器组件-checkbox-group-和-checkbox"><a href="#2-0-多项选择器组件-checkbox-group-和-checkbox" class="headerlink" title="2.0 多项选择器组件( checkbox-group 和 checkbox )"></a>2.0 多项选择器组件( checkbox-group 和 checkbox )</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html" target="_blank" rel="noopener">多项选择器组件</a>由<code>checkbox-group</code>和<code>checkbox</code>两个具体的组件构成，其中<code>checkbox组件</code>表示的是每一个的多选项目，而<code>checkbox-group</code>用来包裹住多个多选项目。通过观察和对比，我们可以发现多项选择器和单项选择器的结构和用法基本是一致的。</p><p><span style="border:1px solid #000;padding:0 10px;background:#F0FFFF"><strong>checkbox组件</strong></span><br><span class="propWX-green bg-red">value</span>     当前选项的值。<br><span class="propWX-green ">color</span>     选择框选中时的颜色。<br><span class="propWX-green ">disabled</span>     当前选择框是否被禁用，布尔类型，默认值为false。<br><span class="propWX-green ">checked</span>     当前选择框是否被选中，布尔类型，具有排它性会覆盖。</p><p><span style="border:1px solid #000;padding:0 10px;background:#F0FFFF"><strong>checkbox-group组件</strong></span><br><span class="propWX-green ">bindchange</span>    当选中项发生变化时触发<code>change事件</code>并执行绑定的方法，可通过事件对象来获取当前选中项的值<code>(事件对象.detail</code>)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//001 wxml文件中的内容</span><br><span class="line"><span class="comment">&lt;!-- 演示checkbox的主要属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">'韩寒'</span> <span class="attr">color</span>=<span class="string">'red'</span>&gt;</span>韩寒<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">'张爱玲'</span> <span class="attr">checked</span>&gt;</span>张爱玲<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">'余华'</span>&gt;</span>余华<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">'张悦然'</span>&gt;</span>张悦然<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">'钱钟书'</span> <span class="attr">disabled</span>&gt;</span>钱钟书<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">checkbox-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox-group</span> <span class="attr">bindchange</span>=<span class="string">'changeClick'</span> <span class="attr">name</span>=<span class="string">'key'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">'&#123;&#123;dataArr&#125;&#125;'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">'&#123;&#123;item.name&#125;&#125;'</span> <span class="attr">checked</span>=<span class="string">'&#123;&#123;item.isChecked&#125;&#125;'</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//002 wxss文件中的内容</span><br><span class="line"><span class="selector-tag">checkbox</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500</span>rpx;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">view</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//003 js文件中的内容</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    dataArr:[</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"韩寒"</span>, <span class="attr">isChecked</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"鲁迅"</span>, <span class="attr">isChecked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"余华"</span>, <span class="attr">isChecked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"冯唐"</span>, <span class="attr">isChecked</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  changeClick:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"多项选择框的值发生了变化--changeClick"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里贴出上面代码的实现效果图。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/wx29.gif?raw=true"></p><h4 id="3-0-picker组件-滚动选择器组件"><a href="#3-0-picker组件-滚动选择器组件" class="headerlink" title="3.0 picker组件(滚动选择器组件)"></a>3.0 picker组件(滚动选择器组件)</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/picker.html" target="_blank" rel="noopener">picker组件</a>是从页面底部弹出的滚动选择器组件，支持下面五种具体的选择器，通过mode属性的值来进行区分，如果没有设置mode属性，那么默认为普通选择器。</p><blockquote><p>❏  时间选择器(<code>time</code>)<br>❏  日期选择器(<code>date</code>)<br>❏  普通选择器(<code>selector</code>)<br>❏  省市区选择器(<code>region</code>)<br>❏  多列选择器(<code>multiSelector</code>)</p></blockquote><p>这里给出五种选择器均拥有的属性，对于特点选择器才拥有的属性，我们稍后单独说明。<br><span class="propWX-green ">mode</span>     picker组件的类型。<br><span class="propWX-green ">bindchange</span>     当value值改变时触发change事件。<br><span class="propWX-green ">bindcancel</span>     当点击取消选择的时候触发cancel事件。<br><span class="propWX-green ">disabled</span>         控制是否禁用、布尔类型的值，默认为false。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>001 普通选择器</strong> </span></p><p>在上面列出的是所有滚动选择器类型的组件都拥有的公共属性外，此外普通选择器还拥有<code>range</code>、<code>value</code>和<code>range-key</code>属性，其中range对应的数据可以是简单数组，也可以对象数组。下面列出普通选择器(<code>mode=selector</code> | 默认)组件的主要属性。并提供一个简短的demo演示。</p><p><span class="propWX-green bg-red">range</span>     可供选择的数据内容(<code>数组</code> | <code>对象数组</code>)。<br><span class="propWX-green bg-red">value</span>   表示默认选择的是可选数据中的第几项，索引从0开始。<br><span class="propWX-green ">range-key</span>     当可供选择的数据是对象数组时，通过该属性指定对象元素中作为具体显示内容的key。</p><p><strong><code>ex 普通选择器组件(默认)的代码示例</code></strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//001 wxml文件的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>普通数组<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">'selector'</span> <span class="attr">range</span>=<span class="string">'&#123;&#123; dataArray &#125;&#125;'</span> <span class="attr">value</span>=<span class="string">'&#123;&#123; dataArrayIndex &#125;&#125;'</span> <span class="attr">bindchange</span>=<span class="string">'changeClick1'</span>&gt;</span></span><br><span class="line">当前选择的是：&#123;&#123; dataArray[dataArrayIndex] &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>对象数组<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">'selector'</span> <span class="attr">range</span>=<span class="string">'&#123;&#123; dataArrayObject &#125;&#125;'</span> <span class="attr">value</span>=<span class="string">'&#123;&#123; dataArrayObjectIndex &#125;&#125;'</span> <span class="attr">bindchange</span>=<span class="string">'changeClick2'</span> <span class="attr">range-key</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">当前选择的是：&#123;&#123; dataArrayObject[dataArrayObjectIndex]["name"] &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//002 wxss文件的内容</span><br><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44</span>rpx;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">44</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20</span>rpx <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//003 js文件的内容</span></span><br><span class="line"><span class="comment">// pages/picker/index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    dataArray:[</span><br><span class="line">      <span class="string">"张三"</span>,</span><br><span class="line">      <span class="string">"李四"</span>,</span><br><span class="line">      <span class="string">"老王"</span></span><br><span class="line">    ],</span><br><span class="line">    dataArrayIndex:<span class="number">0</span>,</span><br><span class="line">    dataArrayObject: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"沫子也"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"米桃儿"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    dataArrayObjectIndex:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  changeClick1:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index = e.detail.value;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">dataArrayIndex</span>: e.detail.value &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Click1---"</span>, <span class="keyword">this</span>.data.dataArray[index]);</span><br><span class="line">  &#125;,</span><br><span class="line">  changeClick2: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index = e.detail.value;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">dataArrayObjectIndex</span>: index &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Click2--"</span>, <span class="keyword">this</span>.data.dataArrayObject[index][<span class="string">"name"</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里给出上面代码运行情况的示意图。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx30.gif?raw=true"></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>002 多列选择器</strong> </span></p><p>在使用picker组件的时候，如果<code>mode属性的值为multiSelector</code>那么表示这是一个多列选择器，多列选择器相对普通选择器而言相对复杂一些，因为它的数据源为<code>二维数组</code>,也就是数组中的每个元素都是数组(<span style="color:red">可以是普通数组也可以是对象数组</span>)。</p><p><strong>多列选择器的主要属性</strong></p><p><span class="propWX-green ">value</span>         表示默认选择的是可选数据中的第几项，索引从0开始。<br><span class="propWX-green bg-red">range</span>     可供选择的数据内容(<code>普通数组</code> | <code>对象数组</code>构成的二维数组)。<br><span class="propWX-green ">range-key</span>     当数据是<code>二维对象数组</code>时，指定对象元素中作为显示内容的key。<br><span class="propWX-green ">bindcolumnchange</span>     某列值改变时触发，其中<code>column 表示列数，</code>value` 表示变更值的下标。</p><p><strong><code>ex 多列选择器组件(mode=multiSelector)的代码示例</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//001 wxml文件中的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>二维数组(普通数组)<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">'multiSelector'</span> <span class="attr">range</span>=<span class="string">'&#123;&#123; multiArray &#125;&#125;'</span> <span class="attr">bindchange</span>=<span class="string">'changeClick1'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">当前选择的是：&#123;&#123;multiArray[0][multiIndex[0]]&#125;&#125;,&#123;&#123;multiArray[1][multiIndex[1]]&#125;&#125;,&#123;&#123;multiArray[2][multiIndex[2]]&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>二维数组(对象数组)<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">'multiSelector'</span> <span class="attr">range</span>=<span class="string">'&#123;&#123; multiArrayObject &#125;&#125;'</span> <span class="attr">range-key</span>=<span class="string">'&#123;&#123; key &#125;&#125;'</span> <span class="attr">bindchange</span>=<span class="string">'changeClick2'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">当前选择的是：&#123;&#123;multiArrayObject[0][multiObjectIndex[0]][key]&#125;&#125;,&#123;&#123;multiArrayObject[1][multiObjectIndex[1]][key]&#125;&#125;,&#123;&#123;multiArrayObject[2][multiObjectIndex[2]][key]&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//002 wxss文件中的内容</span><br><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44</span>rpx;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">44</span>rpx;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50</span>rpx <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//003 js文件中的数据和对应的方法</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    key: <span class="string">"name"</span>,</span><br><span class="line">    multiArray:[</span><br><span class="line">      [<span class="string">"作家"</span>,<span class="string">"导演"</span>],</span><br><span class="line">      [<span class="string">"韩寒"</span>, <span class="string">"龙应台"</span>, <span class="string">"余华"</span>,<span class="string">"张艺谋"</span>],</span><br><span class="line">      [<span class="string">"他的国"</span>,<span class="string">"目送"</span>, <span class="string">"兄弟"</span>, <span class="string">"活着"</span>,<span class="string">"英雄"</span>],</span><br><span class="line">    ],</span><br><span class="line">    multiIndex:[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">    multiObjectIndex: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    multiArrayObject: [</span><br><span class="line">      [</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"作家"</span>,<span class="attr">id</span>:<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"导演"</span>,<span class="attr">id</span>:<span class="number">1</span>&#125;</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"韩寒"</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"龙应台"</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"余华"</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"张艺谋"</span>&#125;</span><br><span class="line">       ],</span><br><span class="line">      [</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"他的国"</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"目送"</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"活着"</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"英雄"</span>&#125;</span><br><span class="line">      ],</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  changeClick1:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取事件对象中的数据</span></span><br><span class="line">    <span class="keyword">var</span> indexArr = e.detail.value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"changeClick1--"</span>,indexArr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印输出</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"选择的数据为："</span> + <span class="keyword">this</span>.data.multiArray[<span class="number">0</span>][indexArr[<span class="number">0</span>]] + <span class="string">","</span> + <span class="keyword">this</span>.data.multiArray[<span class="number">1</span>][indexArr[<span class="number">1</span>]] +<span class="string">","</span> + <span class="keyword">this</span>.data.multiArray[<span class="number">2</span>][indexArr[<span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      multiIndex:indexArr</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  changeClick2:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indexArr = e.detail.value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"changeClick1--"</span>, indexArr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"选择的数据为："</span> + <span class="keyword">this</span>.data.multiArrayObject[<span class="number">0</span>][indexArr[<span class="number">0</span>]][<span class="string">"name"</span>] + <span class="string">","</span> + <span class="keyword">this</span>.data.multiArrayObject[<span class="number">1</span>][indexArr[<span class="number">1</span>]][<span class="string">"name"</span>] + <span class="string">","</span> + <span class="keyword">this</span>.data.multiArrayObject[<span class="number">2</span>][indexArr[<span class="number">2</span>]][<span class="string">"name"</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      multiObjectIndex: indexArr</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里给出上面代码运行情况的示意图。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx32.gif?raw=true"></p><p><strong>说明</strong> 上面的代码中演示了多列选择器的基本使用，并且提供了数据源是<code>普通二维数组 以及</code>每个元素是对象数组这种特殊二维数组`两种情况的使用做对照，需要特别注意的是如果二维对象数组，那么必须通过range-key来指定显示的具体内容。</p><p>另外在上面的演示代码中，提供的案例里面并没有<span style="color:red">数据联动</span>的需求。如果在进行多列选择的时候数据需要联动那么我们的数据源以及代码设计可能会更复杂一些，下面给出一个稍微复杂点的示例。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//001 wxml文件中的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">"multiSelector"</span> <span class="attr">bindchange</span>=<span class="string">"bindMultiPickerChange"</span> <span class="attr">bindcolumnchange</span>=<span class="string">"bindMultiPickerColumnChange"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;multiIndex&#125;&#125;"</span> <span class="attr">range</span>=<span class="string">"&#123;&#123;multiArray&#125;&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      当前选择：&#123;&#123;multiArray[0][multiIndex[0]]&#125;&#125;，&#123;&#123;multiArray[1][multiIndex[1]]&#125;&#125;，&#123;&#123;multiArray[2][multiIndex[2]]&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  data: &#123;</span><br><span class="line">    multiArray: [</span><br><span class="line">        [<span class="string">'作家'</span>, <span class="string">'导演'</span>],</span><br><span class="line">        [<span class="string">'莫言'</span>, <span class="string">'韩寒'</span>, <span class="string">'冯唐'</span>, <span class="string">'鲁迅'</span>, <span class="string">'张爱玲'</span>],</span><br><span class="line">        [<span class="string">'红高粱家族'</span>, <span class="string">'蛙'</span>, <span class="string">'酒国'</span>,<span class="string">'丰臀肥乳'</span>]</span><br><span class="line">    ],</span><br><span class="line">    multiIndex: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">    bindMultiPickerChange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setData(&#123; <span class="attr">multiIndex</span>: e.detail.value &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'picker发送选择改变，携带值为'</span>, e.detail.value)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    bindMultiPickerColumnChange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'修改的列为'</span>, e.detail.column, <span class="string">'，对应的值为'</span>, e.detail.value);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//001 字面量方式创建对象</span></span><br><span class="line">      <span class="keyword">var</span> data = &#123;</span><br><span class="line">        multiArray: <span class="keyword">this</span>.data.multiArray,</span><br><span class="line">        multiIndex: <span class="keyword">this</span>.data.multiIndex</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//002 获取当前选择的数据(数组)</span></span><br><span class="line">      data.multiIndex[e.detail.column] = e.detail.value;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//003 设置数据联动</span></span><br><span class="line">      <span class="keyword">switch</span> (e.detail.column) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">switch</span> (data.multiIndex[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">              data.multiArray[<span class="number">1</span>] = [<span class="string">'莫言'</span>, <span class="string">'韩寒'</span>, <span class="string">'冯唐'</span>, <span class="string">'鲁迅'</span>, <span class="string">'张爱玲'</span>];</span><br><span class="line">              data.multiArray[<span class="number">2</span>] = [<span class="string">'红高粱家族'</span>, <span class="string">'蛙'</span>, <span class="string">'酒国'</span>, <span class="string">'丰臀肥乳'</span>];</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              data.multiArray[<span class="number">1</span>] = [<span class="string">'张艺谋'</span>, <span class="string">'贾樟柯'</span>, <span class="string">'韩寒'</span>];</span><br><span class="line">              data.multiArray[<span class="number">2</span>] = [<span class="string">'英雄'</span>, <span class="string">'活着'</span>,<span class="string">'红高粱'</span>,<span class="string">'大红灯笼高高挂'</span>];</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          data.multiIndex[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">          data.multiIndex[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="keyword">switch</span> (data.multiIndex[<span class="number">0</span>]) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">              <span class="keyword">switch</span> (data.multiIndex[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                  data.multiArray[<span class="number">2</span>] = [<span class="string">'红高粱家族'</span>, <span class="string">'蛙'</span>, <span class="string">'酒国'</span>, <span class="string">'丰臀肥乳'</span>];</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                  data.multiArray[<span class="number">2</span>] = [<span class="string">'三重门'</span>,<span class="string">'一座城池'</span>,<span class="string">'零下一度'</span>,<span class="string">'他的国'</span>,<span class="string">'杂的文'</span>];</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                  data.multiArray[<span class="number">2</span>] = [<span class="string">'女神一号'</span>, <span class="string">'18岁请给我一个姑娘'</span>,<span class="string">'三十六大'</span>];</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                  data.multiArray[<span class="number">2</span>] = [<span class="string">'朝花夕拾'</span>, <span class="string">'彷徨'</span>, <span class="string">'呐喊'</span>];</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                  data.multiArray[<span class="number">2</span>] = [<span class="string">'红玫瑰与白玫瑰'</span>, <span class="string">'倾城之恋'</span>, <span class="string">'色戒'</span>, <span class="string">'半生缘'</span>];</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="keyword">switch</span> (data.multiIndex[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                  data.multiArray[<span class="number">2</span>] = [<span class="string">'英雄'</span>, <span class="string">'活着'</span>, <span class="string">'红高粱'</span>, <span class="string">'大红灯笼高高挂'</span>];</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                  data.multiArray[<span class="number">2</span>] = [<span class="string">'小武'</span>, <span class="string">'三峡好人'</span>,<span class="string">'天注定'</span>,<span class="string">'江湖儿女'</span>];</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                  data.multiArray[<span class="number">2</span>] = [<span class="string">'平凡之路'</span>, <span class="string">'乘风破浪'</span>];</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          data.multiIndex[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.setData(data);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里给出上面代码运行情况的示意图。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx33.gif?raw=true"></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>003 时间选择器</strong> </span></p><p>时间选择器应该picker组件最简单的一种类型了，当<code>mode属性值为time的时候</code>呈现出来的就是时间选择器，从页面底部滚出的时间选择器可以帮助我们来选择并设置具体的时间(<code>几点几分</code>)。这里先列出主要的属性，再给出一个简短的代码示例。</p><p><span class="propWX-green bg-red">value</span>       表示选中的时间，格式为”hh:mm”。<br><span class="propWX-green ">end</span>         表示有效时间范围的结尾，限定结束时间。<br><span class="propWX-green ">start</span>       表示有效时间范围的开始，限定开始时间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//001 wxml文件中的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">"time"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;time&#125;&#125;"</span> <span class="attr">bindchange</span>=<span class="string">"timeChangeClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"picker"</span>&gt;</span></span><br><span class="line">      当前选择: &#123;&#123;time&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//002 js文件中的内容</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    time:'12:00'</span><br><span class="line">  &#125;,</span><br><span class="line">  timeChangeClick:function(e)&#123;</span><br><span class="line">    console.log("timeChangeClick--",e.detail);</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      time: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #000;padding:5px 20px;"><strong>004 日期选择器</strong> </span></p><p>当picker组件的<code>mode属性值为date</code>的时候，底部弹出的是日期选择器。</p><p><strong>日期选择器的主要属性</strong></p><p><span class="propWX-green ">value</span>       表示选中的日期，格式为<code>&quot;YYYY-MM-DD&quot;</code>。<br><span class="propWX-green ">end</span>         表示有效日期范围的结束，字符串格式为”YYYY-MM-DD”。<br><span class="propWX-green ">start</span>       表示有效日期范围的开始，字符串格式为”YYYY-MM-DD”。<br><span class="propWX-green bg-red">fields</span>      可取的有效值有 year(年),month(月),day(天)三种，表示选择器的粒度。</p><p><strong><code>ex：日期选择器的代码示例</code></strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//001 wxml文件中的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">"date"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;date&#125;&#125;"</span> <span class="attr">start</span>=<span class="string">"1900-00-01"</span> <span class="attr">end</span>=<span class="string">"2018-10-16"</span> <span class="attr">bindchange</span>=<span class="string">"dateChangeClick"</span>&gt;</span></span><br><span class="line">      当前选择的是: &#123;&#123;date&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//002 js文件中的内容</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    date:"2015-07-17"</span><br><span class="line">  &#125;,</span><br><span class="line">  dateChangeClick:function(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      date:e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这里给出上面代码运行情况的示意图。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx34.gif?raw=true"></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>005 省市区选择器</strong> </span></p><p>省市区选择器常用于商城类应用的地址管理模块，比如要新建地址或者是编辑地址的时候。当picker组件的<code>mode属性值为region</code>的时候，底部弹出的是省市区选择器。省市区选择器在使用的时候本身也比较简单，主要关注<code>value</code>和<code>custom-item</code>属性和<code>bindchange</code>事件即可。</p><p><span class="propWX-green ">value</span>               表示选中的省市区，默认选中每一列的第一个值。<br><span class="propWX-green ">custom-item</span>         我们可以通过该属性来为每一列的顶部添加一个自定义的项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//001 wxml文件的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span></span></span><br><span class="line"><span class="tag"><span class="attr">mode</span>=<span class="string">"region"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"&#123;&#123;region&#125;&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">custom-item</span>=<span class="string">"&#123;&#123;customItem&#125;&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">bindchange</span>=<span class="string">"regionChangeClick"</span></span></span><br><span class="line"><span class="tag"> &gt;</span></span><br><span class="line">  &#123;&#123;region[0]&#125;&#125;，&#123;&#123;region[1]&#125;&#125;，&#123;&#123;region[2]&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//002 js文件的内容</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    region: ['广东省', '广州市', '天河区'],</span><br><span class="line">    customItem:"All"</span><br><span class="line">  &#125;,</span><br><span class="line">  regionChangeClick:function(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      region:e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍小程序中的基础组件，主要包括picker滚动选择器、checkbox多项选择器和progress进度条等组件的基本使用和综合示例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-0-progress组件&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
</feed>
