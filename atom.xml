<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2018-10-10T04:15:43.274Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络编程系列 Hexo + Github搭建个人博客教程</title>
    <link href="https://weibo.com/u/3800117445/2018/10/06/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20Hexo%20+%20gitub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>https://weibo.com/u/3800117445/2018/10/06/网络编程系列 Hexo + gitub搭建个人博客教程/</id>
    <published>2018-10-06T05:12:13.000Z</published>
    <updated>2018-10-10T04:15:43.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-0-说明"><a href="#1-0-说明" class="headerlink" title="1.0 说明"></a>1.0 说明</h3><p>其实，搭建个人博客的技术方案有很多。</p><p>其实，你能找到的使用<code>Hexo + Github</code>搭建个人博客的教程也有很多。</p><p>所以，其实这是一篇没必要的文章，但因为种种原因我还是写了这篇简单的教程。</p><p>说明，这篇教程以<a href="http://www.wendingding.com" target="_blank" rel="external">我个人的技术博客为例</a>来演示使用<code>Hexo + Github</code>搭建个人博客的基本操作。</p><h3 id="2-0-步骤"><a href="#2-0-步骤" class="headerlink" title="2.0 步骤"></a>2.0 步骤</h3><p><span style="border:1px solid #000;padding:5px 20px;"> <strong>环境准备</strong><span></span></span></p><blockquote><p>❏ 系统中准备好<code>Git</code>的命令行工具。<br>❏ 系统中准备好<code>Node.js</code>和<code>npm</code>环境。<br>❏ 拥有<a href="https://github.com/" target="_blank" rel="external">Github网站</a>的账号，如果没有请登录官网按照提示注册。<br>❏ 若需给博客配置域名那么您可能还需要<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.3dbd6d3eALueFf" target="_blank" rel="external">花一点点钱买个域名</a>，如果没这需求则可以忽略。</p></blockquote><p><strong>Git工具</strong> Windows操作系统可以使用cmd打开自带的命令行工具使用，但个人还是强烈建议您下载并安装<a href="https://git-scm.com/downloads" target="_blank" rel="external">Git for Windows工具</a>使用，下载并安装后在系统中任何文件夹中鼠标右键就可以看到<code>Git Bash Here</code>条目，点击即可打开命令行界面。Mac OSX操作系统中默认已经自带了git命令工具，可以打开终端直接使用。(<strong>备注 </strong> Mac打开终端的快捷方式：<code>control + 空格 + 搜索框输入Terminal + 回车键</code>)。Git工具准备好之后，可以通过<code>git --version</code>命令来查看系统当前安装的Git版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wendingding:~ wendingding$ git --version</div><div class="line">git version 2.11.0</div></pre></td></tr></table></figure></p><p><strong>Node和Npm</strong> 安装Node之后Npm会附带一起安装，所以我们只需要到<a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">NodeJS的官网</a>下载对应版本安装到电脑系统中即可。安装完成后，可以使用命令行工具来查看当前版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wendingding:~ wendingding$ node --version &amp;&amp; npm -v</div><div class="line">v8.9.3</div><div class="line">5.5.1</div></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"> <strong>Hexo的安装</strong><span></span></span></p><p>在自己电脑中合适的地方新建文件夹，比如我的路径是：<code>/Users/文顶顶/Blog</code>。然后在命令行工具中通过cd命令进入到该文件目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wendingding:~ wendingding$ <span class="built_in">pwd</span></div><div class="line">/Users/文顶顶</div><div class="line">wendingding:~ wendingding$ <span class="built_in">cd</span> Desktop/</div><div class="line">wendingding:Desktop wendingding$ mkdir Blog</div><div class="line">wendingding:Desktop wendingding$ <span class="built_in">cd</span> Blog/</div><div class="line">wendingding:Blog wendingding$ <span class="built_in">pwd</span></div><div class="line">/Users/文顶顶/Desktop/Blog</div></pre></td></tr></table></figure><p>创建好文件目录后，接下里我们就可以使用npm来全局安装Hexo到当前的文件目录(Blog目录)了,命令行中的<code>-g</code>表示全局安装，安装完成后可以通过<code>hexo --version</code>命令来查看版本信息，主要关注<code>hexo-cli</code>即可，到这里表示hexo已经安装好了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">wendingding:Blog wendingding$ npm install hexo -g</div><div class="line">wendingding:Blog wendingding$ hexo --version</div><div class="line">hexo-cli: 1.1.0</div><div class="line">os: Darwin 17.4.0 darwin x64</div><div class="line">http_parser: 2.7.0</div><div class="line">node: 8.9.3</div><div class="line">v8: 6.1.534.48</div><div class="line">uv: 1.15.0</div><div class="line">zlib: 1.2.11</div><div class="line">ares: 1.10.1-DEV</div><div class="line">modules: 57</div><div class="line">nghttp2: 1.25.0</div><div class="line">openssl: 1.0.2n</div><div class="line">icu: 59.1</div><div class="line">unicode: 9.0</div><div class="line">cldr: 31.0.1</div><div class="line">tz: 2017b</div></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"> <strong>搭建博客</strong><span></span></span></p><p>到目前为止，使用Hexo和Github搭建博客的环境已经准备好了，接下来介绍搭建博客的具体操作。</p><p><strong>搭建博客的主要流程</strong></p><blockquote><p>❏ 在本地目录中使用hexo来初始化博客仓库。<br>❏ 在Github网站使用自己的账号来创建对应的托管仓库。<br>❏ 对本地的hexo博客项目进行配置和Github官网的托管仓库对接。<br>❏ 在命令行中通过hexo命令来生成博客、预览博客和发布博客到远程仓库。</p></blockquote><p><strong>初始化操作</strong> 在当前目录中(<code>/Users/文顶顶/Blog</code>)通过命令行工具执行<code>hexo init</code>来进行初始化。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">wendingding:Blog wendingding$ <span class="built_in">pwd</span></div><div class="line">/Users/文顶顶/Desktop/Blog</div><div class="line"></div><div class="line">wendingding:Blog wendingding$ hexo init</div><div class="line"></div><div class="line">INFO  Cloning hexo-starter to ~/Desktop/Blog</div><div class="line">Cloning into <span class="string">'/Users/文顶顶/Desktop/Blog'</span>...</div><div class="line">remote: Enumerating objects: 68, <span class="keyword">done</span>.</div><div class="line">remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 68</div><div class="line">Unpacking objects: 100% (68/68), <span class="keyword">done</span>.</div><div class="line">Submodule <span class="string">'themes/landscape'</span> (https://github.com/hexojs/hexo-theme-landscape.git) registered <span class="keyword">for</span> path <span class="string">'themes/landscape'</span></div><div class="line">Cloning into <span class="string">'/Users/文顶顶/Desktop/Blog/themes/landscape'</span>...</div><div class="line">remote: Enumerating objects: 2, <span class="keyword">done</span>.</div><div class="line">remote: Counting objects: 100% (2/2), <span class="keyword">done</span>.</div><div class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</div><div class="line">remote: Total 843 (delta 0), reused 0 (delta 0), pack-reused 841</div><div class="line">Receiving objects: 100% (843/843), 2.55 MiB | 20.00 KiB/s, <span class="keyword">done</span>.</div><div class="line">Resolving deltas: 100% (445/445), <span class="keyword">done</span>.</div><div class="line">.....省略</div><div class="line">added 488 packages <span class="keyword">in</span> 19.861s</div><div class="line">INFO  Start blogging with Hexo!</div></pre></td></tr></table></figure></p><p><strong>安装组件操作</strong> 当hexo初始化完成后，我们可以通过<code>npm install</code>命令来安装博客需要的所有组件。<br><strong>hexo的基础命令</strong> 当前面的工作完成后，就可以通过hexo的常用的命令来生成和预览我们的个人博客了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">wendingding:Blog wendingding$ npm install</div><div class="line">up to date <span class="keyword">in</span> 2.091s</div><div class="line"></div><div class="line">wendingding:Blog wendingding$ hexo g</div><div class="line">INFO  Start processing</div><div class="line">INFO  Files loaded <span class="keyword">in</span> 234 ms</div><div class="line">INFO  Generated: index.html</div><div class="line">INFO  Generated: archives/index.html</div><div class="line">INFO  Generated: fancybox/fancybox_sprite.png</div><div class="line">......省略</div><div class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</div><div class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</div><div class="line">INFO  Generated: 2018/10/09/hello-world/index.html</div><div class="line">INFO  28 files generated <span class="keyword">in</span> 592 ms</div><div class="line"></div><div class="line">wendingding:Blog wendingding$ hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p><p><strong>说明</strong><code>hexo g</code>命令用来生成博客文件，<code>hexo s</code>命令会在本地开启一个服务，我们可以通过在浏览器的地址栏中输入<code>http://localhost:4000</code>预览当前的博客页面，如果一切顺利那么您将能看到下面的页面展示。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/hexo.png?raw=true"></p><div class="tip"><br><p><br><strong>注意点[01]</strong> 当本地服务开启后，博客中内容的更改会实时的体现到预览的页面中，这一点非常的方便，如果需要继续执行其他的命令需要通过输入<code>Ctrl+C</code>来关闭服务。<br></p><br><p><br><strong>注意点[02]</strong> 如果上面的地址无法预览，则可能是端口被占用，可以通过<code>Ctrl+C</code>停止服务器后，输入<code>hexo server -p  端口号</code>来配置端口号，例如设置为4001。<br></p><br></div><p>现在<span style="color:#f05">我们看到的是默认生成的hexo博客，里面没有任何我们自己的文章暂时也和Github没啥关系</span>。当前面的命令都执行完后再当前目录下会生成一大堆的文件，这里我简单列出这些文件的目录结构并说明它们的用途。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">wendingding:Blog wendingding$ tree -L 2</div><div class="line">.</div><div class="line">├── _config.yml                 //整个博客的配置文件：非常重要</div><div class="line">├── db.json</div><div class="line">├── node_modules                //npm模块，可以不用关心</div><div class="line">....省略</div><div class="line">│   ├── yallist</div><div class="line">│   └── yargs</div><div class="line">├── package-lock.json</div><div class="line">├── package.json                //配置文件，暂时可以不用关心</div><div class="line">├── public                      //使用hexo命令生成后的博客内容，自动生成，不要修改</div><div class="line">│   ├── 2018</div><div class="line">│   ├── archives</div><div class="line">│   ├── css</div><div class="line">│   ├── fancybox</div><div class="line">│   ├── index.html</div><div class="line">│   └── js</div><div class="line">├── scaffolds                   //模板，新建文章时，会根据模板中对应的文件来创建文章</div><div class="line">│   ├── draft.md</div><div class="line">│   ├── page.md</div><div class="line">│   └── post.md</div><div class="line">├── <span class="built_in">source</span>                      //该目录控制博客的内容，非常重要</div><div class="line">│   └── _posts</div><div class="line">└── themes                      //该目录保存博客的主题(皮肤)，可以下载并使用自己喜欢的皮肤</div><div class="line">    └── landscape</div><div class="line"></div><div class="line">297 directories, 8 files</div></pre></td></tr></table></figure></p><p>默认生成的博客中显示的第一篇文章为<code>Blog/source/_posts/hello-world.md</code>文件发布处理后的结果，我们可以通过代码编辑器(比如<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">webStorm</a>)打开整个项目然后修改hello-world.md文件的内容，重新发布来观察和理解Hexo博客的运作方式。这里，我修改了文件的内容后，并在终端中执行hexo指令重新生成和发布，这里给出具体的命令行和运行结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">wendingding:~ wendingding$ <span class="built_in">cd</span> /Users/文顶顶/Desktop/Blog</div><div class="line">wendingding:Blog wendingding$ hexo g</div><div class="line"></div><div class="line">INFO  Start processing</div><div class="line">INFO  Files loaded <span class="keyword">in</span> 232 ms</div><div class="line">INFO  Generated: archives/2018/index.html</div><div class="line">INFO  Generated: 2018/10/09/hello-world/index.html</div><div class="line">INFO  Generated: archives/index.html</div><div class="line">INFO  Generated: index.html</div><div class="line">INFO  Generated: archives/2018/10/index.html</div><div class="line">INFO  5 files generated <span class="keyword">in</span> 87 ms</div><div class="line">wendingding:Blog wendingding$ hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</div></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/hexo01.png?raw=true"></p><p>简单来说要操作博客中的文章其实只需要操作<code>Blog/source/_posts</code>路径下面md后缀的文件即可,文件的内容决定了博客文章的标题、内容等信息，一个md文件就代表着一篇博客，如果需要发布多篇博客文章那么只需要提供多个md格式的文件，编写这些文件的内容就是在编辑每一篇博客文章的内容。总结一下就是<strong><code>博客的内容均由_posts目录下面的md文件决定</code></strong>，博客的样式和风格等主要由配置和主题来决定，我们稍后细讲。</p><div class="tip"><strong>备注 </strong> md其实是<code>Markdown</code>的简写，<code>Markdown</code>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。我们可以经过简单的学习后就使用<code>Markdown</code>来编写出漂亮的文档，现在像<a href="https://www.jianshu.com/" target="_blank" rel="external">简书</a>、<a href="https://www.cnblogs.com/" target="_blank" rel="external">博客园</a>等网站都支持这种特殊的语法标记方式。Windows系统推荐使用<a href="https://typora.io/" target="_blank" rel="external">Typora</a>或<a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">Cmd Markdown 作业部落</a>来编写Markdown语法的文档，Mac OSX系统推荐使用<a href="https://maxiang.io/" target="_blank" rel="external">马克飞象</a>、<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>等工具。</div><p><span style="border:1px solid #000;padding:5px 20px;"> <strong>创建博客文章</strong><span></span></span></p><p>新建博客文章有两种方式可以创建博客文章，<code>通过hexo命令来创建</code>和<code>自己把写好的md文件存放到source/_posts目录下面</code>，选择使用什么方式可以看个人的喜好决定。</p><p><strong><code>001 通过hexo命令来创建文章</code></strong></p><p>我们可以通过执行<code>$ hexo new [layout] &lt;title&gt;</code>语法的命令来新建文章，[layout]用于指定文章的布局，默认为post,关于布局相关的更多信息可以参考<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">Hexo官网文档</a>的说明，在这里我们来新建一篇名为<strong><code>Base64编码基础</code></strong>的文章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">wendingding:Blog wendingding$ hexo new Base64编码基础</div><div class="line">INFO  Created: ~/Desktop/Blog/<span class="built_in">source</span>/_posts/Base64编码基础.md</div><div class="line"></div><div class="line">wendingding:Blog wendingding$ cat ~/Desktop/Blog/<span class="built_in">source</span>/_posts/Base64编码基础.md</div><div class="line">---</div><div class="line">title: Base64编码基础</div><div class="line">date: 2018-10-10 12:01:00</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure><p>上面的命令行，<code>hexo new Base64编码基础</code>用于在<code>Blog/source/_posts/</code>路径下面根据系统模板来生成一篇名<strong>Base64编码基础</strong>的博客文章，<code>cat ~/Desktop/Blog/source/_posts/Base64编码基础.md</code>命令用于在命令行窗口输出文件的具体内容，里面包含了博客文章的标题(title)、创建日期(date)和标签(tags)等默认生成的内容。当前这个文件并没有其它额外的内容，现在我们尝试使用MarkDown语法来编辑该文件来提供一些内容，然后重新生成博客并发布。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">wendingding:Blog wendingding$ hexo g</div><div class="line">INFO  Start processing</div><div class="line">INFO  Files loaded <span class="keyword">in</span> 264 ms</div><div class="line">INFO  Generated: index.html</div><div class="line">......省略</div><div class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</div><div class="line">INFO  29 files generated <span class="keyword">in</span> 681 ms</div><div class="line">wendingding:Blog wendingding$ hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop</div></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/hexo02.png?raw=true"></p><p><strong><code>002 通过在文件目录的操作直接创建文章</code></strong></p><p>这种方式更直接，我们完全可以直接在<code>Blog/source/_posts/</code>路径下面来手动创建新的md文件，按照模板规定的格式来编写标题、时间和内容，然后执行<code>hexo g</code>和<code>hexo s</code>命令来生成和发布预览。或者，更方便的做法是直接把已有的博客文章复制粘贴到当前目录，然后修改文件名称和内容后执行命令来生成。</p><p><span style="border:1px solid #000;padding:5px 20px;"> <strong>博客主题</strong><span></span></span></p><p>现在我们已经初步把博客系统搭建出来了，并且掌握了hexo生成和预览基本命令的使用，也清楚了如何来创建博客文章、编辑博客文章，接下来简单说明Hexo博客的主题。你应该已经发现了Hexo默认的主题(皮肤)很丑，我想喜欢这个默认主题的人应该真的不多。</p><p>其实Hexo搭建博客非常的灵活，您可以自己给博客来定制主题，我们可以选择从头开始自己来写一套主题(工作量稍微有点大)，也可以把别人写好的你比较喜欢的主题直接拿来使用。您可以<a href="https://hexo.io/themes/" target="_blank" rel="external">点击这里</a>找一款自己喜欢的主题，这里我以自己的博客为例来说明如何给博客设置主题，我使用的是gitHub用户<a href="https://github.com/pinggod" target="_blank" rel="external">pinggod</a>先生开源的<a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">apollo主题</a>。</p><p><strong><code>001 命令行下载主题</code></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">wendingding:Blog wendingding$ <span class="built_in">pwd</span></div><div class="line">/Users/文顶顶/Desktop/Blog</div><div class="line"></div><div class="line">wendingding:Blog wendingding$ npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</div><div class="line">....省略</div><div class="line">+ hexo-generator-archive@0.1.5</div><div class="line">+ hexo-generator-feed@1.2.2</div><div class="line">+ hexo-renderer-jade@0.4.1</div><div class="line">+ hexo-generator-sitemap@1.2.0</div><div class="line">+ hexo-browsersync@0.3.0</div><div class="line">added 225 packages and updated 1 package <span class="keyword">in</span> 55.931s</div><div class="line"></div><div class="line">wendingding:Blog wendingding$ git <span class="built_in">clone</span> https://github.com/pinggod/hexo-theme-apollo.git themes/apollo</div><div class="line">Cloning into <span class="string">'themes/apollo'</span>...</div><div class="line">remote: Enumerating objects: 894, <span class="keyword">done</span>.</div><div class="line">remote: Total 894 (delta 0), reused 0 (delta 0), pack-reused 894</div><div class="line">Receiving objects: 100% (894/894), 324.80 KiB | 47.00 KiB/s, <span class="keyword">done</span>.</div><div class="line">Resolving deltas: 100% (420/420), <span class="keyword">done</span>.</div></pre></td></tr></table></figure></p><p><strong>命令行说明</strong></p><p><span style="color:#195">pwd</span> 表示查看当前路径，主要需要在博客的<code>根目录(Blog)</code>下执行后面的操作</p><p><span style="color:#195">npm install –save xxx</span> 表示使用包管理工具npm来下载和安装当前主题需要使用到的插件，具体要安装哪些插件需要参考该主题的使用文档(<code>通常是Github仓库中的ReadMe文档</code>)。</p><p><span style="color:#195">git clone xxx</span> 表示使用git命令来把Github上面的远程仓库下载到当前目录中，上面代码执行完毕后apollo主题相关的文件会保存在<code>Blog/themes目录</code>下面。</p><p><strong><code>002 切换博客的主题</code></strong><br><strong><code>003 对主题进行配置</code></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-0-说明&quot;&gt;&lt;a href=&quot;#1-0-说明&quot; class=&quot;headerlink&quot; title=&quot;1.0 说明&quot;&gt;&lt;/a&gt;1.0 说明&lt;/h3&gt;&lt;p&gt;其实，搭建个人博客的技术方案有很多。&lt;/p&gt;
&lt;p&gt;其实，你能找到的使用&lt;code&gt;Hexo + Githu
      
    
    </summary>
    
    
      <category term="网络编程系列" scheme="https://weibo.com/u/3800117445/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[10]-UI组件库的使用和封装</title>
    <link href="https://weibo.com/u/3800117445/2018/10/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97%5B10%5D-UI%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%B0%81%E8%A3%85/"/>
    <id>https://weibo.com/u/3800117445/2018/10/02/微信小程序序列[10]-UI组件库的使用和封装/</id>
    <published>2018-10-01T16:00:01.000Z</published>
    <updated>2018-10-09T13:41:43.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍微信小程序开发中常用的第三方UI组件库的基本使用流程和如何自定义组件。</p></blockquote><h3 id="1-0-第三方UI组件库的基本使用流程"><a href="#1-0-第三方UI组件库的基本使用流程" class="headerlink" title="1.0 第三方UI组件库的基本使用流程"></a>1.0 第三方UI组件库的基本使用流程</h3><p>在<a href="http://wendingding.com/2018/09/24/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97[05]-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B601" target="_blank" rel="external">小程序框架基础组件</a>这篇文章的末尾简单列出了小程序开发中常用的一些第三方UI组件库，包括iview和Weui等,这里讲简单说明这些第三方UI组件库的基本使用流程。</p><p>通常，在使用第三方组件库之前首先需要通过<code>代码的托管仓库</code>和<code>组件库文档</code>来了解该组件库都提供哪些自定义的组件这是组件和当前项目是否匹配等信息(<code>很多的第三方组件库都提供了专门的演示小程序可以安装和体验</code>)，确定之后就只需在项目中应用了。</p><p><strong>第三方组件库的基本使用流程</strong></p><blockquote><p>❏ 在github下载完整的仓库代码。<br>❏ 把仓库代码中存放自定义组件的文件夹拷贝到项目中(<code>dist目录</code>)。<br>❏ 在项目中需要使用到的页面的json文件中对第三方组件进行配置。<br>❏ 在项目中需要使用到的页面的wxml文件中直接使用，同原生组件一致。<br>❏ 参考组件库文档来对自定义的组件传递参数(通常是以属性赋值的方式进行)。</p></blockquote><p><strong><code>ex:使用iview-weapp组件库中的i-cell组件</code></strong></p><p><strong><code>001</code></strong> 在github中找到组件库的<a href="https://github.com/TalkingData/iview-weapp" target="_blank" rel="external">仓库托管地址</a>并点击clone OR Download下载。</p><p><strong><code>002</code></strong> 下载后将仓库中的dist目录拷贝到自己的项目中，这里可以在根目录下新建components文件夹专门用来存放需要用到的所有组件，因为项目中可能用到多个UI组件库，所以把dist改名为iview目录。</p><p><strong><code>003</code></strong> 因为在项目中的<strong>mine/index.wxml</strong>文件中需要使用到iview组件库中的<span style="color:#f05">i-cell</span>、<span style="color:#f05">i-panel</span>以及<span style="color:#f05">i-cell-group</span>组件所以需要先在<strong>mine/index.json</strong>文件中进行配置，配置项如下。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"usingComponents"</span>: &#123;</div><div class="line">    <span class="attr">"i-cell"</span>: <span class="string">"../../components/ivew/cell/index"</span>,</div><div class="line">    <span class="attr">"i-panel"</span>:<span class="string">"../../components/ivew/panel/index"</span>,</div><div class="line">    <span class="attr">"i-cell-group"</span>:<span class="string">"../../components/ivew/cell-group/index"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong><code>004</code></strong> 在项目中的<strong>mine/index.wxml</strong>文件中直接使用这些组件来实现特定效果。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">i-panel</span> <span class="attr">title</span>=<span class="string">" "</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i-cell-group</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"心意卡"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"优惠券"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">i-cell-group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">i-panel</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">i-panel</span> <span class="attr">title</span>=<span class="string">" "</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">i-cell-group</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"我的地址"</span> <span class="attr">is-link</span> <span class="attr">url</span>=<span class="string">"/pages/address/index"</span>&gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">i-cell</span>  <span class="attr">title</span>=<span class="string">"我的尺寸"</span> <span class="attr">is-link</span> &gt;</span><span class="tag">&lt;/<span class="name">i-cell</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">i-cell-group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">i-panel</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果需要对UI组件的样式进行调整那么可以选择直接到components/iview中对既定的样式进行修改，更好的方法是<span style="color:#195">给用到的组件添加新的class,并在对应的wxss文件中进行设置</span>。</p><h3 id="2-0-自定义组件的封装"><a href="#2-0-自定义组件的封装" class="headerlink" title="2.0 自定义组件的封装"></a>2.0 自定义组件的封装</h3><p>在小程序的开发中如果某些代码需要到多个地方用到(往往是视图结构相同而具体填充的数据不同)，那么可以考虑把这些代码抽取成模板或者是封装成自定义的组件，在<a href="http://wendingding.com/2018/09/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97[08]-%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E5%BC%95%E5%85%A5" target="_blank" rel="external">模板的基本使用和引入</a>这篇文章中已经介绍了模板的基本用法，这里重点说明把代码封装成自定义组件的基本流程。</p><p><strong>自定义组件和使用的基本流程</strong></p><blockquote><p>❏ 在微信提供的官方开发工具中代码目录中新建<code>Component文件</code>。<br>❏ 在自动生成的四个文件中编写组件内容、组件样式、组件逻辑控制相关的代码。<br>❏ 在项目中需要使用到自定义组件的页面的.json文件中进行配置，设置组件的名称和路径。<br>❏ 在项目中需要使用到自定义组件的页面的.wxml文件中直接像系统组件那样使用和传参即可。</p></blockquote><p><strong><code>ex:自定义组件i-address的封装和使用</code></strong></p><p>这里先给出自定义组件使用的效果图。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx21.png?raw=true"></p><p><strong><code>001</code></strong> 在项目的根目录中创建components文件夹，该目录用于存放项目中用到的所有组件。<br><strong><code>002</code></strong> 在components目录下创建addressComponent文件夹，新建<code>Component文件</code>命名为addressview，这样会在该目录下面生成四个文件，后缀分别是.wxml(控制内容)、.wxss(控制样式)、.json(控制配置，表明自己是自定义组件)和.js(控制初始化数据、属性列表和添加在组件身上的方法)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wendingding$ tree</div><div class="line">.</div><div class="line">└── components</div><div class="line">    └── addressComponent</div><div class="line">        ├── addressview.js</div><div class="line">        ├── addressview.json</div><div class="line">        ├── addressview.wxml</div><div class="line">        └── addressview.wxss</div></pre></td></tr></table></figure></p><p><strong><code>003</code></strong> 编写addressview.wxml文件，控制组件的结构。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address-top'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'address-top-name'</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">'delClick'</span> <span class="attr">class</span>=<span class="string">'address-top-del'</span> <span class="attr">plain</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'address-top-edit'</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address-bottom'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'address-bottom-phone'</span>&gt;</span>电话号码：&#123;&#123; phoneText &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'address-bottom-detail'</span>&gt;</span>联系地址：&#123;&#123; detailText &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong><code>004</code></strong> 编写addressview.wxss文件，控制组件的样式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.address</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">240</span>rpx;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">20</span>rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.address-top</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">100</span>rpx;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">1</span>rpx solid <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.address-bottom</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">140</span>rpx;</div><div class="line">  <span class="comment">/* background: yellowgreen */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.address-top-name</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">30</span>rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.address-top-del</span>,<span class="selector-class">.address-top-edit</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">130</span>rpx;</div><div class="line">  <span class="attribute">height</span>: <span class="number">60</span>rpx;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">60</span>rpx;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">30</span>rpx;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">20</span>rpx;</div><div class="line">  <span class="attribute">top</span>: <span class="number">20</span>rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.address-top-edit</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">30</span>rpx;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.address-top-del</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">180</span>rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.address-bottom-phone</span>,<span class="selector-class">.address-bottom-detail</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">30</span>rpx;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">30</span>rpx;</div><div class="line">  <span class="attribute">height</span>: <span class="number">70</span>rpx;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">70</span>rpx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong><code>005</code></strong> 编写addressview.js文件的代码，控制组件的属性、初始化数据以及方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 组件的属性列表</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  properties: &#123;</div><div class="line">    name:&#123;</div><div class="line">      type:<span class="built_in">String</span>,</div><div class="line">      value:<span class="string">"默认的收件人"</span></div><div class="line">    &#125;,</div><div class="line">    phoneText: &#123;</div><div class="line">      type: <span class="built_in">String</span>,</div><div class="line">      value: <span class="string">"88888888888888"</span></div><div class="line">    &#125;,</div><div class="line">    detailText: &#123;</div><div class="line">      type: <span class="built_in">String</span>,</div><div class="line">      value: <span class="string">"北京市天安门城楼"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 组件的初始数据</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  data: &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 组件的方法列表</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  methods: &#123;</div><div class="line">    delClick:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">      <span class="comment">//....</span></div><div class="line">      <span class="comment">//删除按钮的事件处理函数</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><strong><code>006</code></strong> 在项目的address页面中需要用到这个自定义组件，那么就先在对应的json文件中进行配置，主要是设置自定义组件的名称和对应的路径，这里给出address/index.json文件内容示例。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"usingComponents"</span>: &#123;</div><div class="line">    <span class="attr">"i-address"</span>: <span class="string">"../../components/addressComponents/addressview"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong><code>007</code></strong> 在页面对应的wxml文件中直接使用自定义组件，这里给出address/index.wxml文件内容示例。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">i-address</span> <span class="attr">wx:key</span>=<span class="string">'index'</span> <span class="attr">wx:for</span>=<span class="string">'&#123;&#123; arrayData &#125;&#125;'</span><span class="attr">name</span>=<span class="string">'&#123;&#123; item.name &#125;&#125;'</span> <span class="attr">phoneText</span>=<span class="string">'&#123;&#123; item.phoneText &#125;&#125;'</span> <span class="attr">detailText</span>=<span class="string">'&#123;&#123; item.detailText &#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">i-address</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong><code>008</code></strong> 自定义组件需要接收数据，通过编写对应的js文件设置，这里给出address/index.js文件内容示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pages/address/index.js</span></div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    arrayData:[</div><div class="line">                    &#123;</div><div class="line">                      name: <span class="string">"小猪猪猪"</span>,</div><div class="line">                      phoneText: <span class="string">"123445455846"</span>,</div><div class="line">                      detailText: <span class="string">"广州市天河区体育中心南路水电费"</span>,</div><div class="line">                    &#125;,</div><div class="line">                    &#123;</div><div class="line">                      name: <span class="string">"熊大和赵琳"</span>,</div><div class="line">                      phoneText: <span class="string">"154546556465466"</span>,</div><div class="line">                      detailText: <span class="string">"广州市天河区体育中心南路水电费"</span>,</div><div class="line">                    &#125;,</div><div class="line">                    &#123;</div><div class="line">                      name: <span class="string">"花仙子"</span>,</div><div class="line">                      phoneText: <span class="string">"154546556465466"</span>,</div><div class="line">                      detailText: <span class="string">"广州市天河区体育中心西路"</span>,</div><div class="line">                    &#125;</div><div class="line">             ]</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍微信小程序开发中常用的第三方UI组件库的基本使用流程和如何自定义组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-0-第三方UI组件库的基本使用流程&quot;&gt;&lt;a href=&quot;#1-0-第三方UI组件库的基本使用流程&quot; class=
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[09]-小程序中的基础组件(二)</title>
    <link href="https://weibo.com/u/3800117445/2018/09/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97%5B09%5D-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6(%E4%BA%8C)/"/>
    <id>https://weibo.com/u/3800117445/2018/09/27/微信小程序序列[09]-小程序中的基础组件(二)/</id>
    <published>2018-09-26T16:00:09.000Z</published>
    <updated>2018-10-09T13:41:43.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍小程序中的基础组件，主要包括button、input等组件的基本使用和代码示例。</p></blockquote><h4 id="1-0-button组件"><a href="#1-0-button组件" class="headerlink" title="1.0 button组件"></a>1.0 button组件</h4><p>小程序中的<a href="https://developers.weixin.qq.com/miniprogram/dev/component/button.html" target="_blank" rel="external">button组件</a>就是按钮。</p><p><strong>这里列出button组件的主要属性</strong><br><span class="propWX-green bg-red">open-type</span>    微信开放能力。<br><span class="propWX-green bg-red">size</span>    按钮的大小，默认值为default，还能取值mini。<br><span class="propWX-green ">plain</span>     设置按钮是否镂空，布尔类型的值，默认为false。<br><span class="propWX-green bg-red">disabled</span>    是否禁用按钮，布尔类型的值，默认为false。<br><span class="propWX-green">loading</span>    名称的前面是否设置加载icon,默认为false。<br><span class="propWX-green bg-red">form-type</span>    用来触发form表单中的submit和reset事件。<br><span class="propWX-green">hover-class</span>    按钮被按下的样式类，none表示没有任何效果。<br><span class="propWX-green">hover-start-time</span>    按钮被按下多久出现点击态，默认为20毫秒。<br><span class="propWX-green">hover-stay-time</span>    手指松开按钮点击态的保留时间，默认为70毫秒。<br><span class="propWX-green bg-red">type</span>  按钮的样式类型，默认值为default，还能取值primary和warn。<br><span class="propWX-green">session-from</span>    会话来源，open-type=<code>&quot;contact&quot;</code>时生效。<br><span class="propWX-green">bindcontact</span>    客服消息回调，open-type=<code>&quot;contact&quot;</code>时生效。<br><span class="propWX-green">binderror</span>    使用开放能力时失败的回调，open-type=<code>&quot;launchApp&quot;</code>时生效。<br><span class="propWX-green">bindopensetting</span>    打开授权设置页面的回调，open-type=<code>&quot;openSetting&quot;</code>时生效。<br><span class="propWX-green">bindgetphonenumber</span>    获取用户手机号码回调，open-type=<code>&quot;getPhoneNumber&quot;</code>时生效。<br><span class="propWX-green">bindgetuserinfo</span>    点击时用户信息在detail中返回，open-type=<code>&quot;getUserInfo&quot;</code>时生效。<br><span class="propWX-green">app-parameter</span>    打开app时向app传递的参数，open-type=<code>&quot;launchApp&quot;</code>时生效。<br><span class="propWX-green">lang</span>    指定返回的用户信息的语言，open-type=<code>&quot;getUserInfo&quot;</code>时生效。<br><span class="propWX-green">send-message-title</span>    会话内消息卡片标题，open-type=<code>&quot;contact&quot;</code>时生效。<br><span class="propWX-green">send-message-img</span>    会话内消息卡片图片，open-type=<code>&quot;contact&quot;</code>时生效。<br><span class="propWX-green">show-message-card</span>    显示会话内消息卡片默认为false，open-type=<code>&quot;contact&quot;</code>时生效。<br><span class="propWX-green">send-message-path</span>    会话内消息卡片点击跳转小程序路径，open-type=<code>&quot;contact&quot;</code>时生效。</p><p><strong>open-type微信开放能力属性取值说明</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cotact        打开客服会话。</div><div class="line">openSetting打开授权设置页。</div><div class="line">share        触发用户转发，使用前建议先阅读使用指引。</div><div class="line">feedback打开“意见反馈”页面，用户可提交反馈内容并上传日志。</div><div class="line">getUserInfo获取用户信息，可以从bindgetuserinfo回调中获取到用户信息。</div><div class="line">launchApp打开APP，可以通过app-parameter属性设定向APP传的参数具体说明。</div><div class="line">getPhoneNumber获取用户手机号，可以从bindgetphonenumber回调中获取到用户信息，具体说明。</div></pre></td></tr></table></figure></p><p>我们重点关注button组件非开放能力相关的属性，关于开放能力的相关知识点可以查询官方文档，这里给出button组件使用的代码示例。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">//wxml文件中的内容</div><div class="line"><span class="comment">&lt;!-- 1.0 演示按钮的基本使用 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 001 type属性对比  取值为：defalut(默认白色) warn(红色) primary(绿色) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">'defalut'</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">'warn'</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">'primary'</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 002 size属性：设置按钮的大小 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">'mini'</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 003 plain属性：设置按钮是否镂空显示 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">plain</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 004 disabled属性：设置禁用按钮 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 005 loading属性：文字前面是否显示icon，布尔类型的值，默认不显示 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">loading</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 006 form-type属性：设置表单中的submit和reset --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">'submitClick'</span> <span class="attr">bindreset</span>=<span class="string">'resetClick'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">placeholder</span>=<span class="string">'请输入用户名'</span> <span class="attr">name</span>=<span class="string">'usrname'</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span><span class="attr">placeholder</span>=<span class="string">'请输入密码'</span> <span class="attr">name</span>=<span class="string">'password'</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">'submit'</span>&gt;</span>提交表单的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">'reset'</span>&gt;</span>重置表单的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 007 hover-class属性：设置按钮按下去的样式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">hover-class</span>=<span class="string">'btn-hover'</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 008 部分开放能力属性测试 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">'contact'</span> <span class="attr">bindcontact</span>=<span class="string">'testClick'</span>&gt;</span>开放能力打开客服会话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">'getPhoneNumber'</span></span></div><div class="line"><span class="tag"><span class="attr">bindgetphonenumber</span>=<span class="string">"getPhoneNumberClick"</span>&gt;</span></div><div class="line">开放能力获取用户的手机号码</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">//js文件中的内容</div><div class="line">Page(&#123;</div><div class="line">  submitClick:function(e)&#123;</div><div class="line">    console.log("点击了表单的提交按钮",e);</div><div class="line">  &#125;,</div><div class="line">  resetClick: function (e) &#123;</div><div class="line">    console.log("点击了表单的重置按钮",e);</div><div class="line">  &#125;,</div><div class="line">  testClick:function(e)&#123;</div><div class="line">      console.log("打开客服会话",e);</div><div class="line">    &#125;,</div><div class="line">    getPhoneNumberClick:function()&#123;</div><div class="line">      console.log("获取用户的电话号码",e);</div><div class="line">    &#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line">//wxss文件中的内容</div><div class="line">.btn-hover</div><div class="line">&#123;</div><div class="line">  background: #110e1e;</div><div class="line">  color: #fff;</div><div class="line">  font-size: 20rpx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-0-input组件"><a href="#2-0-input组件" class="headerlink" title="2.0 input组件"></a>2.0 input组件</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html" target="_blank" rel="external">input组件</a>就是输入框，主要用来处理用户的输入和数据修改等操作。</p><p><strong>这里列出input组件的主要属性</strong></p><p><span class="propWX-green bg-red">type</span> 输入框的类型。<br><span class="propWX-green ">disabled</span>      输入框是否禁用。<br><span class="propWX-green bg-red">value</span>    输入框的初始内容。<br><span class="propWX-green ">password</span>     输入框是密码类型的。<br><span class="propWX-green ">placeholder-style    </span>     指定placeholder的样式。<br><span class="propWX-green ">placeholder-class</span>     指定placeholder的样式类。<br><span class="propWX-green bg-red">placeholder</span>     输入框为空的时候显示的占位字符。<br><span class="propWX-green ">maxlength</span>     输入框的最大输入长度，设置为-1表示没有限制默认为140。<br><span class="propWX-green bg-red">confirm-type</span>     弹出键盘的右下角的文字，默认为done，type为text时生效。<br><span class="propWX-green ">confirm-hold</span>     点击键盘右下角按钮时是否保持键盘不收起。<br><span class="propWX-green ">adjust-position</span>     键盘弹起时，是否自动上推页面,默认值为true。<br><span class="propWX-green ">focus</span>     获取焦点。<br><span class="propWX-green ">cursor</span>     指定focus时的光标位置。<br><span class="propWX-green ">selection-start</span>     光标起始位置，自动聚集时有效，需与selection-end搭配使用。<br><span class="propWX-green ">selection-end</span>     光标结束位置，自动聚集时有效，需与selection-start搭配使用。<br><span class="propWX-green bg-red">bindfocus</span>     输入框聚焦时触发。<br><span class="propWX-green ">bindblur</span>     输入框失去焦点时触发。<br><span class="propWX-green bg-red">bindconfirm</span>     点击完成按钮时触发。<br><span class="propWX-green ">bindinput</span>     键盘输入时触发，处理函数能直接return替换输入框的内容。</p><p><strong>特定属性的取值情况说明</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">type属性的取值可以是下面的四种情况，分别对应弹出不同类型的键盘。</div><div class="line">text文本输入键盘</div><div class="line">number数字输入键盘</div><div class="line">idcard身份证输入键盘</div><div class="line">digit带小数点的数字键盘</div><div class="line"></div><div class="line">confirm-type属性的有效值有下面五种，其最终表现与手机输入法本身的实现有关。</div><div class="line">send右下角按钮为“发送”</div><div class="line">search右下角按钮为“搜索”</div><div class="line">next右下角按钮为“下一个”</div><div class="line">go右下角按钮为“前往”</div><div class="line">done右下角按钮为“完成”</div></pre></td></tr></table></figure></p><p><strong>这里给出input标签使用的示例代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">//wxml文件内容</div><div class="line">&lt;!-- 1.0 测试type属性，有效值为text  number idcard digit --&gt;</div><div class="line">&lt;input type=&apos;text&apos; placeholder=&apos;我是文本输入框&apos;&gt;&lt;/input&gt;</div><div class="line">&lt;input type=&apos;number&apos; placeholder=&apos;我是弹出数字键盘&apos;&gt;&lt;/input&gt;</div><div class="line">&lt;input type=&apos;idcard&apos; placeholder=&apos;我弹出身份证键盘&apos;&gt;&lt;/input&gt;</div><div class="line">&lt;input type=&apos;digit&apos; placeholder=&apos;我弹出小数键盘&apos;&gt;&lt;/input&gt;</div><div class="line"></div><div class="line">&lt;!-- 2.0 测试confirm-type属性：有效值为send search next go done --&gt;</div><div class="line">&lt;input confirm-type=&apos;send&apos; placeholder=&apos;键盘右下角的文字为send-发送&apos;&gt;&lt;/input&gt;</div><div class="line">&lt;input confirm-type=&apos;search&apos; placeholder=&apos;键盘右下角的文字为search-搜索&apos;&gt;&lt;/input&gt;</div><div class="line">&lt;input confirm-type=&apos;next&apos; placeholder=&apos;键盘右下角的文字为next-下一项&apos;&gt;&lt;/input&gt;</div><div class="line">&lt;input confirm-type=&apos;go&apos; placeholder=&apos;键盘右下角的文字为go-前往&apos;&gt;&lt;/input&gt;</div><div class="line">&lt;input confirm-type=&apos;done&apos; placeholder=&apos;键盘右下角的文字为done-完成&apos;&gt;&lt;/input&gt;</div><div class="line"></div><div class="line">&lt;!-- 3.0 测试value属性：控制输入框的初始值 --&gt;</div><div class="line">&lt;input value=&apos;我是该输入框的初始值&apos;&gt;&lt;/input&gt;</div><div class="line"></div><div class="line">&lt;!-- 4.0 测试disabled属性：控制输入框是否禁用 --&gt;</div><div class="line">&lt;input disabled placeholder=&apos;禁用输入框&apos;&gt;&lt;/input&gt;</div><div class="line"></div><div class="line">&lt;!-- 5.0 测试placeholder-style：给占位的文本设置样式 --&gt;</div><div class="line">&lt;input placeholder-style=&apos;color:red;&apos; placeholder=&apos;我是占位的文本&apos;&gt;&lt;/input&gt;</div><div class="line"></div><div class="line">&lt;!-- 6.0 测试maxlength：限制输入框的最大长度 --&gt;</div><div class="line">&lt;input maxlength=&quot;10&quot; placeholder=&apos;最多只能输入10个字符&apos;&gt;&lt;/input&gt;</div><div class="line"></div><div class="line">&lt;!-- 7.0 测试事件 --&gt;</div><div class="line">&lt;input</div><div class="line">bindfocus=&apos;onbindfocus&apos;</div><div class="line">bindblur=&apos;onbindblur&apos;</div><div class="line">bindinput=&apos;onbindinput&apos;</div><div class="line">bindconfirm=&apos;onbindconfirm&apos;</div><div class="line">placeholder=&apos;输入框获取焦点的时候出发&apos;&gt;</div><div class="line">&lt;/input&gt;</div><div class="line"></div><div class="line">//js文件的内容</div><div class="line">Page(&#123;</div><div class="line">  onbindfocus:function(e)&#123;</div><div class="line">    console.log(&quot;onbindfocus-获得焦点&quot;,e);</div><div class="line">  &#125;,</div><div class="line">  onbindblur: function (e) &#123;</div><div class="line">    console.log(&quot;onbindblur-失去焦点&quot;, e);</div><div class="line">  &#125;,</div><div class="line">  onbindconfirm: function (e) &#123;</div><div class="line">    console.log(&quot;onbindconfirm-点击完成(键盘右下角)&quot;, e);</div><div class="line">  &#125;,</div><div class="line">  onbindinput: function (e) &#123;</div><div class="line">    console.log(&quot;onbindinput-监听到键盘输入&quot;, e);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍小程序中的基础组件，主要包括button、input等组件的基本使用和代码示例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-0-button组件&quot;&gt;&lt;a href=&quot;#1-0-button组件&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[08]-模板的基本使用和引入</title>
    <link href="https://weibo.com/u/3800117445/2018/09/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97%5B08%5D-%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E5%BC%95%E5%85%A5/"/>
    <id>https://weibo.com/u/3800117445/2018/09/27/微信小程序系列[08]-模板的基本使用和引入/</id>
    <published>2018-09-26T16:00:08.000Z</published>
    <updated>2018-10-02T02:02:56.814Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍小程序框架中模板的基本使用，并通过一个综合案例来演绎。</p></blockquote><h4 id="1-0-模板基本说明"><a href="#1-0-模板基本说明" class="headerlink" title="1.0 模板基本说明"></a>1.0 模板基本说明</h4><p>在小程序开发过程中经常会发现有些相同的结构需要在不同的地方使用，我们没必要每次都创建代码做重复性的工作，这种情况可以考虑使用模板。我们可以把相同结构的代码放到一个模板中，需要使用的时候只需要通过模板语法来调用即可创建，而且模板语法还支持传参，灵活性很高且有利于提高效率和代码的可读性。</p><p>模板的基本用法可以简单分成两个部分：<span style="color:#e08">模板的定义</span>和<span style="color:#e08">模板的使用</span>。</p><p>定义模板非常简单，只需要把代码片段<code>使用template来包裹并设置name属性</code>即可。<br>在使用模板的时候，通过<code>设置is属性的值为指定模板的name</code>即可使用对应的模板，模板还支持传参。</p><p>这里给出模板定义和使用的基本示例代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//wxml文件的内容</div><div class="line"><span class="comment">&lt;!-- 1.0 模板的定义 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">'template_one'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">'http://wendingding.com/%E9%B2%B8%E9%B1%BC.png'</span> <span class="attr">class</span>=<span class="string">'imgClass'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>我是文本标签:鲸鱼\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">'template_two'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>\n哈哈\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>嘻嘻\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>呵呵\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2.0 模板的使用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'template_one'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'template_two'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'template_two'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">//xmss文件的内容</div><div class="line">style sheets</div><div class="line">.imgClass</div><div class="line">&#123;</div><div class="line">  width: 200rpx;</div><div class="line">  height: 200rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">text&#123;</div><div class="line">  background: #593</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>模板传参</strong></p><p>小程序框架中的模板支持传参，在向模板传参的时候只需要设置template中的<code>data属性</code>即可，需要注意的是<span style="color:#195">小程序中的模板拥有独立的作用域</span>，因此不能直接使用js文件中Page函数内部的data属性。页面在进行渲染的时候，template的内容会被模板中的代码完全替换。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1.0 模板的定义 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">'template_one'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">'&#123;&#123;srcImg&#125;&#125;'</span> <span class="attr">class</span>=<span class="string">'imgClass'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>我是文本标签:&#123;&#123;name&#125;&#125;\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">'template_two'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>\n哈哈\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;text1&#125;&#125;\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;text2&#125;&#125;\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2.0 模板的使用 --&gt;</span></div><div class="line">//wxml文件的内容</div><div class="line"><span class="comment">&lt;!-- 模板传参的第一种方式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'template_one'</span></span></div><div class="line"><span class="tag"><span class="attr">data</span>=<span class="string">'&#123;&#123;srcImg:"http://wendingding.com/%E9%B2%B8%E9%B1%BC.png",name:"鲸鱼"&#125;&#125;'</span></span></div><div class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'template_one'</span></span></div><div class="line"><span class="tag"><span class="attr">data</span>=<span class="string">'&#123;&#123;srcImg:"http://wendingding.com/老虎.jpeg",name:"老虎"&#125;&#125;'</span></span></div><div class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 模板传参的第二种方式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'template_one'</span> <span class="attr">data</span>=<span class="string">'&#123;&#123;srcImg,name&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 模板传参的第三种方式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'template_one'</span> <span class="attr">data</span>=<span class="string">'&#123;&#123;...obj&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'template_two'</span> <span class="attr">data</span>=<span class="string">'&#123;&#123;text1:"巴拉巴拉",text2:"溜溜"&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>其他的内容<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"></div><div class="line">//wxss文件的内容</div><div class="line">.imgClass</div><div class="line">&#123;</div><div class="line">  width: 200rpx;</div><div class="line">  height: 200rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">text&#123;</div><div class="line">  background: #593</div><div class="line">&#125;</div><div class="line"></div><div class="line">//js文件的内容</div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    srcImg:"http://wendingding.com/%E8%80%81%E8%99%8E.jpeg",</div><div class="line">    name:"老虎",</div><div class="line">    obj:&#123;</div><div class="line">      srcImg: "http://wendingding.com/%E8%80%81%E8%99%8E.jpeg",</div><div class="line">      name: "假老虎"</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h4 id="2-0-综合案例"><a href="#2-0-综合案例" class="headerlink" title="2.0 综合案例"></a>2.0 综合案例</h4><p>这里给出一个模板使用的基本案例代码和对应的图示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">//模板的定义</div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">'addressCardTemplate'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address-info-view'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address-info-view-top'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'address-name'</span>&gt;</span>杨勇老师<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address-status'</span> <span class="attr">hidden</span>=<span class="string">'true'</span>&gt;</span>默认<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address-del'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address-edit'</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'address-info-view-bottom'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'address-tel'</span>&gt;</span>联系电话：18689429999<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'address-detail'</span>&gt;</span>详细地址：广州市天河区棠下大地XXXX<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">//模板对应的样式文件</div><div class="line">.address-info-view</div><div class="line">&#123;</div><div class="line">  height: 220rpx;</div><div class="line">  margin-top: 20rpx;</div><div class="line">  background: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.address-info-view-top</div><div class="line">&#123;</div><div class="line">  position: relative;</div><div class="line">  height: 100rpx;</div><div class="line">  border-bottom: 1px solid #ccc;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.address-name</div><div class="line">&#123;</div><div class="line">  display: block;</div><div class="line">  width: 200rpx;</div><div class="line">  height: 100rpx;</div><div class="line">  line-height: 100rpx;</div><div class="line">  padding-left: 30rpx;</div><div class="line">  font-size: 35rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.address-status</div><div class="line">&#123;</div><div class="line">  top: 30rpx;</div><div class="line">  left: 220rpx;</div><div class="line">  position: absolute;</div><div class="line">  width: 60rpx;</div><div class="line">  height: 40rpx;</div><div class="line">  line-height: 40rpx;</div><div class="line">  text-align: center;</div><div class="line">  font-size: 25rpx;</div><div class="line">  border-radius: 20rpx;</div><div class="line">  border: 1px solid #089;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.address-del,.address-edit</div><div class="line">&#123;</div><div class="line"></div><div class="line">  top: 20rpx;</div><div class="line">  position: absolute;</div><div class="line">  width: 140rpx;</div><div class="line">  height: 60rpx;</div><div class="line">  line-height: 60rpx;</div><div class="line">  text-align: center;</div><div class="line">  font-size: 25rpx;</div><div class="line">  border-radius: 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.address-edit</div><div class="line">&#123;</div><div class="line">  right: 30rpx;</div><div class="line">  background: #666;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.address-del</div><div class="line">&#123;</div><div class="line">  right: 190rpx;</div><div class="line">  border: 1px solid #222;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.address-info-view-bottom</div><div class="line">&#123;</div><div class="line">  height: 120rpx;</div><div class="line">  line-height: 120rpx;</div><div class="line">  font-size: 25rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.address-tel,.address-detail</div><div class="line">&#123;</div><div class="line">  display: block;</div><div class="line">  height: 40rpx;</div><div class="line">  line-height: 40rpx;</div><div class="line">  margin-left: 30rpx;</div><div class="line">  padding-top: 10rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//模板的使用</div><div class="line">//引入外部定义的模板</div><div class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">'../../templates/addressCard.wxml'</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'addressCardTemplate'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">'addressCardTemplate'</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">//引入项目中的wxss样式文件</div><div class="line">@import "../../templates/addressCard.wxss";</div><div class="line"></div><div class="line">page&#123;</div><div class="line">  min-height: 100%;</div><div class="line">  display: block;</div><div class="line">  background: #eee;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx20.png?raw=true" height="250px"></p><div class="tip">在wxss样式文件中如果需要引入其它的样式文件那么可以使用@import特性</div><p><strong>import 和 include</strong></p><p>在wxml文件中支持引入其他的wxml文件，可以使用<code>import</code>或者<code>include</code>标签。</p><blockquote><p>❏ import标签   仅仅引入wxml文件中模板定义部分。<br>❏ include标签  仅仅引入wxml文件中非模板定义部分。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//模板的使用</div><div class="line">//引入外部定义的模板</div><div class="line">&lt;import src=&apos;../../templates/addressCard.wxml&apos;/&gt;</div><div class="line">&lt;template is=&apos;addressCardTemplate&apos;&gt;&lt;/template&gt;</div><div class="line">&lt;template is=&apos;addressCardTemplate&apos;&gt;&lt;/template&gt;</div><div class="line"></div><div class="line">//引入项目中的wxss样式文件</div><div class="line">@import &quot;../../templates/addressCard.wxss&quot;;</div><div class="line"></div><div class="line">page&#123;</div><div class="line">  min-height: 100%;</div><div class="line">  display: block;</div><div class="line">  background: #eee;</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="tip">在wxss样式文件中如果需要引入其它的样式文件那么可以使用@import特性</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍小程序框架中模板的基本使用，并通过一个综合案例来演绎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-0-模板基本说明&quot;&gt;&lt;a href=&quot;#1-0-模板基本说明&quot; class=&quot;headerlink&quot; title=&quot;1.0 模板
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[07]-事件的绑定和事件对象</title>
    <link href="https://weibo.com/u/3800117445/2018/09/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97%5B07%5D-%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/"/>
    <id>https://weibo.com/u/3800117445/2018/09/26/微信小程序系列[07]-事件的绑定和事件对象/</id>
    <published>2018-09-25T16:00:07.000Z</published>
    <updated>2018-10-02T01:37:20.575Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍小程序框架中的事件和事件对象，包括事件的分类，事件的绑定和事件对象的内部细节。</p></blockquote><h4 id="1-0-事件绑定"><a href="#1-0-事件绑定" class="headerlink" title="1.0 事件绑定"></a>1.0 事件绑定</h4><p><strong>小程序官方对WXML事件的定义</strong></p><blockquote><p>❏ 事件时视图层到逻辑层的通信方式。<br>❏ 事件可以将用户的行为反馈到逻辑层进行处理。<br>❏ 事件对象可以携带额外的数据信息，例如id、dataset和touches等。<br>❏ 事件可以绑定到组件上，当组件上对应事件被触发后，将执行逻辑层中对应的事件处理函数。</p></blockquote><p>小程序中的事件系统和前端开发中HTML里DOM事件系统很相像，在DOM系统通过<code>on + &quot;事件类型&quot;</code>的方式(ex：<span style="color:#195">onclick</span>)来给标签注册不同类型的事件，在小程序中我们通过<code>bind|catch + &quot;事件类型(名)</code>“的方式(ex：<span style="color:#195">bindtap</span>)来给组件绑定不同的事件。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx18.png?raw=true"></p><p>小程序中的事件分为<strong>冒泡事件</strong>和<strong>非冒泡事件</strong>，如果是冒泡事件的话，那么当组件上对应的事件被触发后该事件会向其父节点传递，直到顶层节点；如果是非冒泡事件的话，则不会向父节点传递。</p><p>绑定事件的时候可以使用<code>bind</code>或者是<code>catch</code>关键字，其中bind绑定的事件不会阻止冒泡事件向上传递，而catch绑定的事件会阻止冒泡事件向上传递。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">//wxml文件中的内容</div><div class="line"><span class="comment">&lt;!-- 1.0 使用bind绑定事件(不会阻止事件冒泡) --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;view class='box1' bindtap='box1click'&gt;外层标签</span></div><div class="line"><span class="comment">&lt;view class='box2' bindtap='box2click'&gt;内部标签</span></div><div class="line"><span class="comment">&lt;view class='box3' bindtap='box3click'&gt;核&lt;/view&gt;</span></div><div class="line"><span class="comment">&lt;/view&gt;</span></div><div class="line"><span class="comment">&lt;/view&gt; --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 1.0 使用catcth绑定事件(会阻止事件冒泡) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'box1'</span> <span class="attr">catchtap</span>=<span class="string">'box1click'</span>&gt;</span>外层标签</div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'box2'</span> <span class="attr">catchtap</span>=<span class="string">'box2click'</span>&gt;</span>内部标签</div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'box3'</span> <span class="attr">catchtap</span>=<span class="string">'box3click'</span>&gt;</span>核<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line">//wxss文件中的内容</div><div class="line">.box1&#123;</div><div class="line">  width: 500rpx;</div><div class="line">  height: 300rpx;</div><div class="line">  background: red</div><div class="line">&#125;</div><div class="line"></div><div class="line">.box2&#123;</div><div class="line">  width: 400rpx;</div><div class="line">  height: 200rpx;</div><div class="line">  background: green</div><div class="line">&#125;</div><div class="line"></div><div class="line">.box3&#123;</div><div class="line">  width: 100rpx;</div><div class="line">  height: 100rpx;</div><div class="line">  background: red</div><div class="line">&#125;</div><div class="line"></div><div class="line">//js文件中的内容</div><div class="line">Page(&#123;</div><div class="line">  data: &#123;&#125;,</div><div class="line">  box1click:function()&#123;</div><div class="line">    console.log("box1click");</div><div class="line">  &#125;,</div><div class="line">  box2click: function () &#123;</div><div class="line">    console.log("box2click");</div><div class="line">  &#125;,</div><div class="line">  box3click: function () &#123;</div><div class="line">    console.log("box3click");</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h4 id="2-0-事件对象"><a href="#2-0-事件对象" class="headerlink" title="2.0 事件对象"></a>2.0 事件对象</h4><p><span style="color:#f05">当组件上绑定的事件被触发后逻辑层对应的事件处理函数将接受到一个事件对象(events)</span>,在事件处理函数中我们可以提供一个形参并通过该参数获取此事件对象。</p><p>事件对象的内容主要由<strong>基础事件对象属性(<code>BaseEvent</code>)</strong>、<strong>自定义事件对象属性(<code>CustomEvent</code>)</strong>和<strong>触摸事件对象属性(<code>TouchEvent</code>)</strong>三部分组成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//wxml文件</div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">'click'</span>&gt;</span>我是view<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line">//js文件</div><div class="line">Page(&#123;</div><div class="line">  click:function(event)&#123;</div><div class="line">    console.log(event);   //打印当前的事件对象</div><div class="line">    console.log(JSON.stringify(event,null,4));  //把当前的事件对象转换为JSON打印</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx19.png?raw=true"></p><p>这里列出通过组件中<code>data-*属性</code>来给逻辑层事件处理函数传递数据的示例代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//wxml文件内容</div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">data-id</span>=<span class="string">'123'</span> <span class="attr">data-index</span>=<span class="string">'22'</span> <span class="attr">bindtap</span>=<span class="string">'click'</span>&gt;</span>我是view<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line">//js文件内容</div><div class="line">Page(&#123;</div><div class="line">  click:function(event)&#123;</div><div class="line">    console.log(JSON.stringify(event.currentTarget.dataset));</div><div class="line">  &#125;&#125;)</div><div class="line"></div><div class="line">//打印输出内容</div><div class="line">&#123;"id":"123","index":"22"&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍小程序框架中的事件和事件对象，包括事件的分类，事件的绑定和事件对象的内部细节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-0-事件绑定&quot;&gt;&lt;a href=&quot;#1-0-事件绑定&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[06]-数据的绑定和基础指令</title>
    <link href="https://weibo.com/u/3800117445/2018/09/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97%5B06%5D-%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%91%E5%AE%9A%E5%92%8C%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
    <id>https://weibo.com/u/3800117445/2018/09/25/微信小程序系列[06]-数据的绑定和基础指令/</id>
    <published>2018-09-24T16:00:06.000Z</published>
    <updated>2018-10-02T01:37:20.580Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍小程序框架中的数据绑定以及基本指令相关知识点。</p></blockquote><h4 id="1-0-数据绑定"><a href="#1-0-数据绑定" class="headerlink" title="1.0 数据绑定"></a>1.0 数据绑定</h4><p>我们在进行小程序开发的时候应该深刻理解数据绑定和事件响应模型，这和前端开发中面向DOM操作的编程思想截然不同。</p><p>小程序中的页面在进行渲染的时候，框架本身会将WXML文件和对应js文件中Page函数里面的data进行绑定。在WXML页面中我们可以直接使用<code>data中的属性</code>。小程序中的数据绑定使用<code>Mustache语法</code>(双大括号插值)来讲变量或者是简单的运算规则包起来。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx14.png?raw=true"></p><p><strong>简单绑定</strong></p><p>简单绑定指的是使用Mustache语法将变量包起来，在模板中直接作为字符串输出。</p><p>数据的简单绑定可作用于<strong>组件的内容</strong>、<strong>组件的属性</strong>、<strong>组件的控制属性</strong>以及<strong>关键字</strong>(按JavaScript中关键字其真值输出)等输出。</p><p>这里给出简单数据绑定的代码和运行结果示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//.wxml文件的内容</div><div class="line"><span class="comment">&lt;!-- 1.0 作为组件的内容绑定 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;contentText&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2.0 作为组件的属性绑定 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'&#123;&#123;className&#125;&#125;'</span>&gt;</span>绑定class属性<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">'border:&#123;&#123;borderStyle&#125;&#125;'</span>&gt;</span>绑定style属性中border的值<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 3.0 作为控制属性绑定 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">'&#123;&#123;isShow&#125;&#125;'</span>&gt;</span>是否显示该组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 4.0 作为关键字直接输出 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>作为数字直接输出&#123;&#123;100&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">'&#123;&#123;false&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">'false'</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></div><div class="line"></div><div class="line">//js文件的内容</div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    contentText:"曾虑多情损梵行",</div><div class="line">    className:"view-class",</div><div class="line">    borderStyle:"1px solid #000",</div><div class="line">    isShow:true</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx15.png?raw=true"></p><p><strong>运算支持</strong></p><p>小程序在进行数据绑定的时候还支持进行简单的运算，这些运算包括<strong>三元运算</strong>、<strong>算术运算</strong>、<strong>逻辑判断</strong>、<strong>字符串运算</strong>和<strong>对象取值</strong>等操作，这些运算在具体执行的时候遵从JavaScript语言的运算规则。</p><p>这里给出数据绑定运算支持的代码和运行结果示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//wxml文件内容</div><div class="line"><span class="comment">&lt;!-- 1.0 三元运算符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;isShowText ? '显示' : '不显示'&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;view&gt;&#123;&#123;isShowText ? 显示 : 不显示&#125;&#125;&lt;/view&gt; 错误的演示--&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2.0 基本的算术运算 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; a &#125;&#125; + 4  + &#123;&#123; b + c &#125;&#125;  = &#123;&#123;a + b + c + 4&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 3.0 逻辑运算 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> 显示变量a&gt;3的结果：&#123;&#123;a &gt; 3&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 4.0 字符串运算 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; "des:" + strM&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 5.0 对象取值运算 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>姓名== &#123;&#123;"name:" + objM.name&#125;&#125; 年龄== &#123;&#123;"age:" + objM.age&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line">//js文件内容</div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    isShowText:true,</div><div class="line">    a:1,</div><div class="line">    b:2,</div><div class="line">    c:3,</div><div class="line">    strM:"我是拼接的字符串",</div><div class="line">    objM:&#123;</div><div class="line">      name:"文顶顶",</div><div class="line">      age:18</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx16.png?raw=true"></p><h4 id="2-0-基本指令"><a href="#2-0-基本指令" class="headerlink" title="2.0 基本指令"></a>2.0 基本指令</h4><p>在小程序开发中还有一些指令可以用来辅助数据绑定的操作，它们分别是<strong>条件渲染</strong>的指令和<strong>列表渲染</strong>的指令，负责处理<code>分支和循环</code>两种结构。</p><p><strong>条件渲染</strong></p><p>条件渲染的指令主要有：<code>wx:if</code>、<code>wx:elif</code>和<code>wx:else</code>,它们其实相当于if、else if和else。</p><p>当绑定的数据结果为true的时候显示，为false的时候不显示。<strong>注意</strong><code>wx:else</code>指令只能和<code>wx:if</code>指令配合成对使用，无法独自使用。如果需要控制多个组件的显示和隐藏又不影响布局，那么可以使用block标签来进行包裹。</p><div class="tip">注意：block不是组件，仅仅是一个包裹元素，页面渲染的时候不做任何处理。</div><p><strong><code>wx:if指令和hidden简单对比</code></strong></p><blockquote><p>❏ <code>wx:if是惰性的，当条件为真时才第一次渲染组件，否则将忽略。</code><br>❏ <code>设置hidden的组件始终会被渲染，仅通过样式控制显示或隐藏，本身不会触发销毁和重新渲染。</code></p></blockquote><p><strong>列表渲染</strong></p><p>列表渲染的指令主要有：<code>wx:for</code>、<code>wx:for-index</code>和<code>wx:for-item</code>。</p><p><code>wx:for</code>指令(控制属性)用于遍历数组根据数据的元素来重复渲染组件。默认情况下，渲染过程中数组当前渲染项的下标为index,当前项为item，它们可以通过<code>wx:for-index</code>和<code>wx:for-item</code>指令重命名。如果需要渲染的是多个组件的组合，那么可以使用block元素来进行包裹。</p><p>这里给出条件渲染和列表渲染的代码示例和运行结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//js文件内容</div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    isShow:true,</div><div class="line">    count:80,</div><div class="line">    arrM1:[</div><div class="line">      "哈哈",</div><div class="line">      "呵呵",</div><div class="line">      "嘻嘻"</div><div class="line">    ],</div><div class="line">    arrM2: [</div><div class="line">      &#123;name:"张三",age:18&#125;,</div><div class="line">      &#123;name:"李四",age:99&#125;</div><div class="line">    ],</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//wxml文件内容</div><div class="line"><span class="comment">&lt;!-- 1.0 控制是否显示 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;isShow&#125;&#125;"</span>&gt;</span>是否显示<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2.0 if..elif..else组合使用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;count &gt; 100&#125;&#125;"</span>&gt;</span>已经超过100块<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;count &gt; 50&#125;&#125;"</span>&gt;</span>超过50块不足100块<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>连50块都不给我<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 3.0 使用block包裹控制多个组件是否显示 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">'&#123;&#123;true&#125;&#125;'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>我是文本\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>我还是文本\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我和它们不一样<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 4.0 隐藏标签 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">'&#123;&#123;isShow&#125;&#125;'</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 隐藏 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>&gt;</span>嘻嘻嘻嘻2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 隐藏 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">'false'</span>&gt;</span>嘻嘻嘻嘻3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--显示--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">'&#123;&#123;false&#125;&#125;'</span>&gt;</span>嘻嘻嘻嘻4<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 5.0 列表渲染基本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">'&#123;&#123;arrM1&#125;&#125;'</span>&gt;</span>当前的索引和元素&#123;&#123;index + ":" + item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 6.0 列表渲染其它指令 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">'&#123;&#123;arrM2&#125;&#125;'</span> <span class="attr">wx:for-index</span>=<span class="string">'i'</span> <span class="attr">wx:for-item</span>=<span class="string">'ele'</span>&gt;</span>当前的索引和元素信息&#123;&#123;i + "=&gt;" + ele.name + ele.age&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx17.png?raw=true"></p><div class="tip">警告：Now you can provide attr “wx:key” for a “wx:for” to improve performance。官方解释：当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍小程序框架中的数据绑定以及基本指令相关知识点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-0-数据绑定&quot;&gt;&lt;a href=&quot;#1-0-数据绑定&quot; class=&quot;headerlink&quot; title=&quot;1.0 数据绑定&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[05]-小程序框架基础组件(一)</title>
    <link href="https://weibo.com/u/3800117445/2018/09/24/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97%5B05%5D-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B601/"/>
    <id>https://weibo.com/u/3800117445/2018/09/24/微信小程序系列[05]-小程序框架基础组件01/</id>
    <published>2018-09-23T16:00:05.000Z</published>
    <updated>2018-09-26T16:25:48.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍小程序框架中为我们提供的组件，还专门对view、text、image等组件的基本使用进行了说明，此外还补充了为标签设置样式的几种方式并提供综合案例。</p></blockquote><h4 id="1-0-组件"><a href="#1-0-组件" class="headerlink" title="1.0 组件"></a>1.0 组件</h4><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx13.png?raw=true"></p><p><span style="color:#195">组件就是控件或者说标签。</span></p><p>小程序官方为我们提供了各种各样的组件，按照类型来划分可以分成：<strong>视图容器组件</strong>、<strong>基础内容组件</strong>、<strong>表单组件</strong>、<strong>导航组件</strong>、<strong>多媒体组件</strong>、<strong>地图组件</strong>和<strong>画布组件</strong>共<span style="color:red">七类30种</span>。</p><p>小程序中的组件和HTML中的元素差不多，一个组件是指从组件开始标签到结束标签的所有代码，因为平台的差异性所以小程序中的组件可能会被转译为不同端对应的代码，所以在进行小程序开发的时候不能使用除上述组件之外的标签。</p><p><strong>组件的定义</strong></p><blockquote><p>❏  组件是视图层的基本组成单元。<br>❏  组件会自带一些功能和微信风格的样式。<br>❏  组件通常包括开始标签和结束标签、用来修饰该组件的属性以及两个标签中间的内容。</p></blockquote><p><strong>组件的属性</strong></p><p>组件可以拥有属性，属性用于对组件进行配置。<br>组件的属性可以分为所有组件都拥有的共同属性和某些组件才有的特定属性。<br>组件的属性只能用在开始标签或者是单个自闭合标签身上，不能用于结束标签。<br>组件中可以设置多个属性，属性具有属性名称和属性值两部分内容，<span style="color:red">组件的属性名称都是小写</span>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx10.png?raw=true"></p><p><strong><code>所有组件都拥有的共同属性</code></strong></p><blockquote><p>✧  <strong><span style="color:#27e">id</span></strong> &nbsp;&nbsp;组件的唯一标识，保持整个页面唯一。<br>✧  <strong><span style="color:#27e">style</span></strong> &nbsp;&nbsp;同HTML中的style一致，用来动态设置组件的内联样式。<br>✧  <strong><span style="color:#27e">class</span></strong> &nbsp;&nbsp;组件中的样式类，可以在WXSS文件中通过类选择器来选择标签设置样式。<br>✧  <strong><span style="color:#27e">hidden</span></strong> &nbsp;&nbsp;组件是否显示，默认所有组件均显示可通过设置该属性值为false隐藏组件。<br>✧  <strong><span style="color:#27e">bind../catch..</span></strong> &nbsp;&nbsp;用于绑定逻辑层事件的属性，其中bind为冒泡事件，catch为非冒泡事件。<br>✧  <strong><span style="color:#27e">data-</span></strong> &nbsp;&nbsp;自定义属性，事件触发时会发送给事件处理函数，函数中可通过datasl来获取对应的值。</p></blockquote><h4 id="2-0-view组件"><a href="#2-0-view组件" class="headerlink" title="2.0 view组件"></a>2.0 view组件</h4><p><span style="color:#27e"><a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html" target="_blank" rel="external">view组件</a>是视图容器组件的一种，属于块级组件(标签)。</span></p><p>view组件类似于HTML中的div标签，在小程序开发中布局展示，是小程序界面布局中最常用的UI组件，任何一种复杂的布局都可以通过嵌套view组件设置组件的样式来实现。</p><p><strong>下面列出view组件的主要属性</strong><br><span class="propWX-green">hover</span>    是否启动点击态，默认为false。<br><span class="propWX-green">hover-start-time</span> 标签按下后多久出现点击态，默认为50毫秒。<br><span class="propWX-green">hover-stay-time</span>     手指松开后点击态的保留时间，默认为400毫秒。<br><span class="propWX-green">hover-class</span>      标签被按下去的样式，默认值为<code>none</code>表示没有点击效果。</p><p>view组件的使用示例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//.wxml中的代码</div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hover-class</span>=<span class="string">'view-hover-class'</span> <span class="attr">hover-start-time</span>=<span class="string">'1000'</span>&gt;</span>我是第1个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">'&#123;&#123;true&#125;&#125;'</span>&gt;</span>我是第2个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我是第3个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我是第4个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line">//.wxss中的代码</div><div class="line">view&#123;</div><div class="line">  padding: 30rpx;</div><div class="line">  text-align: center;</div><div class="line">  background: #195;</div><div class="line">  margin: 20rpx;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.view-hover-class</div><div class="line">&#123;</div><div class="line">  background: #9e2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong><code>给标签设置样式</code></strong></p><blockquote><p>❏  内联样式设置。<br>❏  页面样式设置。<br>❏  外部样式设置。<br>❏  全局样式设置。</p></blockquote><p>给view标签设置样式的四种方式代码示例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">//.wxml文件</div><div class="line"><span class="comment">&lt;!-- 1.0 内联样式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span> = <span class="string">"width:300px;font-size:40rpx;background:#195;"</span>&gt;</span>我是第1个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2.0 页面样式文件设置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'pageStyleView'</span>&gt;</span>我是第2个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 3.0 引入外部样式文件设置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'outPageViewClass'</span>&gt;</span>我是第3个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 4.0 使用全局样式文件设置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'globalViewClass'</span>&gt;</span>我是第4个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我是第5个View组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line">//.wxss文件</div><div class="line">@import "../../style/demo.wxss";</div><div class="line"></div><div class="line">.pageStyleView</div><div class="line">&#123;</div><div class="line">    background: #830;</div><div class="line">    color: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">view</div><div class="line">&#123;</div><div class="line">    margin: 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//demo.wxss文件</div><div class="line">.outPageViewClass</div><div class="line">&#123;</div><div class="line">  background: yellow;</div><div class="line">  color: red;</div><div class="line">  border: 1px solid #000;</div><div class="line">  width: 60%</div><div class="line">&#125;</div><div class="line"></div><div class="line">//app.wxss文件</div><div class="line">.globalViewClass&#123;</div><div class="line">  background: #503;</div><div class="line">  color: #fff;</div><div class="line">  font-family: "KaiTi";</div><div class="line">  font-size: 50rpx;</div><div class="line">  width: 90%</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx11.png?raw=true"></p><h4 id="3-0-image组件"><a href="#3-0-image组件" class="headerlink" title="3.0 image组件"></a>3.0 image组件</h4><p>小程序提供了<a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html" target="_blank" rel="external">image组件</a>来处理图片，同HTML中的img标签类型。</p><p><strong>下面列出image组件的主要属性</strong><br><span class="propWX-green">binderror</span>      加载图片失败时，发布到 AppService 的事件名。<br><span class="propWX-green">bindload</span>      加载图片完毕时，发布到 AppService 的事件名。<br><span class="propWX-green">src</span>    图片资源地址，可以是本地图片的相对路径也可以是URL地址。<br><span class="propWX-green">mode</span>  图片的缩放和剪裁模式，image组件中供提供了4中缩放和9种剪裁模式。<br><span class="propWX-green">lazy-load</span>     图片懒加载，布尔类型默认false，只对page与scroll-view下的image有效。</p><p><code>这里列出image组件中mode属性的取值范围</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">裁剪top不缩放图片，只显示图片的顶部区域</div><div class="line">裁剪bottom不缩放图片，只显示图片的底部区域</div><div class="line">裁剪center不缩放图片，只显示图片的中间区域</div><div class="line">裁剪left不缩放图片，只显示图片的左边区域</div><div class="line">裁剪right不缩放图片，只显示图片的右边区域</div><div class="line">裁剪top left不缩放图片，只显示图片的左上边区域</div><div class="line">裁剪top right不缩放图片，只显示图片的右上边区域</div><div class="line">裁剪bottom left不缩放图片，只显示图片的左下边区域</div><div class="line">裁剪bottom right不缩放图片，只显示图片的右下边区域</div><div class="line">缩放widthFix宽度不变，高度自动变化，保持原图宽高比不变</div><div class="line">缩放scaleToFill不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</div><div class="line">缩放aspectFit保持纵横比缩放图片，使图片的长边能完全显示。也就是说，可以完整地将图片显示出来。</div><div class="line">缩放aspectFill保持纵横比缩放图片，只保证图片短边能完全显示。图片通常只在水平或垂直方向是完整的。</div></pre></td></tr></table></figure></p><div class="tip">注意：image组件默认宽度300px、高度225px ，二维码/小程序码图片不支持长按识别。</div><h4 id="4-0-text组件"><a href="#4-0-text组件" class="headerlink" title="4.0 text组件"></a>4.0 text组件</h4><p><span style="color:#27e"><a href="https://developers.weixin.qq.com/miniprogram/dev/component/text.html" target="_blank" rel="external">text组件</a>用于文本内容的展示。</span></p><p><strong>下面列出text组件的主要属性</strong><br><span class="propWX-green">decode</span>      是否解码。<br><span class="propWX-green">selectable</span>      文本是否可选。<br><span class="propWX-green">space</span>      显示连续空格的方式，可选值有ensp、emsp和nbsp[0.5|1|自适应]</p><p><strong>text组件注意点说明</strong></p><p>[01] <code>text组件属于内联元素</code>。<br>[02] <code>text组件的内部只能嵌套text标签</code>。<br>[03] <code>小程序中只有text组件支持长按选中</code>。</p><p>这里给出text组件使用示例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>我是text标签01\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span>=<span class="string">'true'</span>&gt;</span>我是text标签02\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>=<span class="string">'true'</span>&gt;</span>我是text标签03&amp;nbsp;嘻嘻\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>=<span class="string">'false'</span>&gt;</span>解码&amp;nbsp;嘻嘻&amp;nbsp;(空格) &amp;lt;(小于) &amp;gt;(大于)</div><div class="line"> &amp;amp;(&amp;) &amp;apos;(') &amp;ensp;(半角空格) &amp;emsp;(全角空格)\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>=<span class="string">'&#123;&#123;false&#125;&#125;'</span>&gt;</span>解码&amp;nbsp;嘻嘻&amp;nbsp;(空格) &amp;lt;(小于) &amp;gt;(大于)</div><div class="line">&amp;amp;(&amp;) &amp;apos;(') &amp;ensp;(半角空格) &amp;emsp;(全角空格)\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong><code>设置让标签隐藏的N中方式</code></strong></p><blockquote><p>❏  <span style="color:#27e">wx:if</span>       设置为true则显示(懒加载的)<br>❏  <span style="color:#27e">display</span>            设置为none，不占位也不显示<br>❏  <span style="color:#27e">visibility:</span>       设置为hidden，占位但是不显示<br>❏  <span style="color:#27e">hidden</span>         默认不设置该属性那么就是显示的  不占位也不显示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;text hidden=&apos;true&apos;&gt;我是text标签05\n&lt;/text&gt;</div><div class="line">&lt;text style=&apos;display:none;&apos;&gt;我是text标签06\n&lt;/text&gt;</div><div class="line">&lt;text wx:if=&apos;&#123;&#123;true&#125;&#125;&apos;&gt;我是text标签07\n&lt;/text&gt;</div><div class="line">&lt;text style=&apos;visibility:hidden&apos;&gt;我是text标签08\n&lt;/text&gt;</div></pre></td></tr></table></figure><h4 id="5-0-综合案例"><a href="#5-0-综合案例" class="headerlink" title="5.0 综合案例"></a>5.0 综合案例</h4><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx12.png?raw=true" width="300px"></p><p>这里给出综合案例的目标效果和实现代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">//wxml结构文件的内容</div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'info-view'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'content info-view-left'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'info-name'</span>&gt;</span>杨勇嘻哈<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">'info-edit'</span> <span class="attr">src</span>=<span class="string">'../../images/编辑.png'</span> <span class="attr">bindtap</span>=<span class="string">'editClick'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'info-description'</span>&gt;</span>梧州学院，定制您的成功人生。<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'content info-view-right'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">'https://wx.qlogo.cn/mmopen/vi_324a6p....Yd2FZVJSw/132'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"></div><div class="line">//wxss样式文件的内容</div><div class="line">.info-view</div><div class="line">&#123;</div><div class="line">  width: 100%;</div><div class="line">  height: 210rpx;</div><div class="line">  line-height: 220rpx;</div><div class="line">  background: #000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.content&#123;</div><div class="line">  top: 30rpx;</div><div class="line">  height: 150rpx;</div><div class="line">  line-height: 150rpx;</div><div class="line">  position: absolute;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-view-left</div><div class="line">&#123;</div><div class="line">  left: 40rpx;</div><div class="line">  width: 400rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-view-right</div><div class="line">&#123;</div><div class="line">  right: 40rpx;</div><div class="line">  width: 150rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-name</div><div class="line">&#123;</div><div class="line">  display: block;</div><div class="line">  width: 200rpx;</div><div class="line">  height: 100rpx;</div><div class="line">  line-height: 100rpx;</div><div class="line">  font-size: 45rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-edit</div><div class="line">&#123;</div><div class="line">  display: block;</div><div class="line">  width: 50rpx;</div><div class="line">  height: 50rpx;</div><div class="line">  position: absolute;</div><div class="line">  left: 220rpx;</div><div class="line">  top: 25rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-description</div><div class="line">&#123;</div><div class="line">  display: block;</div><div class="line">  height: 50rpx;</div><div class="line">  line-height: 50rpx;</div><div class="line">  font-size: 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-view-right image</div><div class="line">&#123;</div><div class="line">  width: 120rpx;</div><div class="line">  height: 120rpx;</div><div class="line">  border-radius: 20rpx;</div><div class="line">  margin-top: 15rpx;</div><div class="line">  margin-left: 15rpx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="6-0-第三方UI组件库介绍"><a href="#6-0-第三方UI组件库介绍" class="headerlink" title="6.0 第三方UI组件库介绍"></a>6.0 第三方UI组件库介绍</h4><p> <a href="https://github.com/xiaolin3303/wx-charts" target="_blank" rel="external">wx-charts</a> [<strong><code>stars 2500+</code></strong>]<br>        微信小程序图表charts组件</p><p> <a href="https://github.com/TalkingData/iview-weapp" target="_blank" rel="external">iview-weapp</a> [<strong><code>stars 2400+</code></strong>]<br>        高质量的微信小程序 UI 组件库<br>        官网和文档地址(<a href="https://weapp.iviewui.com/" target="_blank" rel="external">https://weapp.iviewui.com/</a>)<br> <a href="https://github.com/youzan/vant-weapp" target="_blank" rel="external">vant-weapp</a> [<strong><code>stars 6500+</code></strong>]<br>        轻量、可靠的小程序 UI 组件库。<br>        官网和文档地址(<a href="https://youzan.github.io/vant-weapp/#/intro" target="_blank" rel="external">https://youzan.github.io/vant-weapp/#/intro</a>)</p><p><a href="https://github.com/wux-weapp/wux-weapp" target="_blank" rel="external">wux-weapp</a>[<strong><code>stars 2000+</code></strong>]<br>        微信小程序自定义 UI 组件<br>        官网和文档地址(<a href="https://wux-weapp.github.io/wux-weapp-docs/#/list" target="_blank" rel="external">https://wux-weapp.github.io/wux-weapp-docs/#/list</a>)</p><p> <a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="external">weui-wxss</a> [<strong><code>stars 7000+</code></strong>]<br>         WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，包含button、cell、dialog、 progress、 toast、article、icon等各式元素。<br>         官网和文档地址(<a href="https://weui.io/" target="_blank" rel="external">https://weui.io/</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍小程序框架中为我们提供的组件，还专门对view、text、image等组件的基本使用进行了说明，此外还补充了为标签设置样式的几种方式并提供综合案例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-0-组件&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[04]-小程序框架页面级文件</title>
    <link href="https://weibo.com/u/3800117445/2018/09/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97%5B04%5D-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E9%A1%B5%E9%9D%A2%E7%BA%A7%E6%96%87%E4%BB%B6/"/>
    <id>https://weibo.com/u/3800117445/2018/09/23/微信小程序系列[04]-小程序框架页面级文件/</id>
    <published>2018-09-22T16:00:04.000Z</published>
    <updated>2018-09-26T16:25:42.942Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍小程序项目中的页面级文件，这些文件的作用，以及具体的配置字段和使用方式。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx07.png?raw=true"></p><p><span style="color:#f05">小程序中的页面级文件主要有四种类型，即每个页面都应该由4个文件组成。</span></p><p>小程序中同一框架页面的这四个文件必须具有相同的路径和文件名，当小程序启动进入或页面跳转的时候，小程序内部会自动根据app.json配置路径来找到对应的资源进行加载和渲染。单个页面的四个文件分别是：</p><blockquote><p>❏  <strong>控制页面逻辑的.js文件，必要的</strong><br>❏  <strong>控制页面结构的.wxml文件，必要的。</strong><br>❏  <strong>控制页面样式的.wxss文件，非必要的。</strong><br>❏  <strong>控制页面配置的.json文件，非必要的(如果创建那么使用{}表示空)。</strong></p></blockquote><h3 id="1-0-配置文件-json"><a href="#1-0-配置文件-json" class="headerlink" title="1.0 配置文件(.json)"></a>1.0 配置文件(.json)</h3><p>每个页面均可以拥有一个页面配置文件，该文件是json格式的，在进行配置的时候一定要严格遵守json数据的规范。</p><p>如果我们在小程序项目中新建-page,那么会自动创建默认的json文件({})，但该文件并非是必须的。</p><p>页面级别JSON文件配置项等同于app.json文件中的window配置项，它只能控制当前页面的窗口表现。</p><p><span style="color:#f75">在渲染页面的时候，页面级文件中的window配置项会覆盖app.json中相同的配置项。</span></p><p>这里列出页面配置文件中的部分配置项：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"backgroundTextStyle"</span>: <span class="string">"light"</span>,</div><div class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#110e1e"</span>,</div><div class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"我的页面"</span>,</div><div class="line">    <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"white"</span>,</div><div class="line">    <span class="attr">"backgroundTextStyle"</span>:<span class="string">"#e02"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure><h3 id="2-0-样式文件-wxss"><a href="#2-0-样式文件-wxss" class="headerlink" title="2.0 样式文件(.wxss)"></a>2.0 样式文件(.wxss)</h3><p>小程序中的样式文件后缀名称是.wxss。</p><p>WXSS(WeiXin Style sheets)是基于CSS扩展的样式语言，用于描述WXML的组件样式。WXSS决定WXML的组件应该怎么显示，它具有CSS的大部分特性，并在CSS的基础上扩展了尺寸单位和样式导入等特性。</p><p><strong>尺寸单位</strong></p><p>因为CSS中原有的尺寸单位在不同尺寸的屏幕中不能完美的实现元素的按比例缩放，所有WXSS在CSS尺寸单位的基础上拓展了两种尺寸单位。rem和rpx这两种单位本身都是相对单位，在渲染的时候最终会被换算为px。</p><blockquote><p>❏ rem ，全称为root em<br>❏ rpx ，全称为reponsive pixel</p></blockquote><p>WXSS规定所有屏幕的宽度均为20rem。</p><pre><code>iphone6 屏幕实际宽度为375px，则20rem = 375px，那么在iphone6中，1rem = 18.75px iPhoneXS Max屏幕实际宽度为414px,则20rem = 414px，那么在iPhoneXS Max中，1rem = 20.7px</code></pre><p>WXSS规定所有屏幕的宽度均为750rpx。</p><pre><code>iphone6 屏幕实际宽度为375px，则750rpx = 375px，那么在iphone6中，1rpx = 0.5px iPhoneXS Max屏幕实际宽度为414px,则750rpx = 414px，那么在iPhoneXS Max中，1rpx = 0.552px</code></pre><p><strong>选择器</strong></p><p>CSS选择器用于选择需要应用样式的元素。<br>WXSS仅实现了CSS中的部分选择器，使用规则和CSS选择器基本一致，目前支持的选择器有：</p><table><thead><tr><th>选择器</th><th>样例</th><th>样例描述</th></tr></thead><tbody><tr><td>.class</td><td><code>.intro</code></td><td>选择所有拥有 class=”intro” 的组件（类选择器）</td></tr><tr><td>#id</td><td><code>#firstname</code></td><td>选择拥有 id=”firstname” 的组件（id 选择器）</td></tr><tr><td>element</td><td><code>view</code></td><td>选择所有 view 组件（标签选择器）</td></tr><tr><td>element, element</td><td><code>view, checkbox</code></td><td>选择所有的 view 组件和所有的 checkbox 组件（并列）</td></tr><tr><td>::after</td><td><code>view::after</code></td><td>在 view 组件后边插入内容(  伪元素选着器  )</td></tr><tr><td>::before</td><td><code>view::before</code></td><td>在 view 组件前边插入内容(  伪元素选着器  )</td></tr></tbody></table><h3 id="3-0-结构文件-wxml"><a href="#3-0-结构文件-wxml" class="headerlink" title="3.0 结构文件(.wxml)"></a>3.0 结构文件(.wxml)</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx08.png?raw=true"></p><p>WXML（<code>WeiXin Markup Language</code>）是小程序专用的一套标记语言，同html类似用于展示并渲染界面。<br>WXML的渲染原理和React Native基本一致，它用一套标记语言在不同平台被解析为不同端的渲染文件。</p><p>WXML标记语言最终总是会转换为宿主端对应的语言，所以<span style="color:#195">在小程序开发中WXML里使用的标签(组件)只能是小程序定义的而不能使用自定义标签</span>，如此才能够保证页面在转译的时候能够被正确处理。</p><h3 id="4-0-逻辑文件-js"><a href="#4-0-逻辑文件-js" class="headerlink" title="4.0 逻辑文件(.js)"></a>4.0 逻辑文件(.js)</h3><p>这是一个JavaScript文件，里面写JavaScript代码。</p><p>页面的逻辑文件主要负责：<strong>设置初始化数据</strong>、<strong>注册当前页面生命周期函数</strong>，<strong>注册事件处理函数等</strong>。</p><p>小程序的逻辑层文件都是JavaScript文件，整个项目中所有的这些JavaScript文件包括app.js最终都将被打包成一个js文件，该文件在小程序启动的时候运行，直到小程序销毁。<span style="color:#195">小程序中每个页面的逻辑文件都拥有独立的作用域，这些JavaScript文件运行在独立的JavaScript引擎中。</span></p><div class="tip">因为小程序中的JavaScript文件在独立的JavaScript引擎中运行，所以不能使用前端开发中的DOM操作，没有document和window等对象，自然也无法使用jQuery等框架。</div><p>这里列出页面中默认生成的JavaScript代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    Page(&#123;</div><div class="line">      //页面的初始数据</div><div class="line">      data: &#123;&#125;,</div><div class="line">      //生命周期函数--监听页面加载</div><div class="line">      onLoad: <span class="keyword">function</span> (options) &#123; &#125;,</div><div class="line">      //生命周期函数--监听页面初次渲染完成</div><div class="line">      onReady: <span class="function"><span class="title">function</span></span> () &#123; &#125;,</div><div class="line">      //生命周期函数--监听页面显示</div><div class="line">      onShow: <span class="function"><span class="title">function</span></span> () &#123;&#125;,</div><div class="line">      //生命周期函数--监听页面隐藏</div><div class="line">      onHide: <span class="function"><span class="title">function</span></span> () &#123; &#125;,</div><div class="line">      //生命周期函数--监听页面卸载</div><div class="line">      onUnload: <span class="function"><span class="title">function</span></span> () &#123;&#125;,</div><div class="line">      //页面相关事件处理函数--监听用户下拉动作</div><div class="line">      onPullDownRefresh: <span class="function"><span class="title">function</span></span> () &#123; &#125;,</div><div class="line">      //页面上拉触底事件的处理函数</div><div class="line">      onReachBottom: <span class="function"><span class="title">function</span></span> () &#123; &#125;,</div><div class="line">      //用户点击右上角分享</div><div class="line">      onShareAppMessage: <span class="function"><span class="title">function</span></span> () &#123; &#125;</div><div class="line">    &#125;)</div><div class="line">`</div></pre></td></tr></table></figure><p>在页面的js文件中，通过Page函数来注册页面，该函数接收一个Object类型的参数，该对象中的内容主要分成页面的初始数据(<code>data属性</code>)、生命周期函数和事件处理函数等。</p><p>在页面的js文件中，可以通过<code>var app = getApp()</code>的方式来获取全局的小程序实例对象(<span style="color:#195">在app.js文件中通过App函数注册的对象</span>)。小程序框架以页面栈的形式维护了当前的所有页面，可以通过<code>getCountPages</code>函数来获取当前页面栈的实例，该实例以数组形式按照栈的顺序给出，第一个元素为首页最后一个元素为当前页(可以通过索引来获取)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍小程序项目中的页面级文件，这些文件的作用，以及具体的配置字段和使用方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Bl
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[03]-小程序框架系统级文件</title>
    <link href="https://weibo.com/u/3800117445/2018/09/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97%5B03%5D-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E7%B3%BB%E7%BB%9F%E7%BA%A7%E6%96%87%E4%BB%B6/"/>
    <id>https://weibo.com/u/3800117445/2018/09/22/微信小程序系列[03]-小程序框架系统级文件/</id>
    <published>2018-09-21T16:00:02.000Z</published>
    <updated>2018-09-26T16:25:39.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍开发微信小程序项目中的主体文件，这些文件的作用，以及具体的配置字段。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx04.png?raw=true"></p><h3 id="1-0-配置文件-app-json"><a href="#1-0-配置文件-app-json" class="headerlink" title="1.0 配置文件(app.json)"></a>1.0 配置文件(app.json)</h3><h4 id="app-json文件说明"><a href="#app-json文件说明" class="headerlink" title="app.json文件说明"></a>app.json文件说明</h4><p>该文件是小程序的配置文件，编写的时候需要严格遵循json的格式规范(关于JSON的知识点请参考<a href="http://wendingding.com/2018/04/16/javaScript%E7%B3%BB%E5%88%97%20[05]-javaScript%E5%92%8CJSON/" target="_blank" rel="external">javaScript系列 [05]-javaScript和JSON</a>)，在程序加载的时候负责对小程序的全局进行配置，配置项如下：</p><p>☑︎ <span style="color:#f50">page</span>:设置页面路径。<br>◻︎ <span style="color:#f50">tabBar</span>:设置tab的表现。<br>◻︎ <span style="color:#f50">window</span>:设置默认页面的窗口表现。<br>◻︎ <span style="color:#f50">networkTimeout</span>:设置网络超时时间。<br>◻︎ <span style="color:#f50">debug</span>:设置是否开启debug模式，可选项为true或false，默认关闭。</p><p>列出app.json文件内容的整体结构<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"pages"</span>:[],</div><div class="line">  <span class="attr">"window"</span>:&#123;&#125;,</div><div class="line">  <span class="attr">"tabBar"</span>:&#123;&#125;,</div><div class="line">  <span class="attr">"networkTimeout"</span>:&#123;&#125;,</div><div class="line">  <span class="attr">"debug"</span>:<span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="pages配置项"><a href="#pages配置项" class="headerlink" title="pages配置项"></a>pages配置项</h4><p>pages配置选项负责注册小程序的页面，是必须要填写的，当我们使用开发工具来创建页面的时候默认会自动生成对应的配置信息。</p><p>pages配置项的value值是一个包含多有页面路径的数组，用来指定小程序由哪些页面构成，其中每一项均有“<code>路径+文件名</code>”组成，下面给出示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"pages"</span>: [</div><div class="line">  <span class="string">"pages/home/home"</span>,</div><div class="line">  <span class="string">"pages/cart/cart"</span>,</div><div class="line">  <span class="string">"pages/category/category"</span>,</div><div class="line">  <span class="string">"pages/mine/mine"</span>,</div><div class="line">  <span class="string">"pages/index/index"</span>,</div><div class="line">  <span class="string">"pages/logs/logs"</span>,</div><div class="line">  <span class="string">"pages/login/login"</span>,</div><div class="line">  <span class="string">"component/wdd-component/block/index"</span>,</div><div class="line">  <span class="string">"pages/mine/coupon/coupon"</span>,</div><div class="line">  <span class="string">"component/wdd-component/addresscard/index"</span></div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><div class="tip"><br>说明：pages配置项中的第一个元素(上面为home)默认为小程序的首页，路径中不需要填写文件后缀名，渲染页面的时候框架会自动寻找路径并把同名的.json、.wxml、.wxss和.js文件进行整合。<br></div><h4 id="window配置项"><a href="#window配置项" class="headerlink" title="window配置项"></a>window配置项</h4><p>window配置项负责设置小程序<span style="color:"#195"">状态栏、导航条、标题、窗口背景色等系统级样式。</span></p><p><span class="propWX">navigationBarBackgroundColor</span>    导航栏背景颜色     [<code>HexColor类型</code>]<br><span class="propWX">navigationBarTextStyle</span>          导航栏标题颜色     [<code>String类型</code>],black或white(默认)<br><span class="propWX">navigationBarTitleText</span>          导航栏标题文字内容  [<code>String类型</code>]<br><span class="propWX">navigationStyle</span>                    导航栏样式         [<code>String类型</code>]，default(默认)或custom<br><span class="propWX">backgroundColor</span>                  窗口的背景色       [<code>HexColor类型</code>]<br><span class="propWX">backgroundTextStyle</span>              下拉加载的样式     [<code>String类型</code>]，dark(默认)和light<br><span class="propWX">backgroundColorTop    </span>           顶部窗口的背景色    [<code>HexColor类型</code>]     ，仅 iOS 支持<br><span class="propWX">backgroundColorBottom</span>            底部窗口的背景色    [<code>HexColor类型</code>]     ，仅 iOS 支持<br><span class="propWX">enablePullDownRefresh</span>            全局开启下拉刷新    [<code>Boolean类型值</code>]，true和false(默认)<br><span class="propWX">onReachBottomDistance</span>            上拉触底事件触发时距底部距离 [<code>Number类型</code>]，默认值为50px</p><p>这里给出一个小程序项目中的window配置项示例<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"window"</span>: &#123;</div><div class="line">    <span class="attr">"backgroundTextStyle"</span>: <span class="string">"light"</span>,</div><div class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#000"</span>,</div><div class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"文顶顶的小程序"</span>,</div><div class="line">    <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"white"</span>,</div><div class="line">    <span class="attr">"backgroundColor"</span>: <span class="string">"#eeeeee"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="tabBar配置项"><a href="#tabBar配置项" class="headerlink" title="tabBar配置项"></a>tabBar配置项</h4><p><strong><code>tabBar配置项</code></strong> 用于设置小程序中的tabBar选项卡，在商业小程序中使用频率很高。tabBar配置项的可配置属性如下：</p><p>☑︎ <span class="propWX-green">color</span>                   tab 上的文字默认颜色[<code>HexColor类型</code>]<br>☑︎ <span class="propWX-green">selectedColor</span>         tab 上的文字选中时的颜色[<code>HexColor类型</code>]<br>☑︎ <span class="propWX-green">backgroundColor</span>         tab 的背景色[<code>HexColor类型</code>]<br>◻︎ <span class="propWX-green">borderStyle</span>             tabbar上边框的颜色， 仅支持 black / white(默认)<br>◻︎ <span class="propWX-green">position</span>                 tabBar的位置，仅支持 bottom / top[<code>String类型</code>]<br>☑︎ <span class="propWX-green">list</span>                     tab 的列表最少2个、最多5个元素[<code>Array类型</code>]</p><p><strong><code>list配置项</code></strong> 中的每一项都应该是一个对象，代表着一个tab的相关配置。list配置项的课配置属性如下：<br>☑︎ <span class="propWX-green">text    </span>            tab 上按钮文字<br>☑︎ <span class="propWX-green">pagePath</span>            页面路径，必须在 pages 中先定义<br>◻︎ <span class="propWX-green">iconPath</span>            图片的相对路径，icon 大小限制为40kb，不支持网络图片。<br>◻︎ <span class="propWX-green">selectedIconPath</span>    选中时的图片相对路径，icon 大小限制为40kb，不支持网络图片。</p><p>这里给出一个小程序项目中的tabBar配置项的示例和最终显示结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"tabBar"</span>: &#123;</div><div class="line">    <span class="attr">"selectedColor"</span>: <span class="string">"#000000"</span>,</div><div class="line">    <span class="attr">"list"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/home/home"</span>,</div><div class="line">        <span class="attr">"text"</span>: <span class="string">"首页"</span>,</div><div class="line">        <span class="attr">"iconPath"</span>: <span class="string">"img/tabbar/home.png"</span>,</div><div class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"img/tabbar/homeSelected.png"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/login/login"</span>,</div><div class="line">        <span class="attr">"text"</span>: <span class="string">"分类"</span>,</div><div class="line">        <span class="attr">"iconPath"</span>: <span class="string">"img/tabbar/category.png"</span>,</div><div class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"img/tabbar/categorySelected.png"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/cart/cart"</span>,</div><div class="line">        <span class="attr">"text"</span>: <span class="string">"购物车"</span>,</div><div class="line">        <span class="attr">"iconPath"</span>: <span class="string">"img/tabbar/cart.png"</span>,</div><div class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"img/tabbar/cartSelected.png"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/mine/mine"</span>,</div><div class="line">        <span class="attr">"text"</span>: <span class="string">"我的"</span>,</div><div class="line">        <span class="attr">"iconPath"</span>: <span class="string">"img/tabbar/mine.png"</span>,</div><div class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"img/tabbar/mineSelected.png"</span></div><div class="line">      &#125; ]</div><div class="line">  &#125;&#125;</div></pre></td></tr></table></figure><p>上面配置项的显示效果如下图<br><img src="https://github.com/flowerField/Source/blob/master/Blog/wx05.png?raw=true" width="450px"></p><div></div><h4 id="请求超时和debug模式"><a href="#请求超时和debug模式" class="headerlink" title="请求超时和debug模式"></a>请求超时和debug模式</h4><p><strong><code>networkTimeout</code></strong>用于控制小程序中所有网络请求的超时时间(只能通过该配置项统一的配置)。</p><p><strong><code>debug配置项</code></strong>用于控制是否开启debug模式，默认情况下是关闭的，当debug模式设置为true之后在开发者工具的控制面板，所有的调试信息将以info的形式输。</p><div class="tip">说明：需要注意全局配置文件和页面配置文件的关系，当路由到对应页面的时候，页面配置文件的配置项将会覆盖全局配置</div><h3 id="2-0-逻辑控制文件-app-js"><a href="#2-0-逻辑控制文件-app-js" class="headerlink" title="2.0 逻辑控制文件(app.js)"></a>2.0 逻辑控制文件(app.js)</h3><p>app.js是小程序的整体逻辑控制文件，在该文件中通过<span style="color:#f82">App()函数</span>来注册小程序的生命周期函数、全局方法和全局属性，而且已经注册的小程序实例可以在其他的逻辑层代码中通过getApp()函数获取。</p><strong>App()函数用于注册一个微信小程序。</strong><br><strong>App()函数必须在app.js中注册，且不能注册多个。</strong><br><strong>App()函数的Object参数对象主要包括<code>生命周期函数</code>和其它数据，生命周期函数用于程序监听。</strong><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx06.png?raw=true"></p><p><strong>生命周期函数说明</strong></p><p>当启动一个微信小程序的时候，会首先依次触发<code>onLaunch</code>和<code>onShow方法</code>，然后通过app.json配置文件中的pages配置项来注册相应的页面，最后根据默认路径加载首页。当用户点击关闭标签或点击了设备的Home按钮离开微信的时候小程序并不会直接销毁，而是进入后台，这两种情况都会触发<code>onHide方法</code>，当再次打开微信小程序的时候会触发<code>onShow方法</code>。当小程序进入后台一定时间或者系统资源占用过高的时候会被真正的销毁。</p><p>注册小程序的示例代码(该代码可以在app.js文件通过敲入<code>App + Tab键</code>的方式生成)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">App(&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 当小程序启动，或从后台进入前台显示，会触发 onShow</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;&#125;,</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 当小程序从前台进入后台，会触发 onHide</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  onError: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;&#125;,</div><div class="line">  otherDate:<span class="string">'存放其他数据'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="3-0-全局样式文件-app-wxss"><a href="#3-0-全局样式文件-app-wxss" class="headerlink" title="3.0 全局样式文件(app.wxss)"></a>3.0 全局样式文件(app.wxss)</h3><p>WXSS是小程序基于CSS拓展的一套样式语言，它实现了CSS大部分规则。<br><strong>app.wxss是全局样式表，对项目中每个页面都有效</strong>，可以将一些系统级别的样式统一写入到该文件中。</p><div class="tip">注意：页面在渲染的时候，页面中的.wxss文件样式会覆盖app.wxss中相同的选择器样式。</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍开发微信小程序项目中的主体文件，这些文件的作用，以及具体的配置字段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[02]-小程序框架的文件体系</title>
    <link href="https://weibo.com/u/3800117445/2018/09/21/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97%5B02%5D-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E7%9A%84%E6%96%87%E4%BB%B6%E4%BD%93%E7%B3%BB/"/>
    <id>https://weibo.com/u/3800117445/2018/09/21/微信小程序系列[02]-小程序框架的文件体系/</id>
    <published>2018-09-20T16:00:01.000Z</published>
    <updated>2018-10-02T01:35:37.841Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍开发微信小程序项目中的体系结构和组成部分。</p></blockquote><h4 id="1-0-微信小程序框架体系"><a href="#1-0-微信小程序框架体系" class="headerlink" title="1.0 微信小程序框架体系"></a>1.0 微信小程序框架体系</h4><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx03.png?raw=true" height="300px"></p><p>微信小程序框架体系由两部分组成，分别是视图层和逻辑层。</p><p>视图层由<code>WXML</code>和<code>WXSS</code>组成，类似于前端开发中的HTML(标签)和CSS(样式)。</p><p>逻辑层是一套运行在本地JavaScript引擎中的JavaScript代码，负责调用数据处理方法来驱动视图更新。</p><p>微信小程序的整体开发流程非常接近前端<span style="color:#195">HTML + CSS + JavaScript</span>的模式,需要注意的是在小程序开发中没有DOM的概念的，本地也没有document和window等对象，更不能使用jQuery等类似的框架。</p><p>微信小程序中视图层和逻辑层的交互主要通过数据绑定和事件响应来实现，采用了单向绑定的机制。</p><p><strong>微信小程序的单向绑定机制</strong></p><p><span style="color:#f40">单向绑定机制需要先将逻辑层和视图层的数据与事件进行绑定，当页面需要修改的时候，逻辑层只需要调用特定的setData方法修改已经绑定的数据即可，这时候框架会自动触发WXML来重新渲染整个视图，当框架接收到用户的交互操作时会根据视图层绑定的事件执行逻辑层中对应的事件函数以进行响应</span>。</p><h4 id="2-0-微信小程序的结构"><a href="#2-0-微信小程序的结构" class="headerlink" title="2.0 微信小程序的结构"></a>2.0 微信小程序的结构</h4><p>微信小程序的开发工具下载并安装之后，我们可以来开始创建一个新的项目，如果没有appID那么可以选择使用测试账号。</p><p>项目初始化完成后，我们能够看到下面的界面。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx02.png?raw=true" height="300px"></p><p>整个开发界面大概可以分成工具选项区、模拟器显示区、调试区、代码目录和工作区，其中工作区、模拟器显示区和调试区均可以选择在关闭在打开中进行切换，这里我们主要关注项目初始化后的代码目录。</p><p>打印项目文件的目录结构(使用命令行操作，具体请参考<a href="http://wendingding.com/2018/04/11/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20Mac%E7%B3%BB%E7%BB%9F%E4%B8%ADTree%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">网络编程系列 Mac系统中Tree的使用</a>)如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app.js</div><div class="line">├── app.json</div><div class="line">├── app.wxss</div><div class="line">├── pages</div><div class="line">│   ├── index</div><div class="line">│   │   ├── index.js</div><div class="line">│   │   ├── index.wxml</div><div class="line">│   │   └── index.wxss</div><div class="line">│   └── logs</div><div class="line">│       ├── logs.js</div><div class="line">│       ├── logs.json</div><div class="line">│       ├── logs.wxml</div><div class="line">│       └── logs.wxss</div><div class="line">├── project.config.json</div><div class="line">└── utils</div><div class="line">    └── util.js</div></pre></td></tr></table></figure><p>在一个完成的小程序项目中，所有的文件可以划分为<strong><code>小程序框架主体文件</code></strong>和<strong><code>页面文件</code></strong>两类。</p><p><strong>① 小程序框架主体文件</strong>是系统级文件，每个项目中只有一份，他们分别是：</p><pre>  app.js文件      控制小程序整体逻辑，主要用于注册小程序全局实例。  app.json文件    控制小程序整体配置，配置小程序整体设置。  app.wxss文件    控制小程序整体样式，对所有页面的布局文件都有效。  project.config.json文件     整个项目的配置信息</pre><p><strong>② 页面文件</strong> 通常由四个文件组成，分别是<span style="color:#195">.wxml（结构）.wxss（样式）.js（逻辑）和.json（配置）</span>。框架规定，同一个页面的这四个文件必须具有相同的路径和文件名，在编译的时候它们将自动关联。在初始化后的项目中，pages文件夹下面拥有两个默认的页面，分别是index页面和logs页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍开发微信小程序项目中的体系结构和组成部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-0-微信小程序框架体系&quot;&gt;&lt;a href=&quot;#1-0-微信小程序框架体系&quot; class=&quot;headerlink&quot; title=&quot;1.0 微信
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序序列[01]-小程序开发的基础知识</title>
    <link href="https://weibo.com/u/3800117445/2018/09/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%B3%BB%E5%88%97%5B01%5D-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://weibo.com/u/3800117445/2018/09/20/微信小程序系列[01]-小程序开发的基础知识/</id>
    <published>2018-09-19T16:00:00.000Z</published>
    <updated>2018-10-02T01:33:48.727Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍在开发微信小程序需要的初步知识。</p></blockquote><h3 id="1-0-简单说明"><a href="#1-0-简单说明" class="headerlink" title="1.0 简单说明"></a>1.0 简单说明</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx.png?raw=true" height="200px"></p><p>微信小程序于2016年9月21日内测。</p><p>微信小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。</p><p>微信小程序是一种不需要下载安装就可以使用的应用，它实现了应用触手可及的梦想，用户只需要使用微信扫一扫或者简单搜索即可安装和使用，而且能够”用完就走”。</p><p>微信小程序本身采用了类似于React Native和Weex一样的解析技术，开发者能够编写一套代码在多端(移动端和浏览器)运行，同时相比公众号的H5应用而言小程序又具备更好的原生体验。</p><p>微信小程序与订阅号、服务号和企业号是并行的体系，具有独立的注册、发布流程，在正式开发小程序之前需要先在<a href="mp.weixin.qq.com">微信公众平台上面注册</a>。</p><h3 id="2-0-小程序的注册和开发的基本流程"><a href="#2-0-小程序的注册和开发的基本流程" class="headerlink" title="2.0 小程序的注册和开发的基本流程"></a>2.0 小程序的注册和开发的基本流程</h3><p><strong>注册范围</strong></p><p><span style="color:#19f">个人</span>：由自然人注册和运营的公众帐号。<br><span style="color:#19f">媒体</span>：报纸、杂志、电视、电台、通讯社、其他等。<br><span style="color:#19f">其他</span>：不属于政府、媒体、企业或个人的类型。<br><span style="color:#19f">企业</span>：企业、分支机构、个体工商户、企业相关品牌。<br><span style="color:#19f">政府</span>：国内、各级、各类政府机构、事业单位(ex 公安、党团、司法、交通机构)等。</p><p><strong>基本流程</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wx01.png?raw=true"></p><p><strong><code>[001] 注册</code></strong></p><p>  <strong>1.填写账号信息</strong> 具体信息包括邮箱[没有被公众号 &amp; 开放平台 &amp; 个人微信绑定] 密码 验证码 勾选协议。</p><p>  <strong>2.邮箱激活说明</strong> 注册之后需要进入注册时使用的邮箱查看邮件，并激活公众平台帐号。</p><p>  <strong>3.用户信息登记</strong> 该步骤需要确认你的微信公众帐号主体类型，并请按照对应的类别进行信息登记。</p><p>  政府、媒体、其他组织类型帐号，必须通过微信认证验证主体身份。</p><p>  企业类型帐号需要通过公司的对公账户向腾讯公司打款来验证或者通过微信认证验证主体身份并支付300元认证费。</p><p>  个人类型账号需要的信息主要有：<br>   <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[a] 身份证姓名(信息审核成功后身份证姓名不可修改)</div><div class="line">[b] 身份证号码(一个身份证号码只能注册5个小程序)</div><div class="line">[c] 管理员手机(需要短信验证)</div><div class="line">[d] 管理员身份验证（使用管理员本人的微信来扫描二维码，成为管理员后需合法、合理地谨慎操作..）</div></pre></td></tr></table></figure></p><p><strong><code>[002] 完善信息</code></strong></p><p>  进入到小程序首页后，查看小程序发布流程，填写小程序相关的信息。</p><p>  需要填写的主要信息包括：<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">小程序的名称(30字以内)   ex: 用于演示的Demo</div><div class="line">小程序的头像(小于2MB 建议png格式)</div><div class="line">小程序的介绍(120内)</div><div class="line">正确选择小程序的服务类目，有餐饮、生活服务、体育、快递与邮政业等。</div></pre></td></tr></table></figure></p><p><strong><code>[003] 开发微信小程序</code></strong></p><p>  注册成功后，进入到开发首页，选择普通小程序开发者工具下载对应的开发工具安装。</p><p>  如果是多人合作开发请添加并配置相关的开发者成员。</p><p>  绑定开发者说明：<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">（1）个人主体小程序最多可绑定5个开发者，10个体验者。</div><div class="line">（2）未认证的组织类型小程序最多可绑定10个开发者，20个体验者。</div><div class="line">（3）已认证的小程序最多可绑定20个开发者，40个体验者。</div></pre></td></tr></table></figure></p><p>  获取AppID:<code>进入“设置-开发设置”，获取AppID信息</code></p><p><strong><code>[004] 版本发布</code></strong></p><p>  需要先提交代码，然后提交审核，审核通过后发布。      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍在开发微信小程序需要的初步知识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-0-简单说明&quot;&gt;&lt;a href=&quot;#1-0-简单说明&quot; class=&quot;headerlink&quot; title=&quot;1.0 简单说明&quot;&gt;&lt;/a&gt;1.0 简单说
      
    
    </summary>
    
    
      <category term="微信小程序序列" scheme="https://weibo.com/u/3800117445/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 [013]-寻找无双</title>
    <link href="https://weibo.com/u/3800117445/2018/09/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20%5B013%5D-%E5%AF%BB%E6%89%BE%E6%97%A0%E5%8F%8C/"/>
    <id>https://weibo.com/u/3800117445/2018/09/01/读书笔记 [013]-寻找无双/</id>
    <published>2018-08-31T16:11:18.000Z</published>
    <updated>2018-09-21T08:46:34.856Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">按：寻找无双这本书很多年前就看过了，在我老家的书柜里还存放着两套全新的王小波全集，前段时间刚巧在体育中心新华书店看到了十月文艺出版社出版的精装版本，遂又买了其中的“寻找无双”领回家中重读，还是当年的味道，却也有很多东西不同了。这篇文章将分成两个部分，一为我自己的碎碎念，一为原著的碎片摘写。</div><div style="color:#195; font-size:20px">※·※ 碎碎念 ※·※</div><p>我喜欢阅读，更喜欢买书。</p><p>这样的习惯持续了很多年，因为早期能接触到的书很少，所以我喜欢对一本书反复阅读，因着这层原因我竟发现很多书读一遍和读N遍其体会很不一样。很多年过去了，朋友们也都一个个三十而立，周遭保持阅读的人似乎越来越少，其实我也一样。而且现在不比从前，以前也没有太多的钱用来买书，往往拿到一本喜欢的新书后可能半天甚至一天就读完，现在我常常的是买的多，读的少，甚至很多书买来后从来不读。</p><p>这有很多的原因。</p><p>脱离了学生的身份，生活压力开始变大，个人的空间和时间被压缩这些都是客观事实。更深层的原因是我也很难再找到一本自己喜欢的书，可能是个人胃口实在刁钻吧。</p><p>今天回头来看，我早已记不清楚是什么开始接触王小波老师的。</p><p>也许是高中的时候，更或许更早一些（我接触的第一本课外书是钱钟书先生的围城没上初中）。</p><p>王小波的作品给我带来很多说不清的东西，不论是黄金时代还是绿毛水怪或者其它。在阅读时我获得了很多了乐趣和思考，也有幸接触到了其它大师的一些作品，这里说声感谢。</p><div style="color:#195; font-size:20px">※·※ 寻找无双 ※·※</div><div style="color:#F45; font-size:18px">※·※ 第一章 ※·※</div><p>建元年间，王仙客到长安城里找无双，据他自己说，无双是这副模样：矮矮的个子，圆圆的脸，穿着半截袖子的小褂子和半截裤管的半短裤，手脚都被太阳晒得黝黑，眉毛稀稀拉拉的。头上梳了两把小刷子，脚下蹬了一双塌拉板，走到哪里都是哗啦啦的响。就这个样子而言，可以说是莫辨男女。</p><p>王仙客在宣阳坊里打听无双时，人人都说没见过。</p><p>王仙客到宣阳坊找无双，宣阳坊是个大院子，周围围着三丈高的土坯墙。</p><p>王仙客说，以前他在宣阳坊里住过。</p><p>王仙客长了一个大个子，穿一身柞蚕丝的白袍子，粉白的面孔，<span class="propT">飘飘然有神仙之姿</span>。宣阳坊里的各位君子一见到他，就有似曾相识之感，但却想不起他的名字。这王仙客也确实可疑，他说来找无双，但是却找不到无双的家门口。他说坊中间的空院子就是无双原来的家，但是那个院子人人都知道，是个废了的尼姑庵。</p><p>大家又告诉他说，可能你记错了地方。也许令表妹不住在宣阳坊，而是在别的坊。您要知道，长安城里七十二坊，有好几个外表一模一样。听了这些话，王仙客自己也说，很可能记错了，骑上马到别的坊里去找了。王仙客初次在宣阳坊找无双，情形就是这样。宣阳坊里的各位君子后来提起这件事，是这么说的：三句话就把那小子打发走了；感觉很是痛快。</p><p>王仙客到宣阳坊里找无双，来过许多次。</p><p>后来王仙客就在宣阳坊里住下来，寻访无双的下落。他又向所有的人打听无双，并且说，那位无双不但是他的表妹，而且他们还有婚姻之约。这次他从山东来，带来了金一提，银一驮，作为聘礼，要把无双接回山东去。</p><p>其实大伙都不想理睬王仙客，知道他不是自己人；但是见他打赢了官司，也都有点害怕。</p><p><span style="color:#f23">虽然不是个废尼庵，却是个废道观。</span></p><p>王仙客住在宣阳坊的客栈里，这个客栈就在那所空院子对面。不管别人怎么说，他都不相信那是个空道观。因为那所院子既不像尼庵，也不像道观，就像个官宦人家住的院子。除此之外，他还千真万确的记得，无双家就住在这里，不在别的地方。</p><p>王仙客住在空院子对面的的客栈里，要了一间楼上的房子，从窗户里看那院子。这里离那院子隔了一条大街，而且空院子的房上长了很高的荒草，所以看不大的确。他就跑到波斯人的铺子里买了一架单眼望远镜来。当时的望远镜技术不过关，看到的景象是倒的。所以他就在房梁上拴上绳子，捆住了脚，头朝下的看。但是房顶上的草还是要挡住视线，所以他又去买了一些兔子，把它们扔到空院子的房上。兔子在房上下不来，就把草都吃掉了。经过了这些努力，他终于可以像看眼前的景物一样看到那个空院子了。但是那些兔子有公有母，在房顶上繁殖起来，并且始终不能下地，最后成了很大的灾害。它们在房顶上跑来跑去，吃光了瓦房上的茅草和瓦松，就吃草房上的房草，还在房上打洞筑巢。</p><p>这一切又在宣阳坊里引起了很大的骚乱，但是<span style="color:#195">王安老爹对此却毫无办法，因为这个王仙客很有钱</span>。</p><p>王安老爹说，创世之初，世间就有两种人存在。一种人是我们，另一种是奸党。到了大唐建元年间，世上还有两种人存在，一种人依旧是我们，另一种依旧是奸党。这是老爹的金玉良言。到了今天，世上仍然有两种人，一种还是我们，另一种还是奸党。</p><p>他从山东跋山涉水来到这里，吃了无数的苦，花了无数的钱，到最后连要找的人是谁都出了问题。</p><p>王仙客觉得最奇怪的是他和这位鱼玄机没有任何关系，别人却不厌其烦地把她的事讲给他听。这个故事有头有尾，却没有中段。</p><p>宣阳坊里的罗老板大约有五十岁，长得很富态。年轻时读过几本书，人也很文静。他给王仙客讲这些故事时，一手托着三络长髯，另一手用两根手指捏着茶杯的手柄，这个样子当得起四个字：不辱斯文。虽然他是个商人，但王仙客对他颇有亲近之感。也是因为这个原因，王仙客觉得他的话格外可信。除此之外，罗老板还说，我告诉你的话都是我亲眼所见，耳闻的我不说。</p><p>那辆车是一队白羊拉的小四轮车，车上铺了一块鲜红的猩猩毡。鱼玄机斜躺在毡上，衣着如前所述，披散着万缕青丝，一手托腮，嘴角叼了一朵山茶花，一付若有所思的模样。脸上虽然没有血色，却更显得人如粉雕玉琢，楚楚可怜。鱼玄机上法场时就是这个模样。在三绞毕命之前，鱼玄机走上台子，用手向后撩起头发，让刽子手往她脖子上系绞索。那时候她还笑着对刽子手说：呆会儿可别太使劲了。我的脖子是很细的哟！</p><p><span style="color:#195">鱼玄机的手十指纤长，指甲涂丹；长发委地，光可鉴人，十分好看。</span></p><p>仙姑，人间法度。</p><p>大家都以为他走了再不会回来，谁知他出尔反尔，去了半年又跑回来。不但如此，他还大发雷霆，说宣阳坊里住了一窝骗子。原来他不知从哪里打听出来，鱼玄机已经死了整整二十年了，而他和无双分手，不过是没几年的事。所以他就有了个怪念头，说是鱼玄机死了以后，无双一家才搬到那院子里去。</p><p>王仙客到了宣阳坊里，马上就知道无双很难找到。因为有了这样的思想准备，一时找不到无双不会让他气馁。与他相比，宣阳坊里的各位君子对他会旷日持久地找下去却缺少思想准备。</p><div style="color:#F45; font-size:18px">※·※ 第二章 ※·※</div><p>王仙客到长安城去找无双那一年，正好是二十五岁。</p><p>人在二十五岁时，什么事情都想干，但是往往一事无成。</p><p>后来王仙客找到了处死鱼玄机的刽子手，请他去喝酒。那时候他还急于找到无双，忙于印刷寻人张贴，和黑社会联络，向京城的巡检司行贿，忙了个四脚朝天。</p><p>事情办完后，双手抽筋，请了好几天假，少杀了好几个人。这是不小的损失，因为刽子手拿的是计件工资。</p><p>这是因为只要有一点钱，死刑犯都要雇一伙刽子手来杀自己。假如没钱，只好由公家的刽子手来杀了。<span style="color:#f34">那些人杀人挣不到钱，就不好好杀</span>。有时候半天杀不死，有时候杀得乱七八糟，砍头时砍到脚面上。其实每个刽子手都是两样买卖都干的，只是干公家刽子手时，管犯人叫贼子、死囚等等，还要动手打人。当私人刽子手时，管犯人叫东家，也不动手打。</p><p><span style="color:#520">但是鱼玄机却兴高彩烈，说道：再过一会儿就要死了，可真不容易呀</span>。</p><p>只要她身上还有值一文钱的东西，就永不得安生，因为中国人有盗墓的习惯，还因为偷死人的东西最安全。</p><p>梦醒了以后，他有好一阵子若有所思，觉得这个梦非同凡响。最后他想了起来，鱼玄机管她的使女叫彩萍，她的使女的确是叫彩萍。而无双的使女也叫彩萍。鱼玄机和无双的近似之处原来是这样的呀。</p><p>王仙客去找无双时，只有二十五岁。人在那个年龄虽然聪明，却不能达练人情，难免要碰钉子。</p><p>他到宣阳坊找无双，听别人讲了一阵鱼玄机，自己都不知自己要找谁了。假如他达练人情，就不会轻易相信别人的话。</p><p>王仙客在宣阳坊，所持仗的就是自己的智慧。可惜的是，他的智慧解决不了眼前的问题。</p><div style="color:#F45; font-size:18px">※·※ 第三章 ※·※</div><p>宣阳坊里各位君子对王仙客有如下结论：他是个来历不明的色鬼，流氓，丧门星。</p><p>王仙客到宣阳坊里来时，正是初春。转眼间，他就呆了六个月了，已经到了秋季。过去没人见过他，他要找的人也没人认识；他的生殖器像公驴一样；他对牛粪的态度也很反常。有关第一点，人们说，谁知他是从哪里跑来的。有关第二点，人们说，我要是有女儿，情愿打死了喂狗，也不嫁给他。有关第三点，人们说，这家伙一看就是个油瓶子倒了也不知道扶的公子哥儿。</p><p>他们根本就不懂什么叫公子哥儿，公子哥儿还管点多少灯油吗？就算是自己买灯油，他也记不住熄灯。</p><p>现在我是一个至诚君子，当年却是个尖刻、恶毒的中学生，阴毒有如妇人，不肯放弃任何一个叫人难过的机会。</p><p>可怕的是，这样的事不仅仅是梦，好像以前真的干过。</p><p>总而言之，鱼玄机本身就是个凄婉的梦，充满了色情和暴力。王仙客受到了吸引，就逐渐迷失在其中。</p><p>王仙客到长安来时，带来了一驮银子，到了那年的秋天，那一驮银子已经花完了，连驮银子的骡子也卖了。他整天在房子里围着被子冥思苦想，不知不觉钱都花光了，马也卖了。等到没了钱，孙老板就叫来了王安老爹，把他撵了出去，这时候他明白了自己要找的东西是什么：既不是无双，也不是鱼玄机，而是买一碗阳春面充饥的钱。</p><p>我们北京人有句老话说，有什么都别有病，没什么都别没钱。这的确是至理明言。</p><p>先是被人说成鱼玄机的老相好，搞得精神崩溃；后来又发现一文不名，简直要饿死了。幸亏这两种悲惨处境是不兼容的：精神崩溃的人总是有一点钱，一点钱没有的人不会精神崩溃。</p><div style="color:#F45; font-size:18px">※·※ 第四章 ※·※</div><p>小时候我常做这样的梦，先是梦到了洪水猛兽，吓得要命。猛然想起自己是睡着了的，就从梦里惊醒。后来又遇到了洪水猛兽，又吓得要了命。仔细一想，自己还是没有真醒，或者是又睡了，就又醒一回。</p><p>王仙客被撵出宣阳坊时，身上一文不名，而且恍恍惚惚。时值秋末冬初，天相当冷。所以很让人耽心他会冻饿而死。但是他很平安地过了冬，而且到了第二年，体重还有八十多公斤。这件事情告诉我们，千万不要低估了人适应各种环境的能力。</p><p>女主人说，难得这么体面的一条汉子，要是肯来当王八就好了。她们都想嫁给他。</p><p>王仙客长得很体面，飘飘然有神仙之姿。虽然穷得要饭，身上的衣服却是干干净净。除此之外，他的嘴又特别甜，见了窑子里的姑娘，不管她长得什么样，总是要说：你真漂亮！我都要晕倒了。当时不知有多少妓女要为他自杀，但是王仙客并没有当王八。</p><p>王仙客挣了一些钱后，他就从妓女家里搬了出来，自己租房子住。偶尔还到妓女家里打打杂，但是不再是为了谋生，而是为了拉交情。</p><p>王仙客在宣阳坊被人看成了色鬼，公子哥儿，来历不明的家伙，声明狼籍。但是在酉阳坊里就没人说他坏话。因为这里住的都是些坏蛋，就显得他道德清高。他在这里不但发了财，而且找到她了。</p><p>王仙客坐在四面拉门中间，就像午夜里站到了十字路口，有四个月亮从四条路上照来。</p><p>梦具有一种荒诞的真实性，而真实有一种真实的荒诞性。除了这种感觉上的差异，他说不出这两者之间有什么区别。</p><p>他大叫一声道：原来你是彩萍！我可找到你了。</p><p>王仙客虽然找到了彩萍，但是无双还是下落不明。原来就在王仙客回山东去了没多久，长安就闹了一场兵乱。无双一家人到城外躲难，走到城门口，正遇上叛军攻城，加上地痞流氓趁乱起哄，那里就乱成了一锅粥。那时候彩萍和无双家失散了，等到乱定后再去找，那一大家人就变得无影无踪。不但找不到人，连街坊都不承认有这家人。这件事真是古怪得很。</p><p>就我所知，人多了也能成为很大的灾害，丝毫不在兔子的灾害之下；当然我这样说不是想发起什么灭人的斗争——这种斗争只有大人物才能发动起来((⊙o⊙)…  这影射文革的呢噢)。</p><p>他挣这样的钱，也是有原因的。他还要再回宣阳坊，找到无双。要干这样的事，没有很多钱是不行的。要干这样的事，没有彩萍也不成。现在虽然有了钱，又有了彩萍，还需要一个计划。而想好一个计划，就需要很多时间。</p><div style="color:#F45; font-size:18px">※·※ 第五章 ※·※</div><p>鱼玄机伏法那一天，长安城里的人听说要把她勒死，就把一切都扔下跑来看。罗老板当然也在其中。后来他说鱼玄机死时视死如归等等，其实全是他在犯腻歪。鱼玄机从车上下来时两腿如筛糠，几乎站不住了。她哆哆嗦嗦地对刽子手说：怎么来了这么多人看我死！都和我有仇吗？我什么时候得罪了这么多人？</p><p>有关那一天刑场上人多，可以这样形容，真正达到了万人空巷，挥汗成雨。</p><p>根据这些事实，罗老板告诉王仙客的事情不对，那天长安街头没有绞死一个视死如归的大美人，倒是勒死了一个哆哆嗦嗦的灰眼睛姑娘。</p><p>从前孟夫子说：人之所以异于禽兽者，几稀。几稀不是没有。在我看来，稀就稀在有认罪伏法的态度这一点上。因此我认为一般来说，骂人是不对的。但是也不能一概而论，这和到了什么时候大有关系。假如到了那会儿，就真是不骂白不骂了。</p><div style="color:#F45; font-size:18px">※·※ 第六章 ※·※</div><p>建元年间，王仙客和彩萍到宣阳坊里找无双，和单独来时大不一样。</p><p>王仙客第二次到宣阳坊找无双，他知道宣阳坊是恨人有笑人无的地方。</p><p>王仙客现在阔了，但是却没人恨他。因为他太阔，恨起来恐怕要把自己气死了，只能找个软一点的来恨恨。假如我著作等身，就要得诺贝尔文学奖，也就没人来恨我。</p><p>据说监狱里的狱官和刽子手订有协定，前者给后者介绍了生意，大家五五分成。</p><p>王仙客进了这个院子，发现里面空空如也。窗户纸全破了，门窗上的油漆全剥落了，房子里的东西全都没有了。只剩下正房里孤伶伶一把太师椅。这件家具虽然孤单，但是寓意深远。这是因为别的家具都可以搬走，安放在其它地方，只有它不能安放在其它地方。当时的人相信，一家之主的坐位，放到别的地方就会闹鬼。</p><p>要知道，现在人心不古，世道浇漓，什么人都有。</p><p>这件事说到头就是一句话，王仙客太有钱了，叫人害怕。</p><p>王仙客搬到宣阳坊半个月，房上的兔子已经非常少了。偶尔还能看见一只，总是蹲在房顶上最高的地方一动不动，就像白天的猫头鹰一样。那些兔子的危险来自天上，但是它们老往地下看。</p><p>鱼玄机在临终时骂起人来，这样很不雅。但是假设有人用绳子勒你脖子，你会有何感触呢？是什么就说什么，是一件需要极大勇气的事；但是假定你生来就很乖，后来又当了模范犯人，你会说什么呢？我们经常感到有一些话早该有人讲出来，但始终不见有人讲。我想，这大概是因为少了一个合适的人去受三绞毕命之刑罢。</p> <div style="color:#F45; font-size:18px">※·※ 第七章 ※·※</div><p>王仙客和彩萍在宣阳里找无双，我认为宣阳坊是个古怪地方，这里的事情谁都说不太准，就好像爱丽丝漫游奇境，谁知走到下一步会出什么事。但是王仙客不这样想。王仙客觉得一切都有成竹在胸。他住进宣阳坊那座大宅子里，觉得日子过得飞快。寻找无双的过程，就像蚂蚁通过迷宫。开头时，仿佛有很多的岔路，每一条路都是艰巨的选择。首先，他要确定自己是不是醒着，其次要确定无双是不是存在，最后则是决定到哪里找无双。现在这些问题都解决了，只剩下了最后一个问题：无双到哪儿去了。</p><p>假如你是一只猪，生活在暗无天日的猪圈里，就会把在吃猪食看作极大的幸福，因此忘掉早晚要挨一刀。所以猪的记性是被逼成这样子的，不能说是天生的不好。</p><p>要是您能证明她是骗子，我一定送她去打板子。打坏了不就是掏点医疗费吗？就是把屁股打没了，要装金屁股，咱也掏得起。<br>那一年叛军逃走后，长安正是七月流火，天气很热。</p><p>。皇帝听说了和见到了这种情况，觉得把长安七十二坊都洗荡一遍不划算。他就下了一道圣旨：其余七十一坊，只要交出占人口总数百分之五的附逆分子，就准许他们投降。但是官员不按此百分比计算。凡是城陷时身在城内的官员，有一个算一个，都是附逆分子。</p><p>王仙客住在宣阳坊，布下了疑阵，等待别人自己上门告诉他无双的事。等了半个月，只来了一个老爹。老爹只说彩萍是假无双，却没说出谁是真无双。王仙客对老爹原来就没抱很大期望，因此也没很失望。</p><p>王仙客去宣阳坊找无双，自己装成了大富翁，并把彩萍打扮得奇形怪状。这就好比我知道这次分房子没有我，就剃个大秃头，穿上旗袍出席分房会。这样也可能找到无双，也可能找不到；也可能分到了房子，也可能分不到。不管怎么说，假如事情没了指望，就可以胡搅它一下，没准搅出个指望来。王仙客的举动堪称天才，我的举动就不值这么高的评价，因为我抄袭了医学的故智。在我们医院里，假如有人死掉，心脏不跳了，就用电流刺激他的心脏。这样他可能活过来，于是刺激就收到了起死回生之效；当然他也可能继续死去，这也没什么，顶多把死因从病死改做电死。王仙客在法拉第之前就知道用强刺激法去治别人的记性，实在是全体王姓一族的光荣。</p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.516it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.5it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;按：寻找无双这本书很多年前就看过了，在我老家的书柜里还存放着两套全新的王小波全集，前段时间刚巧在体育中心新华书店看到了十月文艺出版社出版的精装版本，遂又买了其中的“寻找无双”领回家中重读，还是当年的味道，却也有很多东西不同了。这篇文章将分成两个部
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://weibo.com/u/3800117445/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>jQuery系列 [10]-jQuery框架源码解读[结构]</title>
    <link href="https://weibo.com/u/3800117445/2018/08/24/jQuery%E7%B3%BB%E5%88%97%20%5B10%5D-jQuery%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%5B%E7%BB%93%E6%9E%84%5D/"/>
    <id>https://weibo.com/u/3800117445/2018/08/24/jQuery系列 [10]-jQuery框架源码解读[结构]/</id>
    <published>2018-08-24T10:01:02.000Z</published>
    <updated>2018-08-24T15:36:23.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章将主要介绍jQuery框架的前600行代码并说明jQuery框架的整体结构。</p></blockquote><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>这里先简单贴出jQuery框架3.3.1版本中的前600行代码，其它和整体结构无关的部分省略了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> * jQuery JavaScript Library v3<span class="number">.3</span><span class="number">.1</span></div><div class="line"> * https:<span class="comment">//jquery.com/                  官网地址</span></div><div class="line"> *</div><div class="line"> * Includes Sizzle.js</div><div class="line"> * https:<span class="comment">//sizzlejs.com/                核心选择器</span></div><div class="line"> *</div><div class="line"> * Copyright JS Foundation and other contributors</div><div class="line"> * Released under the MIT license    开源协议</div><div class="line"> * https:<span class="comment">//jquery.org/license           开源协议地址</span></div><div class="line"> *</div><div class="line"> * <span class="built_in">Date</span>: <span class="number">2018</span><span class="number">-01</span><span class="number">-20</span>T17:<span class="number">24</span>Z    更新(发布)时间</div><div class="line"> *<span class="regexp">/</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/jQuery的外城结构是一个闭包(即时调用函数)</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/整体结构可以抽象为(fn)(....)</span></div><div class="line"><span class="regexp">( function( global, factory ) &#123;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">"use strict"; /</span><span class="regexp">/开启严格模式</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/判断的当前的环境是否是CommonJs</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/说明：CommJs 环境中会有一个 module 对象，这个对象上会有一个 exports 对象</span></div><div class="line"><span class="regexp">if ( typeof module === "object" &amp;&amp; typeof module.exports === "object" )</span></div><div class="line"><span class="regexp">&#123;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ For CommonJS and CommonJS-like environments where a proper `window`</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ is present, execute the factory and get jQuery.</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ For environments that do not have a `window` with a `document`</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ (such as Node.js), expose a factory as module.exports.</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ This accentuates the need for the creation of a real `window`.</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ e.g. var jQuery = require("jquery")(window);</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ See ticket #14549 for more info.</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/如果在 CommonJs 环境下，那么将 jQuery 对象挂载到 module.exports 对象</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/factory函数的第二个参数传递为true,表示将不会在window上注册jQuery对象</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/因为可能运行在非浏览器下，所有对global.document进行检查</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/如果global.document有值，那么调用factory( global, true )得到结果赋值给module.exports</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/如果global.document没有值(在非浏览器环境下)，我们没有window对象，那么就需要自己创建了一个模拟浏览器的环境</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/传入自己的 window 对象，这种情况下 jQuery 对象将绑定到你传入的这个特殊的 window 对象上</span></div><div class="line"><span class="regexp">module.exports = global.document ?</span></div><div class="line"><span class="regexp">factory( global, true ) :</span></div><div class="line"><span class="regexp">function( w ) &#123;</span></div><div class="line"><span class="regexp">if ( !w.document ) &#123;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/如果没有document,那么就抛出错误信息</span></div><div class="line"><span class="regexp">throw new Error( "jQuery requires a window with a document" );</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">return factory( w );</span></div><div class="line"><span class="regexp">&#125;;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">else</span></div><div class="line"><span class="regexp">&#123;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/如果不是在 CommonJs 环境下，直接执行工厂函数</span></div><div class="line"><span class="regexp">        /</span><span class="regexp">/调用函数的时候传递一个参数(window|this),第二个参数没有传值，默认为undefined</span></div><div class="line"><span class="regexp">factory( global );</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Pass this if window is not defined yet</span></div><div class="line"><span class="regexp">    /</span><span class="regexp">/实参说明：第一个参数(global)的值为window 或者 是当前上下文this,第二个参数为函数</span></div><div class="line"><span class="regexp">&#125; )( typeof window !== "undefined" ? window : this, function( window, noGlobal )</span></div><div class="line"><span class="regexp">&#123;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Edge &lt;= 12 - 13+, Firefox &lt;=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ enough that all such attempts are guarded in a try block.</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/开启严格模式</span></div><div class="line"><span class="regexp">"use strict";</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/声明变量</span></div><div class="line"><span class="regexp">var arr = [];</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/获取document文件</span></div><div class="line"><span class="regexp">var document = window.document;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存Object对象上获取原型对象的方法</span></div><div class="line"><span class="regexp">var getProto = Object.getPrototypeOf;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存数组中截取元素的方法</span></div><div class="line"><span class="regexp">var slice = arr.slice;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存数组中合并数组的方法</span></div><div class="line"><span class="regexp">var concat = arr.concat;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存数组中添加元素的方法</span></div><div class="line"><span class="regexp">var push = arr.push;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存数组中返回元素索引的方法</span></div><div class="line"><span class="regexp">var indexOf = arr.indexOf;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/初始化空的对象</span></div><div class="line"><span class="regexp">var class2type = &#123;&#125;;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存&#123;&#125;.toString方法,其实是Object.prototype.toString方法</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/该方法用于获取指定对象的类型和真实构造函数 ex: [object String]</span></div><div class="line"><span class="regexp">var toString = class2type.toString;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存检查是否是实例成员的方法</span></div><div class="line"><span class="regexp">var hasOwn = class2type.hasOwnProperty;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存 Object.prototype.hasOwnProperty.toString方法</span></div><div class="line"><span class="regexp">var fnToString = hasOwn.toString;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存 Object.prototype.hasOwnProperty.toString.call(Object) 方法</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/==&gt; "function Object() &#123; [native code] &#125;"</span></div><div class="line"><span class="regexp">var ObjectFunctionString = fnToString.call( Object );</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 初始化空的对象</span></div><div class="line"><span class="regexp">var support = &#123;&#125;;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 工具函数：检查传入的对象是否是函数类型的</span></div><div class="line"><span class="regexp">var isFunction = function isFunction( obj ) &#123;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">      /</span><span class="regexp">/ Support: Chrome &lt;=57, Firefox &lt;=52</span></div><div class="line"><span class="regexp">  /</span><span class="regexp">/浏览器的支持情况</span></div><div class="line"><span class="regexp">      /</span><span class="regexp">/ In some browsers, typeof returns "function" for HTML &lt;object&gt; elements</span></div><div class="line"><span class="regexp">  /</span><span class="regexp">/ 在很多的浏览器中对HTML对象节点执行typeof会返回 function</span></div><div class="line"><span class="regexp">      /</span><span class="regexp">/ (i.e., `typeof document.createElement( "object" ) === "function"`).</span></div><div class="line"><span class="regexp">  /</span><span class="regexp">/ 在ie中typeof document.createElement( "object" )的结果为function</span></div><div class="line"><span class="regexp">      /</span><span class="regexp">/ We don't want to classify *any* DOM node as a function.</span></div><div class="line"><span class="regexp">  /</span><span class="regexp">/ 在检查函数的时候排除任何的DOM节点</span></div><div class="line"><span class="regexp">  /</span><span class="regexp">/ 注：DOM节点均拥有nodeType属性，属性值为number类型，根据具体的数值不同来进行区分 1为元素节点 2为属性节点</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">      return typeof obj === "function" &amp;&amp; typeof obj.nodeType !== "number";</span></div><div class="line"><span class="regexp">  &#125;;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/工具函数：检查传入的参数是否是window</span></div><div class="line"><span class="regexp">var isWindow = function isWindow( obj ) &#123;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/检查window的方式  window = window.window 即window对象本身拥有window属性来标名自己是window</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/null不能拥有任何的属性，排除null</span></div><div class="line"><span class="regexp">return obj != null &amp;&amp; obj === obj.window;</span></div><div class="line"><span class="regexp">&#125;;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/保存script属性的字面量对象:类型|资源|noModule</span></div><div class="line"><span class="regexp">var preservedScriptAttributes = &#123;</span></div><div class="line"><span class="regexp">type: true,</span></div><div class="line"><span class="regexp">src: true,</span></div><div class="line"><span class="regexp">noModule: true</span></div><div class="line"><span class="regexp">&#125;;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 该方法作为 $.globalEval();方法的内部实现,作用类似于js原生的eval方法</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ $.globalEval( "var a = 1;" );方法其实就是调用 DOMEval("var a = 1;");</span></div><div class="line"><span class="regexp">function DOMEval( code, doc, node ) &#123;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">     /</span><span class="regexp">/如果doc没有值,那么初始化为document</span></div><div class="line"><span class="regexp">doc = doc || document;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/创建空的script标签</span></div><div class="line"><span class="regexp">var i,</span></div><div class="line"><span class="regexp">script = doc.createElement( "script" );</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/设置script标签的文本内容</span></div><div class="line"><span class="regexp">script.text = code;</span></div><div class="line"><span class="regexp">if ( node ) &#123;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/循环preservedScriptAttributes对象</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/把node节点中的type &amp;&amp; src &amp;&amp; noModule拷贝给script标签</span></div><div class="line"><span class="regexp">for ( i in preservedScriptAttributes ) &#123;</span></div><div class="line"><span class="regexp">if ( node[ i ] ) &#123;</span></div><div class="line"><span class="regexp">script[ i ] = node[ i ];</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/doc.head 表示访问页面中的header头部标签</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/把先创建的script标签插入到页面然后删除掉</span></div><div class="line"><span class="regexp">doc.head.appendChild( script ).parentNode.removeChild( script );</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/获取参数对应的数据类型</span></div><div class="line"><span class="regexp">function toType( obj ) &#123;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 如果参数是null,那么就返回"null"</span></div><div class="line"><span class="regexp">if ( obj == null ) &#123;</span></div><div class="line"><span class="regexp">return obj + "";</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Support: Android &lt;=2.3 only (functionish RegExp)</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 如果typeof的结果为object 或者是function 那么就通过class2type[ toString.call( obj ) ]方法计算</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ class2type[ toString.call( obj ) ] 其实就是Object.prototype.toString.call(obj) 形式</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 如果toString方法计算的结果为false,那么就返回object,否则返回typeof obj的值</span></div><div class="line"><span class="regexp">return typeof obj === "object" || typeof obj === "function" ?</span></div><div class="line"><span class="regexp">class2type[ toString.call( obj ) ] || "object" :</span></div><div class="line"><span class="regexp">typeof obj;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">/</span>* global <span class="built_in">Symbol</span> *<span class="regexp">/</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Defining this global in .eslintrc.json would create a danger of using the global</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ unguarded in another place, it seems safer to define global only for this module</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">var</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 当前版本</span></div><div class="line"><span class="regexp">version = "3.3.1",</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Define a local copy of jQuery 定义jQuery的本地副本</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ jQuery工厂函数的定义(声明)</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 参数1 ： 选择器</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 参数2 :  上下文对象</span></div><div class="line"><span class="regexp">jQuery = function( selector, context ) &#123;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ The jQuery object is actually just the init constructor 'enhanced'</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Need init if jQuery is called (just allow error to be thrown if not included)</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ jQuery.fn,init 作为构造函数，这里返回的其实是jQuery.fn.init构造函数的实例化对象</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 调用jQuery函数的时候其实是以构造函数的方式调用 xxx...init函数</span></div><div class="line"><span class="regexp">return new jQuery.fn.init( selector, context );</span></div><div class="line"><span class="regexp">&#125;,</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Support: Android &lt;=4.0 only</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Make sure we trim BOM and NBSP</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 确保对BOM和NBSP的处理,清除字符串开始和结尾的一个或多个空格的正则表达式</span></div><div class="line"><span class="regexp">rtrim = /</span>^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;</div><div class="line"></div><div class="line"><span class="comment">//设置jQuery的原型对象，并把原型对象赋值给jQuery.fn</span></div><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line"></div><div class="line"><span class="comment">//这里列出了一部分jQuery原型成员（属性和方法）</span></div><div class="line"><span class="comment">//所有的jQuery实例对象都能够访问这些属性和方法</span></div><div class="line"></div><div class="line"><span class="comment">// The current version of jQuery being used</span></div><div class="line"><span class="comment">//当前正在使用的jQuery版本信息</span></div><div class="line">jquery: version,</div><div class="line"><span class="comment">//构造器属性 ---&gt; jQuery</span></div><div class="line"><span class="keyword">constructor</span>: jQuery,</div><div class="line"></div><div class="line">// The default length of a jQuery object is 0</div><div class="line">//jQuery实例对象中数据的个数，默认长度为0</div><div class="line">length: 0,</div><div class="line"></div><div class="line">// 把jQuery实例对象转换为数组类型的方法</div><div class="line">toArray: function() &#123;</div><div class="line"><span class="comment">//其实调用的是Array.prototype.slice.call(this) 方法 相当于this.slice()</span></div><div class="line"><span class="comment">//在数组的slice方法中，如果不接受参数则表示截取所有的元素保存到一个新的数组中返回</span></div><div class="line"><span class="keyword">return</span> slice.call( <span class="keyword">this</span> );</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// Get the Nth element in the matched element set OR</span></div><div class="line"><span class="comment">// Get the whole matched element set as a clean array</span></div><div class="line"><span class="comment">// 获取jQ对象中指定索引对应的数据(通常为DOM节点)</span></div><div class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"> num </span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// Return all the elements in a clean array</span></div><div class="line"><span class="comment">//如果没有传递参数，那么等价于调用了toArray方法</span></div><div class="line"><span class="comment">//把当前jQ对象中所有的value值保存到数组中返回</span></div><div class="line"><span class="keyword">if</span> ( num == <span class="literal">null</span> ) &#123;</div><div class="line"><span class="keyword">return</span> slice.call( <span class="keyword">this</span> );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Return just the one element from the set</span></div><div class="line"><span class="comment">// 区分索引值的情况</span></div><div class="line"><span class="comment">// 如果索引值为负数那么 返回this[index + this.length]</span></div><div class="line"><span class="comment">// 如果索引值&gt; = 0     返回thus[index]</span></div><div class="line"><span class="keyword">return</span> num &lt; <span class="number">0</span> ? <span class="keyword">this</span>[ num + <span class="keyword">this</span>.length ] : <span class="keyword">this</span>[ num ];</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// Take an array of elements and push it onto the stack</span></div><div class="line"><span class="comment">// (returning the new matched element set)</span></div><div class="line"><span class="comment">// 维护堆栈集合 把传入的数据包裹成一个新的jQ对象，然后更新prevObject的值为上一个(this)对象</span></div><div class="line">pushStack: <span class="function"><span class="keyword">function</span>(<span class="params"> elems </span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// Build a new jQuery matched element set</span></div><div class="line"><span class="comment">// merge方法用于合并两个数组</span></div><div class="line"><span class="comment">// this.constructor() 其实就是this.jQuery(); 得到的是一个空的jQ实例对象</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">var</span> ret = jQuery.merge( <span class="keyword">this</span>.constructor(), elems );</div><div class="line"></div><div class="line"><span class="comment">// Add the old object onto the stack (as a reference)</span></div><div class="line"></div><div class="line"><span class="comment">//prevObject属性用于维护和记录前一个操作的jQ实例对象</span></div><div class="line"><span class="comment">//把当前对象设置为ret的prevObject属性，并返回</span></div><div class="line">ret.prevObject = <span class="keyword">this</span>;</div><div class="line"></div><div class="line"><span class="comment">// Return the newly-formed element set</span></div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// Execute a callback for every element in the matched set.</span></div><div class="line"><span class="comment">//迭代jQuery实例对象的方法，该方法内部调用jQuery.each方法实现</span></div><div class="line">each: <span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> jQuery.each( <span class="keyword">this</span>, callback );</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 数组映射方法，对jQuery.map方法做了额外的包装</span></div><div class="line">map: <span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.pushStack( jQuery.map( <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> elem, i </span>) </span>&#123;</div><div class="line"><span class="comment">//使用当前的元素来调用callback方法,绑定this</span></div><div class="line"><span class="keyword">return</span> callback.call( elem, i, elem );</div><div class="line">&#125; ) );</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 截取对象中指定的键值对(元素)</span></div><div class="line"><span class="comment">//因为slice方法调用后返回的是一个新的对象集合，所以需要调用pushStack方法维护prevObject堆栈</span></div><div class="line">slice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">//核心实现：this =&gt; Array.prototype.slice(arguments) || this =&gt; [].slice(arguments)</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.pushStack( slice.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ) );</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">//获取jQuery实例对象中的第一个元素(第一个键值对中的value值，其实就是第一个DOM标签)包裹为jQuery对象返回</span></div><div class="line"><span class="comment">//内部通过调用jQuery.eq方法实现，</span></div><div class="line">first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.eq( <span class="number">0</span> );</div><div class="line">&#125;,</div><div class="line"><span class="comment">//获取jQuery实例对象中的最后一个元素</span></div><div class="line"><span class="comment">//同first方法一致，eq方法传递-1表示倒着数，即倒数第一个(最后一个)元素</span></div><div class="line">last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.eq( <span class="number">-1</span> );</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">//获取jQuery实例对象中指定索引对应的元素，拿到元素后包装为jQuery实例对象返回</span></div><div class="line"><span class="comment">//该方法的参数支持正整数或者是负数</span></div><div class="line">eq: <span class="function"><span class="keyword">function</span>(<span class="params"> i </span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> len = <span class="keyword">this</span>.length,</div><div class="line">j = +i + ( i &lt; <span class="number">0</span> ? len : <span class="number">0</span> );</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.pushStack( j &gt;= <span class="number">0</span> &amp;&amp; j &lt; len ? [ <span class="keyword">this</span>[ j ] ] : [] );</div><div class="line"></div><div class="line"><span class="comment">//自己写的另外一种实现方案(在判断的时候需要考虑到越界的问题)</span></div><div class="line"><span class="comment">// var len = this.length;</span></div><div class="line"><span class="comment">// var arrM = [];</span></div><div class="line"><span class="comment">// if (i &gt;= 0 &amp;&amp; i &lt; len)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// arrM.push(this[i])</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// else if(i &lt; 0 &amp;&amp; (-i &lt; len) )</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// arrM.push(this[i + len])</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// return this.pushStack(arrM)</span></div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">//返回前一个操作的jQuery实例对象</span></div><div class="line">end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">//检查prevObject的属性值，如果优质那么就返回prevObject否则返回空的jQuery实例对象</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.prevObject || <span class="keyword">this</span>.constructor();</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// For internal use only.</span></div><div class="line"><span class="comment">// 仅供内部使用的方法</span></div><div class="line"><span class="comment">// Behaves like an Array's method, not like a jQuery method.</span></div><div class="line"><span class="comment">// 这些方法的表现和数组一致，不完全像jQuery风格的方法</span></div><div class="line"></div><div class="line"><span class="comment">//往jQuery实例对象中添加数据</span></div><div class="line">push: push,</div><div class="line"><span class="comment">//排序的方法</span></div><div class="line">sort: arr.sort,</div><div class="line"><span class="comment">//添加|删除的方法，其实就是数组中的splice方法</span></div><div class="line">splice: arr.splice</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//  jQuery中的插件处理机制</span></div><div class="line"><span class="comment">//给jQuery添加extend扩展方法，即jQuery.extend()</span></div><div class="line"><span class="comment">//给jQuery的原型对象添加extend扩展方法,即jQuery.prototype.extend()</span></div><div class="line"><span class="comment">//这两个的方法的作用简单来说就是把传入参数(对象类型)中所有的方法都添加到jQuery或者是jQuery原型对象上面</span></div><div class="line"><span class="comment">//  这里给出一个简陋的实现版本,内部使用了this根据当前上下文的不同，指代的可能是jQuery或者是jQuery.prototype</span></div><div class="line"><span class="comment">//     jQuery.extend = jQuery.fn.extend = function (objT) &#123;</span></div><div class="line"><span class="comment">// for (var key in objT)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// if (Object.hasOwnProperty(key))</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">// this[key] = objT[key];</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">//     &#125;;</span></div><div class="line"></div><div class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">//声明一堆的变量length 为实参的个数</span></div><div class="line"><span class="keyword">var</span> options, name, src, copy, copyIsArray, clone,</div><div class="line">target = <span class="built_in">arguments</span>[ <span class="number">0</span> ] || &#123;&#125;,</div><div class="line">i = <span class="number">1</span>,</div><div class="line">length = <span class="built_in">arguments</span>.length,</div><div class="line">deep = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// Handle a deep copy situation</span></div><div class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> target === <span class="string">"boolean"</span> ) &#123;</div><div class="line">deep = target;</div><div class="line"></div><div class="line"><span class="comment">// Skip the boolean and the target</span></div><div class="line">target = <span class="built_in">arguments</span>[ i ] || &#123;&#125;;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Handle case when target is a string or something (possible in deep copy)</span></div><div class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !isFunction( target ) ) &#123;</div><div class="line">target = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Extend jQuery itself if only one argument is passed</span></div><div class="line"><span class="keyword">if</span> ( i === length ) &#123;</div><div class="line">target = <span class="keyword">this</span>;</div><div class="line">i--;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</div><div class="line"></div><div class="line"><span class="comment">// Only deal with non-null/undefined values</span></div><div class="line"><span class="keyword">if</span> ( ( options = <span class="built_in">arguments</span>[ i ] ) != <span class="literal">null</span> ) &#123;</div><div class="line"></div><div class="line"><span class="comment">// Extend the base object</span></div><div class="line"><span class="keyword">for</span> ( name <span class="keyword">in</span> options ) &#123;</div><div class="line">src = target[ name ];</div><div class="line">copy = options[ name ];</div><div class="line"></div><div class="line"><span class="comment">// Prevent never-ending loop</span></div><div class="line"><span class="keyword">if</span> ( target === copy ) &#123;</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Recurse if we're merging plain objects or arrays</span></div><div class="line"><span class="keyword">if</span> ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject( copy ) ||</div><div class="line">( copyIsArray = <span class="built_in">Array</span>.isArray( copy ) ) ) ) &#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( copyIsArray ) &#123;</div><div class="line">copyIsArray = <span class="literal">false</span>;</div><div class="line">clone = src &amp;&amp; <span class="built_in">Array</span>.isArray( src ) ? src : [];</div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">clone = src &amp;&amp; jQuery.isPlainObject( src ) ? src : &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Never move original objects, clone them</span></div><div class="line">target[ name ] = jQuery.extend( deep, clone, copy );</div><div class="line"></div><div class="line"><span class="comment">// Don't bring in undefined values</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( copy !== <span class="literal">undefined</span> ) &#123;</div><div class="line">target[ name ] = copy;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Return the modified object</span></div><div class="line"><span class="keyword">return</span> target;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//为jQuery添加一堆工具方法,对象参数中所有的成员都将直接添加在jQuery函数身上成为jQuery的静态方法</span></div><div class="line">jQuery.extend( &#123;</div><div class="line"></div><div class="line"><span class="comment">// Unique for each copy of jQuery on the page</span></div><div class="line"><span class="comment">// 简单测试下得到的结果是：jQuery33104605303773584173</span></div><div class="line"><span class="comment">// 确保页面中的jQuery副本是唯一的，（jQuery + 版本号 + 随机数） =&gt; 格式处理</span></div><div class="line">expando: <span class="string">"jQuery"</span> + ( version + <span class="built_in">Math</span>.random() ).replace( <span class="regexp">/\D/g</span>, <span class="string">""</span> ),</div><div class="line"></div><div class="line"><span class="comment">// Assume jQuery is ready without the ready module</span></div><div class="line"><span class="comment">// 是否已经准备就绪</span></div><div class="line">isReady: <span class="literal">true</span>,</div><div class="line"><span class="comment">//错误处理方法：根据传入的消息创建一个错误对象并抛出异常</span></div><div class="line">error: <span class="function"><span class="keyword">function</span>(<span class="params"> msg </span>) </span>&#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( msg );</div><div class="line">&#125;,</div><div class="line"><span class="comment">//空函数</span></div><div class="line">noop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line"></div><div class="line"><span class="comment">//用于判断指定参数是否是一个纯粹的对象</span></div><div class="line"><span class="comment">//所谓"纯粹的对象"，就是该对象是通过"&#123;&#125;"或"new Object"创建的 .排除了数组、自定义构造函数创建的对象以及函数等类型</span></div><div class="line">isPlainObject: <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> proto, Ctor;</div><div class="line"></div><div class="line"><span class="comment">// Detect obvious negatives</span></div><div class="line"><span class="comment">// Use toString instead of jQuery.type to catch host objects</span></div><div class="line"></div><div class="line"><span class="comment">//如果参数为null | undefined 或者在调用Object.prototype.toString.call(参数)的时候得到的结果不是[object Object]则直接返回false</span></div><div class="line"><span class="keyword">if</span> ( !obj || toString.call( obj ) !== <span class="string">"[object Object]"</span> ) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取当前对象的原型对象，其实是调用了Object.getPrototypeOf(参数) 方法</span></div><div class="line">proto = getProto( obj );</div><div class="line"></div><div class="line"><span class="comment">// Objects with no prototype (e.g., `Object.create( null )`) are plain</span></div><div class="line"><span class="comment">//监测 没有原型对象的最纯净的对象 例如使用Object.create( null )创建的对象</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> ( !proto ) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Objects with prototype are plain iff they were constructed by a global Object function</span></div><div class="line"><span class="comment">//如果原型对象上拥有constructor属性(前一句的结果为true) 那么就返回proto.constructor的值</span></div><div class="line"><span class="comment">//如果原型对象是Object.prototype 那么Object.prototype.constructor ==&gt; ƒ Object() &#123; [native code] &#125;</span></div><div class="line">Ctor = hasOwn.call( proto, <span class="string">"constructor"</span> ) &amp;&amp; proto.constructor;</div><div class="line"></div><div class="line"><span class="comment">//检查Ctor是否是函数 且函数字符串是否全等于function Object() &#123; [native code] &#125;</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> Ctor === <span class="string">"function"</span> &amp;&amp; fnToString.call( Ctor ) === ObjectFunctionString;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">//用于判断指定参数是否是一个空对象</span></div><div class="line"><span class="comment">//所谓"空对象"，即不包括任何可枚举(自定义)的属性。简而言之，就是该对象没有属性可以通过for...in迭代。</span></div><div class="line">isEmptyObject: <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/* eslint-disable no-unused-vars */</span></div><div class="line"><span class="comment">// See https://github.com/eslint/eslint/issues/6125</span></div><div class="line"><span class="keyword">var</span> name;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( name <span class="keyword">in</span> obj ) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// Evaluates a script in a global context</span></div><div class="line"><span class="comment">//用于全局性地执行一段JavaScript代码,内部调用DOMEval方法实现</span></div><div class="line"><span class="comment">//其作用与常规的JavaScript eval()函数相似。区别自傲与jQuery.globalEval()执行代码的作用域为全局作用域。</span></div><div class="line">    <span class="comment">//使用示例：$.globalEval( "var a =1" ); 该行代码将在全局作用域中定义变量a</span></div><div class="line">globalEval: <span class="function"><span class="keyword">function</span>(<span class="params"> code </span>) </span>&#123;</div><div class="line">DOMEval( code );</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">//常用的迭代方法，可以用来遍历数组|对象|jQ实例对象(伪数组)</span></div><div class="line"><span class="comment">//该方法同$("xxx").each() 方法保持一致</span></div><div class="line"><span class="comment">//第一个参数：要遍历的对象| 数组 | jQ实例对象</span></div><div class="line">each: <span class="function"><span class="keyword">function</span>(<span class="params"> obj, callback </span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> length, i = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">//如果参数是伪数组那么使用普通的for循环来进行遍历</span></div><div class="line"><span class="keyword">if</span> ( isArrayLike( obj ) ) &#123;</div><div class="line">length = obj.length;</div><div class="line"><span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</div><div class="line"><span class="comment">//调用回到函数，把当前的value值绑定给函数的this [each方法的回调函数中this--&gt; value值]</span></div><div class="line"><span class="comment">//把当前循环的key和value值(这里是i和obj[i])作为参数传递给callback回调函数</span></div><div class="line"><span class="comment">//检查回调函数的返回值，如果返回的是false，那么就退出循环</span></div><div class="line"><span class="keyword">if</span> ( callback.call( obj[ i ], i, obj[ i ] ) === <span class="literal">false</span> ) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//如果是普通的对象那么使用for..in循环来进行遍历</span></div><div class="line"><span class="keyword">for</span> ( i <span class="keyword">in</span> obj ) &#123;</div><div class="line"><span class="comment">//同上面的代码保持一致</span></div><div class="line"><span class="keyword">if</span> ( callback.call( obj[ i ], i, obj[ i ] ) === <span class="literal">false</span> ) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//把遍历的对象返回,链式编程的代码风格</span></div><div class="line"><span class="keyword">return</span> obj;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// Support: Android &lt;=4.0 only</span></div><div class="line"><span class="comment">// 工具方法，用于清空字符串前面或者是后面的N个空格</span></div><div class="line"><span class="comment">// 在ES5中js提供了原生的trim方法来清除字符串前后的1个或多个空格</span></div><div class="line"><span class="comment">// 这里主要是通过正则表达式去进行匹配，把匹配到的内容替换为空字符串""</span></div><div class="line">trim: <span class="function"><span class="keyword">function</span>(<span class="params"> text </span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> text == <span class="literal">null</span> ?</div><div class="line"><span class="string">""</span> :</div><div class="line">( text + <span class="string">""</span> ).replace( rtrim, <span class="string">""</span> );</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// results is for internal usage only</span></div><div class="line"><span class="comment">// 结果仅共内部使用</span></div><div class="line"><span class="comment">// 该函数用于将一个类数组对象(伪数组)转换为真正的数组对象</span></div><div class="line"><span class="comment">// 所谓"类数组对象"就是一个常规的Object对象，但它和数组对象非常相似：具备length属性，并以0、1、2、3……等数字作为属性名。</span></div><div class="line">makeArray: <span class="function"><span class="keyword">function</span>(<span class="params"> arr, results </span>) </span>&#123;</div><div class="line"><span class="comment">// 初始化ret为空数组</span></div><div class="line"><span class="keyword">var</span> ret = results || [];</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( arr != <span class="literal">null</span> ) &#123;</div><div class="line"><span class="comment">//检查传入的参数是否是伪数组</span></div><div class="line"><span class="keyword">if</span> ( isArrayLike( <span class="built_in">Object</span>( arr ) ) ) &#123;</div><div class="line"><span class="comment">//如果是伪数组，那么合并ret和arr 并返回</span></div><div class="line"><span class="comment">//如果arr是字符串那么jQuery.merge(ret,[arr]) ，否则jQuery.merge(ret,arr)</span></div><div class="line">jQuery.merge( ret,</div><div class="line"><span class="keyword">typeof</span> arr === <span class="string">"string"</span> ?</div><div class="line">[ arr ] : arr</div><div class="line">);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//如果参数不是伪数组，那么直接把arr中的每个数据都添加到新的数组中</span></div><div class="line"><span class="comment">//push.call( ret, arr ) 就是是 [].push.call(ret,arr) =&gt; [].push(arr)</span></div><div class="line">push.call( ret, arr );</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回处理完的数组对象</span></div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 该方法用于在数组中搜索指定的值，并返回其索引值。如果数组中不存在该值，则返回 -1。</span></div><div class="line"><span class="comment">// 第一个参数 用于查找的值</span></div><div class="line"><span class="comment">// 第二个参数 指定被查找的数组</span></div><div class="line"><span class="comment">// 第三个参数 指定从数组的指定索引位置开始查找，默认为 0</span></div><div class="line">    <span class="comment">// 如果数组中存在多个相同的值，则以查找到的第一个值的索引为准</span></div><div class="line"><span class="comment">// 使用示例：$.inArray("文顶顶",["demoA","demoB","wendingding.com","文顶顶","demoC","end"],4)</span></div><div class="line"><span class="comment">// 上面的代码表示从数组中索引为4的位置开始查找"文顶顶"这个元素项，返回的结果为-1，最后一个参数不传递则返回3</span></div><div class="line">inArray: <span class="function"><span class="keyword">function</span>(<span class="params"> elem, arr, i </span>) </span>&#123;</div><div class="line"><span class="comment">//如果参数是null或undefined那么直接返回-1</span></div><div class="line"><span class="comment">//否则通过调用indexOf方法实现 indexOf.call( arr, elem, i ) =&gt; arr.indexOf(elem,i)</span></div><div class="line"><span class="keyword">return</span> arr == <span class="literal">null</span> ? <span class="number">-1</span> : indexOf.call( arr, elem, i );</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// Support: Android &lt;=4.0 only, PhantomJS 1 only</span></div><div class="line"><span class="comment">// push.apply(_, arraylike) throws on ancient WebKit</span></div><div class="line"><span class="comment">//该方法用于合并两个数组</span></div><div class="line">merge: <span class="function"><span class="keyword">function</span>(<span class="params"> first, second </span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> len = +second.length,</div><div class="line">j = <span class="number">0</span>,</div><div class="line">i = first.length;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( ; j &lt; len; j++ ) &#123;</div><div class="line"><span class="comment">//通过普通的for循环来遍历第二个数组</span></div><div class="line"><span class="comment">//把第二个数组的元素依次追加在第一个数组的后面</span></div><div class="line">first[ i++ ] = second[ j ];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//更新数组的长度值</span></div><div class="line">first.length = i;</div><div class="line"></div><div class="line"><span class="keyword">return</span> first;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 过滤函数用于过滤数组</span></div><div class="line"><span class="comment">// 参数1 待过滤的数组</span></div><div class="line"><span class="comment">// 参数2 过滤数组的具体函数</span></div><div class="line"><span class="comment">// 参数3 布尔类型的值</span></div><div class="line"><span class="comment">// 为true则函数返回数组中由过滤函数返回 true 的元素</span></div><div class="line"><span class="comment">//      为false则函数返回数组中由过滤函数返回false的元素</span></div><div class="line">grep: <span class="function"><span class="keyword">function</span>(<span class="params"> elems, callback, invert </span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//初始化一堆的变量</span></div><div class="line"><span class="keyword">var</span> callbackInverse,</div><div class="line">matches = [],   <span class="comment">//空数组</span></div><div class="line">i = <span class="number">0</span>,<span class="comment">//索引值为0</span></div><div class="line">length = elems.length,<span class="comment">//待过滤数组的长度</span></div><div class="line">callbackExpect = !invert;</div><div class="line"></div><div class="line"><span class="comment">// Go through the array, only saving the items</span></div><div class="line"><span class="comment">// that pass the validator function</span></div><div class="line"><span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</div><div class="line"><span class="comment">//每循环一次就把当前的元素和对应的索引传递给回调函数，并保存回调函数的返回值取反</span></div><div class="line">callbackInverse = !callback( elems[ i ], i );</div><div class="line"><span class="keyword">if</span> ( callbackInverse !== callbackExpect ) &#123;</div><div class="line"><span class="comment">//把过滤后的元素收集保存到新的数组中</span></div><div class="line">matches.push( elems[ i ] );</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//返回过滤后得到的数据，是一个新的数组</span></div><div class="line"><span class="keyword">return</span> matches;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// arg is for internal usage only</span></div><div class="line"><span class="comment">// arg仅用于内部使用的情况</span></div><div class="line"><span class="comment">// 数组映射方法( 将一个数组中的元素转换到另一个数组中 )</span></div><div class="line"><span class="comment">// 参数1 ：待处理的数组</span></div><div class="line"><span class="comment">// 参数2 : 具体的处理函数</span></div><div class="line"><span class="comment">// 参数3 : arg</span></div><div class="line">map: <span class="function"><span class="keyword">function</span>(<span class="params"> elems, callback, arg </span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//初始化一堆的变量</span></div><div class="line"><span class="keyword">var</span> length, value,</div><div class="line">i = <span class="number">0</span>,<span class="comment">//索引值为0</span></div><div class="line">ret = [];<span class="comment">//ret为空的数组</span></div><div class="line"></div><div class="line"><span class="comment">// Go through the array, translating each of the items to their new values</span></div><div class="line"><span class="comment">// 遍历数组把数组中的每一项都转换为一个新的值</span></div><div class="line"></div><div class="line"><span class="comment">//检查是否是伪数组</span></div><div class="line"><span class="keyword">if</span> ( isArrayLike( elems ) ) &#123;</div><div class="line">length = elems.length;<span class="comment">//获取待处理的伪数组的长度</span></div><div class="line"><span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</div><div class="line"><span class="comment">//循环，每循环一次就调用处理函数并把当前的key和value值作为参数传递进去</span></div><div class="line"><span class="comment">//收集回调函数的返回值</span></div><div class="line">value = callback( elems[ i ], i, arg );</div><div class="line"></div><div class="line"><span class="comment">//如果回调函数的范返回值不为空，那么就把该返回值添加到数组中并最终返回</span></div><div class="line"><span class="keyword">if</span> ( value != <span class="literal">null</span> ) &#123;</div><div class="line">ret.push( value );</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Go through every key on the object,</span></div><div class="line"><span class="comment">//如果是普通的对象，那么就使用for...in循环来进行遍历</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">for</span> ( i <span class="keyword">in</span> elems ) &#123;</div><div class="line">value = callback( elems[ i ], i, arg );</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( value != <span class="literal">null</span> ) &#123;</div><div class="line">ret.push( value );</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Flatten any nested arrays</span></div><div class="line"><span class="comment">// 等价于 [].concat(ret) 问题：为什么不直接范湖ret数组呢？</span></div><div class="line"><span class="keyword">return</span> concat.apply( [], ret );  </div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// A global GUID counter for objects</span></div><div class="line"><span class="comment">// 全局的GUID计数器</span></div><div class="line">guid: <span class="number">1</span>,</div><div class="line"></div><div class="line"><span class="comment">// jQuery.support is not used in Core but other projects attach their</span></div><div class="line"><span class="comment">// properties to it so it needs to exist.</span></div><div class="line">    <span class="comment">// 就是个空对象 &#123;&#125; 不在核心中使用，但其他项目将它们的属性附加到它，因此它需要存在。</span></div><div class="line">support: support</div><div class="line">&#125; );</div><div class="line"></div><div class="line"><span class="comment">//......</span></div><div class="line"><span class="comment">// 设置jQuery.prototype.init方法</span></div><div class="line">init = jQuery.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context, root </span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Give the init function the jQuery prototype for later instantiation</span></div><div class="line">/  让jQuery.prototype.init方法的原型对象指向jQuery原型对象</div><div class="line"><span class="comment">// (正因如此$("xx")得到的jQ实例对象才能访问jQuery原型对象上面的方法)</span></div><div class="line">init.prototype = jQuery.fn;</div><div class="line"><span class="comment">//.....</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">&#125; );</div></pre></td></tr></table></figure><p>上面的代码简化后的整体结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//01 立即调用函数(闭包)</div><div class="line">(function (window) &#123;</div><div class="line"></div><div class="line">    //02 提供工厂函数</div><div class="line">    var jQuery = function (selector) &#123;</div><div class="line">        return new jQuery.fn.init(selector);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //03 设置原型对象</div><div class="line">    jQuery.prototype = &#123;</div><div class="line">        constructor:jQuery,</div><div class="line">        init:function (selector) &#123;</div><div class="line">            //初始化处理...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //动态的添加fn属性</div><div class="line">    jQuery.fn = jQuery.prototype;</div><div class="line">    </div><div class="line">    //04 原型对象赋值</div><div class="line">    jQuery.fn.init.prototype = jQuery.fn;</div><div class="line"></div><div class="line">    //........</div><div class="line">    </div><div class="line">    //05 把jQuery和$暴露出来</div><div class="line">    window.$ = window.jQuery = jQuery;</div><div class="line"></div><div class="line">&#125;)(window);</div></pre></td></tr></table></figure></p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.520it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.520it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇文章将主要介绍jQuery框架的前600行代码并说明jQuery框架的整体结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;整体结构&quot;&gt;&lt;a href=&quot;#整体结构&quot; class=&quot;headerlink&quot; title=&quot;整体结构&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="jQuery框架系列" scheme="https://weibo.com/u/3800117445/tags/jQuery%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>jQuery系列 [09]-jQuery框架源码解读[开始]</title>
    <link href="https://weibo.com/u/3800117445/2018/08/24/jQuery%E7%B3%BB%E5%88%97%20%5B09%5D-jQuery%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%5B%E5%BC%80%E5%A7%8B%5D/"/>
    <id>https://weibo.com/u/3800117445/2018/08/24/jQuery系列 [09]-jQuery框架源码解读[开始]/</id>
    <published>2018-08-24T10:01:01.000Z</published>
    <updated>2018-08-24T09:32:57.195Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我将花点时间写几篇关于jQuery框架源码解读的系列文章，参考版本为当前最新的jQuery 3.3.1版本，本文主要介绍jQuery框架最新版本的基本信息以及如何开始等相关的内容。</p></blockquote><p><strong>准备说明</strong> </p><p>我自己在写文章和演示的时候使用的Mac OSX系统，在开始之前您需要先准备好如下的环境：</p><blockquote><p>✧ node和npm，可以<a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">点击下载node安装</a><br>✧ git环境 Mac电脑已经内置，windows系统可以<a href="https://gitforwindows.org/" target="_blank" rel="external">点击下载git for windows</a>来进行安装<br>✧ 掌握或者了解grunt构建工具的基本使用，您可以参考<a href="http://wendingding.com/2018/05/18/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%B3%BB%E5%88%97[02]%20Grunt%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">Grunt的基本使用</a>等相关的文章</p></blockquote><p><strong>开始操作</strong></p><p>001 打开终端工具 新创建目录，cd进入到指定的项目路径</p><p>ex: <code>$ cd jQuery框架</code></p><p>002 把jQuery托管在github上面的框架源码下载到当前目录</p><p>ex: <code>$ git clone https://github.com/jquery/jquery.git</code></p><p>003 把jQuery源码下载完成后将得到下面的目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── AUTHORS.txt</div><div class="line">├── CODE_OF_CONDUCT.md</div><div class="line">├── CONTRIBUTING.md</div><div class="line">├── Gruntfile.js      //jQuery框架的构建配置文件(采用了Grunt构建工具)</div><div class="line">├── LICENSE.txt       //jQuery框架使用的开源协议文件(具体为MIT开源协议)</div><div class="line">├── README.md         //项目的说明文档(github托管地址主页能看到的介绍文档)</div><div class="line">├── build             //项目的构建目录</div><div class="line">├── dist              //项目的发布目录(当前为空)</div><div class="line">├── external          //项目的外部依赖</div><div class="line">├── package.json      //项目的配置文件(包含框架需要依赖的所有包信息)</div><div class="line">├── src               //项目的开发目录</div><div class="line">└── <span class="built_in">test</span>              //框架的测试目录</div></pre></td></tr></table></figure><p>004 使用npm包管理工具来安装框架的依赖，当命令行执行完毕后会在当前目录创建node_modules文件夹(里面包含框架需要的所有必要的依赖)</p><p>ex:<code>$ npm install</code></p><p>005 安装grunt-cli工具，并执行构建命令，对src目录的文件进测试、合并等操作</p><p>ex:<code>$ npm install -g grunt-cli</code><br>ex:<code>$ grunt -V</code><br>ex:<code>$ grunt</code></p><p>006 上面的命令执行完毕后会在dist发布目录创建jquery.js和jquery.min.js文件，除了像上面这样一步一步处理之外也可以直接在把jQuery下载到项目后直接执行$ npm run build命令（该命令内部会调用npm install &amp;&amp; grunt命令）。</p><div class="tip"><strong>说明</strong>：执行grunt命令的前提的是在本地安装了grunt-cli</div><p>007 后续我将逐行的对jQuery框架源码进行解析，并贴出注解版本和解析内容。</p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.520it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.520it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我将花点时间写几篇关于jQuery框架源码解读的系列文章，参考版本为当前最新的jQuery 3.3.1版本，本文主要介绍jQuery框架最新版本的基本信息以及如何开始等相关的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;准备说明
      
    
    </summary>
    
    
      <category term="jQuery框架系列" scheme="https://weibo.com/u/3800117445/tags/jQuery%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据安全系列 XOR</title>
    <link href="https://weibo.com/u/3800117445/2018/08/03/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20XOR/"/>
    <id>https://weibo.com/u/3800117445/2018/08/03/数据安全系列 XOR/</id>
    <published>2018-08-02T16:00:00.000Z</published>
    <updated>2018-08-07T03:39:53.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文简单介绍计算机体系中的异或运算，运算其特点以及在数据安全领域的应用。</p></blockquote><h3 id="异或运算介绍"><a href="#异或运算介绍" class="headerlink" title="异或运算介绍"></a>异或运算介绍</h3><p><strong>XOR</strong> 全称为<code>exclusive OR</code>,简写为XOR，中文称为<strong>异或运算</strong>。</p><p>异或运算是一种数学运算符，主要应用于逻辑运算和计算机体系中的位运算。异或运算的数学符号常表示为“⊕”，运算法则为：<code>A ⊕ B = (¬A ∧B) ∨ (A ∧¬B)</code>。<br>简单研究下1个位（比特）的异或运算。</p><div style="font-Size:16px;color:#190;border:1px dashed #000;width:350px;padding:10px;text-align:center"> 0 ⊕ 0 = 0；（0与0异或运算的结果为0）<br>0 ⊕ 1 = 1；（0与1异或运算的结果为1）<br>1 ⊕ 0 = 1；（1与0异或运算的结果为1）<br>1 ⊕ 1 = 0；（1与1异或运算的结果为0）<br></div><p>异或运算可以类比于<span style="text-decoration:underline;color:#f66;">奇偶数的加法运算</span>或者是<span style="text-decoration:underline ; color:#F66;">翻牌处理</span>。在按位运算的过程中，参与运算的数值只有两种可能，那么为0要么为1，在这里0为偶数，1位奇数，可以得出下面的运算特征，我们发现结果和异或运算是一致的。</p><div style="font-Size:16px;color:#456;border:1px dashed #000;width:500px;padding:10px;text-align:center"> 偶数 + 偶数 = 偶数；（偶数与偶数相加运算的结果为偶数）<br>偶数 + 奇数 = 奇数；（偶数与奇数相加运算的结果为奇数）<br>奇数 + 偶数 = 奇数；（奇数与偶数相加运算的结果为奇数）<br>奇数 + 奇数 = 偶数；（奇数与奇数相加运算的结果为偶数）<br></div><p>接下来我们来看下所谓的<strong>翻牌处理</strong>。我们可以想象一下，假如桌面中有一张扑克牌，对应二进制总位的异或运算有0和1两种情况，那么对于扑克牌也有两种情况，那么就是不翻转和翻转，我们找到它们的对应关系。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/xor02.jpeg?raw=true" width="150px"></p><p>接下来我们来分析下对扑克牌进行翻转|不翻转处理以及对应特征，我们发现结果和异或运算是一致的。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/xor03.png?raw=true"></p><p><strong>异或运算的特征可以简单的归纳为：<code>相同为0，不同为1</code></strong>。</p><h3 id="常用位运算符补充"><a href="#常用位运算符补充" class="headerlink" title="常用位运算符补充"></a>常用位运算符补充</h3><p>位操作符用于最基本的层次，它们按照内存中表示数值的位来操作数值，位运算符主要有：<strong>按位与（&amp;）</strong>、<strong>按位或（|）</strong>、<strong>按位异或（^）</strong>、<strong>按位取反（~）</strong>、<strong>左移（&lt;&lt;）</strong>和<strong>右移（&gt;&gt;）</strong>，这里将简单介绍常用的位运算符以及其基本特征作为补充。</p><p><strong>按位或运算（OR）</strong>的运算符为<code>|</code>, 是双目运算符，其运算特征是：<code>两个运算数中有1则为1，否则为0</code>。</p><p><strong>按位与运算（AND）</strong>的运算符为<code>&amp;</code>，是双目运算符，其运算特征是：<code>只有当两个操作数均为1的时候结果为1，否则为0（也可以理解为：两个运算数中有0则为0，否则为1）</code>。</p><p><span style="color:#195"><strong>OR&nbsp;运算</strong></span>&nbsp; &nbsp;<span style="border:1px solid #000"><strong>&nbsp; &nbsp;1  |  1 = 1，1  |  0 = 1， 0  |  1 = 1，0  |  0 = 0 &nbsp; &nbsp;</strong></span></p><p><span style="color:#195"><strong>AND运算</strong></span>     <span style="border:1px solid #000"><strong>&nbsp; &nbsp;1 &amp; 1 = 1，1 &amp; 0 = 0， 0 &amp; 1 = 0，0 &amp; 0 = 0 &nbsp; &nbsp;</strong></span></p><p><strong>按位取反运算（NOT）</strong>也称为按位非运算，运算符为<code>~</code>，单目运算符。对操作数执行按位取反会返回操作数的反码，其运算本质为：<strong>操作数的负值-1</strong>。为了理解这一点，必须搞清楚下面的这些基本概念。</p><p>在处理数据的时候，通常把数据分为<code>有符号</code>和<code>无符号</code>的，如果我们使用32 位二进制码（不同语言有差异表示数据，那么对于有符号的整数，则32位中的前 31 位用于表示整数的值。第 32 位用于表示数值的符号：其中0 表示正数，1 表示负数。第32位被称为符号位。如果要表示19这个数字，那么其二进制码形式如下：<span style="color:#195">00000000   00000000   00000000   00010011 </span>需要注意的是，虽然负数在使用二进制码表示的时候使用的格式是二进制补码。下面给出负数的二进制补码表示方式的处理过程：</p><blockquote><p>[1] 求负数绝对值的二进制码。<br>[2] 求该二进制码的反码形式。<br>[3] 对得到的二进制反码加一。</p></blockquote><p>这里，我们以-19为例子来演示负数的表示方式。</p><p>19的二进制码     <span style="color:#195">00000000   00000000   00000000   00010011</span><br>二进制码反码      11111111   11111111   11111111   11101100<br>上面反码加①      <span style="color:#f22">11111111   11111111   11111111   11101101</span></p><p>我们回到按位非（NOT）的操作中来，它的结算特点是每个参与计算的二进制位都取反，相当于是求二进制的反码。我们已经知道负数的二进制表示方式，应该也就能够理解<code>对操作数进行按位非操作结果其实就是操作数的负值-1</code>。因为操作数的负值表示需要（反码 + 1），而我们需要的结果是反码，所以只需要倒退一步即可。</p><h3 id="XOR和密码体系"><a href="#XOR和密码体系" class="headerlink" title="XOR和密码体系"></a>XOR和密码体系</h3><p>现在我们已经清楚了异或运算的特点，而且掌握了1个二进制位的异或运算方式，那么下面我们来看一个稍微复杂点的例子，尝试着对一系列的二进制位进行异或处理。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/xor04.png?raw=true"></p><p>上面的示例中我们使用两个8位的二进制系列A和B进行异或运算，其中A的内容为0101 0001，B的内容为0010 0101。在对多个比特序列进行异或运算的时候，需要分别对每一位的数据进行异或运算以得到结果。这里A ⊕ B 得到的最终结果为C，其内容是0111 0100。</p><p>上面的计算过程非常简单，这里要特别说明的是因为异或运算的特点是：<code>相同为0，不同为1</code>, 所以考虑如果把A ⊕ B得到的结果 和 B 再次进行XOR运算，那么结果会变回A，即A ⊕ B = C ，C ⊕ B = A 。下面给出具体的图示：</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/xor05.png?raw=true"></p><p><strong><span style="color:#195">XOR运算的可逆性可以用来恢复原值，这在加密算法中意义非凡</span></strong>。</p><p>源于XOR运算的以上特性，其实完全可以利用简单异或运算设计出一款高强度的密码算法，我们把A作为原文，B作为密钥，C作为密文，对应的密码算法为：</p><p><strong>加密算法</strong>  <span style="border:1px solid #000"><strong>&nbsp; &nbsp;原文  ⊕   密钥 =&gt;  密文 &nbsp; &nbsp; </strong></span><br><strong>解密算法</strong>  <span style="border:1px solid #000"><strong>&nbsp; &nbsp;密文  ⊕   密钥 =&gt;  原文 &nbsp; &nbsp; </strong></span><br><img src="https://github.com/flowerField/Source/blob/master/Blog/xor07.png?raw=true"></p><p>我们来简单看一下上面的图形展示，图形中我们把<code>实心的点假设为1，空性的点假设为0</code>，那么第一张图相当于明文（原文），第二张图作为蒙版（相当于密钥）盖在第一张图上的时候可以得到第三张图形（相当于密文），这个过程是可逆的，如果把第二张图片盖在第三张图片上面那么将能够还原出第一张图形来。接下来我们来看下字符串的处理情况，假设对<code>miao和nice</code>进行操作，它们在进行XOR运算后将得到一个位数相同的二进制码，把得到的二进制码和<code>nice</code>再进行XOR运算将能够恢复得到原文<code>miao</code>字符串。下面给出具体的图示：<br><img src="https://github.com/flowerField/Source/blob/master/Blog/xor06.png?raw=true"></p><p>其实像上面的这样的处理方式早在1917年就由维纳（<code>G·S Vernam</code>）提出了，被称为<strong>一次性密码</strong>，一次性密码的加密解密方式决定了它在理论上永远无法被破译，这一特性于1949年由香农通过数学方法加以证明。但实际上，这样简单的一次性密码并没有在现实中被广泛使用，原因有以下几点：<span style="color:#195">①  因为加密解密使用的是相同的密钥，所以无法保证密钥的配送和保存的安全。② 因为密钥的长度需要和明文匹配，所以意味着明文有500MB，那么密钥也必须500MB。③ 在一次性密码中需要生成大量真正的随机数，这很难实现。</span></p><p>不过，虽然直接应用XOR运算的可逆性实现的一次性密码算法无法在商业中真正应用，但我们还是能在很多经典的加密算法（比如，<code>DES</code>和<code>AES</code>）中看到XOR运算的身影。关于异或运算在其他算法中的应用，这里我们不做展开，相关的内容我将再写一篇新的文章来说明。。</p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.520it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.520it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文简单介绍计算机体系中的异或运算，运算其特点以及在数据安全领域的应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;异或运算介绍&quot;&gt;&lt;a href=&quot;#异或运算介绍&quot; class=&quot;headerlink&quot; title=&quot;异或运算介绍&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="数据安全系列" scheme="https://weibo.com/u/3800117445/tags/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据安全系列 术语</title>
    <link href="https://weibo.com/u/3800117445/2018/08/02/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E9%87%8A%E4%B9%89/"/>
    <id>https://weibo.com/u/3800117445/2018/08/02/数据安全系列 专业术语释义/</id>
    <published>2018-08-01T16:00:00.000Z</published>
    <updated>2018-08-04T07:49:40.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文不详细介绍具体的加密算法，仅仅罗列数据安全领域常见的专业术语，并作出简要释义和说明。大概可以分成两大类，一类是参与的相关方(就是人),另一类则是冷冰冰的词汇了。</p></blockquote><p><strong>密码学（cryptography）</strong> 密码学是通过把消息编码使其不可读从而获取安全性的艺术与科学。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt002.png?raw=true"></p><p><strong>发送者（Sender）</strong> 在传递消息的过程中，发出信息的一方被称为发送者，可以是人也可以是机器。</p><p><strong> 接收者（receiver）</strong>在传递消息的过程中，收到信息的一方被称为接收者，和发送者一样，接收者可以是具体的人或者是一台机器。</p><p><strong> 消息（message）</strong>传递的信息通常被称为<span style="color:#195">消息</span>，消息可以是字符串、文本、图片、音频、视频等数据。</p><p><strong>窃听者（eavesdropper）</strong> 发送者在把消息发送给接收者的时候，因为消息需要在在多个设备之间进行中转，所以在传达的过程中消息可能会被恶意的偷看，偷看消息内容的个体我们称为窃听者。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt001.png?raw=true"></p><p><strong>明文 | 原文（plaintext）</strong> 基于安全方面的考量，在开发中进行数据交互的时候通常我们会对一些敏感的用户隐私数据进行加密处理，需要进行加密的消息我们称为<span style="color:#195">明文或者是原文</span>。</p><p><strong>密文（ciphertext）</strong> 采用特定方式对明文|原文加密之后得到的结果称为密文。</p><p><strong>加密（encrypt）</strong> 加密是一种对明文的特定处理方式，对明文加密之后可以得到对应的密文，加密的方式和结果取决于特定的加密算法。</p><p><strong>算法（algorithm）</strong> 用于解决（复杂）问题的特定步骤，通常称为算法。算法为我们提供了一条解决问题的特定路径，解决同一个问题可以有多种不同的算法。</p><p><strong>加密算法（encrypt-Algorithm）</strong> 从明文生成密文的具体步骤，也就是加密的特定步骤我们称为加密算法。</p><p><strong>解密（decrypt）</strong> 解密是一种对密文的特定处理方式，对密文解密之后可以得到对应的明文。所以，解密指的是根据密文得到原文的过程。</p><p><strong>解密算法（decrypt-Algorithm）</strong> 从密文还原出明文|原文的具体步骤，也就是解密的特定步骤我们称为解密算法。</p><p><strong>密码算法</strong>  &nbsp; &nbsp; <span style="border:1px solid #000"><strong>&nbsp; &nbsp;加密算法 + 解密算法  = 密码算法 &nbsp; &nbsp;</strong></span></p><p><strong>密码破译（cryptanalysis）</strong> 接收者把密文还原为明文的过程我们称为解密，如果是接收者外的其他人试图将密文还原为明文，则称为密码破译或者是密码分析。</p><p><strong>破译者（cryptanalyst）</strong> 进行密码破译的人被称为破译者，破译者可以是单纯的坏人也可以是专业的研究人员，但并没有本质的差别。这就好像挖坟的可以是单纯的盗墓贼也可以是专业的考古人员，或者某些地区（江西）殡葬改革委员会的工作人员（特指抢棺材砸棺材的这些人）。</p><p><strong>机密性（confidentiality）</strong> 机密性指的是信息安全中所面临的一种威胁，在消息传递过程中如果被窃听导致密码泄露则威胁到了信息的机密性。好比现在有一个消息，只有你知道，你把这个消息发送给我，如果最终的结果是你知道我知道世界上只有我们俩知道该消息，那么就认为该消息是很机密的，而如果最终除了我们俩之外的其他人也知道了该消息（哪怕是天和地也不行），那么我们就认为该消息不再机密。信息安全领域与消息相关了特性除了机密性之外还有<strong>完整性、认证以及不可否认性</strong>。</p><p><strong>密钥（key）</strong> 密钥在很多加密算法中使用，它就好像我们现实生活中的钥匙一样，很多加密算法在加密和解密的时候都需要用到密钥，就好像很多锁在打开和锁起来的时候都需要用到钥匙一样。</p><p><strong>替换技术</strong> <span style="color:#195">将明文消息转换为密文消息的技术主要有两种，其中一种是替换技术，另外一种是变换技术</span>。替换技术的主要特点是在加密的过程中将一个个明文字符替换为一个个的密文字符，应用替换技术的主要加密算法有：<strong>凯撒加密算法、单码加密算法、同音替换加密算法、块替换加密算法、多码替换加密算法以及希尔加密算法等</strong>。</p><p><strong>变换技术</strong> 变换技术是将明文消息转换为密文消息技术中的一种，它的特点是通过对明文字符进行某种特定的置换操作来得到密文字符，因此也称为置换技术。应用变换技术的主要加密算法有：<strong>栅栏加密算法、Vernam加密算法以及运动密钥加密算法等</strong>。</p><p><strong>密码学家的工具箱</strong> 在众多的密码技术中有6种尤为重要，它们在布鲁斯·施奈尔的《网络信息安全的真相》中被提出，这6种加密技术分别是<strong><code>对称密码</code></strong>、<strong><code>非对称密码</code></strong>、<strong><code>单向散列函数</code></strong>、<strong><code>消息认证码</code></strong>、<strong><code>数字签名</code></strong>和<strong><code>伪随机数生成器</code></strong>。(注明：下图参考了结城浩先生的《图解密码技术》插图)</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt003.png?raw=true"></p><p><strong>凯撒密码</strong> 凯撒密码指的是公元前100年左右诞生于古罗马的军事统帅<code>朱利叶斯·凯撒</code>使用的密码。凯撒密码的特点是通过将明文中所使用的字母表按照一定的字数平移来进行加密和解密。在这里如何加密（平移）其实就是加密算法，平移的位数其实就是密钥。凯撒密码本质上使用了替换技术来实现加密和解密操作。</p><p><strong>暴力破解</strong> 在破译密码的时候，把所有的密钥都尝试一遍以试图推出原文的方式被称为<strong>暴力破解（brute-force search）</strong>，因为这种破解的方式其实质是要从所有可能的密钥中找出正确的密钥所以也被称为<code>穷举搜索</code>。</p><p><strong>密钥空间</strong> 一种密码技术能够使用的所有密钥的集合被称为<strong>密钥空间（key space）</strong>, 所有可以使用的密钥的总数就是密钥空间的大小，<span style="color:#195">密钥空间越大，暴力破解的难度就越高</span>。</p><p><strong>编码</strong> 将显示世界中的数据信息映射为比特序列的操作被称为<code>编码（encoding）</code>, 计算机领域中常见的编码模式有ASCII、UTF8、Base64等。</p><p><strong>算法类型</strong> 从广义上理解，明文生成密文的方法共两种，<strong>流加密法（stream ciphers）</strong>和<strong>分组加密法（block ciphers）</strong>, 其中分组加密法也称为块加密法。流加密技术一次加密明文中的一个位，解密时也是一位一位的进行。块加密即时一次加密明文中的一个分组（常见的是64位一组），解密时也是一个分组一个分组的进行。基于性能的考量，分组加密算法适用性更广具体实现也较多。</p><p><strong>算法模式</strong> 在分组加密算法中有多种算法模式，不同的算法模式对应的分组加密方式也很不一样，常用的算法模式主要有<strong>电子密码本模式（ECB）</strong>、<strong>电子密码链条模式（CBC）</strong>、<strong>加密反馈模式（CFB）</strong>以及<strong>输出反馈模式（OFB）</strong>等等。</p><p><strong>电子密码本模式（ECB）</strong> ECB模式的全称是<code>Electronic CodeBook模式</code>，ECB模式是所有算法模式中最简单的一种，它直接将分组的明文数据加密成为分组的密文，因为这种算法模式在处理的时候明文和密文存在一种一一对应的关系，因此主要样本足够大便能够轻易的进行破解，风险性较高。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt0012.png?raw=true"></p><p><strong>加密反馈模式（CFB）</strong> CFB模式的全称是<code>Cipher FeedBack模式</code>,也称为密文反馈模式，它的特点是前一个密文分组会被送回到加密算法的输入端。需要注意的是针对CFB模式可以实施重放攻击。</p><p><strong>输出反馈模式（OFB）</strong> OFB模式的全称是<code>Output-FeedBack模式</code>，在该模式中加密算法的输出会反馈到机密算法的输入中，它通过将明文分组和加密算法的输出进行异或运算来产生密文分组。</p><p><strong>电子密码链条模式（CBC）</strong> CBC模式的全称是<code>Cipher Block Chaining</code>模式，也称为密文分组链接模式。<span style="color:#195">在CBC模式中，首先会将明文分组与前一个密文分组进行异或运算，然后再进行加密</span>。解密的过程刚好相反，因为第一块明文分组前并没有现成的密文分组可以与之进行异或运算，所以CBC模式在使用的时候需要一个初始化向量。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt0013.png?raw=true"></p><p><strong>异或运算（XOR）</strong> 异或运算的全称是<code>exclusiveor</code>用于位运算。异或运算的特点相同为0，相异为1，常用⊕符号来表示。1 ⊕ 1 = 0；1 ⊕ 0 = 1；因为它的“还原”性质，异或运算在密码技术中被广泛应用。</p><p><strong>伪装（spoofing）</strong> 伪装简单说冒名顶替，不是某人却假装是对方，在网络通信模型中主要体现在伪装成消息的发送者和接收者进行通信。</p><p><strong>篡改（distort）</strong> 发送者把消息发送给接收者的中途消息可能会被恶意修改（篡改）。</p><p><strong>伪随机数生成器（Pseudo Random Number Generator,PRNG）</strong> 伪随机数生成器是一种能够模拟产生随机数列的算法，密码技术中主要用于生成密钥。</p><p><strong>对称加密算法</strong> 对称加密是一种应用时间较久且技术成熟的加密算法，因为对称加密算法加密和解密只有一个密钥所以也被称为<strong>秘密密钥加密算法（Secret Key Cryptography）</strong>或者是<strong>私钥加密算法（Private Key Cryptography）</strong>。对称加密算法的特点是安全性高、性能好、加密解密使用相同的密钥。经典的对称加密算法有：<code>DES、双重DES、3DES、AES、RC4、RC5以及Blowfish</code>等。对称加密算法存在的主要问题有：密钥传输安全问题以及每个通信模型都需要一个密钥。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt004.png?raw=true"></p><p><strong>数据加密标准（DES）</strong> DES是一种典型的对称加密算法，也被称为<code>DEA（ANSI称之为数据加密算法）</code>或者是<code>DEA-1（ISO设置的称谓）</code>。DES是一种使用了几十年的分组（块）加密算法，加密的时候会先对明文进行分组，分组的长度为64位（输入64位的明文输出64位的密文），DES加密和解密使用的密钥相同，密钥的有效长度为56位。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt005.png?raw=true"></p><p><strong>双重DES</strong> 双重DES是DES加密算法的变种，为了加强DES加密算法的强度，双重DES使用两个密钥，需要进行两次DES运算。</p><p><strong>3DES</strong> 3DES是DES加密算法的变种，3DES执行3次DES运算，常见的3DES算法有两种版本，一种版本使用3个密钥（使用3个密钥进行3次DES加密运算），另外一种版本使用2个密钥（使用密钥1进行加密-&gt;使用密钥2进行解密-&gt;使用密钥1进行加密）。</p><p><strong>国际数据加密算法（International Data Encryption Algorithm，IDEA）</strong> IDEA由研究员<code>Xuejia Lai</code>和<code>James L. Massey</code>研发，瑞士公司<code>Ascom Systec</code>拥有其专利权。IDEA被认为是最强大的数据加密算法之一，IDEA是典型的对称加密算法和DES算法类型，其使用的也是分组加密方式，分组长度为64位，密钥长度为128位。</p><p><strong>RC4（Rivest Cipher 4）</strong> RC4于1987年由<code>Ron Rivest</code>开发，加密和解密使用相同的密钥，是典型的对称加密算法，但和DES不同的是<code>RC采用的是流加密算法</code>，其密钥长度可变。</p><p><strong>RC5（Rivest Cipher 5）</strong> RC5是<code>Ron Rivest</code>开发出来的基于<code>分组加密算法的对称加密算法</code>，特点是速度快，灵活性更高。</p><p><strong>高级数据加密标准（Advanced Encryption Standard，AES）</strong> 20世纪90年代，美国政府想把已经广泛使用的加密算法标准化以替代DES算法，被称为高级数据加密标准（AES），为此当时提出了很多的草案，经过多次争论后确定使用<code>Rijndael算法</code>。AES算法规定支持的密钥长度和明文分组长度为128位~256位（步长为32位）。常用的AES版本是128位明文分组加128位密钥的版本和128位明文分组加256位密钥的版本。</p><p><strong>非对称加密算法（Asymmetric Key Cryptography）</strong> 非对称加密算法也称为<strong>公钥加密算法（Public Key Cryptography）</strong>，和对称加密算法加密和解密使用相同的密钥不一样的是，非对称加密算法拥有两个密钥（一个密钥对），其中用于<code>加密的密钥称为公钥，用于解密的密钥被称为私钥</code>。非对称加密算法解决了对称加密算法中的密钥传输安全问题（密钥交换问题），经典的非对称加密算法主要有<code>RSA</code>和<code>EIGamal算法</code>。非对称加密算法相对来说性能速度没有对称加密那么好（速度慢、密文大），而且虽然解决了对称加密中的密钥交换问题但自己还存在公钥认证问题。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt006.png?raw=true"></p><p><strong>公钥（Public Key）</strong> 非对称加密算法中用于对消息进行加密处理的密钥，因为加密的密钥一般都是公开的，所以该密钥又被称为公钥。</p><p><strong>私钥（Private Key）</strong> 非对称加密算法中用于对加密后的消息进行解密处理的密钥，因为该密钥是绝对不能公开的，所以该密钥又被称为私钥。</p><p><strong>密钥对（key pair）</strong> &nbsp; &nbsp; <span style="border:1px solid #000"><strong>&nbsp; &nbsp;密钥对 = 公钥 + 私钥 &nbsp; &nbsp;</strong></span> 在非对称加密算法中加密使用的公钥和解密使用的私钥应该是一一对应的，这样的一对匹配的密钥我们称之为密钥对。</p><p><strong>公钥认证</strong> 所谓公钥认证问题就是发送者和接收者在进行通信的时候，发送方无法对公钥进行认证，即无法确证公钥是正确真实的而非伪造的。因为在使用非对称加密算法的时候我们无法对公钥进行认证，所以可能会遭遇<strong>中间人攻击</strong>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt007.png?raw=true"></p><p><strong>中间人攻击（Man-in-the-MiddleAttack）</strong> 在特定的场景中(比如网络通信)，使用非对称加密的方式来进行安全的通信可能会遭遇到中间人攻击。假设在客户端和服务器端刚建立通信的时候，客户端先发请求给服务器端索要加密中需要用到的公钥，而这个过程如果被窃听，<span style="color:#195">那么当服务器把公钥返回给客户端的时候，窃听者把返回的公钥截留，然后再自己伪造一个密钥对并把伪造的公钥返回给客户端</span>。客户端拿到公钥之后因为无法对公钥进行认证所以并不知道收到的公钥已在中途被替换，客户端使用窃听者伪造的公钥对消息进行加密之后发给服务器，中途窃听者接收到加密的消息后<span style="color:#195">使用配对的私钥来对加密的消息进行解密，篡改消息的内容后再使用之前截留的公钥来对消息加密并转发给服务器端</span>。整个过程中，客户端和服务器端都没察觉通信已经被监听、消息已经被篡改，它们彼此还天真的以为自己在使用着非对称加密算法进行着世界上最隐蔽的交流。上面描述的这个过程就是一个典型的中间人攻击的场景，利用的正是<code>客户端无法对公钥进行认证</code>以及HTTP明文传输，要解决这个问题可以考虑对公钥进行<strong>数字签名</strong>，在Web通信中对公钥进行数字签名其实就是<strong>证书</strong>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt0008.png?raw=true"></p><p><strong>RSA算法</strong> RSA是最著名和可靠的非对称加密算法，它的名字由它的三位开发者，即<code>Ron Rivest</code>、<code>Adi Shamir</code>和<code>Leonard Adleman</code>的姓氏的首字母组成，也就是（<strong>Rivest - Shamir - Adleman</strong>）, RSA算法实现基于数学中的素数，它基于的数学事实是：<code>两个大的素数相乘很容易而对于得到的积求因子则很困难</code>。</p><p><strong>数字签名（digital signature）</strong> 数字签名是一种在信息安全领域能够解决伪装、篡改和否认等问题的技术，类似于现实世界中的签名盖章。数字签名技术的使用基于这样的事实：<span style="color:#195">使用一个公钥加密的消息只能使用相应的私钥来进行解密，反过来，使用私钥加密的消息只能用相应的公钥进行解密</span>。想象下面的场景，在双方通信的时候，我们如何能够确认收到的消息是对方发送而不是由中间人伪造的呢？在现实中我们采用的方式可能是盖章、签名或者指纹，因为不管是签名还是指纹都只有特定的人拥有，是私有性质的。我们知道在非对称加密中公钥是可以公开的，私钥私有不能公开，所以具体的实现数字签名的时候，发送方<code>使用自己的私钥来来对消息进行加密就可以得到一个数字签名</code>，接收者收到消息（数字签名）之后如果能够用公钥对消息进行加密那么我们就能够实现基本的<strong>认证</strong>。数字签名技术在现代Web商务中至关重要，多数国家已经把数字签名看成是与手工签名具有同等法律效力的授权机制。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt009.png?raw=true"></p><p><strong>生成数字签名</strong> 使用自己的私钥来对特定消息进行加密得到签名字符串的过程，我们称为生成数字签名，该步骤由发送者处理。</p><p><strong>验证数字签名</strong> 接收到签名消息后使用发送者的公钥<span style="color:#195">（签名密钥只能由签名的人持有，而验证公钥则是任何需要验证签名的人都可以持有）</span>来对签名进行解密匹配的过程，我们称为验证数字签名，该步骤由接收者处理。验证数字签名的结果可以是成功或者是失败，如果成功则表示该信息确实是由特定的发送者发出的。</p><p><strong>数字签名机制</strong> 数字签名的机制似乎刚好是把非对称加密的过程反过来，在数字签名技术中，我们使用私钥来对消息加密生成签名，然后使用公钥来对签名进行验证。常用的生成和验证数字签名的方法有两种<strong>① 直接对消息进行签名</strong>以及<strong>② 对消息的散列值进行签名</strong>。</p><p><strong>散列值（Hash Value）</strong> 使用<strong>单向散列函数</strong>来对消息进行散列计算得到的结果被称为散列值，散列值也被称为<strong>消息摘要（Message digest）</strong>或者<strong>指纹（Fingerprint）</strong>。</p><p><strong>单向散列函数（One-way Hash Function）</strong> 单向散列函数也被称为<strong>消息摘要函数（Message Digest Function）</strong>、<strong>哈希函数</strong>或者是<strong>杂凑函数</strong>。单向散列函数根据消息的内容来计算出散列值，在数据加密（如注册-登录）、文件完整性验证、版权处理、云盘秒传等方面有具体的应用。经典的单向散列函数算法有：<code>MD4、MD5、SHA家族以及HMAC</code>等，下面简单罗列单向散列函数的性质特征：</p><blockquote><p>❑ 对任意长度的消息计算得到的散列值是定长的。<br>❑ 计算散列值的速度快、效率高<br>❑ 消息相同，散列值一定相同，消息不同，散列值一定不同。<br>❑ 散列计算的过程是单向的，不可逆</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt0010.png?raw=true"></p><p><strong>碰撞（Collision）</strong> 虽然单向散列函数的性质中有<code>如果消息不同那么散列值一定不同</code>，但这并不是绝对的，两个不同的消息产生同一个散列值的情况称为<strong>碰撞</strong>，如果要将单向散列函数用于文件完整性检验，那么需要确保事实上不可能被认为的发现碰撞。</p><p><strong>抗碰撞性（Collision Resistance）</strong> 难以发现碰撞的性质被称为抗碰撞性，密码技术中所使用的单向散列函数都要求具备抗碰撞性。</p><p><strong>弱抗碰撞性</strong> 单向散列函数必须确保要找到和该条消息具有相同散列值的另外一条消息是非常困难的，这一性质被称为弱抗碰撞性。</p><p><strong>MD4</strong> 消息摘要算法第4版本，<strong>（Message Digest 4）</strong>1990年由Rivest设计，已经被破解并不安全。</p><p><strong>MD5</strong> 消息摘要算法第5版本，<strong>（Message Digest 5）</strong> Rivest于1991年设计的单向散列函数，能够产生128位的散列值，该算法的强抗碰撞性已经被攻破也不安全。</p><p><strong>SHA家族算法</strong> SHA家族拥有一系列的具体算法，包括：<code>SHA-1、SHA-256、SHA-384、SHA-512</code>等，这些算法均是由美国国家标准与技术研究院（National Institute of Standards and Technology，NIST）设计的单向散列函数。目前SHA-1的强抗碰撞性已经被攻破（2005年由山东大学王小云教授带领的团队提出了针对SHA-1的碰撞攻击算法）。</p><p><strong>消息认证码（Message Authentication Code，MAC）</strong> 消息认证码和消息摘要类似，区别在于消息摘要是消息的指纹，其散列计算并不涉及到具体的加密过程，而MAC则要求通信双方知道共享对称密钥用来准备MAC，其涉及到具体的加密过程。</p><p><strong>HAMC</strong> 是基于散列的消息认证码（<code>Hash-based Message Authentication Code ,HMAC</code>）其在IP协议中作为强制的安全实施方法，在SSL安全协议中也广泛使用，其核心思想是复用MD5和SHA-1这样的消息摘要算法，说白了HAMC是包含了加密的消息摘要算法，其本身存在实用性的问题。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/crypt0011.png?raw=true"></p><p><strong>公钥证书（Public-Key Certificate，PKC）</strong> 公钥证书简称为证书，内部包含了姓名、组织、邮箱等个人信息以及属于此人的公钥，并由<strong>第三方的认证机构(Certification Authority、Certifying Authority，CA)</strong>进行数字签名，只要看到公钥证书我们就能够确定该公钥的确属于此人。其实，简单的来理解的话，<code>证书就是对公钥进行数字签名</code>，它解决了非对称加密系统中存在的无法认证公钥问题。</p><p><strong>认证机构（Certification Authority，CA）</strong>是对证书进行管理的人。</p><p><strong>公钥基础设施（Public-Key Infrastructure）</strong> 是为了能够更有效地运用公钥而制定的一系列规范的总称，一般简称为PKI。需要注意的是PKI只是一个总称，而非某一个特定的规范或标准。</p><p><strong>混合加密系统</strong> 基于对称加密和非对称加密等算法的优缺点，在现实中使用的通常都是混合的加密系统。 &nbsp; &nbsp; <span style="border:1px solid #000"><strong>&nbsp; &nbsp; 混合加密系统 = 对称加密 + 非对称加密 + 单向散列函数 + 消息认证码 + 证书 + … &nbsp; &nbsp; </strong></span></p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.520it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.520it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文不详细介绍具体的加密算法，仅仅罗列数据安全领域常见的专业术语，并作出简要释义和说明。大概可以分成两大类，一类是参与的相关方(就是人),另一类则是冷冰冰的词汇了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;密码学（cryptogr
      
    
    </summary>
    
    
      <category term="数据安全系列" scheme="https://weibo.com/u/3800117445/tags/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据安全系列 Base64</title>
    <link href="https://weibo.com/u/3800117445/2018/07/31/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20Base64/"/>
    <id>https://weibo.com/u/3800117445/2018/07/31/数据安全系列 Base64/</id>
    <published>2018-07-30T16:00:00.000Z</published>
    <updated>2018-08-02T03:52:23.251Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文科普数据处理中常用的Base64相关知识，包括Base64编码方案的内部细节、特征及应用，文章末还提供了iOS和JavaScript版本的Base64编码和解码方案。</p></blockquote><h3 id="Base64编码方案介绍"><a href="#Base64编码方案介绍" class="headerlink" title="Base64编码方案介绍"></a>Base64编码方案介绍</h3><p><code>Base64</code>是一种基于64个可打印字符来表示二进制数据的表示方法，简单点说就是<code>Base64编码方案可以使用由64个指定字符的排列组合方式来表示所有的二进制数据</code>。Base64可以用作电子邮件的传输编码，常用于处理(表示、传输和存储)文本数据的业务场景中，在网络安全数据处理方面有应用。</p><p>下面我们使用电脑中的命令行工具先简单感受下Base64的编码方式（我自己使用的Mac OSX系统的终端，如果是windows操作系统可以下载<a href="https://gitforwindows.org/" target="_blank" rel="external">Git终端工具</a>）。</p><p><strong>① 编码文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">wendingding:Demo wendingding$ base64 123.png -o 123.text</div><div class="line">wendingding:Demo wendingding$ cat 123.text </div><div class="line"></div><div class="line">iVBORw0KGgoAAAANSUhEUgAAABIAAAAOCAYAAAAi2ky3AAAEGWlDQ1BrQ0dDb2xvclNwYWNlR2VuZXJpY1JHQgAAO</div><div class="line">I2NVV1oHFUUPrtzZyMkzlNsNIV0qD8NJQ2TVjShtLp/3d02bpZJNtoi6GT27s6Yyc44M7v9oU9FUHwx6psUxL+3gC</div><div class="line">Ao9Q/bPrQvlQol2tQgKD60+INQ6Ium65k7M5lpurHeZe58853vnnvuuWfvBei5qliWkRQBFpquLRcy4nOHj4g9K5C</div><div class="line">Eh6AXBqFXUR0rXalMAjZPC3e1W99Dwntf2dXd/p+tt0YdFSBxH2Kz5qgLiI8B8KdVy3YBevqRHz/qWh72Yui3MUDE</div><div class="line">L3q44WPXw3M+fo1pZuQs4tOIBVVTaoiXEI/MxfhGDPsxsNZfoE1q66ro5aJim3XdoLFw72H+n23BaIXzbcOnz5mfP</div><div class="line">oTvYVz7KzUl5+FRxEuqkp9G/Ajia219thzg25abkRE/BpDc3pqvphHvRFys2weqvp+krbWKIX7nhDbzLOItiM8358</div><div class="line">pTwdirqpPFnMF2xLc1WvLyOwTAibpbmvHHcvttU57y5+XqNZrLe3lE/Pq8eUj2fXKfOe3pfOjzhJYtB/yll5SDFcS</div><div class="line">DiH+hRkH25+L+sdxKEAMZahrlSX8ukqMOWy/jXW2m6M9LDBc31B9LFuv6gVKg/0Szi3KAr1kGq1GMjU/aLbnq6/lR</div><div class="line">xc4XfJ98hTargX++DbMJBSiYMIe9Ck1YAxFkKEAG3xbYaKmDDgYyFK0UGYpfoWYXG+fAPPI6tJnNwb7ClP7IyF+D+</div><div class="line">bjOtCpkhz6CFrIa/I6sFtNl8auFXGMTP34sNwI/JhkgEtmDz14ySfaRcTIBInmKPE32kxyyE2Tv+thKbEVePDfW/b</div><div class="line">yMM1Kmm0XdObS7oGD/MypMXFPXrCwOtoYjyyn7BV29/MZfsVzpLDdRtuIZnbpXzvlf+ev8MvYr/Gqk4H/kV/G3csd</div><div class="line">azLuyTMPsbFhzd1UabQbjFvDRmcWJxR3zcfHkVw9GfpbJmeev9F08WW8uDkaslwX6avlWGU6NRKz0g/SHtCy9J30o</div><div class="line">/ca9zX3Kfc19zn3BXQKRO8ud477hLnAfc1/G9mrzGlrfexZ5GLdn6ZZrrEohI2wVHhZywjbhUWEy8icMCGNCUdiBl</div><div class="line">q3r+xafL549HQ5jH+an+1y+LlYBifuxAvRN/lVVVOlwlCkdVm9NOL5BE4wkQ2SMlDZU97hX86EilU/lUmkQUztTE6</div><div class="line">mx1EEPh7OmdqBtAvv8HdWpbrJS6tJj3n0CWdM6busNzRV3S9KTYhqvNiqWmuroiKgYhshMjmhTh9ptWhsF7970j/S</div><div class="line">bMrsPE1suR5z7DMC+P/Hs+y7ijrQAlhyAgccjbhjPygfeBTjzhNqy28EdkUh8C+DU9+z2v/oyeH791OncxHOs5y2A</div><div class="line">tTc7nb/f73TWPkD/qwBnjX8BoJ98VQNcC+8AAAAkSURBVCgVY2RkZPzPQAXARAUzwEaMGkQ4JEfDaDSMCIcAYRUAP</div><div class="line">hgBHp0GsDQAAAAASUVORK5CYII=</div><div class="line"></div><div class="line">wendingding:Demo wendingding$ base64 123.text -D -o new.png</div><div class="line">wendingding:Demo wendingding$ tree -L 2</div><div class="line">.</div><div class="line">├── 123.png</div><div class="line">├── 123.text</div><div class="line">└── new.png</div><div class="line">wendingding:Demo wendingding$ md5 123.png </div><div class="line">MD5 (123.png) = 314e5198b3d2da9fbfb0d85c398bcbe2</div><div class="line">wendingding:Demo wendingding$ md5 new.png </div><div class="line">MD5 (new.png) = 314e5198b3d2da9fbfb0d85c398bcbe2</div></pre></td></tr></table></figure></p><p>在上面的演示中我们首先对Demo文件目录下的123.png文件（图片）进行base64编码，把结果保存到123.text文件后又对123.text文件进行base64解码操作，并最终匹配解码后得到的文件和源文件。</p><p><strong>命令行说明</strong></p><p><code>$ base64 123.png -o 123.text</code> 表示对当前目录下的123.png图片进行base64编码结果保存到123.text。<br><code>$ cat 123.text</code> 表示列出123.text文件中的文本内容。<br><code>$ base64 123.text -D -o new.png</code> 表示对123.text文件进行base64解码，结果保存为new.png文件。<br><code>$ md5 123.png</code> 表示对123.png原文件进行md5散列计算，得到唯一散列值。<br><code>$ md5 new.png</code> 表示对new.png解码后的文件进行md5散列计算，得到唯一散列值。</p><p><strong>② 编码字符串</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wendingding:Source wendingding$ <span class="built_in">echo</span> -n <span class="string">"我失去了一只臂膀，就睁开一只眼睛"</span> | base64</div><div class="line">5oiR5aSx5Y675LqG5LiA5Y+q6IeC6IaA77yM5bCx552B5byA5LiA5Y+q55y8552b</div><div class="line">wendingding:Source wendingding$ <span class="built_in">echo</span> -n <span class="string">"5oiR5aSx5Y675LqG5LiA5Y+q6IeC6IaA77yM5bCx552B5byA5LiA5Y+q55y8552b"</span> | base64 -D</div><div class="line">我失去了一只臂膀，就睁开一只眼睛</div></pre></td></tr></table></figure><p>Base64可以对任意的二进制数据进行编码，不论原数据是什么样的（可以是图片、视频、文本、字符串等）编码后我们得到的总是一个由众多字符组成的字符串，而且Base64是可逆的。</p><p>Base64编码后得到的字符串由64位字符排列组合而成，这64位字符分别是：<span style="color:#195">字母A-Z、a-z、数字0-9、+和/</span>,下面列出Base64的索引表（摘自<a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="external">Base64维基百科</a>）。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/base64_index.png?raw=true" width="400px"></p><div class="tip"><strong>注意</strong> 在进行编码的时候因为可能出现要编码的字节数不能被3整除的情况，所以实际编码得到的字符串文本中还可能出现特殊字符=符号。</div><h3 id="Base64的编码策略"><a href="#Base64的编码策略" class="headerlink" title="Base64的编码策略"></a>Base64的编码策略</h3><p><strong>编码</strong>  我们在写代码的时候直接面对处理的数据通常是文字、图像和声音等信息，计算机在操作的时候，要知道它们操作的对象并不是这些物化的具体的文字|声音|视频等内容，而是无差别的由0和1排列组合而成的比特序列。将现实世界中的内容映射成为比特序列的操作被称为<strong>编码（encoding）</strong>，常见的编码方案有ASCII 、GB2312(简体中文)和UTF-8等等，Base64也是其中的一种。</p><p>我们知道<strong><code>ASCII编码</code>（American Standard Code for Information Interchange，美国信息互换标准代码）</strong>这种通用的单字节编码系统中一共规定了128位字符，在具体进行编码的时候使用每8位一组的方式(即每个字符都使用八位的二进制数据来进行表示，注意这里实际只使用了7位，最前面的1位统一规定为0)来表示128种可能的字符。</p><div class="tip"><br>字节(Byte)是计算机技术中用于计量存储容量的一种计量单位，1字节等于8位(Bit)，即1 Byte = 8 Bit 。每1位可以存储0或1，表示两种状态。因为1个字节中拥有8位，每位存储的数据要么是0要么是1，所以1字节可以表示的数据范围为00000000~11111111，即2^8。<br></div><p>举个例子，如果我们需要处理Nice这个字符串单词，那么计算机使用不同的编码模式得到的比特序列结果是不一样的，下面给出ASCII编码和Base64编码的情况做对照。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/baseAndASCII.png?raw=true"></p><p>Base64在对字符进行连续编码的时候，总是<span style="color:#F58">以24位(3 x 8 = 24，3字节)为最小单位进行处理，把24位的数据以6位一组拆分为4组，把每一组的6位转换为二进制数据后查找Base64对应的索引表得到编码后的字符</span>,Base64编码后的数据比原文数据略长一些，大概是原文的4/3。为了帮助理解，下面给出了对Wen这三个字符进行base64编码的处理过程。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/wen.png?raw=true"></p><p><strong>说明</strong> <code>Wen三个字符</code>在ASCII中刚好占3个字节，使用3 X 8 = 24位二进制数据表示。我们先获取三个字符在ASCII编码中对应的十进制数字，分别为87、101和110，转换为二进制数据表示为：<span style="color:#195">01010111  01100101  01101110</span> ，然后把这24位二进制数据按照6位一组拆分为4组，即<span style="color:#195">010101  110110  010101  101110</span>，转换为十进制的数字对应为<strong>21、54、21和46</strong>，在base64索引表中查找对应的字符，最终得到<code>V2Vu</code>。</p><p><strong>关于结尾补齐的特殊处理</strong> 如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么在处理的时候会<span style="color:#195">先使用0字节值在末尾补足，使其能够被3整除，然后再进行Base64的编码，在进行编码的时候如果进行了补齐且最后6位全部为0那么转换为=符号</span>，下面以Yu这两个字符实例演示base64的处理过程。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/Yu.png?raw=true"></p><p>我们刚刚给出了Wen和Yu的base64编码案例，下面使用终端命令行进行验证。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wendingding:Source wendingding$ <span class="built_in">echo</span> -n <span class="string">"Wen"</span> | base64</div><div class="line">V2Vu</div><div class="line">wendingding:Source wendingding$ <span class="built_in">echo</span> -n <span class="string">"V2Vu"</span> | base64 -D</div><div class="line">Wen</div><div class="line">wendingding:Source wendingding$ <span class="built_in">echo</span> -n <span class="string">"Yu"</span> | base64</div><div class="line">WXU=</div><div class="line">wendingding:Source wendingding$ <span class="built_in">echo</span> -n <span class="string">"WXU="</span> | base64 -D</div><div class="line">Yu</div></pre></td></tr></table></figure></p><p>这里推荐一个base64编码和解码的<a href="http://tool.oschina.net/encrypt?type=3" target="_blank" rel="external">在线网站</a>，大家可以使用该网站来进行验证。</p><p><strong> 下面总结Base64编码的处理过程 </strong></p><blockquote><p>❒  将所有字符转化为ASCII码；<br>❒  将ASCII码转化为8位二进制；<br>❒  将二进制3个归成一组(不足3个在后边补0)共24位，再拆分成4组，每组6位；<br>❒  统一在6位二进制前补两个0凑足8位；<br>❒  将补0后的二进制转为十进制；<br>❒  从Base64编码表获取十进制对应的Base64编码；</p></blockquote><h3 id="Base64编码和解密的代码实现"><a href="#Base64编码和解密的代码实现" class="headerlink" title="Base64编码和解密的代码实现"></a>Base64编码和解密的代码实现</h3><p>   <strong>① iOS开发</strong> 在iOS开发中，从iOS7.0 开始，苹果就提供了base64的编码和解码支持，如果是&lt;7.0的老项目也许您还能看到base64编码和解码的第三方框架，如果当前代码不再需要对iOS7.0以下版本提供支持，则建议使用新的API来进行替换。下面给出两个封装好的方法，其中base64EncodeString用于对字符串进行base64编码，base64DecodeString用于解码操作。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">     <span class="comment">//给定一个字符串，对该字符串进行Base64编码，然后返回编码后的结果</span></div><div class="line"> - (<span class="built_in">NSString</span> *) base64EncodeString:(<span class="built_in">NSString</span> *)string &#123;</div><div class="line">      </div><div class="line">      <span class="comment">//1.先把字符串转换为二进制数据</span></div><div class="line">      <span class="built_in">NSData</span> *data = [string dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">         </div><div class="line">      <span class="comment">//2.对二进制数据进行base64编码，返回编码后的字符串</span></div><div class="line">      <span class="keyword">return</span> [data base64EncodedStringWithOptions:<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line">         </div><div class="line">     <span class="comment">//对base64编码后的字符串进行解码</span></div><div class="line"> - (<span class="built_in">NSString</span> *) base64DecodeString:(<span class="built_in">NSString</span> *)string&#123;</div><div class="line"> </div><div class="line">       <span class="comment">//1.将base64编码后的字符串『解码』为二进制数据</span></div><div class="line">       <span class="built_in">NSData</span> *data = [[<span class="built_in">NSData</span> alloc]initWithBase64EncodedString:string options:<span class="number">0</span>];</div><div class="line">         </div><div class="line">       <span class="comment">//2.把二进制数据转换为字符串返回</span></div><div class="line">       <span class="keyword">return</span> [[<span class="built_in">NSString</span> alloc]initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>  <strong>② 前端开发</strong> 在浏览器环境中，JavaScript提供两个方法来处理Base64编码和解码操作：<code>btoa方法</code>将字符串或二进制值转化为Base64编码，<code>atob方法</code>将Base64编码转化为原来的编码。需要说明的是，在进行使用这些方法进行编码和解码的时候需要考虑到非ASCII码字符的情况，如果是非ASCII码字符那么需要插入浏览器转码的操作。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64Encode</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>( str )));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64Decode</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob( str )));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 使用方法</span></div><div class="line">base64Encode(<span class="string">'Yu Hui：江湖再见！'</span>);                 <span class="comment">//WXUgSHVp77ya5rGf5rmW5YaN6KeB77yB</span></div><div class="line">base64Decode(<span class="string">"WXUgSHVp77ya5rGf5rmW5YaN6KeB77yB"</span>); <span class="comment">//Yu Hui：江湖再见！</span></div></pre></td></tr></table></figure><p><strong>Base64相关参考</strong></p><p>RFC 1421：<a href="https://tools.ietf.org/html/rfc1421" target="_blank" rel="external">https://tools.ietf.org/html/rfc1421</a><br>RFC 3548：<a href="https://tools.ietf.org/html/rfc3548" target="_blank" rel="external">https://tools.ietf.org/html/rfc3548</a><br>Base64维基百科词条：<a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Base64</a></p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.520it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.520it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文科普数据处理中常用的Base64相关知识，包括Base64编码方案的内部细节、特征及应用，文章末还提供了iOS和JavaScript版本的Base64编码和解码方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Base64编码方案介绍
      
    
    </summary>
    
    
      <category term="数据安全系列" scheme="https://weibo.com/u/3800117445/tags/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 [012]-可爱的洪水猛兽</title>
    <link href="https://weibo.com/u/3800117445/2018/07/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20%5B012%5D-%E5%8F%AF%E7%88%B1%E7%9A%84%E6%B4%AA%E6%B0%B4%E7%8C%9B%E5%85%BD/"/>
    <id>https://weibo.com/u/3800117445/2018/07/05/读书笔记 [012]-可爱的洪水猛兽/</id>
    <published>2018-07-04T16:11:18.000Z</published>
    <updated>2018-07-07T13:10:35.148Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">其实，韩寒的杂文比他的小说更好。</div><br><div style="color:#195; font-size:16px">※·※ 这一代人 ※·※</div><p><span style="color:#f25">政治可以关心的时代暂时还没有到来。</span></p><p>80后的到现在最大的才28岁，最小的19岁，也就是处长和处男之间，完全没有任何的权势，所以权力使用不当造成的后果再推卸到这代人身上是不公平的。[注：该文写于10年前，现在同样适用于90后]</p><p>有信仰自然是好事，关键是信仰带我们去向何方，如果信仰到我们去沟里，那我们还是暂且留在岸上看天色吧。</p><div style="color:#195; font-size:16px">※·※ 大师们，我等无条件臣服于您 ※·※</div><p>今天在人民网上看见有评论说，文化名人不应该在媒介发表不负责任的言论。尤其是大嘴巴言论导向舆论，出言不逊的结果是伤害整个民族的文学尊严。</p><p>怎么几句话就把整个民族的文学尊严给伤害了呢？</p><p>文学很容易编程政治的妓女，导致的结果就是，你跟对了人，你就是崇高和灵魂，你跟错了人，一模一样的文字，你就变成了反动和毒草。</p><p>一位有责任的文化人的基本修养是有骨气，说真话，不献媚，不阿谀，绝对不是对文学大师心怀尊敬之心，追念之心，文化人不是来烧香的。</p><p>唉，好好的文字狱怎么就没了呢？</p><div style="color:#195; font-size:16px">※·※ 给王唯懿 ※·※</div><p>对于死亡，我以前一直说，那是生命换了种模样，但和我们在分享同一个空间。</p><p>对于我，我希望我死的那天，我的人儿们，都念及我的好，我虽然有好有坏，但那天我的坏已经得到了偿还 ，而没人有能比我更好。</p><div style="color:#195; font-size:16px">※·※ 西 ※·※</div><p>算命的说我要求得功名，就在南方，要发财，就去北方。不能去西面，总之，不能去沾西字的地方。</p><p>明天我就要先飞去西安，然后转机去西宁，最后到西藏。依算命的结果，下一站是西天。</p><p>我就想这个世界，这个世界是不会变的。</p><div style="color:#195; font-size:16px">※·※ 电视台很X很XX ※·※</div><p>这是社会的进步，说明政府更加注重民心了。如果以前是直接强奸的话，现在已经讲究在强奸前做些前戏了。我这话很x很xx，不提倡。</p><p><span style="color:#f25">有些事情，无伤大雅，有些事情，你做错了，需要付出代价。</span></p><p>网民和城管不一样，他们都是光说不练的，都已经不练了还计较些什么呢，去管管那些光练不说的吧。</p><p>照片被大家看见了，以后你的偶像就和你坦诚相见了，所以，你比别的粉丝幸福，应该更加支持你的偶像才是。</p><div style="color:#195; font-size:16px">※·※ 2008年1号文件 ※·※</div><p>大家都知道，在我国，经常出现法律只能制裁守法者的事情。<br>我们老是说，他们的初衷是好的，但是初衷有什么用呢？<br>一刀切这个词其实是行政能力和法律落后的象征，因为一刀切谁都会。</p><p>我的心态和技术已经空前强大，只剩下运气是我不能决定的，狗啊，给我点狗屎运吧。</p><p>不要学我，你让我重来，我都学不像自己。</p><div style="color:#195; font-size:16px">※·※ 关于松岛枫 ※·※</div><p>希望道貌岸然者快点成长吧，然后要么开窍，要么死掉。</p><p>吹牛虽然不上税，但是好歹也得问问牛愿不愿意。</p><p>你说你想关心农民工，结果点到了松岛枫，这也太假了吧。</p><p>我们还有个毛病就是喜欢逼着人家道歉，就为了图自己一个意淫的舒服。</p><p>歪瓜裂枣的摆一排，图个声势嘛。</p><p>他们见坑就跳，见洞就掉。</p><p>在中国，“毒害”这个词语是政治手段。</p><p><span style="color:red">在通往民主的道路上，最大的阻碍就是人民。</span></p><p>你是否像鞭炮一样一点就着？一点就着的下场就是炮灰。</p><div style="color:#195; font-size:16px">※·※ 回答爱国者的问题 ※·※</div><p>爱国者问：祖国就是你的母亲…<br>韩寒回答：祖国是祖国，母亲是母亲。</p><p>爱国者问：你怎么对得起你脚下自己的土地…<br>韩寒回答：我没有自己的土地，你也没有自己的土地。</p><p>爱国主义不是免死金牌，爱国主义有时候反而送你一程。</p><p>人并不容易被煽动，但是人立志要做炮灰的时候，灰是比较容易被煽起来的。</p><p>我们能够统一思想，人家统一不了，这也就是西方世界普遍比较落后的原因。</p><div style="color:#195; font-size:16px">※·※ 关于汶川地震 ※·※</div><p>捐款不是喝喜酒送红包。<br>他们都是道德的小人，自己制定道德的准绳，在大家都忙着做善事没空的时候，他们闲着，指指点点。</p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.516it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.5it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;其实，韩寒的杂文比他的小说更好。&lt;/div&gt;&lt;br&gt;&lt;div style=&quot;color:#195; font-size:16px&quot;&gt;※·※ 这一代人 ※·※&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:#f25&quot;&gt;政治可以关心的时代
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://weibo.com/u/3800117445/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化系列[08] Gulp构建工具的基本使用</title>
    <link href="https://weibo.com/u/3800117445/2018/06/29/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%B3%BB%E5%88%97%5B08%5D%20Gulp%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://weibo.com/u/3800117445/2018/06/29/前端工程化系列[08] Gulp构建工具的基本使用/</id>
    <published>2018-06-29T10:42:13.000Z</published>
    <updated>2018-06-29T16:05:29.475Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍前端开发中常用的构建工具Gulp，具体包括Gulp的基本情况、安装、使用以及常见插件的安装、配置和使用等内容。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/gulp.png?raw=true" height="200px"></p><h3 id="Gulp介绍"><a href="#Gulp介绍" class="headerlink" title="Gulp介绍"></a>Gulp介绍</h3><p><strong>Gulp</strong><code>是使用JavaScript编写的，运行在Node.js上的一款自动化构建工具</code>，同类型的构建工具还有Grunt、Npm-script等。Gulp的构建系统基于流来实现，增加了监听文件、读写文件以及流式处理等功能，Gulp作为后起之秀整体来说比Grunt更加强大而且使用起来也更加简单，你值得拥有。</p><p><strong>Gulp优点</strong></p><blockquote><p>❏  基于流的操作，能更快速的构建项目并减少频繁的IO操作，更高效。<br>❏  提供最少的API，降低开发者的学习成本，自动构建相关代码更简单。<br>❏  代码优先的策略，让简单的任务简单处理，让复杂的任务变得可管理。<br>❏  严格的插件指南，确保所有的插件简单，职责单一能按期望方式工作。</p></blockquote><p><strong>Gulp和Grunt简单对比</strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/gulp01.png?raw=true"></p><p><strong>Gulp的组成结构</strong></p><p>Gulp本身和Grunt还是很相像的，Gulp项目主要由<code>Gulp-Cli</code>、<code>Node模块(本地的gulp和gulp插件)</code>以及<code>Gulpfile文件</code>构成。</p><blockquote><p><strong>Gulp-Cli &nbsp;&nbsp; ✧ </strong>  &nbsp;启动Gulp构建工具的命令行接口，全局安装。<br><strong>本地Gulp ✧ </strong>   &nbsp;构建时实际运行的本地程序,提供基本的API并加载构建指令和运行任务。<br><strong>Gulp插件 ✧ </strong>   &nbsp;Gulp构建工具生态系统中拥有众多高质量的插件，本质上是对特定任务的封装。<br><strong>Gulpfile文件 ✧ </strong> &nbsp;定义所有构建任务的配置文件，告诉本地Gulp如何执行具体构建操作的指令文件。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/gulp02.png?raw=true"></p><p>上图是Gulp几个部分的关系图，这里做简单说明。</p><p><code>Gulp-cli</code>是Gulp的命令行工具，如果项目中要使用Gulp构建工具，那么必须先安装Gulp-cli，它的作用非常简单，就死检查当前项目里是否安装了本地的Gulp，如果安装了那么Gulp-cli会根据命令行中输入的命令参数来启动本地Gulp接管后续的操作。Gulp-cli通常需要全局安装，这样任何目录下面的Gulp才能够在终端中执行。</p><p><code>本地Gulp</code>主要有两个作用，一个是提供构建必要的基本API，另一个是加载并执行定义好的任务。需要注意的是，本地的Gulp才是真正的Gulp运行时，它负责处理所有的任务，而Gulp-Cli是本地Gulp的全局入口，它负责把所有的命令参数都转交给本地Gulp处理，之后由Gulp来接手具体的构建过程。</p><p>本地Gulp在运行的时候，需要读取<code>Gulpfile.js文件</code>的内容，Gulpfile.js文件主要加载Gulp插件，并且调用Gulp相关的api来定义task（任务）。Gulp具体要做什么操作，应该如何执行这些操作等都由Gulpfile.js文件决定。</p><p><strong>Gulp参考</strong></p><p><a href="https://gulpjs.com/" target="_blank" rel="external">Gulp官网</a><br><a href="https://gulpjs.com.cn" target="_blank" rel="external">Gulp官网（中文）</a><br><a href="https://gulpjs.com/plugins/" target="_blank" rel="external">Gulp官方插件列表页</a><br><a href="https://www.npmjs.com/package/gulp" target="_blank" rel="external">Gulp在npm的发布页</a><br><a href="https://legacy.gitbook.com/book/wizardforcel/gulp-doc/details" target="_blank" rel="external">Gulp中文文档-GitBook</a></p><h3 id="Gulp的安装"><a href="#Gulp的安装" class="headerlink" title="Gulp的安装"></a>Gulp的安装</h3><p><span style="border:1px solid #000"><strong>&nbsp; &nbsp;环境支持&nbsp; &nbsp;</strong></span></p><p>Gulp基于Node.js，所以在安装gulp之前，请确认已经在系统环境中安装了Node.js和npm（默认和Node绑定在一起安装）。</p><p>Node.js的安装请参考<a href="https://nodejs.org" target="_blank" rel="external">Node官网</a>，根据提示安装完成后，可以通过下面的命令来检查Node.js和npm是否被正确安装。</p><p><code>$ node --version</code><br><code>$ npm --version</code></p><p><span style="border:1px solid #000"><strong>&nbsp; &nbsp;Gulp-Cli的安装&nbsp; &nbsp;</strong></span></p><p>Node的环境准备好之后，接下来就可以来安装Gulp的命令行工具了。需要注意，Gulp的命令行工具需要全局安装，安装完成后可以通过查看版本号的方式来进行确认，下面给出安装命令。</p><p><code>$ npm install -g gulp-cli</code><br><code>$ gulp --version</code></p><p>这里顺便贴出终端执行细节。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">wendingding$ node --version</div><div class="line">v8.9.3</div><div class="line">wendingding$ npm --version</div><div class="line">5.5.1</div><div class="line">wendingding$ npm install -g gulp-cli</div><div class="line">/usr/<span class="built_in">local</span>/bin/gulp -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/gulp-cli/bin/gulp.js</div><div class="line">+ gulp-cli@2.0.1</div><div class="line">added 236 packages <span class="keyword">in</span> 89.58s</div><div class="line">wendingding$ gulp --version</div><div class="line">[17:23:12] CLI version 2.0.1</div></pre></td></tr></table></figure></p><p><span style="border:1px solid #000"><strong>&nbsp; &nbsp;本地Gulp的安装&nbsp; &nbsp;</strong></span></p><p>安装好Gulp的命令行工具后，就可以在您的项目目录中安装本地的局部Gulp了。本地的Gulp是真正运行构建任务的程序，全局的Gulp-Cli仅仅用于检查本地Gulp是否可用，如果可用那么就启动本地Gulp程序。安装成功后，本地的Gulp位于目录结构中的node_modules文件夹下。它包含了Gulpfile文件需要的所有函数和API。</p><p><strong>① 创建项目目录，使用命令行工具先进入当前路径（假设项目名称为GulpDemo）</strong></p><p><code>$ mkdir GulpDemo</code><br><code>$ cd GulpDemo/</code></p><p><strong>② 初始化环境，创建package.json文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">wendingding$ mkdir GulpDemo</div><div class="line">wendingding$ <span class="built_in">cd</span> GulpDemo/</div><div class="line">GulpDemo wendingding$ npm init</div><div class="line">This utility will walk you through creating a package.json file.</div><div class="line">It only covers the most common items, and tries to guess sensible defaults.</div><div class="line"></div><div class="line">See `npm <span class="built_in">help</span> json` <span class="keyword">for</span> definitive documentation on these fields</div><div class="line">and exactly what they <span class="keyword">do</span>.</div><div class="line"></div><div class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</div><div class="line">save it as a dependency <span class="keyword">in</span> the package.json file.</div><div class="line"></div><div class="line">Press ^C at any time to quit.</div><div class="line">package name: (gulpdemo)</div><div class="line">version: (1.0.0)</div><div class="line">description:</div><div class="line">entry point: (index.js)</div><div class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</div><div class="line">git repository:</div><div class="line">keywords:</div><div class="line">author: 文顶顶</div><div class="line">license: (ISC)</div><div class="line">About to write to /Users/文顶顶/GulpDemo/package.json:</div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"gulpdemo"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"文顶顶"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Is this ok? (yes) yes</div></pre></td></tr></table></figure></p><p><strong>③ 安装Gulp到当前项目中</strong></p><p><code>$ npm install --save-dev gulp</code></p><p><code>save-dev</code>参数的作用是把安装的Gulp版本正确保存在package.json文件中，命令行执行完毕后我们可以通过<code>cat指令</code>来查看package.json文件的内容，可以发现devDependencies字段增加了gulp信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">GulpDemo wendingding$ cat package.json</div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"gulpdemo"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"文顶顶"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>④ Gulp安装好后，可以通过<code>--version</code>命令检查版本信息确认</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GulpDemo wendingding$ gulp --version</div><div class="line">[19:30:11] CLI version 2.0.1</div><div class="line">[19:30:11] Local version 3.9.1</div><div class="line">GulpDemo wendingding$ Tree -L 1</div><div class="line">.</div><div class="line">├── node_modules</div><div class="line">├── package-lock.json</div><div class="line">└── package.json</div></pre></td></tr></table></figure></p><p>现在全局的Gulp-Cli和本地的Gulp安装完毕，且package.json文件准备好后，就可以创建Gulpfile.js文件来处理具体的Task了。</p><h3 id="Gulp的基本使用"><a href="#Gulp的基本使用" class="headerlink" title="Gulp的基本使用"></a>Gulp的基本使用</h3><p>前面我们对Gulp进行了简单了介绍，并且已经在全局安装好了Gulp命令行工具并把Gulp安装到了当前项目（GulpDemo）中，接下来这里简单介绍下Gulp的基本使用。</p><p>Gulp要执行哪些任务，这些任务的具体执行方式等等的都由Gulpfile文件中的命令来决定，现在我们先在GulpDemo根目录下创建一个空的Gulpfile.js文件，然后编写具体的Task处理代码。</p><p>在根目录创建文件命令：<code>$ touch Gulpfile.js</code></p><p>Gulp的任务可以简单的划分为两种，一种是自定义任务，另外一种是使用Gulp插件，不管是什么类型的任务都通过gulp.task这个API来进行设置。</p><p><strong>自定义Task</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//[01] 引入本地的Gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"></div><div class="line"><span class="comment">//[02] 定义Task（自定义的任务）</span></div><div class="line">gulp.task(<span class="string">"demo"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"这是一个自定义的Task"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>编辑Gulpfile.js文件的内容，这里我们先引入了本地的gulp，然后通过gulp.task这个API定义了一个打印输出字符串的任务。gulp.task方法接收两个参数，第一个参数为任务的名称，第二个参数为表示具体任务的回调函数。当我们执行指定任务的时候，该任务对应的回调函数会被执行。</p><p>在终端中输入<code>$ gulp demo</code>指令来执行自定义任务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GulpDemo wendingding$ gulp demo</div><div class="line">[20:22:40] Using gulpfile ~/GulpDemo/gulpfile.js</div><div class="line">[20:22:40] Starting <span class="string">'demo'</span>...</div><div class="line">这是一个自定义的Task</div><div class="line">[20:22:40] Finished <span class="string">'demo'</span> after 260 μs</div></pre></td></tr></table></figure></p><p><strong>Gulp插件Task</strong></p><p>在Gulp作为项目构建工具使用的时候，通常主要是使用现成的相关插件来处理Task的，因为Gulp生态的原因，Gulp的插件数量足够多，质量足够好。这里我们就以一款比较流行的JavaScript代码压缩和混淆插件<code>uglify</code>为例简单说明。</p><p>要使用某个插件，需要先把该插件下载安装到本地。</p><p>安装插件的命令  <code>$ npm install --save-dev gulp-uglify</code></p><p>上面的命令会把Uglify的Gulp插件下载到当前项目的node_modules文件夹下，并在package.json文件中保存相关的依赖信息。</p><p>插件安装完毕之后，我们在Gulpfile.js文件中需要先把要用到的插件引入进来，然后调用相关的API即可，下面给出代码示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//[01] 引入本地的Gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</div><div class="line"><span class="comment">//[02] 引入gulp-uglify插件</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//[03] 定义Task（自定义的任务）</span></div><div class="line">gulp.task(<span class="string">"demo"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"这是一个自定义的Task"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//[04] 定义Task（插件）</span></div><div class="line">gulp.task(<span class="string">"uglifyTask"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">"src/js/*.js"</span>).pipe(uglify()).pipe(gulp.dest(<span class="string">"dist"</span>));</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>然后通过<code>$ gulp uglifyTask</code>命令来执行uglifyTask任务即可，该任务执行的时候会把src/js/目录下面所有的js文件进行压缩混淆并把结果分别保存到dist目录下，下面简单列一下终端的执行情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GulpDemo wendingding$ gulp uglifyTask</div><div class="line">[23:58:51] Using gulpfile ~/GulpDemo/gulpfile.js</div><div class="line">[23:58:51] Starting <span class="string">'uglifyTask'</span>...</div><div class="line">[23:58:51] Finished <span class="string">'uglifyTask'</span> after 64 ms</div></pre></td></tr></table></figure><p>Gulp执行任务的时候，支持一次性执行多个任务，语法格式为：<code>$ gulp task1 task2</code>，上面的Gulpfile.js文件中如果要依次执行uglifyTask和demo这两个Task，那么可以像下面这样处理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GulpDemo wendingding$ gulp uglifyTask demo</div><div class="line">[00:01:35] Using gulpfile ~/GulpDemo/gulpfile.js</div><div class="line">[00:01:35] Starting <span class="string">'uglifyTask'</span>...</div><div class="line">[00:01:35] Starting <span class="string">'demo'</span>...</div><div class="line">这是一个自定义的Task</div><div class="line">[00:01:35] Finished <span class="string">'demo'</span> after 185 μs</div><div class="line">[00:01:35] Finished <span class="string">'uglifyTask'</span> after 65 ms</div></pre></td></tr></table></figure></p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.520it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.520it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要介绍前端开发中常用的构建工具Gulp，具体包括Gulp的基本情况、安装、使用以及常见插件的安装、配置和使用等内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/
      
    
    </summary>
    
    
      <category term="前端工程化系列" scheme="https://weibo.com/u/3800117445/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript系列 [06]-TypeScript语言特性(五)</title>
    <link href="https://weibo.com/u/3800117445/2018/06/24/TypeScript%E7%B3%BB%E5%88%97%20%5B06%5D-typeScript%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7(%E4%BA%94)/"/>
    <id>https://weibo.com/u/3800117445/2018/06/24/TypeScript系列 [06]-typeScript语言特性(五)/</id>
    <published>2018-06-24T10:05:13.000Z</published>
    <updated>2018-06-25T09:45:19.443Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要对TypeScript中的泛型进行展开介绍。主要包括以下内容</p><p>❏  泛型函数类型<br>❏  泛型接口（Interface）<br>❏  泛型类（Class）<br>❏  泛型约束</p></blockquote><h3 id="泛型函数的类型"><a href="#泛型函数的类型" class="headerlink" title="泛型函数的类型"></a>泛型函数的类型</h3><p>在<a href="http://wendingding.com/2018/06/23/TypeScript%E7%B3%BB%E5%88%97%20[05]-typeScript%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7(%E5%9B%9B" target="_blank" rel="external">TypeScript语言特性</a>)这篇文章中，我们已经介绍了什么是泛型函数，它跟普通函数还是有些区别的（泛型函数使用类型变量来占位，具体类型值由函数调用传参决定）。以前文章中介绍过TypeScript中的数据类型，以及可选的类型声明。虽然并没有必要（因为可以通过类型推导机制推导出来），但我们确实能够抽取出普通函数的具体类型。下面代码中demo函数的函数类型为：<code>(name:string,age:number) =&gt; string</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件路径 ../08-泛型函数/03-函数的类型.ts</span></div><div class="line"></div><div class="line"><span class="comment">//[001] 函数的类型</span></div><div class="line"><span class="comment">//(1) 声明demo函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">name:string,age:number</span>):<span class="title">string</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"姓名:"</span> +name + <span class="string">"年龄:"</span> + age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//(2) 把demo函数赋值给f</span></div><div class="line"><span class="keyword">let</span> f:<span class="function">(<span class="params">name:string,age:number</span>)=&gt;</span>string = demo;</div><div class="line"><span class="comment">//使用demo函数的调用签名</span></div><div class="line"><span class="comment">//let f:&#123;(name:string,age:number):string&#125; = demo;</span></div><div class="line"><span class="built_in">console</span>.log(f(<span class="string">"zs"</span>,<span class="number">18</span>));    <span class="comment">//姓名:zs年龄:18</span></div></pre></td></tr></table></figure><p>接下来，我们花点时间研究，泛型函数的函数类型。其实<span style="color:#195">泛型函数的类型与非泛型函数的类型本质上并没由什么不同，只是在最前面增加一个类型变量参数而已</span>。下面给出具体的代码示例。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function demoT&lt;T&gt;(arg:T):T&#123;</div><div class="line">  <span class="keyword">return</span> arg;</div><div class="line">&#125;</div><div class="line"><span class="comment">//泛型函数demoT的类型为：&lt;T&gt;(arg:T) =&gt;T</span></div><div class="line">let f1 : &lt;T&gt;(arg:T) =&gt;T = demoT;</div><div class="line"><span class="comment">//使用带有调用签名的对象字面量来定义泛型函数</span></div><div class="line">let f2 : &#123;&lt;T&gt;(arg:T) :T&#125; = demoT;</div><div class="line"><span class="comment">//可以使用不同的泛型参数名（这里为X）</span></div><div class="line">let f3 : &lt;X&gt;(arg:X) =&gt;X = demoT;</div><div class="line"><span class="comment">//不使用类型声明</span></div><div class="line">let f4 = demoT;</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(f1(<span class="string">"abc"</span>));     <span class="comment">//abc</span></div><div class="line">console.<span class="built_in">log</span>(f2(<span class="string">"哈哈"</span>));     <span class="comment">//哈哈</span></div><div class="line">console.<span class="built_in">log</span>(f3(<span class="string">"嘿嘿"</span>));     <span class="comment">//嘿嘿</span></div><div class="line">console.<span class="built_in">log</span>(f4(<span class="string">"咕噜"</span>));     <span class="comment">//咕噜</span></div></pre></td></tr></table></figure></p><div class="tip"><strong>提示</strong> 泛型函数的类型声明可以使用不同的泛型参数，只要数量和使用方式一致即可。</div><h3 id="泛型接口（Interface）"><a href="#泛型接口（Interface）" class="headerlink" title="泛型接口（Interface）"></a>泛型接口（Interface）</h3><p><strong>接口（Interface）</strong><span style="color:#195">指在面向对象编程语言中，不包含数据和逻辑但使用函数签名定义行为的抽象类型。</span></p><p>TypeScript提供了接口特性，TypeScript的接口可以定义数据和行为，也可以扩展其它接口或者类。</p><p>在传统面向对象编程范畴中，一个类可以被扩展为另外一个类，也可以实现一个或多个接口。实现某个接口可以被看做是签署了一份协议，接口相当于协议，当我们签署协议（实现接口）后，就必须遵守它的规则。</p><p><span style="color:red">接口本身是抽象类型，其内容（规则）就是属性和方法的签名。</span></p><p>在前文中我们定义了泛型函数demoT，可以把demoT函数的签名抽取并定义接口GenericFn，下面给出示例代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件路径 ../08-泛型函数/04-泛型接口.ts</span></div><div class="line"></div><div class="line"><span class="comment">//(1) 声明泛型函数demoT</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoT</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//(2) 定义GenericFn接口</span></div><div class="line">interface GenericFn&#123;</div><div class="line">    &lt;T&gt;(arg: T): T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> fn: GenericFn = demoT;</div><div class="line"><span class="built_in">console</span>.log(fn(<span class="string">"哈哈"</span>));  <span class="comment">//哈哈</span></div></pre></td></tr></table></figure></p><p>有时候，我们可能需要把泛型参数(T)抽取成为整个接口的参数，好处是抽取后我们能够清楚的知道使用的具体泛型类型是什么，且接口中的其它成员也能使用。当我们使用泛型接口的时候，传入一个类型参数来指定泛型类型即可，下面给出调整后的示例代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件路径 ../08-泛型函数/05-泛型接口02.ts</span></div><div class="line"></div><div class="line"><span class="comment">//(1) 声明泛型函数demoT</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoT</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//(2) 定义泛型接口</span></div><div class="line">interface GenericFn&lt;T&gt;&#123;</div><div class="line">    (arg: T): T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> f1: GenericFn&lt;number&gt; = demoT;</div><div class="line"><span class="built_in">console</span>.log(f1(<span class="number">123</span>));       <span class="comment">//123</span></div><div class="line"><span class="comment">//报错：Argument of type '"字符串"' is not assignable to parameter of type 'number'.</span></div><div class="line"><span class="comment">//console.log(f1("字符串")); //错误的演示</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> f2: GenericFn&lt;string&gt; = demoT;</div><div class="line"><span class="built_in">console</span>.log(f2(<span class="string">"字符串"</span>)); <span class="comment">//字符串</span></div></pre></td></tr></table></figure><h3 id="泛型类（Class）"><a href="#泛型类（Class）" class="headerlink" title="泛型类（Class）"></a>泛型类（Class）</h3><p>泛型特性可以应用在Class身上，具体的使用方式和接口差不多。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件路径 ../08-泛型函数/06-泛型类.ts</span></div><div class="line"></div><div class="line"><span class="comment">//泛型类(Class)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">  <span class="comment">//[1] 属性部分</span></div><div class="line">  name:T;</div><div class="line">  color:T;</div><div class="line">  <span class="comment">//[2] 方法部分</span></div><div class="line">  add:<span class="function">(<span class="params">a:T,b:T</span>)=&gt;</span>T;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取实例对象p1</span></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person&lt;string&gt;();</div><div class="line">p1.name = <span class="string">"张三"</span>;</div><div class="line"></div><div class="line"><span class="comment">//报错： TS2322: Type '123' is not assignable to type 'string'.</span></div><div class="line"><span class="comment">//p1.name = 123;  错误的演示</span></div><div class="line">p1.color = <span class="string">"Red"</span>;</div><div class="line">p1.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(p1);                      <span class="comment">//&#123;name:"张三",color:"Red",...&#125;</span></div><div class="line"><span class="built_in">console</span>.log(p1.add(<span class="string">"ABC"</span>,<span class="string">"-DEF"</span>));    <span class="comment">//ABC-DEF</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//获取实例对象p2</span></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person&lt;number&gt;();</div><div class="line">p2.name = <span class="number">0</span>;</div><div class="line">p2.color = <span class="number">1</span>;</div><div class="line">p2.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(p2.add(<span class="number">100</span>,<span class="number">200</span>));         <span class="comment">//300</span></div></pre></td></tr></table></figure></p><p>上面的代码提供了泛型类使用的简单示例，在<code>定义泛型类的时候，只需要直接把泛型类型放在类名(这里为Person)后面即可</code>，通过new调用类实例化的时候，以&lt;类型&gt;的方式传递，在Class中应用泛型可以帮助我们确认类中的很多属性都在使用相同的类型，且能够优化代码结构。</p><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>有时候，我们可能需要对泛型进行约束。下面的代码中我们声明了泛型函数fn，并在fn的函数体中执行<code>console.log(&quot;打印length值 = &quot; + arg.length);</code>意在打印参数的长度。这份代码在编译的时候会报错，因为无法确定函数调用时传入的参数一定拥有length属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件路径 ../08-泛型函数/02-泛型函数使用注意点.ts</span></div><div class="line"><span class="comment">//说明 该泛型函数使用类型变量T来表示接收参数和返回值的类型</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"打印length值 = "</span> + arg.length);</div><div class="line">  <span class="keyword">return</span> arg;</div><div class="line">&#125;</div><div class="line"><span class="comment">//报错：error TS2339: Property 'length' does not exist on type 'T'.</span></div><div class="line"><span class="built_in">console</span>.log(fn([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]));</div></pre></td></tr></table></figure><p>其实相比于操作any所有类型的数据而言，在这里我们需要对参数类型进行限制，要求传入的参数能够拥有length属性，这种场景可以使用泛型约束。</p><p>理想中泛型函数fn的工作情况是：“只要传入的参数类型拥有指定的属性length，那么代码就应该正常执行。 为此，需要列出对于T的约束要求。下面，我们先定义一个接口来描述特定的约束条件。然后使用这个接口和<code>extends关键字</code>来实现泛型约束，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件路径 ../08-泛型函数/07-泛型约束.ts</span></div><div class="line"></div><div class="line"><span class="comment">//[001] 定义用于描述约束条件的接口</span></div><div class="line">interface hasLengthP</div><div class="line">&#123;</div><div class="line">  length: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//[002] 声明fn函数(应用了泛型约束)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">hasLengthP</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"打印length值 = "</span> + arg.length);</div><div class="line">  <span class="keyword">return</span> arg</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//[003] 调用测试</span></div><div class="line"><span class="built_in">console</span>.log(fn([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]));   <span class="comment">//打印length值 = 3 [1,2,3];</span></div><div class="line"><span class="built_in">console</span>.log(fn(&#123;<span class="attr">name</span>:<span class="string">"zs"</span>,<span class="attr">length</span>:<span class="number">1</span>&#125;)); <span class="comment">//打印length值 = 1 对象内容</span></div><div class="line"></div><div class="line"><span class="comment">//说明：字符串会被转换为对象类型（基本包装类型）</span></div><div class="line"><span class="built_in">console</span>.log(fn(<span class="string">"测试"</span>));    <span class="comment">//打印length值 = 2 测试</span></div><div class="line"></div><div class="line"><span class="comment">//报错:error TS2345: Argument of type '123' is not assignable to parameter of type 'hasLengthP'.</span></div><div class="line"><span class="built_in">console</span>.log(fn(<span class="number">123</span>));   <span class="comment">//错误的演示</span></div></pre></td></tr></table></figure></p><p>上面代码中的fn<code>泛型函数被定义了约束，因此不再是适用于任意类型的参数。</code>我们需要传入符合约束类型的值，传入的实参必须拥有length属性才能运行。</p><p><strong>泛型约束中使用多重类型</strong></p><p><strong>提示</strong> 当声明泛型约束的时候，我们只能够关联一种类型。但有时候，我们确实需要在泛型约束中使用多重类型，接下来我们研究下它的可能性和实现方式。</p><p>假设现在有一个泛型类型需要被约束，它只允许使用实现Interface_One和Interface_Two两个接口的类型，考虑应该如何实现？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件路径 ../08-泛型函数/08-泛型约束中使用多重类型01.ts</span></div><div class="line"></div><div class="line"><span class="comment">//定义接口：Interface_One和Interface_Two</span></div><div class="line">interface Interface_One&#123;</div><div class="line">  func_One();</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface Interface_Two&#123;</div><div class="line">  func_Two();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//泛型类（泛型约束为Interface_One,Interface_Two）</span></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">classTest</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Interface_One</span>,<span class="title">Interface_Two</span>&gt;</span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">  propertyDemo:T;</div><div class="line">  propertyDemoFunc()&#123;</div><div class="line">    <span class="keyword">this</span>.propertyDemo.func_One();</div><div class="line">    <span class="keyword">this</span>.propertyDemo.func_Two();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们可能会像这样来定义泛型约束，然而上面的代码在编译的时候会抛出错误，也就是说<span style="color:red">我们不能在定义泛型约束的时候指定多个类型</span>（上面的代码中我们指定了Interface_One和Interface_Two两个类型），如果确实需要设计多重类型约束的泛型，可以通过把多重类型的接口转换为一个超接口来处理，下面给出示例代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件路径 ../08-泛型函数/09-泛型约束中使用多重类型02.ts</span></div><div class="line"></div><div class="line"><span class="comment">//定义接口：Interface_One和Interface_Two</span></div><div class="line">interface Interface_One&#123;</div><div class="line">  func_One();</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface Interface_Two&#123;</div><div class="line">  func_Two();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Interface_One和Interface_Two成为了超接口，它们是Interface_T的父接口</span></div><div class="line">interface Interface_T extends Interface_One,Interface_Two&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">//泛型类</span></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">classTest</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Interface_T</span>&gt;</span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">  propertyDemo:T;</div><div class="line">  propertyDemoFunc()&#123;</div><div class="line">    <span class="keyword">this</span>.propertyDemo.func_One();</div><div class="line">    <span class="keyword">this</span>.propertyDemo.func_Two();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  func_One:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"func_One"</span>);</div><div class="line">  &#125;,</div><div class="line">  func_Two:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"func_Two"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取实例化对象classTestA</span></div><div class="line"><span class="keyword">let</span> classTestA = <span class="keyword">new</span> classTest();</div><div class="line">classTestA.propertyDemo = obj;</div><div class="line">classTestA.propertyDemoFunc();    <span class="comment">//func_One func_Two</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//下面是错误的演示</span></div><div class="line"><span class="keyword">let</span> classTestB = <span class="keyword">new</span> classTest();</div><div class="line"></div><div class="line"><span class="comment">//报错: Type '&#123; func_Two: () =&gt; void; &#125;' is not assignable to type 'Interface_T'.</span></div><div class="line">classTestA.propertyDemo = &#123;</div><div class="line">  func_Two:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"func_Two_XXXX"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>备注：该文章所有的示例代码均可以<a href="https://github.com/flowerField/TypeScript-Demo" target="_blank" rel="external">点击在Github托管仓库获取</a></p><hr><ul><li>获取更多、更专业的IT技能，请猛戳~<a href="http://www.520it.com/" target="_blank" rel="external">小码哥教育</a>︎</li><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a> ~ <a href="http://wendingding.com" target="_blank" rel="external">文顶顶的个人博客_花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="external">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="external">文顶顶</a><br><img src="https://github.com/flowerField/Source/blob/master/Blog/banner.jpg?raw=true" onclick="window.open('http://www.520it.com/zt/t30/');"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要对TypeScript中的泛型进行展开介绍。主要包括以下内容&lt;/p&gt;
&lt;p&gt;❏  泛型函数类型&lt;br&gt;❏  泛型接口（Interface）&lt;br&gt;❏  泛型类（Class）&lt;br&gt;❏  泛型约束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
      <category term="TypeScript系列" scheme="https://weibo.com/u/3800117445/tags/TypeScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
