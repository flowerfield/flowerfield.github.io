<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2020-07-13T13:01:03.969Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node系列-npm+</title>
    <link href="https://weibo.com/u/3800117445/2020/07/13/Node%E7%B3%BB%E5%88%97-npm+/"/>
    <id>https://weibo.com/u/3800117445/2020/07/13/Node系列-npm+/</id>
    <published>2020-07-13T08:21:13.000Z</published>
    <updated>2020-07-13T13:01:03.969Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://npm.community/uploads/npm1/original/1X/ddff80661892358cd69fe28b6ca91718589a7aa0.png" style="width:100px"></p><div class="tip">本文作为作为<a href="http://wendingding.com/2018/11/24/Node%E7%B3%BB%E5%88%97-npm/" target="_blank" rel="noopener">Node系列-npm</a>的补充，介绍NPM系列核心工具(<code>npm</code>、<code>nrm</code>、<code>npx</code>和<code>nvm</code>)的基本使用和常用的命令。</div><div class="titleX"><strong>核心工具</strong></div><p><strong><a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a>(<code>node package manager</code>)</strong> Node的包管理工具，我们可以利用该工具来搜索、下载、安装、卸载和升级包，在下载和安装Node的时候<code>npm</code>会捆绑在一起默认安装。</p><p><strong><a href="https://www.npmjs.com/package/nrm" target="_blank" rel="noopener">nrm</a>(<code>npm registry manager</code>)</strong> Node的镜像源管理工具，如果访问国外的包速度太慢，那么可以考虑利用<code>nrm</code>来切换镜像源。</p><p><strong><a href="https://github.com/nvm-sh/nvm/blob/master/README.md" target="_blank" rel="noopener">nvm</a>(<code>node version management</code>)</strong> 是Mac下的用来管理不同版本<code>node</code>的工具，如果是管理 Windows系统，可以使用<code>nvmw</code>或<code>nvm-windows</code>。</p><p><strong><a href="https://www.npmjs.com/package/npx" target="_blank" rel="noopener">npx</a></strong>  从5.2版开始，<code>npm</code> 增加了 <code>npx</code>，该工具主要用来执行包(二进制文件)。</p><div class="titleX"><strong>NPM 核心命令</strong></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">npm init                    交互创建package.json文件</span><br><span class="line">npm init -y                 默认创建package.json文件</span><br><span class="line">npm --<span class="built_in">help</span>                  查看帮助信息</span><br><span class="line">npm --version               查看版本信息，别名为-v</span><br><span class="line">npm cache clean             清除缓存</span><br><span class="line">npm cache verify            验证缓存</span><br><span class="line">npm cache clean --force     强制清除缓存</span><br><span class="line">npm search xx               搜索关键字相关的包</span><br><span class="line">npm view   xx               查看指定包最新版本的信息(版本、作者、地址等)</span><br><span class="line">npm info   xx               同上，别名view、v、info、和show</span><br><span class="line">npm ls                      列出本地(当前项目)安装的所有包</span><br><span class="line">npm ls -g                   列出全局安装的所有包</span><br><span class="line">npm list -g --depth 0       列出全局安装的所有包  控制显示层级</span><br><span class="line"></span><br><span class="line">npm i xx                    安装指定的包(本地安装)  i=== install</span><br><span class="line">npm install xx              安装指定的包(本地安装-项目依赖)  默认--save === -S</span><br><span class="line">npm install xx -g           安装指定的包(全局安装)</span><br><span class="line">npm install xx --save-dev   安装指定的包(本地安装-开发依赖)  --save-dev === -D</span><br><span class="line">npm install xx -D           安装指定的包(本地安装-开发依赖) </span><br><span class="line">npm uninstall xx            卸载指定的包，别名un, unlink, remove, rm, r</span><br><span class="line">npm install                 根据package.json文件来安装所有需要的包</span><br><span class="line"></span><br><span class="line">npm config ls               查看配置信息   ls === list</span><br><span class="line">npm config ls -l            查看所有的配置信息</span><br><span class="line">npm config <span class="built_in">set</span> xx           设置配置项  config === c</span><br><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org/    切换镜像源为taobao镜像</span><br><span class="line">npm config get registry     查看当前镜像源</span><br><span class="line">npm config get home         查看当前主页(home)地址</span><br><span class="line"></span><br><span class="line">npm update xx               更新指定的包</span><br><span class="line">npm update                  更新所有项目依赖包 等价于npm update --save</span><br><span class="line">npm update --save-dev       更新所有生产依赖包</span><br><span class="line">npm update -g               更新全局包</span><br><span class="line"></span><br><span class="line">npm adduser                 注册用户</span><br><span class="line">npm publish                 发布模块</span><br><span class="line">npm root                    查看本地项目中包的安装路径</span><br><span class="line">npm root -g                 查看全局包的安装路径</span><br><span class="line">npm docs jquery             打开查看指定包的官网(官方文档)</span><br><span class="line"></span><br><span class="line">npm run &lt;<span class="built_in">command</span>&gt;           执行命令(参考package.json文件中scripts中的配置)</span><br></pre></td></tr></table></figure><div class="titleX"><strong>NRM 核心命令</strong></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nrm --<span class="built_in">help</span>                          查看帮助信息</span><br><span class="line">nrm ls                              列出所有的镜像源</span><br><span class="line">nrm current                         列出当前使用的镜像源</span><br><span class="line">nrm use xx                          切换并使用某个特定的镜像源 等同于 npm config <span class="built_in">set</span> registry=</span><br><span class="line">nrm add wen http://wendingding.com  添加新的镜像源  wen是名称，后面跟的是URL路径</span><br><span class="line">nrm del wen                         删除指定镜像源</span><br><span class="line">nrm <span class="built_in">test</span> taobao                     测试指定镜像源的速度</span><br></pre></td></tr></table></figure><div class="titleX"><strong>NVM的安装</strong></div><p><strong>参考</strong>：<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">NVM的GitHub官方仓库</a><br><strong>参考</strong>：<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows官方仓库</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash</span><br></pre></td></tr></table></figure><p>通过curl来安装nvm，安装完毕后会自动配置环境变量，通过下面的命令来查看<code>.bash_profile</code>文件，可以看到配置文件中已经新增加了环境变量的配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~                            切换到根目录</span><br><span class="line">open .bash_profile              打开配置文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面列出的是.bash_profile文件的拟任</span></span><br><span class="line"><span class="comment"># Add Visual Studio Code (code)</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/opt/openssl/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/<span class="built_in">local</span>/MongoDB/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm ..</span></span><br></pre></td></tr></table></figure></p><p>我们还需要通过下面的命令来更新配置过的环境变量，然后查看<code>nvm</code>的版本信息如果能够正确打印版本则安装成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile              更新环境变量</span><br><span class="line"><span class="built_in">command</span> -v nvm                    如果打印nvm则说明安装成功</span><br><span class="line">nvm --version                     打印版本信息 0.33.6</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>NVM的核心命令</strong></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nvm --<span class="built_in">help</span>                        查看帮助信息</span><br><span class="line">nvm --version                     查看版本信息</span><br><span class="line">nvm install [-s] &lt;version&gt;        安装指定版本的包</span><br><span class="line">nvm install node                  安装最新的版本</span><br><span class="line">nvm install --lts                 安装最新的稳定版本</span><br><span class="line">nvm uninstall &lt;version&gt;           卸载</span><br><span class="line">nvm uninstall --lts               卸载最新的稳定版本</span><br><span class="line">nvm ls                            查看本地安装的Node版本</span><br><span class="line">nvm ls-remote                     列出可安装的所有远程版本</span><br><span class="line">nvm use 版本号                     切换Node版本</span><br><span class="line">nvm current                       查看当前版本</span><br></pre></td></tr></table></figure><div class="titleX"><strong>NPX的核心命令</strong></div><p><code>npx</code>工具想要解决的主要问题是调用项目内部安装的模块。</p><p>一般情况下我们调用项目内部安装的模块，只能在项目脚本和<code>package.json</code>的<code>scripts</code>字段里面配置(通过<code>npm run xxx</code>的方式调用)。如果要通过命令行调用则会比较麻烦，我们可以做个对比：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npm install  mocha --save-dev             安装开发依赖</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1] 通过npm的方式来执行</span></span><br><span class="line">$ <span class="built_in">cd</span> node_modules/.bin/                     切换到本地项目.bin目录中</span><br><span class="line">$ mocha --version                           执行对应的模块</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2] 通过配置package.json文件的script字段来执行</span></span><br><span class="line"><span class="comment"># 配置项："mocha":"./node_modules/.bin/mocha --version"</span></span><br><span class="line">$ npm run mocha </span><br><span class="line"></span><br><span class="line"><span class="comment"># [3] 通过npx的方式来执行</span></span><br><span class="line">$ npx mocha --version                       执行mocha模块</span><br></pre></td></tr></table></figure></p><p><code>npx</code> 不需要全局安装依赖包的情况下，直接运行命令来临时安装-使用-写在，整个操作一气呵成而且运行后不会污染全局环境。比如我们初始化一个项目的时候，<code>npx create-react-app my-react-app</code>指令，会将<code>create-react-app</code>下载到一个临时目录，使用以后再删除，每次运行这个命令，都会重新下载依赖包运行后删除。</p><p>如果我们需要检查某个文件的媒体类型(<code>mime</code>类型)，可以通过<code>mime</code>这个包来实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx mime index.js</span><br><span class="line">npx: 1 安装成功，用时 1.994 秒</span><br><span class="line">application/javascript</span><br></pre></td></tr></table></figure><p><code>npx</code> 的原理，就是运行的时候会去<code>node_modules/.bin</code>路径检查<code>npx</code>后的命令是否存在，存在则执行，如果找不到，那么就继续去环境变量<code>$PATH</code>里面查找，存在则执行，如果还是找不到，那么就会自动下载依赖包的最新版本到临时目录，然后再运行命令，运行完之后把该包删除。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://npm.community/uploads/npm1/original/1X/ddff80661892358cd69fe28b6ca91718589a7aa0.png&quot; style=&quot;width:100px&quot;&gt;&lt;/p&gt;
&lt;div clas
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - palindrome+</title>
    <link href="https://weibo.com/u/3800117445/2020/04/30/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87+/"/>
    <id>https://weibo.com/u/3800117445/2020/04/30/奇怪问题-字符串回文+/</id>
    <published>2020-04-29T16:00:09.000Z</published>
    <updated>2020-05-17T01:05:43.643Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题，求让指定字符串构成回文字符串的最小子串。</strong></div><p><strong>说明</strong> 回文字符串的特点是：<code>自左-&gt;右读和自右-&gt;左读内容一致</code>，譬如<code>abcba</code>。<br><strong>举例</strong> 给定字符串<code>abc</code>，让该字符串成为回文字符串可以拼接<code>cba</code>构成<code>abccba</code>成为回文，也可以拼接<code>ba</code>构成<code>abcba</code>成为回文，题目的要求是求最小回文，所以通过代码得到的最小子串应该为<code>ba</code>。</p><div class="titleX" style="background:#239F60;color:white"><strong>解决方案1</strong></div><p><strong>思路</strong> 利用栈的结构来处理回文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMinCharsToPalindrome</span>(<span class="params">strA</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = [...strA].reverse().join(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = str.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack[stack.length - <span class="number">1</span>] === str[i]) &#123;</span><br><span class="line">            stack.pop()</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'推出'</span>, stack);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.push(str[i]);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'入栈'</span>, stack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = stack.join(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> flag ? strA + res : strA + res.slice(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ab"</span>, findMinCharsToPalindrome(<span class="string">"ab"</span>));     <span class="comment">/* ab aba */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span>, findMinCharsToPalindrome(<span class="string">"abc"</span>));   <span class="comment">/* abc abcba */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abcc"</span>, findMinCharsToPalindrome(<span class="string">"abcc"</span>)); <span class="comment">/* abcc abccba */</span></span><br></pre></td></tr></table></figure><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题，求让指定字符串构成回文字符串的最小子串。&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt; 回文字符串的特点是：
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - palindrome</title>
    <link href="https://weibo.com/u/3800117445/2020/04/29/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87/"/>
    <id>https://weibo.com/u/3800117445/2020/04/29/奇怪问题-字符串回文/</id>
    <published>2020-04-28T16:00:09.000Z</published>
    <updated>2020-05-17T01:05:43.643Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题1：检查给定的字符串是否是回文字符串。</strong></div><p><strong>说明</strong> 回文字符串的特点是：<code>自左-&gt;右读和自右-&gt;左读内容一致</code>，譬如<code>上海自来水来自海上</code>。</p><div class="titleX" style="background:#239F60;color:white"><strong>解决方案1</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 思路 : 使用数组来进行处理*/</span></span><br><span class="line"><span class="comment">/* (1) 先把字符串转换为数组，然后倒序后再处理为字符串 */</span></span><br><span class="line"><span class="comment">/* (2) 比较两个字符串是否全等，全等则表示该字符串是回文 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target = [...str].reverse().join(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> target === str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span>  </span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"aba"</span>));              <span class="comment">/*  true  */</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"abc"</span>));              <span class="comment">/*  false */</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">"上海自来水来自海上"</span>));  <span class="comment">/*  true  */</span></span><br></pre></td></tr></table></figure><div class="titleX" style="background:#239F60;color:white"><strong>解决方案2</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 思路 : 使用栈数据结构进行处理 */</span></span><br><span class="line"><span class="comment">/* (1) 利用栈结构通过入栈和出栈的操作来完成字符串的翻转 */</span></span><br><span class="line"><span class="comment">/* (2) 比较两个字符串是否全等，全等则表示该字符串是回文 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    push(ele) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data[<span class="keyword">this</span>.top++] = ele;</span><br><span class="line">    &#125;</span><br><span class="line">    peek() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.top - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    clear() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">    length() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        stack.push(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (stack.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        target += stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str === target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">"abcdcba"</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">"abcaba"</span>;</span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">"上海自来水来自海上"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123;str1&#125;</span>"<span class="subst">$&#123;isPalindrome(str1) ? <span class="string">"是"</span> : <span class="string">"不是"</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123;str2&#125;</span>"<span class="subst">$&#123;isPalindrome(str2) ? <span class="string">"是"</span> : <span class="string">"不是"</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123;str3&#125;</span>"<span class="subst">$&#123;isPalindrome(str3) ? <span class="string">"是"</span> : <span class="string">"不是"</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行结果 */</span></span><br><span class="line"><span class="comment">// wendingding$ node 02-检查回文.js </span></span><br><span class="line"><span class="comment">// "abcdcba"是回文字符串。</span></span><br><span class="line"><span class="comment">// "abcaba"不是回文字符串。</span></span><br><span class="line"><span class="comment">// "上海自来水来自海上"是回文字符串。</span></span><br></pre></td></tr></table></figure><div class="titleX" style="background:#DC534A;color:white"><strong>问题2：请编写函数求字符串中存在的最长回文字符串。</strong></div><p><strong>说明</strong> 譬如给定字符串为<code>1abcba123</code>,那么该该字符串中存在的最长回文字符串应该为<code>1abcba1</code>。</p><div class="titleX" style="background:#239F60;color:white"><strong>解决方案</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 如果字符串为空或者只有一个字符，那么就直接返回当前字符 */</span></span><br><span class="line">    <span class="keyword">if</span> (str.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = [],offset, k;</span><br><span class="line">    <span class="comment">/* 通过循环把所有的字符(可能存在最长回文都添加到chars中) */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        offset = k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (str[i+ offset] &amp;&amp; str[i - offset] &amp;&amp; str[i-offset] === str[i+offset]) &#123;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;;</span><br><span class="line">        chars.push(str.slice(i - offset + <span class="number">1</span>, i + offset))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;chars.toString()&#125;</span>]`</span>);</span><br><span class="line">        <span class="keyword">while</span> (str[i + <span class="number">1</span> + k] &amp;&amp; str[i - k] &amp;&amp; str[i + <span class="number">1</span> + k] === str[i - k]) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        chars.push(str.slice(i - k + <span class="number">1</span>, i + k + <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 对数组中的字符串按照长度进行排序(长-&gt;短) */</span></span><br><span class="line">    <span class="keyword">let</span> result = chars.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b.length - a.length</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`排序后的数组：[<span class="subst">$&#123;result.join(<span class="string">","</span>)&#125;</span>]`</span>);</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">"ac121ca123210"</span>));</span><br><span class="line"><span class="comment">/* 打印显示 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[a]</span></span><br><span class="line"><span class="comment">[a,,c]</span></span><br><span class="line"><span class="comment">[a,,c,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2,,1,,0]</span></span><br><span class="line"><span class="comment">排序后的数组：[ac121ca,12321,a,a,1,c,c,1,2,1,2,1,0,,,,,,,,,,,,,]</span></span><br><span class="line"><span class="comment">ac121ca */</span></span><br></pre></td></tr></table></figure><div class="tip">在上面的代码中，可能会存在拥有多个最长回文子串(譬如传入的字符串是<code>abccba1221a</code>)或者没有回文子串(<code>譬如传入的字符串是 abc</code>)的情况，因此还需要调整下代码。</div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = [];</span><br><span class="line">    <span class="keyword">let</span> offset, k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        offset = k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (str[i + offset] &amp;&amp; str[i - offset] &amp;&amp; str[i-offset] === str[i+offset]) &#123;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        chars.push(str.slice(i - offset + <span class="number">1</span>, i + offset));</span><br><span class="line">        <span class="keyword">while</span> (str[i + <span class="number">1</span> + k] &amp;&amp; str[i - k] &amp;&amp; str[i + <span class="number">1</span> + k] === str[i - k]) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        chars.push(str.slice(i - k + <span class="number">1</span>, i + k + <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = chars.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b.length - a.length</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`排序后的数组：[<span class="subst">$&#123;result.join(<span class="string">","</span>)&#125;</span>]`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注意：特殊情况的处理 */</span></span><br><span class="line">    <span class="keyword">let</span> maxLength = result[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> allPalindromes = [];</span><br><span class="line">    result.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxLength == item.length) allPalindromes.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLength == <span class="number">1</span> ? <span class="string">`抱歉，在该字符串中没有找到回文子串`</span> : </span><br><span class="line">        <span class="string">`列出字符串中的最长回文子串为：<span class="subst">$&#123;allPalindromes.join(<span class="string">" 和 "</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">"abc"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">"ac121ca123210"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">"abccba1221a"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印结果 */</span></span><br><span class="line"><span class="comment">// wendingding$ node 02-min.js </span></span><br><span class="line"><span class="comment">// 排序后的数组：[a,b,c,,,]</span></span><br><span class="line"><span class="comment">// 抱歉，在该字符串中没有找到回文子串</span></span><br><span class="line"><span class="comment">// 排序后的数组：[ac121ca,12321,a,a,1,c,c,1,2,1,2,1,0,,,,,,,,,,,,,]</span></span><br><span class="line"><span class="comment">// 列出字符串中的最长回文子串为：ac121ca</span></span><br><span class="line"><span class="comment">// 排序后的数组：[abccba,a1221a,a,a,c,b,b,1,2,c,2,1,a,,,,,,,,,]</span></span><br><span class="line"><span class="comment">// 列出字符串中的最长回文子串为：abccba 和 a1221a</span></span><br></pre></td></tr></table></figure><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题1：检查给定的字符串是否是回文字符串。&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt; 回文字符串的特点是：&lt;c
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - ( ) matching</title>
    <link href="https://weibo.com/u/3800117445/2020/04/28/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E6%A0%A1%E9%AA%8C%E6%8B%AC%E5%8F%B7%E6%98%AF%E5%90%A6%E5%8C%B9%E9%85%8D/"/>
    <id>https://weibo.com/u/3800117445/2020/04/28/奇怪问题-校验括号是否匹配/</id>
    <published>2020-04-27T16:00:09.000Z</published>
    <updated>2020-05-17T01:05:43.630Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：给出下面的字符串，请编写函数来校验括号是否匹配，要求函数尽可能通用。</strong></div>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testString = <span class="string">"(()()()()"</span>;</span><br></pre></td></tr></table></figure><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><p><strong><code>说明</code></strong> 类似问题使用栈数据结构的方式来进行匹配会比较合理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* 1.提供简单的栈结构 Class */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = [];</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push(ele) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data[<span class="keyword">this</span>.top++] = ele;</span><br><span class="line">    &#125;</span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top--;</span><br><span class="line">        <span class="keyword">this</span>.data.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    peek() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.top - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    clear() &#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.括号字符串匹配校验函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">   stack.clear();                                <span class="comment">/* 清栈操作 */</span></span><br><span class="line">   str = str.trim();                             <span class="comment">/* 字符串清理 */</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;        <span class="comment">/* 遍历字符串 */</span></span><br><span class="line">       <span class="keyword">if</span> (str[i] == <span class="string">" "</span>) <span class="keyword">continue</span>;              <span class="comment">/* 如果当前字符是空格则跳过 */</span></span><br><span class="line">       <span class="keyword">if</span> (stack.peek() == <span class="string">"("</span> &amp;&amp; str[i] == <span class="string">")"</span>) &#123;</span><br><span class="line">           stack.pop();                          <span class="comment">/* 若匹配则执行出栈操作 */</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           stack.push(str[i]);                   <span class="comment">/* 不匹配则执行入栈操作 */</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(i, stack.data)                <span class="comment">/* 打印检查栈内数据结构 */</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> stack.top == <span class="number">0</span>;                        <span class="comment">/* 返回结果 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.测试数据 */</span></span><br><span class="line"><span class="keyword">let</span> res1 = matching(<span class="string">"()"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_______"</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = matching(<span class="string">"("</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_______"</span>);</span><br><span class="line"><span class="keyword">let</span> res3 = matching(<span class="string">"()("</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_______"</span>);</span><br><span class="line"><span class="keyword">let</span> res4 = matching(<span class="string">"( (())  ()()  )  "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res1, res2, res3, res4);</span><br></pre></td></tr></table></figure></p><p>打印参考：<br><img src="../../../../src/khpp.png"></p><p>在上面代码中<code>matching</code>函数中通过普通 for 循环遍历字符串，尝试使用<code>forEach</code>遍历调整代码如下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();            <span class="comment">/* 实例化 */</span></span><br><span class="line">    str = str.trim();                   <span class="comment">/* 清理字符串前后可能存在的空格 */</span></span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">")"</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">/* 如果开始字符为)那么直接结束 */</span></span><br><span class="line"></span><br><span class="line">    [...str].forEach(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">" "</span>) <span class="keyword">return</span>;           <span class="comment">/* 如果当前字符是空格，那么忽略处理 */</span></span><br><span class="line">        <span class="comment">/* 如果当前字符和栈顶字符匹配，那么就出栈，否则执行入栈操作 */</span></span><br><span class="line">        (stack.peek() == <span class="string">"("</span> &amp;&amp; s == <span class="string">")"</span>) ? stack.pop(): stack.push(s);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/* 如果栈内没有数据(都消除了)，那么表示()总是合法成对匹配 */</span></span><br><span class="line">    <span class="keyword">return</span> stack.top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面代码中我自己提供了一个 Stack 类来实例化 stack 栈对象，在面试中这样写可能代码显得有点多，下面我使用字符串来模拟栈结构调整代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 匹配函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span>;                                  <span class="comment">/* 1.使用字符串来模拟栈结构 */</span></span><br><span class="line">    <span class="keyword">let</span> stack = <span class="string">""</span>;                               <span class="comment">/* 2.初始化一个空栈 */</span>    </span><br><span class="line">    str = str.trim();                             <span class="comment">/* 3.对需要检查校验的字符串执行清理操作 */</span></span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">")"</span>) <span class="keyword">return</span> <span class="literal">false</span>;              <span class="comment">/* 4.如果第一个字符不正确那么直接结束 */</span></span><br><span class="line">    </span><br><span class="line">    [...str].forEach(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;                  <span class="comment">/* 5.遍历字符串 */</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">" "</span>) <span class="keyword">return</span>;                     <span class="comment">/* 6.若当前字符为空字符串，那么就忽略处理 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (stack[len - <span class="number">1</span>] === <span class="string">"("</span> &amp;&amp; s == <span class="string">")"</span>) &#123; <span class="comment">/* 7.检查是否匹配，若匹配那么就执行出栈操作*/</span></span><br><span class="line">            len--;</span><br><span class="line">            stack = stack.slice(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                                  <span class="comment">/* 8.如果不匹配那么就执行入栈操作 */</span>  </span><br><span class="line">            len++;</span><br><span class="line">            stack += s</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> len === <span class="number">0</span>;                              <span class="comment">/* 9.根据栈的长度来判断是否匹配 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：给出下面的字符串，请编写函数来校验括号是否匹配，要求函数尽可能通用。&lt;/strong&gt;&lt;/div&gt;

  &lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - add(1)(2)(3)(4)</title>
    <link href="https://weibo.com/u/3800117445/2020/04/27/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%A5%87%E6%80%AA%E5%87%BD%E6%95%B0/"/>
    <id>https://weibo.com/u/3800117445/2020/04/27/奇怪问题-奇怪函数/</id>
    <published>2020-04-26T16:00:09.000Z</published>
    <updated>2020-05-17T01:05:43.655Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：编写函数要求函数实现 add(1)(2)(3)(4)(5) 返回所有参数的累加和15。</strong></div><p><strong>说明</strong> 编写的<code>add</code>函数需满足通用性要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)          返回值 <span class="number">3</span></span><br><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)       返回值 <span class="number">6</span></span><br><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)    返回值 <span class="number">10</span></span><br><span class="line">...以此类推</span><br></pre></td></tr></table></figure><p><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function">(<span class="params">n</span>) =&gt;</span> add(m + n);</span><br><span class="line">    fn.toString = <span class="function"><span class="params">()</span> =&gt;</span> m;</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="keyword">let</span> res1 = add(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = add(<span class="number">1</span>)(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> res3 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> res4 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> res5 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res1, res2, res3, res4, res5); <span class="comment">/* ƒ 1 ƒ 3 ƒ 6 ƒ 10 ƒ 15 ƒ 3 */</span></span><br></pre></td></tr></table></figure></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：编写函数要求函数实现 add(1)(2)(3)(4)(5) 返回所有参数的累加和15。&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - Max out the Array</title>
    <link href="https://weibo.com/u/3800117445/2020/04/26/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E6%B1%82%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://weibo.com/u/3800117445/2020/04/26/奇怪问题-求数组最大值/</id>
    <published>2020-04-25T16:00:09.000Z</published>
    <updated>2020-05-17T01:05:43.655Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：给出下面的数据，请编写函数求数组的最大值。</strong></div>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">            [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">            [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>],</span><br><span class="line">            [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, [<span class="number">39</span>, <span class="number">43</span>, [<span class="number">99</span>, <span class="number">81</span>]]],</span><br><span class="line">            <span class="number">12</span></span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><p><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 整理数组元素 */</span></span><br><span class="line">   arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">           <span class="comment">/* 递归调用 */</span></span><br><span class="line">           arr[index] = findMax(item);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 数组排序 */</span></span><br><span class="line">   arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> b - a;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 总是取最大值 */</span></span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优化下代码，把利用 <code>sort</code> 排序求最大值的部分调整为 <code>Math.max</code> 方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">            arr[index] = findMax(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：给出下面的数据，请编写函数求数组的最大值。&lt;/strong&gt;&lt;/div&gt;


  &lt;figure class=&quot;highlight java
      
    
    </summary>
    
    
      <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>杂谈书坊-“陷王于恶”</title>
    <link href="https://weibo.com/u/3800117445/2020/03/28/%E6%9D%82%E8%B0%88%E4%B9%A6%E5%9D%8A-%E9%99%B7%E7%8E%8B%E4%BA%8E%E6%81%B6%E5%92%8C%E8%90%A5%E6%83%91%E8%AF%B8%E4%BE%AF/"/>
    <id>https://weibo.com/u/3800117445/2020/03/28/杂谈书坊-陷王于恶和营惑诸侯/</id>
    <published>2020-03-28T15:58:37.000Z</published>
    <updated>2020-05-21T10:41:07.790Z</updated>
    
    <content type="html"><![CDATA[<p><a href="">“陷王于恶”</a> 这个典故出自汉书,叙述了海昏侯<strong>刘贺</strong>被霍光废黜的故事。</p><p><strong>贺者，武帝孙，昌邑哀王子也。既至，即位，行淫乱。光忧懑，独以问所亲故吏大司农田延年。延年曰：“将军为国柱石，审此人不可，何不建白太后，更选贤而立之？” 光曰：“今欲如是，于古尝有此否？” 延年曰：“伊尹相殷，废太甲以安宗庙，后世称其忠。将军若能行此，亦汉之伊尹也”。光乃引延年给事中，阴与车骑将军张安世图计，遂召丞相、御史、将军、列侯、中二千石、大夫、博士会议未央宫。光曰：“昌邑王行昏乱，恐危社稷，如何？” 群臣皆惊鄂失色，莫敢发言，但唯唯而已。田延年前，离席按剑，曰：“先帝属将军以幼孤，寄将军以天下，以将军忠贤能安刘氏也。今群下鼎沸，社稷将倾，且汉之传谥常为孝者，以长有天下，令宗庙血食也。如令汉家绝祀，将军虽死，何面目见先帝于地下乎？今日之议，不得旋踵。群臣后应者，臣请剑斩之”。光谢曰：“九卿责光是也。天下匈匈不安，光当受难”。于是议者皆叩头，曰：“万姓之命在于将军，唯大将军令”。</strong></p><p><strong>光即与群臣俱见白太后，具陈昌邑王不可以承宗庙状。皇太后乃车驾幸未央承明殿，诏诸禁门毋内昌邑群臣。王入朝太后还，乘辇欲归温室，中黄门宦者各持门扇，王入，门闭，昌邑群臣不得入。王曰“何为？” 大将军跪曰：“有皇太后诏，毋内昌邑群臣”。王曰：“徐之，何乃惊人如是!” 光使尽驱出昌邑群臣，置金马门外。车骑将军安世将羽林骑收缚二百余人，皆送廷尉诏狱。令故昭帝侍中中臣侍守王。光敕左右：“谨宿卫，卒有物故自裁，令我负天下，有杀主名”。王尚未自知当废，谓左右：“我故群臣从官安得罪，而大将军尽系之乎？” 顷之，有太后诏召王，王闻召，意恐，乃曰：“我安得罪而召我哉!” 太后被珠襦，盛服坐武帐中，侍御数百人皆持兵，期门武士陛戟，陈列殿下。群臣以次上殿，召昌邑王伏前听诏。光与群臣连名奏王，尚书令读奏。</strong></p><p><strong>皇太后诏曰：“可”。光令王起拜受诏，王曰：“闻天子有争臣七人，虽无道不失天下”。光曰：“皇太后诏废，安得天子!” 乃即持其手，解脱其玺组，奉上太后，扶王下殿，出金马门，群臣随送。王西面拜，曰：“愚戆不任汉事”。起就乘舆副车。大将军光送至昌邑邸，光谢曰：“王行自绝于天，臣等驽怯，不能杀身报德。臣宁负王，不敢负社稷。愿王自爱，臣长不复见左右”。光涕泣而去。群臣奏言：“古者废放之人屏于远方，不及以政，请徙王贺汉中房陵县”。太后诏归贺昌邑，赐汤沐邑二千户。<span style="color:red">昌邑群臣坐亡辅导之谊，陷王于恶，光悉诛杀二百余人</span>。出死，号呼市中曰：“当断不断，反受其乱”。</strong></p><p>这段文字记载于《<a href="http://www.oh100.com/peixun/guoxuezhihui/294243.html" target="_blank" rel="noopener">汉书·霍光金日禪传</a>》，完整的记录了大将军霍光废黜刘贺的详细过程。2015年，在江西南昌发现了轰动一时的海昏侯墓，而刘贺正是这海昏侯墓的主人。关于海昏侯墓的相关信息，大家可以查询。</p><p>刘贺是汉武帝的孙子，其父刘髆为昌邑哀王[<code>今山东菏泽</code>]，刘贺在历史上短暂的做过27天皇帝，后因为言行昏(淫)乱被大将军霍光和太后废黜。据记载，刘贺被废的主要原因是先帝刚驾崩棺材都还停放在宫中的时候就迫不及待的和乐人寻欢作乐，被朝臣认为没有“人主之尊”。说起来，我们现在所经历的一些现实就很魔幻了。据说，现在很多地方在治办丧事的时候，都喜欢把丧事办的喜庆风光，因此网络上也流传了很多坟头蹦迪的鬼畜视频出来。这真是，先人的棺材板都还没盖上，后来人就一蹦跳起了三丈高。</p><p>我今天知道这个这个典故，是读了秋原先生著的《乱世靡音》，这本书讲了江湖中“艺人”的生存之道和历史演变，颇有意思。</p><p><img src="../../../../src/qy.jpg" height="500px"></p><p>古时候，”江湖艺人”的身份低位，仅仅只有少数造诣极高的艺人，才可能得到有限的尊重，不像现在的明星这么风光，他们的身份地位几乎排在最末，甚至连现在的某些平台主播也不如。</p><p>其实，哪怕是最牛逼的艺人(为皇帝和朝臣服务的官伶)，可能下场也比较凄凉。譬如上述<strong>“陷王于恶”</strong>的这两百多人就半数都是“乐人”，他们的结局是被 <strong><span style="color:red"> 悉数诛杀 </span></strong>。</p><p>最后，再贴点学到的新知识。</p><p><a href="">※</a> 献艺和卖艺，前者有很高的雅兴，后者是鄙俗的生意。<br><a href="">※</a> “玩意儿”这个词同”玩艺儿”，指的是稍微有些才能的乞丐。<br><a href="">※</a> 长期以来以艺娱人低人一等。这也是古时候罪犯抄家为什么男的杀头，妻女则送入教坊司的原因。<br><a href="">※</a> 以艺娱人的人被称为乐人或乐工，职业会被编入乐户，算作贱民，而管理乐户的机构就叫做乐府。<br><a href="">※</a> 艺人主要有三种起源分别是“人类古老的祭祀活动、人们对身体残障者的嘲弄以及流民行乞的手段”。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home？from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;&quot;&gt;“陷王于恶”&lt;/a&gt; 这个典故出自汉书,叙述了海昏侯&lt;strong&gt;刘贺&lt;/strong&gt;被霍光废黜的故事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;贺者，武帝孙，昌邑哀王子也。既至，即位，行淫乱。光忧懑，独以问所亲故吏大司农田延年。延年曰：“将军为国柱石，审此
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://weibo.com/u/3800117445/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Gossip -  tagged template</title>
    <link href="https://weibo.com/u/3800117445/2020/02/04/Gossip%20-%20tagged%20template/"/>
    <id>https://weibo.com/u/3800117445/2020/02/04/Gossip - tagged template/</id>
    <published>2020-02-03T16:00:08.000Z</published>
    <updated>2020-05-17T01:14:07.121Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍模板字符串的某种特殊用法，允许我们在函数名后跟一个模板字符串，然后可以像正常函数调用一样来把模板字符串中的各个部分以参数的方式传递给该函数。</div><p><a href="">标签模板-tagged template</a> 并非真正的字符串模板，而是一种特殊形式的函数调用。</p><p>在标签模板中的<code>标签(tag)</code>指的是函数，而跟在其后的<code>模板</code>表示的则是函数调用时传递的实际参数。假如我们存在一个函数 <code>function tag(){console.log(arguments)}</code>，那么当在<code>tag</code>后跟上模板字符串的时候就会变成函数调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Yong"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">tag <span class="string">`My name is <span class="subst">$&#123;name&#125;</span>. I'm <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[Arguments] &#123;</span></span><br><span class="line"><span class="comment">  '0': [ 'My name is ', '. I\'m ', ' years old' ],</span></span><br><span class="line"><span class="comment">  '1': 'Yong',</span></span><br><span class="line"><span class="comment">  '2': 18 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>观察上面的代码和对应的执行结果，在 <code>tag 函数</code> 的调用过程中， 模板字符串部分<code>My name is ${name}. I&#39;m ${age} years old</code> 被拆分成了不同的部分以参数形式传递到函数内容，具体在拆分的时候，所有非变量型(<code>变量型指的是${name}这样的结构</code>)的部分将被作为第一个参数传入，而所有变量型的数据则会依次跟在后面以第二、第三、第四… 参数的形式传入。</p><p>为了更方便的区分和处理这两部分参数，我们尝试通过剩余参数的方式来调整<code>tag 函数</code>的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">stringArr, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"第一部分："</span>, stringArr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"第二部分："</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Yong"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">tag <span class="string">`My name is <span class="subst">$&#123;name&#125;</span>. I'm <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一部分： [ 'My name is ', '. I\'m ', ' years old' ]</span></span><br><span class="line"><span class="comment">第二部分： [ 'Yong', 18 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>字符串<code>双反引号</code>的写法( 我们通常称为模板字符串 )是ES6为我们提供的新特性，作为增强版本的字符串，这个特性至少为我们带来了两点便利。</p><p>1、方便的处理字符串中的换行。<br>2、方便的在字符串中以${ }的形式来插入变量，以替代原本的 + 来完成拼接。</p><p><code>备注</code>：在模板字符串的 ${} 中可以放任意的JavaScript表达式，譬如变量、普通字符串、简单计算、引用对象属性甚至是函数调用，具体可以参考下面的演示代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.插入变量 */</span></span><br><span class="line"><span class="keyword">let</span> address = <span class="string">"广州"</span>;</span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">`地址：<span class="subst">$&#123; address &#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.插入数字 */</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`编号：<span class="subst">$&#123; <span class="number">10086</span> &#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.插入字符串 */</span></span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">`描述：<span class="subst">$&#123; <span class="string">'description'</span> &#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4.简单计算 */</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>,</span><br><span class="line">    y = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> str4 = <span class="string">`计算：<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> * 2 == <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5.函数调用 */</span></span><br><span class="line"><span class="keyword">let</span> callFn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"callFn be Call"</span>;</span><br><span class="line"><span class="keyword">let</span> str5 = <span class="string">`函数调用：<span class="subst">$&#123;callFn() &#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6.测试三元运算符 */</span></span><br><span class="line"><span class="keyword">let</span> str6 = <span class="string">`三元运算符：<span class="subst">$&#123; <span class="number">5</span>&gt;<span class="number">1</span> ?<span class="string">'结果大于1'</span>:<span class="string">'结果不大于1'</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br><span class="line"><span class="built_in">console</span>.log(str4);</span><br><span class="line"><span class="built_in">console</span>.log(str5);</span><br><span class="line"><span class="built_in">console</span>.log(str6);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">地址：广州</span></span><br><span class="line"><span class="comment">编号：10086</span></span><br><span class="line"><span class="comment">描述：description</span></span><br><span class="line"><span class="comment">计算：1 + 5 * 2 == 11</span></span><br><span class="line"><span class="comment">函数调用：callFn be Call</span></span><br><span class="line"><span class="comment">三元运算符：结果大于1 */</span></span><br></pre></td></tr></table></figure><p>理所应当 &amp;&amp; 自然而然，我们不假思索就用上了模板字符串这样牛逼的特性，不过我建议再多一层对反引号字符串的处理过程的思考，下面的代码中封装了一个函数来模拟和还原处理的过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">strArr, ...args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印参数 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'strArr = '</span>, strArr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'args   = '</span>, args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> output = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    args.forEach(<span class="function">(<span class="params">s, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`current - strArr[<span class="subst">$&#123;idx&#125;</span>]`</span>, strArr[idx]);</span><br><span class="line">        output += strArr[idx] + s;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 因为 args &#123;变量参数&#125;的个数总是会比strArr的数量多1，因此还需拼接末尾 */</span></span><br><span class="line">    output += strArr[strArr.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试代码*/</span></span><br><span class="line"><span class="built_in">console</span>.log(parse <span class="string">`a = <span class="subst">$&#123;a&#125;</span> , b = <span class="subst">$&#123;b&#125;</span> , a + b = <span class="subst">$&#123;a + b&#125;</span> .`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出  </span></span><br><span class="line"><span class="comment">strArr =  [ 'a = ', ' , b = ', ' , a + b = ', ' .' ]</span></span><br><span class="line"><span class="comment">args   =  [ 1, 2, 3 ]</span></span><br><span class="line"><span class="comment">current - strArr[0] a =</span></span><br><span class="line"><span class="comment">current - strArr[1]  , b =</span></span><br><span class="line"><span class="comment">current - strArr[2]  , a + b =</span></span><br><span class="line"><span class="comment">a = 1 , b = 2 , a + b = 3 .  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="../../../../src/tag_t.png"></p><p>在上面的代码中，我们通过<code>标签模板</code>的调用结构，利用<code>parse 函数</code>完成了模板字符串的”还原”工作。</p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍模板字符串的某种特殊用法，允许我们在函数名后跟一个模板字符串，然后可以像正常函数调用一样来把模板字符串中的各个部分以参数的方式传递给该函数。&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;标签模板-tagged template&lt;/a&gt; 并非
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - template compile</title>
    <link href="https://weibo.com/u/3800117445/2020/02/03/Gossip%20-%20template%20compile/"/>
    <id>https://weibo.com/u/3800117445/2020/02/03/Gossip - template compile/</id>
    <published>2020-02-02T16:00:08.000Z</published>
    <updated>2020-05-17T01:14:07.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近有个朋友问<code>&lt;%=...%&gt;</code>和 <code></code> 插值语法的一些问题，突然想起以前使用<code>&lt;%=...%&gt;</code>语法进行模板编译的日子，似乎已经很久远了，刚好有点时间所以写篇文章重新温故下模板编译的处理逻辑。</p></blockquote><p><strong>关键</strong> <strong><code>正则表达式</code></strong>、<strong><code>eval函数</code></strong>和<strong><code>字符串拼接</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;% <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; data.list.length;i++) &#123;%&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">data.list</span>[<span class="attr">i</span>] %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>给定上面的模板字符串，我们希望能够提供一个模板编译函数，传递数据<code>(data:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])</code>给该函数以编译出下面的文本标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>思路</strong> 对于上面的字符串模板，如果要编译得到目标字符串，那么关键点在于for循环的处理，这里最简单的办法就是直接通过<code>eval函数</code>来执行 <code>for循环</code>部分的代码，而<code>&lt;% 和 %&gt;</code>等部分则需要通过正则来进行替换。假设，我们在这里提供一个 <code>echo函数</code> 用于做字符串的拼接，那么可以考虑先把模板字符串处理为下面的样式，再行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo(<span class="string">'&lt;ul&gt;'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; data.list.length;i++) &#123;</span><br><span class="line">  echo(<span class="string">'&lt;li&gt;'</span>);</span><br><span class="line">  echo(data.list[i]);</span><br><span class="line">  echo(<span class="string">'&lt;/li&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line">echo(<span class="string">'&lt;/ul&gt;'</span>);</span><br></pre></td></tr></table></figure><p><strong>具体实现</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 1.模板字符串 */</span></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;% for(var i = 0; i&lt; data.list.length;i++) &#123;%&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;%= data.list[i] %&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.封装编译函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.1 编写正则规则 */</span></span><br><span class="line">    <span class="comment">/* 匹配&lt;% %&gt;部分  */</span></span><br><span class="line">    <span class="keyword">let</span> expr = <span class="regexp">/&lt;%([\s\S]+?)%&gt;/g</span>;</span><br><span class="line">    <span class="comment">/* 匹配 &lt;%= data.list[i] %&gt; 部分*/</span></span><br><span class="line">    <span class="keyword">let</span> evalExpr = <span class="regexp">/&lt;%=(.+?)%&gt;/g</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.2 字符串拼接和正则匹配：$1表示匹配到的原文内容 */</span></span><br><span class="line">    template = template</span><br><span class="line">        .replace(evalExpr, <span class="string">'`); \n echo($1); \n echo(`'</span>)</span><br><span class="line">        .replace(expr, <span class="string">'`); \n $1 \n echo(`'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.3 拼接最外层的 echo 函数 */</span></span><br><span class="line">    template = <span class="string">'echo(`'</span> + template + <span class="string">'`)'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.4 组装解析函数 */</span></span><br><span class="line">    <span class="keyword">let</span> script = <span class="string">`(function parse(data)&#123;</span></span><br><span class="line"><span class="string">      let output = "";</span></span><br><span class="line"><span class="string">      function echo(html)&#123;</span></span><br><span class="line"><span class="string">        output += html.trimEnd();  </span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;template&#125;</span></span></span><br><span class="line"><span class="string">      return output;</span></span><br><span class="line"><span class="string">    &#125;)`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'script'</span>, script);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> script;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.生成解析函数 */</span></span><br><span class="line"><span class="keyword">let</span> parse = <span class="built_in">eval</span>(compile(template));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4.注入数据 */</span></span><br><span class="line"><span class="keyword">let</span> html = parse(&#123; <span class="attr">list</span>: [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出内容： */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">script (function parse(data)&#123;</span></span><br><span class="line"><span class="comment">      let output = "";</span></span><br><span class="line"><span class="comment">      function echo(html)&#123;</span></span><br><span class="line"><span class="comment">        output += html.trimEnd();  </span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      echo(`</span></span><br><span class="line"><span class="comment">&lt;ul&gt;</span></span><br><span class="line"><span class="comment">  `); </span></span><br><span class="line"><span class="comment">  for(var i = 0; i&lt; data.list.length;i++) &#123; </span></span><br><span class="line"><span class="comment"> echo(`</span></span><br><span class="line"><span class="comment">    &lt;li&gt;`); </span></span><br><span class="line"><span class="comment"> echo( data.list[i] ); </span></span><br><span class="line"><span class="comment"> echo(`&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    `); </span></span><br><span class="line"><span class="comment">  &#125;  </span></span><br><span class="line"><span class="comment"> echo(`</span></span><br><span class="line"><span class="comment">&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">`)</span></span><br><span class="line"><span class="comment">      return output;</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">**********************************</span></span><br><span class="line"><span class="comment">&lt;ul&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;a&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;b&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;c&lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近有个朋友问&lt;code&gt;&amp;lt;%=...%&amp;gt;&lt;/code&gt;和 &lt;code&gt;&lt;/code&gt; 插值语法的一些问题，突然想起以前使用&lt;code&gt;&amp;lt;%=...%&amp;gt;&lt;/code&gt;语法进行模板编译的日子，似乎已经很久远了，刚好有点时间所以
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - Iterator</title>
    <link href="https://weibo.com/u/3800117445/2020/02/01/Gossip%20-%20Iterator/"/>
    <id>https://weibo.com/u/3800117445/2020/02/01/Gossip - Iterator/</id>
    <published>2020-01-31T16:00:08.000Z</published>
    <updated>2020-05-21T07:17:38.628Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文简单说明<a href=""> 迭代器接口 Iterator</a> 接口的基本使用，涉及 Array 、Set 、Map 和 String 以及伪数组等数据结构，以及 <code>for...of</code>循环的用法等。</div><div class="titleX"><strong>Iterator - 基本使用</strong></div><p><a href=""> Iterator </a>是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署实现了 <a href=""> Iterator </a> 接口，就可以完成遍历操作。</p><p><a href=""> Iterator </a> 的优点在于能够为不同的数据结构提供了统一的接口；能够以特定的排序来遍历数据结构；提供创造了<code>for...of循环</code>。JavaScript中默认实现迭代器接口(<a href=""> Iterator </a>)的数据结构有类数组结构(<code>NodeList、arguments、String</code>等) 和 <code>Set 、Map、Array</code>等 ，实现 Iterator 接口的数据结构均支持使用 <code>for...of</code> 循环来执行遍历操作。</p><p><img src="../../../../src/iterator_01.png"></p><p>下面通过代码简单展示<code>Set 、Map、Array</code>三种数据结构中实现的原生迭代器接口(<a href=""> Iterator </a>)和<code>for...of遍历</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.数组 Array */</span></span><br><span class="line"><span class="comment">/* 2.集合 Set */</span></span><br><span class="line"><span class="comment">/* 3.映射 Map */</span></span><br><span class="line"><span class="comment">/* 4.其它结构 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr"</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="string">"测试"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"set"</span>, set);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">"a"</span>, <span class="string">"A"</span>);</span><br><span class="line">map.set(<span class="string">"b"</span>, <span class="string">"B"</span>);</span><br><span class="line">map.set(<span class="string">"c"</span>, <span class="string">"C"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"map"</span>, map);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'______________'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'______________'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,val] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'______________'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">arr [ 100, 200, 300 ]</span></span><br><span class="line"><span class="comment">set Set &#123; 10, 20, 30, '测试' &#125;</span></span><br><span class="line"><span class="comment">map Map &#123; 'a' =&gt; 'A', 'b' =&gt; 'B', 'c' =&gt; 'C' &#125;</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">200</span></span><br><span class="line"><span class="comment">300</span></span><br><span class="line"><span class="comment">______________</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">测试</span></span><br><span class="line"><span class="comment">______________</span></span><br><span class="line"><span class="comment">a A</span></span><br><span class="line"><span class="comment">b B</span></span><br><span class="line"><span class="comment">c C</span></span><br><span class="line"><span class="comment">______________ */</span></span><br></pre></td></tr></table></figure><p>通过查看<code>console.log(Array.property,Set.property,Map.property);</code>打印结果，你会发现在数组、集合和映射它们的内部，都在其构造函数的原型对象上无一例外都实现了<code>Symbol(Symbol.iterator): ƒ entries()函数</code>，调用该函数我们能够得到一个<code>iterator 型对象</code>，当我们使用<code>for...of</code>循环结构来遍历它们的时候，在内部会利用该对象来完成遍历操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* arr.__proto__ ===  Array.prototype[Symbol.iterator] */</span></span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator); <span class="comment">/* Object [Array Iterator] &#123;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_________bgn_________"</span>)</span><br><span class="line"><span class="keyword">let</span> o = iterator.next();</span><br><span class="line"><span class="keyword">while</span> (!o.done) &#123;</span><br><span class="line">    o = iterator.next()</span><br><span class="line">    <span class="built_in">console</span>.log(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_________end_________"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Object [Array Iterator] &#123;&#125;</span></span><br><span class="line"><span class="comment">_________bgn_________</span></span><br><span class="line"><span class="comment">&#123; value: 200, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: 300, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">_________end_________</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通过<code>Array.prototype[Symbol.iterator]()</code>可以得到一个<code>iterator 型对象</code>，调用该对象的<code>next方法</code>后能得到个拥有两个键值对的对象，其中<code>value</code>表示的是当前的值，而 <code>done</code> 可以理解为是循环是否结束。在上面的代码中，我通过一个 while 循环来模拟了<code>for..of</code>循环过程。此外，也可以简单对比下这些结构中的<code>entries()、keys() 和 values()</code>等函数的用法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr.entries();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_________bgn_________"</span>)</span><br><span class="line"><span class="keyword">let</span> o = iterator.next();</span><br><span class="line"><span class="keyword">while</span> (!o.done) &#123;</span><br><span class="line">    o = iterator.next()</span><br><span class="line">    <span class="built_in">console</span>.log(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_________end_________"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr.keys())</span><br><span class="line"><span class="built_in">console</span>.log(arr.values())</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  _________bgn_________</span></span><br><span class="line"><span class="comment">  &#123; value: [ 1, 200 ], done: false &#125;</span></span><br><span class="line"><span class="comment">  &#123; value: [ 2, 300 ], done: false &#125;</span></span><br><span class="line"><span class="comment">  &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">  _________end_________</span></span><br><span class="line"><span class="comment">  Object [Array Iterator] &#123;&#125;</span></span><br><span class="line"><span class="comment">  Object [Array Iterator] &#123;&#125; */</span></span><br></pre></td></tr></table></figure><p>在 ES6中的数组、Set和 Map 中都部署了<code>entries() 、keys()、values()</code> 三个方法，它们调用后都返回 <code>iterator</code> 迭代器对象，其中<code>entries()</code>返回的迭代器对象用于遍历<code>[key,value]</code>组成的数组，而<code>keys()</code>返回的迭代器对象用于遍历所有的键名，<code>values()</code>返回的迭代器对象用于遍历所有的键值。除了上面列出的<code>Array、Set和 Map</code>结构支持<code>for..of</code>外，下面在给出类数组结构(伪数组)的几种情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. arguments */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'arguments'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'iterator = '</span>, iterator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="number">10</span>, <span class="number">203</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出： */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">arguments</span></span><br><span class="line"><span class="comment">iterator =  a</span></span><br><span class="line"><span class="comment">iterator =  b</span></span><br><span class="line"><span class="comment">iterator =  c</span></span><br><span class="line"><span class="comment">iterator =  10</span></span><br><span class="line"><span class="comment">iterator =  203 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.NodeList */</span></span><br><span class="line"><span class="keyword">let</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">oDiv.innerHTML = <span class="string">"&lt;span&gt;A&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(oDiv.children);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> oDiv.children) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'element = '</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">HTMLCollection(4) [span, span, span, span]</span></span><br><span class="line"><span class="comment">VM76:5 element =  &lt;span&gt;​A​&lt;/span&gt;</span></span><br><span class="line"><span class="comment">VM76:5 element =  &lt;span&gt;​B​&lt;/span&gt;</span></span><br><span class="line"><span class="comment">VM76:5 element =  &lt;span&gt;​c​&lt;/span&gt;</span></span><br><span class="line"><span class="comment">VM76:5 element =  &lt;span&gt;​D​&lt;/span&gt; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.字符串(String) */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> str) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"s = "</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> str[<span class="built_in">Symbol</span>.iterator]()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"s = "</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">s =  H</span></span><br><span class="line"><span class="comment">s =  e</span></span><br><span class="line"><span class="comment">s =  l</span></span><br><span class="line"><span class="comment">s =  l</span></span><br><span class="line"><span class="comment">s =  o */</span></span><br></pre></td></tr></table></figure><p>在上面列出的几种伪数组结构中，他们内部都实现了<code>iterator</code>接口，自己写的伪数组或者是对象实现了<code>iterator</code>接口支持<code>for...of</code>循环吗？ 答案是否定的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1、自己写的伪数组结构 */</span></span><br><span class="line"><span class="keyword">let</span> likeArray = &#123; <span class="number">0</span>: <span class="string">"a"</span>, <span class="number">1</span>: <span class="string">"b"</span>, <span class="number">2</span>: <span class="string">'c'</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> likeArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator = '</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 报错：TypeError: likeArray is not iterable */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.对象结构 */</span></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">name</span>: <span class="string">"Yong"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator = '</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 报错：TypeError: o is not iterable */</span></span><br></pre></td></tr></table></figure><p>如果自己写的伪数组也要能够支持<code>for...of</code> 循环，那么可以有下面几种尝试的办法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> likeArray = &#123; <span class="number">0</span>: <span class="string">"a"</span>, <span class="number">1</span>: <span class="string">"b"</span>, <span class="number">2</span>: <span class="string">'c'</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第一种方式：通过对象解构方式来先转换为数组 */</span></span><br><span class="line"><span class="comment">/* 结果：失败 (分析原因：扩展运算符[...]内部默认会自动调用 iterator 接口) */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span>[...likeArray]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator = '</span>, likeArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二种方式：利用 Array.from尝试转换为数组 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> <span class="built_in">Array</span>.from(likeArray)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'iterator = '</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果输出：</span></span><br><span class="line"><span class="comment">iterator =  a</span></span><br><span class="line"><span class="comment">iterator =  b</span></span><br><span class="line"><span class="comment">iterator =  c */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第三种方式：在当前伪数组的原型上面部署"原生"的 iterator 迭代器接口 */</span></span><br><span class="line"><span class="comment">/* ①  */</span></span><br><span class="line"><span class="comment">// likeArray.__proto__[Symbol.iterator] = Array.prototype[Symbol.iterator];</span></span><br><span class="line"><span class="comment">/* ② */</span></span><br><span class="line"><span class="comment">// Object.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];</span></span><br><span class="line"><span class="comment">/* ③ */</span></span><br><span class="line"><span class="comment">// likeArray[Symbol.iterator] = Array.prototype[Symbol.iterator];</span></span><br><span class="line"><span class="comment">/* ④ */</span></span><br><span class="line">likeArray[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator].bind(likeArray);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> likeArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator = '</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果输出：</span></span><br><span class="line"><span class="comment">iterator =  a</span></span><br><span class="line"><span class="comment">iterator =  b</span></span><br><span class="line"><span class="comment">iterator =  c */</span></span><br></pre></td></tr></table></figure><div class="tip">注意的是上面直接利用数组的[Symbol.iterator]来为伪数组部署迭代器接口的方式并不适用于普通的对象，如果用在普通对象的身上那么则毫无效果。</div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 2.对象结构 */</span></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">name</span>: <span class="string">"Yong"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.1 对象无法直接通过 for...of进行遍历 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator = '</span>, likeArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 报错：TypeError: o is not iterable */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.2 尝试利用数组的Symbol.iterator接口部署 */</span></span><br><span class="line">o.__proto__[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator = '</span>, likeArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果：不会进入循环，没有任何输出 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.3 尝试遍历对象的 keys 间接遍历对象 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(o)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`key:<span class="subst">$&#123;key&#125;</span> value:<span class="subst">$&#123;o[key]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">key:name value:Yong</span></span><br><span class="line"><span class="comment">key:age  value:18 */</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>这里简单思考和总结下，对象中没有实现<code>Iterator</code>迭代器的原因</strong><br>○ 对象已经拥有了 for…in循环 (该循环专为对象迭代设计)。<br>○ 对象在遍历的时候，属性( 键值对 )遍历的先后顺序是不确定的，而<code>Iterator</code>迭代器是线性的。<br>○ ES6提供了 Map ，可以在某种程度上实现替代操作。</p></blockquote><div class="titleX"><strong>Iterator - 内部结构 </strong></div><p>在数组等数据结构中，当我们调用 <code>entries()</code>或者是<code>Symbol.iterator()</code>的时候将得到一个<code>iterator</code>迭代器对象，在该对象中<code>next</code>方法每调用一次就会返回一个包含本次迭代 value 值以及标记是否完成迭代的 done 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123; value: 'a', done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: 'b', done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125; */</span></span><br></pre></td></tr></table></figure><p>这里我们可以尝试来封装一个函数<code>makeIterator</code>，模拟 <code>next</code>函数的工作过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> makeIterator = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: <span class="function"><span class="params">()</span> =&gt;</span> idx &lt; arr.length ? </span><br><span class="line">        &#123; <span class="attr">value</span>: arr[idx], <span class="attr">done</span>: <span class="literal">false</span> &#125; : &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = makeIterator([<span class="number">100</span>, <span class="number">200</span>, <span class="string">"Yong"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123; value: 100, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: 200, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: 'Yong', done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125;*/</span></span><br></pre></td></tr></table></figure><p>假如我们想要让普通的对象也能够直接支持(除了<code>Object.keys()</code>形式)<code>for...of</code>循环，那么可以考虑主动的在对象或者对象的原型对象上面部署<code>iterator</code>迭代器接口，下面简单给出对应的示例代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方案-01 */</span></span><br><span class="line"><span class="comment">// let o = &#123;</span></span><br><span class="line"><span class="comment">//     name: "Yong",</span></span><br><span class="line"><span class="comment">//     address: "GuangZhou",</span></span><br><span class="line"><span class="comment">//     [Symbol.iterator]() &#123;</span></span><br><span class="line"><span class="comment">//         let idx = 0;</span></span><br><span class="line"><span class="comment">//         let map = [];</span></span><br><span class="line"><span class="comment">//         Object.keys(this).forEach(key =&gt; map.push([key, this[key]]))</span></span><br><span class="line"><span class="comment">//         return &#123;</span></span><br><span class="line"><span class="comment">//             next: () =&gt; idx &lt; map.length ? &#123; value: map[idx++], done: false &#125; </span></span><br><span class="line"><span class="comment">//              : &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">//         &#125;;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方案-02 */</span></span><br><span class="line"><span class="built_in">Object</span>.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> map = [];</span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>).forEach(<span class="function"><span class="params">key</span> =&gt;</span> map.push([key, <span class="keyword">this</span>[key]]))</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: <span class="function"><span class="params">()</span> =&gt;</span> idx &lt; map.length ? &#123; <span class="attr">value</span>: map[idx++], <span class="attr">done</span>: <span class="literal">false</span> &#125; </span><br><span class="line">          : &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    name: <span class="string">"Yong"</span>,</span><br><span class="line">    address: <span class="string">"GuangZhou"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试代码 */</span></span><br><span class="line"><span class="keyword">let</span> iterator = o[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"+++++++++++++++++"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator:'</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"+++++++++++++++++"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'key:'</span>, key, <span class="string">"val:"</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123; value: [ 'name', 'Yong' ], done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: [ 'address', 'GuangZhou' ], done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">+++++++++++++++++</span></span><br><span class="line"><span class="comment">iterator: [ 'name', 'Yong' ]</span></span><br><span class="line"><span class="comment">iterator: [ 'address', 'GuangZhou' ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">+++++++++++++++++</span></span><br><span class="line"><span class="comment">key: name    val: Yong</span></span><br><span class="line"><span class="comment">key: address val: GuangZhou */</span></span><br></pre></td></tr></table></figure><p>如果想要更简单点，其实还可以借助 Generator 生成器函数来实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 生成器函数来实现 */</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"H"</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"e"</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"l"</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"l"</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"o"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'e:'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">e: H</span></span><br><span class="line"><span class="comment">e: e</span></span><br><span class="line"><span class="comment">e: l</span></span><br><span class="line"><span class="comment">e: l</span></span><br><span class="line"><span class="comment">e: o */</span></span><br></pre></td></tr></table></figure></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文简单说明&lt;a href=&quot;&quot;&gt; 迭代器接口 Iterator&lt;/a&gt; 接口的基本使用，涉及 Array 、Set 、Map 和 String 以及伪数组等数据结构，以及 &lt;code&gt;for...of&lt;/code&gt;循环的用法等。&lt;/div&gt;


      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>源码系列 -  Promise</title>
    <link href="https://weibo.com/u/3800117445/2019/06/27/%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%20Promise/"/>
    <id>https://weibo.com/u/3800117445/2019/06/27/源码系列 Promise/</id>
    <published>2019-06-26T16:00:08.000Z</published>
    <updated>2020-06-28T00:38:43.074Z</updated>
    
    <content type="html"><![CDATA[<div class="tip"> 本文介绍参考[PromiseA+]规范来实现一个符合规范的Promise库。</div><p><img src="https://github.com/flowerField/Promises/raw/master/src/promise.png"></p><blockquote><p>上面是ES6+实现的Promise核心方法，其整体结构也可以通过下面的打印查看</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 01-打印Promise类的内容(静态方法) */</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Promise</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出(已经省略部分内容) */</span></span><br><span class="line"><span class="comment">// length: 1                      期望形参数量((resolve,reject)=&gt;&#123;&#125;)</span></span><br><span class="line"><span class="comment">// name: "Promise"                类(构造函数)的名字</span></span><br><span class="line"><span class="comment">// prototype: Promise             原型对象</span></span><br><span class="line"><span class="comment">//    then: ƒ then()              then处理函数</span></span><br><span class="line"><span class="comment">//    catch: ƒ catch()            catch处理函数</span></span><br><span class="line"><span class="comment">//    finally: ƒ finally()        完成的处理函数</span></span><br><span class="line"><span class="comment">//    constructor: ƒ Promise()    原型的构造器属性</span></span><br><span class="line"><span class="comment">// race: ƒ race()                 异步任务并发先执行完</span></span><br><span class="line"><span class="comment">// reject: ƒ reject()             包装为reject     </span></span><br><span class="line"><span class="comment">// resolve: ƒ resolve()           包装为resolve</span></span><br><span class="line"><span class="comment">// all: ƒ all()                   异步任务并发都执行完</span></span><br><span class="line"><span class="comment">// allSettled: ƒ allSettled()</span></span><br><span class="line"><span class="comment">// Symbol(Symbol.species): (...)</span></span><br><span class="line"><span class="comment">// Symbol(Symbol.toStringTag): "Promise"</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promises/A+</a> 规范约定的Promise的实现逻辑和核心代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 核心注解 */</span></span><br><span class="line"><span class="comment">/* 1、Promise应该被设计为一个类(构造函数) */</span></span><br><span class="line"><span class="comment">/* 2、Promise存在三种状态，分别是pending(等待)、rejected(失败) 和 resolved(成功)。*/</span></span><br><span class="line"><span class="comment">/* 3、Promise类(构造函数)接收一个“拥有两个函数参数的函数”作为参数，我们可以称之为执行器函数(executor)立即执行。*/</span></span><br><span class="line"><span class="comment">/* 4、Promise类(构造函数)内部应该以私有函数的方式来是实现reject和resolve函数。 */</span></span><br><span class="line"><span class="comment">/* 5、Promise内部考虑到异步任务的执行(譬如定时器)Promise状态无法立即完成等待-&gt;成功|失败的切换，使用注册/订阅模式*/</span></span><br><span class="line"><span class="comment">/* 6、Promise的then方法处理失败、成功、等待态(如果存在异步任务)的Promise后续任务。 */</span></span><br><span class="line"><span class="comment">/* 7、Promise的then方法应该实现链式调用，实现的策略是总是返回一个新的Promise对象 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">"PENDING"</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">"RESOLVED"</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">"REJECTED"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1、死循环处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"# Chaining cycle detected for promise #&lt;Promise&gt;"</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/* 2、区分返回值是基本值和(Promise)的情况*/</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">"object"</span> &amp;&amp; x != <span class="literal">null</span>) || <span class="keyword">typeof</span> x === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.then;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">"function"</span>) &#123;</span><br><span class="line">                then.call(x, y =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">                    called = <span class="literal">true</span>;</span><br><span class="line">                    resolvePromise(promise, y, resolve, reject); <span class="comment">/* 递归调用 */</span></span><br><span class="line">                &#125;, r =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">                    called = <span class="literal">true</span>;</span><br><span class="line">                    reject(r);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.status = PENDING;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">this</span>.rejectedCallBacks = [];</span><br><span class="line">        <span class="keyword">this</span>.resolvedCallBacks = [];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* reject 和 resolve 应该被实现为私有函数 */</span></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> val.then(resolve, reject);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="keyword">this</span>.status = RESOLVED;</span><br><span class="line">                <span class="keyword">this</span>.value = val;</span><br><span class="line">                <span class="keyword">this</span>.resolvedCallBacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">                <span class="keyword">this</span>.reason = val;</span><br><span class="line">                <span class="keyword">this</span>.rejectedCallBacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 执行器函数应该立即执行，并进行异常处理 */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">"function"</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">        onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">"function"</span> ? onRejected : <span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="keyword">throw</span> e &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === RESOLVED) &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">                        resolvePromise(promise, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === REJECTED) &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">                        resolvePromise(promise, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="keyword">this</span>.rejectedCallBacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">                            resolvePromise(promise, x, resolve, reject);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                            reject(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">0</span>);</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.resolvedCallBacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">                            resolvePromise(promise, x, resolve, reject);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                            reject(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">0</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 基准测试 */</span></span><br><span class="line"><span class="built_in">Promise</span>.defer = <span class="built_in">Promise</span>.deferred = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dfd = &#123;&#125;;</span><br><span class="line">    dfd.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        dfd.resolve = resolve;</span><br><span class="line">        dfd.reject = reject;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> dfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br></pre></td></tr></table></figure><blockquote><p>规范基准测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install promises-aplus-tests g</span><br><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line">promises-aplus-tests Promise.js</span><br></pre></td></tr></table></figure><p>Promise还有一些诸如catch和resolve等方法，下面简单给出它们的实现代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">    <span class="comment">/* .... */</span></span><br><span class="line">    <span class="keyword">catch</span> (errCallBack) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, errCallBack); <span class="comment">/* 为了支持链式调用，此处需要return */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> resolve(data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> reject(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span>(callBack) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callBack()).then(<span class="function"><span class="params">()</span> =&gt;</span> value);</span><br><span class="line">        &#125;, reason =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callBack()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt; 本文介绍参考[PromiseA+]规范来实现一个符合规范的Promise库。&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Promises/raw/master/src/promise.
      
    
    </summary>
    
    
      <category term="源码系列" scheme="https://weibo.com/u/3800117445/tags/%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Gossip -  eval 和 vm沙箱</title>
    <link href="https://weibo.com/u/3800117445/2019/06/26/Gossip%20-%20eval%E5%92%8Cvm%E6%B2%99%E7%AE%B1/"/>
    <id>https://weibo.com/u/3800117445/2019/06/26/Gossip - eval和vm沙箱/</id>
    <published>2019-06-25T16:00:08.000Z</published>
    <updated>2020-06-30T01:41:12.576Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文简单对比<code>eval函数</code>、<code>new Function</code>以及vm模块的执行情况。</div><p><code>eval</code>函数接收一个字符串作为参数，会把参数字符串当做 JavaScript 代码来立即执行 , 语法为<code>eval(string)</code>。</p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文简单对比&lt;code&gt;eval函数&lt;/code&gt;、&lt;code&gt;new Function&lt;/code&gt;以及vm模块的执行情况。&lt;/div&gt;

&lt;p&gt;&lt;code&gt;eval&lt;/code&gt;函数接收一个字符串作为参数，会把参数字符串当做 JavaScri
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - defineProperty</title>
    <link href="https://weibo.com/u/3800117445/2019/06/25/Gossip%20-%20defineProperty/"/>
    <id>https://weibo.com/u/3800117445/2019/06/25/Gossip - defineProperty/</id>
    <published>2019-06-24T16:00:08.000Z</published>
    <updated>2020-05-17T01:05:43.288Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍<code>Object.defineProperty()</code>方法，并基于此简单讨论数据劫持的实现方案。</div><h3 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty"></a>defineProperty</h3><p><code>Object.getOwnPropertyDescriptor(target,attrName)</code>方法用于获取对象的属性描述符对象，该方法的第一个参数为目标对象，第二个参数为指定的属性名。</p><p>我们可以利用该方法来查看对象属性的描述符配置项(包括：<code>value值</code>、<code>writable可重写</code>、<code>enumerable可枚举</code>和<code>configurable可配置</code>等)。默认正常的对象属性中，这些配置项的值都是 <code>true</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> des = <span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">"name"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(des);</span><br><span class="line"><span class="comment">/* &#123; value: '文顶顶',writable: true,enumerable: true,configurable: true &#125; */</span></span><br></pre></td></tr></table></figure><p><code>Object.defineProperty(target,attrName,options)</code>方法用于定义(设置)对象并对指定的属性描述符对象进行配置。该方法的第一个参数为目标对象，第二个参数为指定的属性名，第三个参数为配置对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 备注：给o对象添加address属性，并设置属性值为香悦山 */</span></span><br><span class="line"><span class="comment">/* 说明：默认新添加的属性，属性描述配置项均为false */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"address"</span>, &#123; <span class="attr">value</span>: <span class="string">"香悦山"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">"address"</span>));</span><br><span class="line"><span class="comment">/* &#123; value: '香悦山',writable: false,enumerable: false,configurable: false &#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 备注：重新定义age属性，设置属性值为20，该属性值可配置但无法重写和枚举 */</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"age"</span>, &#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">writable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">"age"</span>));</span><br><span class="line"><span class="comment">/* &#123; value: 20,writable: false,enumerable: false,configurable: true &#125; */</span></span><br><span class="line">o.age = <span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age); <span class="comment">//20</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, o[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* name 文顶顶 */</span></span><br><span class="line"><span class="comment">/* 在for...in循环中，age键值对 ，以及新添加的address键值对均没有被枚举 */</span></span><br></pre></td></tr></table></figure><p><code>Object.defineProperties(target,options)</code>方法用于一次性设置(<code>添加</code>)对象的多个属性，与之对应的<code>Object.getOwnPropertyDescriptors(target)</code>方法用于获取对象中所有成员的 <strong>详细</strong> 配置信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(o, &#123;</span><br><span class="line">    <span class="string">"className"</span>: &#123;</span><br><span class="line">        value: <span class="string">"H5"</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"friends"</span>: &#123;</span><br><span class="line">        value: [<span class="string">"胡适"</span>, <span class="string">"沈从文"</span>, <span class="string">"辜鸿铭"</span>],</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        writable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"_____"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(o));</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123;   name:&#123; value: '文顶顶', writable: true,enumerable: true,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    age:&#123; value: 20,writable: false,enumerable: false,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    address:&#123; value: '香悦山',writable: false,enumerable: false,configurable: false &#125;,</span></span><br><span class="line"><span class="comment">    className:&#123; value: 'H5',writable: false,enumerable: false,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    friends:&#123; value: [ '胡适', '沈从文', '辜鸿铭' ],</span></span><br><span class="line"><span class="comment">              writable: true, enumerable: false,configurable: true &#125; &#125; */</span></span><br></pre></td></tr></table></figure></p><div class="tip"><a href="">Object.defineProperty </a>方法主要用于对象中的某个属性进行访问配置，如果需要对整个对象执行类似的操作则可使用<code>Object.preventExtensions()</code>、<code>Object.seal()</code>和<code>Object.freeze()</code> 等方法，它们分别对应着<code>禁止扩展</code>、<code>密封对象</code>以及要<code>冻结</code>对象。</div><h3 id="Getter-and-Setter"><a href="#Getter-and-Setter" class="headerlink" title="Getter and Setter"></a>Getter and Setter</h3><p>对于对象字面量创建的对象而言，我们可以直接通过<code>get attrName</code>或<code>set attrName</code>的方式来对属性的设置和读取操作进行拦截和监听。通过下面的代码，我们可以观察到，对象属性的 Getter 和 Setter 的代码并不复杂但却需要借助一个无关的中间变量<code>_age</code>来实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* getter 和 setter */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    name: <span class="string">"文顶顶"</span>,</span><br><span class="line">    _age: <span class="number">17</span>,</span><br><span class="line">    get age() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"监听到执行了getter方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._age;</span><br><span class="line">    &#125;,</span><br><span class="line">    set age(val) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"监听到执行了setter方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>._age = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line">o.age = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">监听到执行了getter方法</span></span><br><span class="line"><span class="comment">17</span></span><br><span class="line"><span class="comment">监听到执行了setter方法</span></span><br><span class="line"><span class="comment">监听到执行了getter方法</span></span><br><span class="line"><span class="comment">100 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p><code>Object.defineProperty()</code>方法的配置对象中也支持对象属性的 <code>Getter</code> 和 <code>Setter</code>操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(o, <span class="string">"age"</span>, &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"——getter———"</span>);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(val) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"——setter———"</span>);</span><br><span class="line">            temp = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(o.age);</span><br><span class="line">    o.age = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(o.age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行情况 */</span></span><br><span class="line">    <span class="comment">// ——getter———</span></span><br><span class="line">    <span class="comment">// 18</span></span><br><span class="line">    <span class="comment">// ——setter———</span></span><br><span class="line">    <span class="comment">// ——getter———</span></span><br><span class="line">    <span class="comment">// 100</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p><hr><br>利用<code>Object.defineProperty()</code>方法，来监听对象属性的设置和读取操作，可以不必借助于中间属性来实现而改用一个外部变量即可，这样的处理方式为代码的封装提供了可能。</p><p><strong>注意</strong> 在 <code>defineProperty</code> 方法内部使用 <code>set 和 get</code> 函数时不能与 <code>value 和 writable</code> 共存。上述的代码演示了监听对象单个属性读写的方案，如果需要为对象中所有的属性都添加 <code>set 和 get</code> 监听，可以考虑对上述代码进行封装。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> || target == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.hasOwnProperty(key)) defineReactive(target, key, target[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defineReactive = <span class="function">(<span class="params">target, key, val</span>) =&gt;</span> &#123;</span><br><span class="line">    observer(val); <span class="comment">/* 递归解决多层对象解构问题 */</span></span><br><span class="line">    <span class="comment">/* val 是外部传入的参数：就是指定属性的默认值 */</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            handler(<span class="string">"getter"</span>)</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(_val) &#123;</span><br><span class="line">            handler(<span class="string">"setter"</span>)</span><br><span class="line">            val = _val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"监听到"</span> + text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试代码 */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"文顶顶"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">car</span>: &#123; <span class="attr">color</span>: <span class="string">"white"</span> &#125; &#125;;</span><br><span class="line">observer(o);</span><br><span class="line">o.age = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line">o.car.color = <span class="string">"black"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.car.color);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行情况 */</span></span><br><span class="line"><span class="comment">// 监听到setter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 监听到setter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// black</span></span><br></pre></td></tr></table></figure></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍&lt;code&gt;Object.defineProperty()&lt;/code&gt;方法，并基于此简单讨论数据劫持的实现方案。&lt;/div&gt;

&lt;h3 id=&quot;defineProperty&quot;&gt;&lt;a href=&quot;#defineProperty&quot; clas
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - deepClone</title>
    <link href="https://weibo.com/u/3800117445/2019/06/24/Gossip%20-%20deepClone/"/>
    <id>https://weibo.com/u/3800117445/2019/06/24/Gossip - deepClone/</id>
    <published>2019-06-23T16:00:08.000Z</published>
    <updated>2020-05-17T01:05:43.288Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文讨论数据的拷贝，并给出深拷贝的实现代码。</div><p>拷贝即复制<code>( copy | clone )</code>，获取指定数据副本的一种行为，理论上我们可以对任意类型的数据进行拷贝，包括但不限于<code>null、undefined、字符串、数字、布尔值、对象、函数、数组、正则表达式等</code>。</p><p>数据的拷贝，可以具体的分为<a href=""> 浅拷贝 </a>和<a href=""> 深拷贝 </a>。浅拷贝拷贝一层，副本可能存在共享问题，而深拷贝会拷贝多层，拷贝得到的副本无共享问题。</p><p>数据拷贝的方案有很多，譬如可以使用循环遍历和<code>Object.assign()</code>等方法，但这些拷贝方式都是浅拷贝。深拷贝的常见实现方案一种是利用JSON内置对象来进行序列化和反序列化操作，请看下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">"MiTaoEr"</span>, <span class="attr">info</span>: &#123; <span class="attr">address</span>: <span class="string">"天津"</span>, <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> t = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(o));</span><br><span class="line">o.info.address = <span class="string">"北京"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br><span class="line"><span class="comment">/* &#123; name: 'MiTaoEr', info: &#123; address: '天津', color: 'red' &#125; &#125; */</span></span><br></pre></td></tr></table></figure></p><p>我们先通过<code>JSON.stringify()</code>方法将对象序列化为JSON字符串，然后再进行反序列化的骚操作再转换回来，顺利完成任务。不得不说，这种拷贝对象的方式，手起刀落干净利落，但却有一点点小遗憾，遗憾的是<span style="color:#195">JSON数据中没有函数和 undefined 类型，因此在进行序列化的过程中，对象中的这部分数据会被直接过滤掉，此外正则类型的数据也会被处理为空对象。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; </span><br><span class="line">  name: <span class="string">"MiTaoEr"</span>, </span><br><span class="line">  ID: <span class="literal">undefined</span>, </span><br><span class="line">  showName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, </span><br><span class="line">  reg: <span class="regexp">/wen/</span>, </span><br><span class="line">  info: &#123; <span class="attr">address</span>: <span class="string">"天津"</span>,<span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(o)));</span><br><span class="line"><span class="comment">/* &#123; name: 'MiTaoEr',reg: &#123;&#125;,info: &#123; address: '天津', color: 'red' &#125; &#125; */</span></span><br></pre></td></tr></table></figure><p>利用JSON来实现深拷贝这种实现方式其实不够完美，下面给出通过递归来实现深拷贝的完美方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 深拷贝实现函数 */</span></span><br><span class="line"><span class="keyword">let</span> deepClone = <span class="function">(<span class="params">val, wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (val == <span class="literal">null</span>) <span class="keyword">return</span> val;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">"object"</span>) <span class="keyword">return</span> val;</span><br><span class="line">    <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (wm.has(val)) <span class="keyword">return</span> wm.get(val);</span><br><span class="line">    <span class="keyword">let</span> _instance = <span class="keyword">new</span> val.constructor;</span><br><span class="line">    wm.set(val, _instance);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val.hasOwnProperty(key)) _instance[key] = deepClone(val[key], wm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>_instance</code>是引用类型的数据，后续for循环的执行会更新_instance的内容,考虑到循环引用的问题，在<code>deepClone</code>方法中用到<a href=""> WeakMap </a>类型，其中<code>wm.set</code>方法执行后<code>wm</code>中保存的数据 <code>key === value</code> ， 该对象用于数据的记忆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 001-测试代码：正常情况 */</span></span><br><span class="line"><span class="comment">//var target = &#123;name: "wen-ding-ding", car:&#123;id: 666 &#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 002-测试代码：循环引用 */</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;<span class="attr">name</span>: <span class="string">"wen-ding-ding"</span>, <span class="attr">car</span>:&#123;<span class="attr">id</span>: <span class="number">666</span> &#125;&#125;</span><br><span class="line">target.ref = target;</span><br><span class="line"><span class="keyword">var</span> result = deepClone(target);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target, result);</span><br><span class="line"><span class="built_in">console</span>.log(target.ref === result.ref, target.ref === target); <span class="comment">/* false true */</span></span><br><span class="line">target.car.id = <span class="number">888</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.car.id); <span class="comment">/* 666 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 003-其它数据类型测试 */</span></span><br><span class="line"><span class="comment">/* (1) 数组 */</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = deepClone(arr1);</span><br><span class="line">arr1.push(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);</span><br><span class="line"><span class="comment">/* [ 100, 200, 300, 400 ] [ 100, 200, 300 ] */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (2) 日期 */</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> date2 = deepClone(date1);</span><br><span class="line"><span class="built_in">console</span>.log(date1,date2,date1 == date2)</span><br><span class="line"><span class="comment">/* 2019-08-24T11:00:21.379Z 2019-08-24T11:00:21.379Z false*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (3) null 和 undefined */</span></span><br><span class="line"><span class="built_in">console</span>.log(deepClone(<span class="literal">null</span>),deepClone(<span class="literal">undefined</span>))</span><br><span class="line"><span class="comment">/* null undefined */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (4) 正则 */</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>);</span><br><span class="line"><span class="keyword">var</span> reg2 = deepClone(reg1);</span><br><span class="line"><span class="built_in">console</span>.log(reg1,reg2,reg1 == reg2)</span><br><span class="line"><span class="comment">/* /\&#123;\&#123;(.+?)\&#125;\&#125;/ /\&#123;\&#123;(.+?)\&#125;\&#125;/ false */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (5) 基本值 */</span></span><br><span class="line"><span class="built_in">console</span>.log(deepClone(<span class="string">"wen-ding-ding"</span>),deepClone(<span class="number">2019</span>),deepClone(<span class="literal">true</span>))</span><br><span class="line"><span class="comment">/* wen-ding-ding 2019 true */</span></span><br></pre></td></tr></table></figure><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文讨论数据的拷贝，并给出深拷贝的实现代码。&lt;/div&gt;

&lt;p&gt;拷贝即复制&lt;code&gt;( copy | clone )&lt;/code&gt;，获取指定数据副本的一种行为，理论上我们可以对任意类型的数据进行拷贝，包括但不限于&lt;code&gt;null、unde
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>疑难杂症-gyp: No Xcode or CLT version detected</title>
    <link href="https://weibo.com/u/3800117445/2019/05/06/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-gyp:%20No%20Xcode%20or%20CLT%20version%20detected/"/>
    <id>https://weibo.com/u/3800117445/2019/05/06/疑难杂症-gyp: No Xcode or CLT version detected/</id>
    <published>2019-05-06T15:58:37.000Z</published>
    <updated>2020-05-17T01:05:43.288Z</updated>
    
    <content type="html"><![CDATA[<p>当Mac升级到High sierra 后，在终端中使用 <code>npm install</code> 或者 <code>yarn</code> 的时候，显示提示信息 <code>gyp: No Xcode or CLT version detected!</code>, 表示缺失了 XCode 的 CLI 工具。</p><p><img src="../../../../src/xcode_test.jpg"></p><p>尝试在终端中使用管理员权限执行下面的命令来安装该工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select --install</span><br></pre></td></tr></table></figure><p>如果问题还没有解决，尝试先删除原本的命令行工具，然后再执行上面的命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf $(xcode-select -p)  或者是  rm -rf /Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure></p><p><img src="../../../../ZS.png" width="200px"></p><p><img src="../../../../z.png" width="200px"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当Mac升级到High sierra 后，在终端中使用 &lt;code&gt;npm install&lt;/code&gt; 或者 &lt;code&gt;yarn&lt;/code&gt; 的时候，显示提示信息 &lt;code&gt;gyp: No Xcode or CLT version detected!&lt;/code&gt;,
      
    
    </summary>
    
    
      <category term="疑难杂症" scheme="https://weibo.com/u/3800117445/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>Gossip -   generate Virtual-DOM</title>
    <link href="https://weibo.com/u/3800117445/2019/05/06/Gossip%20-%20generate%20Virtual-DOM/"/>
    <id>https://weibo.com/u/3800117445/2019/05/06/Gossip - generate Virtual-DOM/</id>
    <published>2019-05-05T16:00:08.000Z</published>
    <updated>2020-05-17T01:06:21.300Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">在 <a href="http://wendingding.com/2019/08/26/Gossip%20-%20ast%20&amp;&amp;%20render/" target="_blank" rel="noopener">ast &amp;&amp; render</a> 这篇文章中介绍了 ast 树和 render函数生成的过程，本文介绍通过 <code>render函数创建DOM</code>的基本过程(仅仅核心部分)，更多的细节也可以参考 <a href="https://github.com/vuejs" target="_blank" rel="noopener">Vue 框架源码</a>自行探索 。</div><p><img src="../../../../src/virtual_01.png"></p><div class="titleX"><strong>Render =&gt; Virtual-DOM</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模拟数据 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"刘毅"</span>;</span><br><span class="line">    <span class="keyword">return</span> _c(<span class="string">"a"</span>, &#123; <span class="attr">id</span>: <span class="string">"app"</span>, <span class="attr">title</span>: <span class="string">"标题"</span> &#125; , _c(<span class="string">"p"</span>, <span class="literal">null</span>, _v(<span class="string">"hello"</span>)),</span><br><span class="line">        _c(<span class="string">"span"</span>, <span class="literal">null</span>, _v(<span class="string">"My name is"</span> + _s(name))));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(...arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_v</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createTextNode(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关键：用于处理插值模板 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_s</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val == <span class="literal">null</span> ?<span class="string">''</span>: (<span class="keyword">typeof</span> val === <span class="string">'object'</span>?<span class="built_in">JSON</span>.stringify(val):val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建节点函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">tag, data = &#123;&#125;, ...children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v_node(tag, data, <span class="literal">null</span>, children, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建文本内容 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTextNode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v_node(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建虚拟 DOM 方法：把数据组织成对象返回 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v_node</span>(<span class="params">tag, data, key, children, text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; tag, data, key, children, text &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vNode = render();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'vNode'</span>, vNode);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">// vNode </span></span><br><span class="line"><span class="comment">// &#123; tag: 'a',</span></span><br><span class="line"><span class="comment">//   data: &#123; id: 'app', title: '标题' &#125;,</span></span><br><span class="line"><span class="comment">//   key: null,</span></span><br><span class="line"><span class="comment">//   text: null,</span></span><br><span class="line"><span class="comment">//   children:</span></span><br><span class="line"><span class="comment">//    [ &#123; tag: 'p', data: null, key: null, children: [Array], text: null &#125;,</span></span><br><span class="line"><span class="comment">//      &#123; tag: 'span', data: null,key: null,children: [Array],text: null &#125; </span></span><br><span class="line"><span class="comment">//    ]</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br></pre></td></tr></table></figure><p>给出上面代码生成的<code>虚拟 DOM</code>对应的对象结构图。</p><p><img src="../../../../src/virtual_02.png"></p><div class="titleX"><strong> Vue 框架源码核心 </strong></div><p>在 <a href="https://github.com/vuejs" target="_blank" rel="noopener">Vue 框架中</a>，我们主要三种方式来渲染标签。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、实例化 Vue 的过程中，通过 el 来选择实例挂载的标签。</span><br><span class="line">2、实例化 Vue 的过程中，通过 template 标签字符串模板来渲染标签。</span><br><span class="line">3、实例化 Vue 的过程中，直接通过 render 函数的方式来渲染标签，这也是底层的方法。</span><br></pre></td></tr></table></figure></p><p>我们给出对应的 Vue 渲染标签(组件)的对应代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第一种方式： 通过 配置项中的 el 参数来挂载 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         el: <span class="string">"#app1"</span></span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第二种方式：通过template 模板 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="xml">         template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>我是模板内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="javascript">     vm2.$mount(<span class="string">"#app2"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第三种方式：通过 render 函数渲染 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="undefined">         render(c) &#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> c(<span class="string">'div'</span>, &#123;</span></span><br><span class="line"><span class="undefined">                 attrs: &#123;</span></span><br><span class="line"><span class="javascript">                     title: <span class="string">"标题"</span>,</span></span><br><span class="line"><span class="undefined">                     idx: 1</span></span><br><span class="line"><span class="undefined">                 &#125;,</span></span><br><span class="line"><span class="undefined">                 class: &#123;</span></span><br><span class="line"><span class="javascript">                     <span class="string">'is-red'</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                 &#125;</span></span><br><span class="line"><span class="undefined">             &#125;, [</span></span><br><span class="line"><span class="javascript">               c(<span class="string">'a'</span>, <span class="string">'我是a'</span>),</span></span><br><span class="line"><span class="javascript">               c(<span class="string">'span'</span>, &#123;<span class="attr">class</span>: <span class="string">"span-class"</span>&#125;, <span class="string">'我是span'</span>),</span></span><br><span class="line"><span class="undefined">               ])</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">     &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     vm3.$mount(<span class="string">"#app3"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 测试数据 */</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm1.$el);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm2.$el);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm3.$el);</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在上面的代码中，我们通过三种方式来进行渲染，它们将生成下面的标签结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>我是模板内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"标题"</span> <span class="attr">idx</span>=<span class="string">"1"</span> <span class="attr">class</span>=<span class="string">"is-red"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span-class"</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>我是a<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在三种渲染的方式中，其中<code>el</code> 把挂载渲染的标签到页面，<code>template</code> 会直接执行替换操作，<code>render</code>函数同 template 一致。我们知道，无论使用什么样的方式来渲染 Vue框架的内部最终都是使用 <code>render</code>函数来进行处理的。</p><p>接下来，我这里通过代码简单模拟 render 函数渲染生成标签和虚拟 DOM 的过程。为了保持基本一致，我这里改造下上文的代码，并提供 Vue 这个构造函数(Class),并把涉及到的诸多方法都写到Vue原型对象上面以供实例化对象调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一部分代码：主要处理模板编译 */</span></span><br><span class="line"><span class="comment">/* 形如：abc-123 */</span></span><br><span class="line"><span class="keyword">const</span> nc_name = <span class="string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;aaa:bbb&gt; */</span></span><br><span class="line"><span class="keyword">const</span> q_nameCapture = <span class="string">`((?:<span class="subst">$&#123;nc_name&#125;</span>\\:)?<span class="subst">$&#123;nc_name&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;div   匹配开始标签的左半部分 */</span></span><br><span class="line"><span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;q_nameCapture&#125;</span>`</span>);</span><br><span class="line"><span class="comment">/* 匹配开始标签的右半部分(&gt;) 形如`&gt;`或者`  &gt;`前面允许存在 N(N&gt;=0)个空格 */</span></span><br><span class="line"><span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span>;</span><br><span class="line"><span class="comment">/* 匹配闭合标签：形如 &lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">const</span> endTag = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;\\/<span class="subst">$&#123;q_nameCapture&#125;</span>[^&gt;]*&gt;`</span>);</span><br><span class="line"><span class="comment">/* 匹配属性节点：形如 id="app" 或者 id='app' 或者 id=app 等形式的字符串 */</span></span><br><span class="line"><span class="keyword">const</span> att=<span class="regexp">/^\s*([^\s"'&lt;&gt;\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=&lt;div&gt;`]+)))?/</span></span><br><span class="line"><span class="comment">/* 匹配插值语法：形如 &#123;&#123;msg&#125;&#125; */</span></span><br><span class="line"><span class="keyword">const</span> defaultTagRE = <span class="regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(文本节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_TEXT = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(元素节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_ELEMENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []; <span class="comment">/* 数组模拟栈结构 */</span></span><br><span class="line">    <span class="keyword">let</span> currentParent;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 推进函数：每处理完一部分模板就向前推进删除一段 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">advance</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        html = html.substring(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> element = createASTElement(tag, attrs);</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            root = element;</span><br><span class="line">        &#125;</span><br><span class="line">        currentParent = element;</span><br><span class="line">        stack.push(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">tagName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> element = stack.pop();</span><br><span class="line">        currentParent = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (currentParent) &#123;</span><br><span class="line">            element.parent = currentParent;</span><br><span class="line">            currentParent.children.push(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 文本处理函数：&lt;span&gt;  hello &lt;span&gt; =&gt; text的值为 " hello "*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">chars</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 1.先处理文本字符串中所有的空格，全部替换为空 */</span></span><br><span class="line">        <span class="comment">// text = text.replace(/\s/g, '');</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 2.把数据组织成&#123;text:"hello",type:3&#125;的形式保存为当前父节点的子元素 */</span></span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            currentParent.children.push(&#123;</span><br><span class="line">                text,</span><br><span class="line">                nodeType: NODE_TYPE_TEXT</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createASTElement</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            tag,</span><br><span class="line">            attrs,</span><br><span class="line">            children: [],</span><br><span class="line">            parent: <span class="literal">null</span>,</span><br><span class="line">            nodeType: NODE_TYPE_ELEMENT</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析开始标签部分：主要提取标签名和属性节点 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parser_start_html</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 00-正则匹配 &lt;div id="app" title="标题"&gt;模板结构*/</span></span><br><span class="line">        <span class="keyword">let</span> start = html.match(startTagOpen);</span><br><span class="line">        <span class="keyword">if</span> (start) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 01-提取标签名称 形如 div */</span></span><br><span class="line">            <span class="keyword">const</span> tagInfo = &#123;</span><br><span class="line">                tag: start[<span class="number">1</span>],</span><br><span class="line">                attrs: []</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除&lt;div部分 */</span></span><br><span class="line">            advance(start[<span class="number">0</span>].length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 02-提取属性节点部分 形如：id="app" title="标题"*/</span></span><br><span class="line">            <span class="keyword">let</span> attr, end;</span><br><span class="line">            <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(att))) &#123;</span><br><span class="line">                tagInfo.attrs.push(&#123;</span><br><span class="line">                    name: attr[<span class="number">1</span>],</span><br><span class="line">                    value: attr[<span class="number">3</span>] || attr[<span class="number">4</span>] || attr[<span class="number">5</span>]</span><br><span class="line">                &#125;);</span><br><span class="line">                advance(attr[<span class="number">0</span>].length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 03-处理开始标签 形如 &gt;*/</span></span><br><span class="line">            <span class="keyword">if</span> (end) &#123;</span><br><span class="line">                advance(end[<span class="number">0</span>].length);</span><br><span class="line">                <span class="keyword">return</span> tagInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (html) &#123;</span><br><span class="line">        <span class="keyword">let</span> textTag = html.indexOf(<span class="string">'&lt;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果以&lt;开头 */</span></span><br><span class="line">        <span class="keyword">if</span> (textTag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* (1) 可能是开始标签 形如:&lt;div id="app"&gt; */</span></span><br><span class="line">            <span class="keyword">let</span> startTagMatch = parser_start_html();</span><br><span class="line">            <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">                start(startTagMatch.tag, startTagMatch.attrs);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* (2) 可能是结束标签 形如:&lt;/div&gt;*/</span></span><br><span class="line">            <span class="keyword">let</span> endTagMatch = html.match(endTag);</span><br><span class="line">            <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">                advance(endTagMatch[<span class="number">0</span>].length);</span><br><span class="line">                end(endTagMatch[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 文本内容的处理 */</span></span><br><span class="line">        <span class="keyword">let</span> text;</span><br><span class="line">        <span class="keyword">if</span> (textTag &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            text = html.substring(<span class="number">0</span>, textTag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            advance(text.length);</span><br><span class="line">            chars(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ****************** */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* 2.1 如果属性节点名称为 style那么则对 value进行中间处理 */</span></span><br><span class="line">        <span class="keyword">if</span> (attr.name === <span class="string">'style'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            attr.value.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> [key, value] = item.split(<span class="string">':'</span>);</span><br><span class="line">                obj[key] = value</span><br><span class="line">            &#125;);</span><br><span class="line">            attr.value = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:"app",title:"标题", */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, <span class="number">-1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateChildren</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = el.children;</span><br><span class="line">    <span class="keyword">return</span> (children &amp;&amp; children.length &gt; <span class="number">0</span>) ? <span class="string">`<span class="subst">$&#123;children.map(c =&gt; generate(c)).join(<span class="string">','</span>)&#125;</span>`</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType == <span class="number">1</span> ? generateRenderString(node) : generateText(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tokens = [];</span><br><span class="line">    <span class="keyword">let</span> match, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文本内容 */</span></span><br><span class="line">    <span class="keyword">let</span> text = node.text;</span><br><span class="line">    <span class="comment">// console.log('node', node);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果是全局匹配 那么每次匹配的时候都需要将 lastIndex 调整到0*/</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex = defaultTagRE.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 正则匹配(匹配插值语法部分的内容) */</span></span><br><span class="line">    <span class="keyword">while</span> (match = defaultTagRE.exec(text)) &#123;</span><br><span class="line">        index = match.index;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">            tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex, index)));</span><br><span class="line">        &#125;</span><br><span class="line">        tokens.push(<span class="string">`_s(<span class="subst">$&#123;match[<span class="number">1</span>].trim()&#125;</span>)`</span>);</span><br><span class="line">        lastIndex = index + match[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt; text.length) &#123;</span><br><span class="line">        tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;tokens.join(<span class="string">' + '</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数：完成每个部分字符串(标签名 &amp;&amp; 属性节点 &amp;&amp; 子节点)的拼接 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRenderString</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> children = generateChildren(el);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_c("<span class="subst">$&#123;el.tag&#125;</span>",<span class="subst">$&#123;el.attrs.length ? generateAttrs(el.attrs) : <span class="string">'null'</span>&#125;</span><span class="subst">$&#123; children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span> : <span class="string">''</span>&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compilerToFunction</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Html-&gt;AST */</span></span><br><span class="line">    <span class="keyword">let</span> root = compiler(template);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* AST-&gt;RenderString */</span></span><br><span class="line">    <span class="keyword">let</span> renderString = generateRenderString(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* RenderString-&gt;RenderFunction */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">`with(this)&#123; return <span class="subst">$&#123;renderString&#125;</span>&#125;`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第二部分代码：主要处理虚拟 DOM 的生成 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$options = options;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果传入了 el | el + template  */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$options.el) <span class="keyword">this</span>.$mount(<span class="keyword">this</span>.$options.el);</span><br><span class="line">    &#125;</span><br><span class="line">    $mount(el) &#123;</span><br><span class="line">        <span class="keyword">let</span> v_node;</span><br><span class="line">        <span class="comment">/* 挂载函数 */</span></span><br><span class="line">        el = <span class="built_in">document</span>.querySelector(el);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 考虑：el + template + render函数的优先级关系 */</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.$options.render) &#123;</span><br><span class="line">            <span class="comment">// 对模板进行编译</span></span><br><span class="line">            <span class="keyword">let</span> template = <span class="keyword">this</span>.$options.template; <span class="comment">// 取出模板</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如果没有仅仅是传入 el的情况那么就获取outerHTML */</span></span><br><span class="line">            <span class="keyword">if</span> (!template &amp;&amp; el) &#123;</span><br><span class="line">                template = el.outerHTML;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 无论传入的是 el || template  */</span></span><br><span class="line">            <span class="comment">/* 最终根据 template 标签字符串创建 render 函数 */</span></span><br><span class="line">            <span class="keyword">this</span>.$options.render = compilerToFunction(template).bind(<span class="keyword">this</span>);</span><br><span class="line">            v_node = <span class="keyword">this</span>.$options.render();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如何创建？ */</span></span><br><span class="line">            <span class="keyword">this</span>.render = <span class="keyword">this</span>.$options.render;</span><br><span class="line">            v_node = <span class="keyword">this</span>.render(<span class="keyword">this</span>._c.bind(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'v_node'</span>, v_node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    _c() &#123;</span><br><span class="line">        <span class="comment">/* 创建标签节点 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createElement(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    _v(text) &#123;</span><br><span class="line">        <span class="comment">/* 创建文本节点 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createTextNode(text);</span><br><span class="line">    &#125;</span><br><span class="line">    _s(val) &#123;</span><br><span class="line">        <span class="comment">/* 编译插值 */</span></span><br><span class="line">     <span class="keyword">return</span> val == <span class="literal">null</span> ? <span class="string">''</span>:(<span class="keyword">typeof</span> val === <span class="string">'object'</span>?<span class="built_in">JSON</span>.stringify(val):val)</span><br><span class="line">    &#125;</span><br><span class="line">    createElement(tag, data = &#123;&#125;, ...children) &#123;</span><br><span class="line">        <span class="comment">/* 创建标签节点的实现函数 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.v_node(tag, data, <span class="literal">null</span>, children, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    createTextNode(text) &#123;</span><br><span class="line">        <span class="comment">/* 创建文本内容的实现函数 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.v_node(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, text);</span><br><span class="line">    &#125;</span><br><span class="line">    v_node(tag, data, key, children, text) &#123;</span><br><span class="line">        <span class="comment">/* 创建虚拟 DOM ：把所有的数据都组织成对象返回 */</span></span><br><span class="line">        <span class="keyword">return</span> &#123; tag, data, key, children, text &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第三部分：测试代码 */</span></span><br><span class="line"><span class="comment">/* 第一种方式 */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二种方式 */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    template: <span class="string">`&lt;a id="app" title="标题"&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;hello&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;My name is &#123;&#123;name&#125;&#125; &lt;/span&gt;</span></span><br><span class="line"><span class="string">               &lt;/a&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第三种方式 */</span></span><br><span class="line"><span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    render(c) &#123;</span><br><span class="line">        <span class="keyword">return</span> c(<span class="string">'div'</span>, &#123;</span><br><span class="line">            id: <span class="string">"testID"</span></span><br><span class="line">        &#125;, c(<span class="string">'a'</span>, <span class="string">'我是a'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">vm3.$mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码中，第一部分代码大部分来自于<a href="http://wendingding.com/2019/04/10/Gossip%20-%20ast%20&amp;&amp;%20render/" target="_blank" rel="noopener"> ast &amp;&amp; render </a>这篇博客，略有修改,把三种(挂载)渲染方式的情况下生成的虚拟 DOM 对象打印出来(参考下图)。</p><p><img src="../../../../src/virtual_t.png"></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;在 &lt;a href=&quot;http://wendingding.com/2019/08/26/Gossip%20-%20ast%20&amp;amp;&amp;amp;%20render/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ast &amp;a
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - 脚手架Yue-cli实现03-download功能</title>
    <link href="https://weibo.com/u/3800117445/2019/05/04/Gossip%20-%20%E8%84%9A%E6%89%8B%E6%9E%B6Yue-cli%E7%9A%84%E5%AE%9E%E7%8E%B003-download%E5%8A%9F%E8%83%BD/"/>
    <id>https://weibo.com/u/3800117445/2019/05/04/Gossip - 脚手架Yue-cli的实现03-download功能/</id>
    <published>2019-05-03T16:00:08.000Z</published>
    <updated>2020-05-29T09:52:58.065Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">这是系列文章 <a href="">前端脚手架实现</a> 的第三篇，本文核心解决当我们通过模板来初始化项目时如何把选定版本的模板文件下载到对应文件夹中的问题。</div><p>当我们在拉取模板文件的时候，存在两种情况，一种是直接把初始化项目的模板文件下载下来保存到指定文件目录即可，另一种是模板文件需要先渲染，我们需要通过终端交互的方式来输入必要信息以完成模板文件的渲染操作，渲染完成后再下载到本地指定文件目录。模板文件是否需要渲染我们可以通过一个指定的文件来进行配置和说明。</p><p>在进行上述操作的时候，我需要通过用到一些<code>node模块</code>并提供两个模板仓库来供我们存放模板文件。</p><p>安装<code>download-git-repo</code>模块以实现下载文件的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install download-git-repo</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> downloadGitRepo = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>);</span><br></pre></td></tr></table></figure><p>安装并引入<code>util</code>模块，该模块的<code>promisify</code>用来把异步 Api 转换为 Promise。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install util</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line">downloadGitRepo = promisify(downloadGitRepo);</span><br></pre></td></tr></table></figure></p><p>安装<code>ncp</code>模块用于拷贝文件到指定的目录。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install ncp</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ncp = <span class="built_in">require</span>(<span class="string">'ncp'</span>);</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>模板下载</strong></div><br>我在自己的 github 帐号下面创建了<a href="https://github.com/Yong-template" target="_blank" rel="noopener">Yong-Template</a>组织，在该组织中创建了两个仓库，其中的仓库<a href="https://github.com/Yong-template/vue-simple-template" target="_blank" rel="noopener"> vue-simple-template </a>中包含了用于创建 Vue项目的初始化项目(模板)文件，另一个仓库<a href="https://github.com/Yong-template/vue-render-template" target="_blank" rel="noopener"> vue-render-template </a>则需要通过终端询问的方式来先渲染再下载。<br><br><img src="../../../../src/template.png" height="300"><br><br>当我们通过 github 提供的 API： <a href="https://api.github.com/orgs/Yong-template/repos" target="_blank" rel="noopener">https://api.github.com/orgs/Yong-template/repos</a> 来访问组织的时候可以获取仓库相关的 JSON 文件。下面利用安装的<code>download-git-repo</code>来下载项目文件。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* constants.js 文件内容 */</span></span><br><span class="line"><span class="keyword">const</span> downloadDirectory = </span><br><span class="line">    <span class="string">`<span class="subst">$&#123;process.env[process.platform === <span class="string">'darwin'</span> ? <span class="string">'HOME'</span> : <span class="string">'USERPROFILE'</span>]&#125;</span>/.template`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    downloadDirectory,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* create.js 文件内容 */</span></span><br><span class="line"><span class="comment">/* 1.安装和导入模板 */</span></span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">let</span> downloadGitRepo = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>);</span><br><span class="line">downloadGitRepo = promisify(downloadGitRepo); <span class="comment">/* 把异步 API 转换为 Promise */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; downloadDirectory &#125; = <span class="built_in">require</span>(<span class="string">'../util/constants.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.封装下载函数 */</span></span><br><span class="line"><span class="keyword">const</span> downloadTask = <span class="keyword">async</span>(repo, tag) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> dest = <span class="string">`<span class="subst">$&#123;downloadDirectory&#125;</span>/<span class="subst">$&#123;repo&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`Yong-template/<span class="subst">$&#123;repo&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span> (tag) url += <span class="string">`#<span class="subst">$&#123;tag&#125;</span>`</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"dest"</span>, dest, <span class="string">"url"</span>, url);</span><br><span class="line">    <span class="comment">/* dest:/Users/文顶顶/.template/vue-simple-template */</span></span><br><span class="line">    <span class="comment">/* url :Yong-template/vue-simple-template#v1.0.0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> downloadGitRepo(url, dest);</span><br><span class="line">    <span class="keyword">return</span> dest; <span class="comment">// 下载的最终目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.传入仓库名和版本号执行下载操作 */</span></span><br><span class="line"><span class="comment">/* 假设此处的仓库名repo：vue-simple-template 版本号：v2.0.0 */</span></span><br><span class="line"><span class="keyword">const</span> dest = <span class="keyword">await</span> loading(downloadTask, <span class="string">"download template ..."</span>)(repo, tag);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"template"</span>, dest);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* path.resolve(projectName) 在执行指令的当前目录下面创建projectName为名的文件夹 */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"path.resolve(projectName)"</span>, path.resolve(projectName));</span><br><span class="line"><span class="keyword">await</span> ncp(dest, path.resolve(projectName));</span><br></pre></td></tr></table></figure><br><br>当 create 文件中上面代码完成后，执行<code>Yue-cli create app</code>指令就能够下载文件到当前目录了。<br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wendingding:Yue-cli wendingding$ Yue-cli create app</span><br><span class="line">执行 action-&gt; create</span><br><span class="line">[ <span class="string">'/usr/local/bin/node'</span>,</span><br><span class="line">  <span class="string">'/usr/local/bin/Yue-cli'</span>,</span><br><span class="line">  <span class="string">'create'</span>,</span><br><span class="line">  <span class="string">'app'</span> ]</span><br><span class="line">✔ fetching template ...</span><br><span class="line">? please choice a template to create project ! vue-simple-template</span><br><span class="line">✔ fetching tags ...</span><br><span class="line">? please choices tags to create project v2.0.0</span><br><span class="line">⠋ download template ...</span><br><span class="line">dest /Users/文顶顶/.template/vue-simple-template url Yong-template/vue-simple-template<span class="comment">#v2.0</span></span><br><span class="line">✔ download template ...</span><br><span class="line">template /Users/文顶顶/.template/vue-simple-template</span><br><span class="line">path.resolve(projectName) /Users/文顶顶/Documents/花田半亩 /Yue-cli/app</span><br></pre></td></tr></table></figure><br><br><div class="titleX"><strong>模板渲染</strong></div><p>有时候用户在利用脚手架工具创建项目的时候，可能需要自己来输入描述信息、协议、和作者等信息，那么这种情况我们可以在项目的模板文件中提供一个文件用来保存这些信息，而 package.json文件中相关的字段用 ejs 模板的方式来处理，我们要做的就是在下载安装的时候，先询问用户，然后根据用户的选择来渲染并生成最终的<code>package.json</code>文件最后下载到本地。</p><p>我们先看下询问文件的信息和<code>package.json</code>文件的内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* render.js 文件的内容 */</span></span><br><span class="line"><span class="built_in">module</span>.exports = [&#123;</span><br><span class="line">        type: <span class="string">'confirm'</span>,</span><br><span class="line">        name: <span class="string">'private'</span>,</span><br><span class="line">        message: <span class="string">'This register is private ?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'input'</span>,</span><br><span class="line">        name: <span class="string">'author'</span>,</span><br><span class="line">        message: <span class="string">"Please set the author name ?"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'input'</span>,</span><br><span class="line">        name: <span class="string">'description'</span>,</span><br><span class="line">        message: <span class="string">'Please enter description information ?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'input'</span>,</span><br><span class="line">        name: <span class="string">'license'</span>,</span><br><span class="line">        message: <span class="string">'Please enter license ?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* package.json文件的内容 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"vue-template-simple"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.1.2"</span>,</span><br><span class="line">    <span class="string">"private"</span>: <span class="string">"&lt;%=private%&gt;"</span>,</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">        <span class="string">"build"</span>: <span class="string">"vue-cli-service build"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">        <span class="string">"vue"</span>: <span class="string">"^2.6.10"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"author"</span>: <span class="string">"&lt;%=author%&gt;"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"&lt;%=description%&gt;"</span>,</span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="string">"@vue/cli-service"</span>: <span class="string">"^3.11.0"</span>,</span><br><span class="line">        <span class="string">"vue-template-compiler"</span>: <span class="string">"^2.6.10"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"license"</span>: <span class="string">"&lt;%=license%&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们把用户的选择融入到<code>package.json</code>模板文件中最后生成完整的<code>package.json</code>文件需要用到<code>ejs</code>模板，此外还需要安装<code>metalsmith</code>等模块来遍历文件夹，下面给出安装的关键指令和最终的代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install metalsmith</span><br><span class="line">$ npm install ejs</span><br><span class="line">$ npm install consolidate</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 列出 create.js 文件的内容 */</span></span><br><span class="line"><span class="comment">/* 导入模块 */</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> ncp = <span class="built_in">require</span>(<span class="string">'ncp'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> MetalSmith = <span class="built_in">require</span>(<span class="string">'metalsmith'</span>);</span><br><span class="line"><span class="keyword">let</span> &#123; render &#125; = <span class="built_in">require</span>(<span class="string">'consolidate'</span>).ejs; <span class="comment">/* 模板引擎 */</span></span><br><span class="line">render = promisify(render);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> downloadGitRepo = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>);</span><br><span class="line">downloadGitRepo = promisify(downloadGitRepo); <span class="comment">/* 把异步 API 转换为 Promise */</span></span><br><span class="line"><span class="keyword">const</span> &#123; downloadDirectory &#125; = <span class="built_in">require</span>(<span class="string">'../util/constants.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 封装函数获取存放模板信息的数据 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getRepositoryList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">"https://api.github.com/orgs/Yong-template/repos"</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTagList = <span class="keyword">async</span>(repo) =&gt; &#123;</span><br><span class="line"><span class="comment">// https: //api.github.com/repos/Yong-template/vue-simple-template/tags</span></span><br><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">`https://api.github.com/repos/Yong-template/<span class="subst">$&#123;repo&#125;</span>/tags`</span>);</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loading = <span class="function">(<span class="params">fn, message</span>) =&gt;</span> <span class="keyword">async</span>(...args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> spinner = ora(message);</span><br><span class="line">    spinner.start();</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> fn(...args);</span><br><span class="line">    spinner.succeed();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> downloadTask = <span class="keyword">async</span>(repo, tag) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`Yong-template/<span class="subst">$&#123;repo&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span> (tag) url += <span class="string">`#<span class="subst">$&#123;tag&#125;</span>`</span></span><br><span class="line">    <span class="keyword">const</span> dest = <span class="string">`<span class="subst">$&#123;downloadDirectory&#125;</span>/<span class="subst">$&#123;repo&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"dest"</span>, dest, <span class="string">"url"</span>, url);</span><br><span class="line">    <span class="keyword">await</span> downloadGitRepo(url, dest);</span><br><span class="line">    <span class="keyword">return</span> dest; <span class="comment">// 下载的最终目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span>(projectName) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> repoList = <span class="keyword">await</span> loading(getRepositoryList, <span class="string">"fetching template ..."</span>)();</span><br><span class="line">    <span class="keyword">const</span> &#123; repo &#125; = <span class="keyword">await</span> inquirer.prompt(&#123;</span><br><span class="line">        name: <span class="string">"repo"</span>,</span><br><span class="line">        type: <span class="string">"list"</span>,</span><br><span class="line">        message: <span class="string">"please choice a template to create project !"</span>,</span><br><span class="line">        choices: repoList.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tagList = <span class="keyword">await</span> loading(getTagList, <span class="string">"fetching tags ..."</span>)(repo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; tag &#125; = <span class="keyword">await</span> inquirer.prompt(&#123;</span><br><span class="line">        name: <span class="string">'tag'</span>,</span><br><span class="line">        type: <span class="string">'list'</span>,</span><br><span class="line">        message: <span class="string">'please choices tags to create project'</span>,</span><br><span class="line">        choices: tagList.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dest = <span class="keyword">await</span> loading(downloadTask, <span class="string">"download template ..."</span>)(repo, tag);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"template"</span>, dest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log("tag -&gt;", tag)</span></span><br><span class="line">    <span class="comment">/* 根据选择的仓库 + 版本号，下载模板文件到当前项目中指定的文件夹 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* dest:/Users/文顶顶/.template/vue-simple-template */</span></span><br><span class="line">    <span class="comment">/* url :Yong-template/vue-simple-template#v1.0.0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* path.resolve(projectName) 表示在执行指令的当前目录下面创建projectName为名的文件夹 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"path.resolve(projectName)"</span>, path.resolve(projectName));</span><br><span class="line">    <span class="keyword">await</span> ncp(dest, path.resolve(projectName));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(path.join(dest, <span class="string">'render.js'</span>))) &#123;</span><br><span class="line">        <span class="keyword">await</span> ncp(dest, path.resolve(projectName));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            MetalSmith(__dirname) <span class="comment">// 如果你传入路径 他默认会遍历当前路径下的src文件夹</span></span><br><span class="line">                .source(dest)</span><br><span class="line">                .destination(path.resolve(projectName))</span><br><span class="line">                .use(<span class="keyword">async</span>(files, metal, done) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">const</span> args = <span class="built_in">require</span>(path.join(dest, <span class="string">'render.js'</span>));</span><br><span class="line">                    <span class="keyword">const</span> obj = <span class="keyword">await</span> inquirer.prompt(args);</span><br><span class="line">                    <span class="keyword">const</span> meta = metal.metadata();</span><br><span class="line">                    <span class="built_in">Object</span>.assign(meta, obj);</span><br><span class="line">                    <span class="keyword">delete</span> files[<span class="string">'render.js'</span>];</span><br><span class="line">                    done();</span><br><span class="line">                &#125;)</span><br><span class="line">                .use(<span class="function">(<span class="params">files, metal, done</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> obj = metal.metadata();</span><br><span class="line">                    <span class="built_in">Reflect</span>.ownKeys(files).forEach(<span class="keyword">async</span>(file) =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (file.includes(<span class="string">'js'</span>) || file.includes(<span class="string">'json'</span>)) &#123;</span><br><span class="line">                            <span class="keyword">let</span> content = files[file].contents.toString(); <span class="comment">// 文件的内容</span></span><br><span class="line">                            <span class="keyword">if</span> (content.includes(<span class="string">'&lt;%'</span>)) &#123;</span><br><span class="line">                                content = <span class="keyword">await</span> render(content, obj);</span><br><span class="line">                                files[file].contents = Buffer.from(content); <span class="comment">// 渲染</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    done();</span><br><span class="line">                &#125;)</span><br><span class="line">                .build(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试指令的执行情况。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ Yue-cli c myApp</span><br><span class="line">执行 action-&gt; create</span><br><span class="line">[ <span class="string">'/usr/local/bin/node'</span>, <span class="string">'/usr/local/bin/Yue-cli'</span>, <span class="string">'c'</span>, <span class="string">'myApp'</span> ]</span><br><span class="line">✔ fetching template ...</span><br><span class="line">? please choice a template to create project ! vue-render-template</span><br><span class="line">✔ fetching tags ...</span><br><span class="line">? please choices tags to create project v1.0.0</span><br><span class="line">⠋ download template ...</span><br><span class="line">dest /Users/文顶顶/.template/vue-render-template url Yong-template/vue-render-template<span class="comment">#v1.0</span></span><br><span class="line">✔ download template ...</span><br><span class="line">template /Users/文顶顶/.template/vue-render-template</span><br><span class="line">path.resolve(projectName) /Users/文顶顶/Documents/花田半亩 /Yue-cli/myApp</span><br><span class="line">? this register is private ? No</span><br><span class="line">? author? Yong</span><br><span class="line">? description ? 测试</span><br><span class="line">? license ? MIT</span><br><span class="line"></span><br><span class="line">wendingding$ Tree -L 2</span><br><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── bin</span><br><span class="line">│   └── www</span><br><span class="line">├── dist</span><br><span class="line">├── myApp</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── postcss.config.js</span><br><span class="line">│   ├── public</span><br><span class="line">│   ├── render.js</span><br><span class="line">│   ├── src</span><br><span class="line">│   └── yarn.lock</span><br><span class="line">├── node_modules</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── yauzl</span><br><span class="line">├── note.md</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── create.js</span><br><span class="line">│   ├── dist</span><br><span class="line">│   └── main.js</span><br><span class="line">└── util</span><br><span class="line">    ├── constants.js</span><br><span class="line">    └── dist</span><br></pre></td></tr></table></figure></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;这是系列文章 &lt;a href=&quot;&quot;&gt;前端脚手架实现&lt;/a&gt; 的第三篇，本文核心解决当我们通过模板来初始化项目时如何把选定版本的模板文件下载到对应文件夹中的问题。&lt;/div&gt;

&lt;p&gt;当我们在拉取模板文件的时候，存在两种情况，一种是直接把初始化项目
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - 脚手架Yue-cli实现02-inquirer模块</title>
    <link href="https://weibo.com/u/3800117445/2019/05/03/Gossip%20-%20%E8%84%9A%E6%89%8B%E6%9E%B6Yue-cli%E7%9A%84%E5%AE%9E%E7%8E%B002-inquirer%E6%A8%A1%E5%9D%97/"/>
    <id>https://weibo.com/u/3800117445/2019/05/03/Gossip - 脚手架Yue-cli的实现02-inquirer模块/</id>
    <published>2019-05-02T16:00:08.000Z</published>
    <updated>2020-05-29T07:44:52.565Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">这是系列文章 <a href="">前端脚手架实现]</a> 的第二篇，在上文<a href="http://wendingding.com/2019/05/02/Gossip%20-%20%E8%84%9A%E6%89%8B%E6%9E%B6Yue-cli%E7%9A%84%E5%AE%9E%E7%8E%B001-commander%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">脚手架Yue-cli的实现01-commander模块</a>中，介绍了如何让<code>Yue-cli</code>在用户的终端中可用，并通过<code>commander 模块</code>提供了<code>help、version以及 create 等基本指令</code>，本文将介绍脚手架中<code>Yue-cli create xxx</code>命令来初始化项目时内部的处理过程和实现方案。</div><p>安装<code>axios</code>模块，该模块用来发送网络请求获取模板和对应的版本列表，该模板用来初始化 Vue 项目。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>安装<code>ora</code>模块，该模块的主要作用是在终端中显示提示消息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ora</span><br></pre></td></tr></table></figure></p><p>安装<code>inquirer</code>询问者模块，该模块展示根据拉取的模板和版本号列表，并让用户选择。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install inquirer</span><br></pre></td></tr></table></figure></p><p>先修改 main.js 文件中<code>action</code>中的实现方式，这样的话当执行<code>Yue-cli create xx</code>指令的时候会加载并执行对应文件中的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 列出 main.js 文件对命令执行的映射处理 */</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">"commander"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组织映射结构 */</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    create: &#123; <span class="comment">// 项目创建(初始化)指令</span></span><br><span class="line">        description: <span class="string">'create project with Yue-cli'</span>,</span><br><span class="line">        alias: <span class="string">'c'</span>,</span><br><span class="line">        examples: [</span><br><span class="line">            <span class="string">'Yue-cli create &lt;project-name&gt;'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    config: &#123; <span class="comment">// 设置项目配置文件指令</span></span><br><span class="line">        description: <span class="string">'config info'</span>,</span><br><span class="line">        alias: <span class="string">'conf'</span>,</span><br><span class="line">        examples: [</span><br><span class="line">            <span class="string">'Yue-cli config get &lt;k&gt;'</span>,</span><br><span class="line">            <span class="string">'Yue-cli config set &lt;k&gt; &lt;v&gt;'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'*'</span>: &#123;</span><br><span class="line">        description: <span class="string">'command not found'</span>,</span><br><span class="line">        alias: <span class="string">''</span>,</span><br><span class="line">        examples: [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(actions).forEach(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    program</span><br><span class="line">    <span class="comment">/* 命名的名称 */</span></span><br><span class="line">        .command(action)</span><br><span class="line">        <span class="comment">/* 命名的别名 */</span></span><br><span class="line">        .alias(actions[action].alias)</span><br><span class="line">        <span class="comment">/* 命令的描述信息 */</span></span><br><span class="line">        .description(actions[action].description)</span><br><span class="line">        <span class="comment">/* 命令的任务(功能) */</span></span><br><span class="line">        .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 动作</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt;`</span>, action);</span><br><span class="line">            <span class="built_in">console</span>.log(process.argv);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*  示例：Yue-cli create xxx */</span></span><br><span class="line">            <span class="comment">/*  命令的参数分布如下</span></span><br><span class="line"><span class="comment">                [ '/usr/local/bin/node',</span></span><br><span class="line"><span class="comment">                '/usr/local/bin/Yue-cli',</span></span><br><span class="line"><span class="comment">                'create',</span></span><br><span class="line"><span class="comment">                'xxx' </span></span><br><span class="line"><span class="comment">                ] */</span></span><br><span class="line">            <span class="built_in">require</span>(path.resolve(__dirname, action))(...process.argv.slice(<span class="number">3</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在项目的<code>src</code>目录中新创建 create.js 文件，这样当执行<code>Yue-cli create xxx</code>指令的时候会自动加载并执行<code>create.js</code>文件中的代码，当执行<code>config xxx</code>指令的时候会自动加载并执行<code>config.js</code>文件中的代码。这里主要讨论当执行<code>create</code>指令的时候，命令行工具的内部应该处理哪些任务，下面列出代码的主要处理过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 列出 create.js 文件中的主要代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1.导入模块 */</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.封装函数获取存放模板信息的数据 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getRepositoryList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">"https://api.github.com/orgs/Yong-template/repos"</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.封装函数获取对比仓库模板文件的版本列表 */</span></span><br><span class="line"><span class="keyword">const</span> getTagList = <span class="keyword">async</span>(repo) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> &#123;data&#125; =<span class="keyword">await</span> axios.get(<span class="string">`https://api.github.com/repos/Yong-template/<span class="subst">$&#123;repo&#125;</span>/tags`</span>);</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4.封装函数显示提示信息... */</span></span><br><span class="line"><span class="keyword">const</span> loading = <span class="function">(<span class="params">fn, message</span>) =&gt;</span> <span class="keyword">async</span>(...args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> spinner = ora(message);</span><br><span class="line">    spinner.start();</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> fn(...args);</span><br><span class="line">    spinner.succeed();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span>(projectName) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理模板信息 */</span></span><br><span class="line">    <span class="keyword">let</span> repoList = <span class="keyword">await</span> loading(getRepositoryList, <span class="string">"fetching template ..."</span>)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 选择模板 */</span></span><br><span class="line">    <span class="keyword">const</span> &#123; repo &#125; = <span class="keyword">await</span> inquirer.prompt(&#123;</span><br><span class="line">        name: <span class="string">"repo"</span>,</span><br><span class="line">        type: <span class="string">"list"</span>,</span><br><span class="line">        message: <span class="string">"please choice a template to create project !"</span>,</span><br><span class="line">        choices: repoList.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理版本信息 */</span></span><br><span class="line">    <span class="keyword">let</span> tagList = <span class="keyword">await</span> loading(getTagList, <span class="string">"fetching tags ..."</span>)(repo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 选择对应的版本 */</span></span><br><span class="line">    <span class="keyword">const</span> &#123; tag &#125; = <span class="keyword">await</span> inquirer.prompt(&#123;</span><br><span class="line">        name: <span class="string">'tag'</span>,</span><br><span class="line">        type: <span class="string">'list'</span>,</span><br><span class="line">        message: <span class="string">'please choices tags to create project'</span>,</span><br><span class="line">        choices: tagList.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印选定的模板和版本信息 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"repo-&gt;"</span>,repo,<span class="string">"tag-&gt;"</span>,tag);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>列出简单列出脚手架指令<code>Yue-cli create app</code>的执行情况。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ Yue-cli create app</span><br><span class="line">执行 action-&gt; create</span><br><span class="line">[ <span class="string">'/usr/local/bin/node'</span>,</span><br><span class="line">  <span class="string">'/usr/local/bin/Yue-cli'</span>,</span><br><span class="line">  <span class="string">'create'</span>,</span><br><span class="line">  <span class="string">'app'</span> ]</span><br><span class="line">✔ fetching template ...</span><br><span class="line">? please choice a template to create project ! vue-simple-template</span><br><span class="line">✔ fetching tags ...</span><br><span class="line">? please choices tags to create project (Use arrow keys)</span><br><span class="line">❯ v2.0.0</span><br></pre></td></tr></table></figure></p><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;这是系列文章 &lt;a href=&quot;&quot;&gt;前端脚手架实现]&lt;/a&gt; 的第二篇，在上文&lt;a href=&quot;http://wendingding.com/2019/05/02/Gossip%20-%20%E8%84%9A%E6%89%8B%E6%9E%B6Y
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
      <category term="前端工程化" scheme="https://weibo.com/u/3800117445/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - 脚手架Yue-cli实现01-commander模块</title>
    <link href="https://weibo.com/u/3800117445/2019/05/02/Gossip%20-%20%E8%84%9A%E6%89%8B%E6%9E%B6Yue-cli%E7%9A%84%E5%AE%9E%E7%8E%B001-commander%E6%A8%A1%E5%9D%97/"/>
    <id>https://weibo.com/u/3800117445/2019/05/02/Gossip - 脚手架Yue-cli的实现01-commander模块/</id>
    <published>2019-05-01T16:00:08.000Z</published>
    <updated>2020-05-29T07:44:52.564Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">这是系列文章 <a href="">前端脚手架实现</a> 的第一篇，主要讲解脚手架工具中的核心模块命令行参数解析功能的实现，重点讲解 Node 模块 <a href="">commander</a>的使用。</div><p>在前端开发中我们已经接触过各种各样的脚手架工具，从<code>Yeoman</code>到<code>vue-cli</code>和<code>dva-cli</code>等，这几篇文章将讲解脚手架工具的核心功能以及具体实现细节，本文探讨哪些功能呢？我们先随便拿一个现成的脚手架工具<code>vue-cli</code>来作为参考。</p><p>当我们通过<code>npm install -g @vue/cli</code> 来全局安装 @vue/cli之后，就可以在终端中使用 vue 指令了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">wendingding:vue-test wendingding$ vue --version</span><br><span class="line">@vue/cli 4.3.1</span><br><span class="line">wendingding:vue-test wendingding$ vue --<span class="built_in">help</span></span><br><span class="line">Usage: vue &lt;<span class="built_in">command</span>&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                              output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>                                 output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create [options] &lt;app-name&gt;                create a new project powered by vue-cli-service</span><br><span class="line">  add [options] &lt;plugin&gt; [pluginOptions]     install a plugin and invoke its generator <span class="keyword">in</span> an already created project</span><br><span class="line">  invoke [options] &lt;plugin&gt; [pluginOptions]  invoke the generator of a plugin <span class="keyword">in</span> an already created project</span><br><span class="line">  inspect [options] [paths...]               inspect the webpack config <span class="keyword">in</span> a project with vue-cli-service</span><br><span class="line">  serve [options] [entry]                    serve a .js or .vue file <span class="keyword">in</span> development mode with zero config</span><br><span class="line">  build [options] [entry]                    build a .js or .vue file <span class="keyword">in</span> production mode with zero config</span><br><span class="line">  ui [options]                               start and open the vue-cli ui</span><br><span class="line">  init [options] &lt;template&gt; &lt;app-name&gt;       generate a project from a remote template (legacy API, requires @vue/cli-init)</span><br><span class="line">  config [options] [value]                   inspect and modify the config</span><br><span class="line">  outdated [options]                         (experimental) check <span class="keyword">for</span> outdated vue cli service / plugins</span><br><span class="line">  upgrade [options] [plugin-name]            (experimental) upgrade vue cli service / plugins</span><br><span class="line">  migrate [options] [plugin-name]            (experimental) run migrator <span class="keyword">for</span> an already-installed cli plugin</span><br><span class="line">  info                                       <span class="built_in">print</span> debugging information about your environment</span><br><span class="line"></span><br><span class="line">  Run vue &lt;<span class="built_in">command</span>&gt; --<span class="built_in">help</span> <span class="keyword">for</span> detailed usage of given <span class="built_in">command</span>.</span><br><span class="line">  </span><br><span class="line">  wendingding:vue-test wendingding$ abc </span><br><span class="line">  -bash: abc: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure></p><p>观察上面的终端命令和显示输出，我们总共输入了三个命令<br><code>$ vue --version</code> 查看版本信息<br><code>$ vue --help</code>    获取帮助信息<br><code>$ abc</code>          随意输入的指令，显示<code>command not found</code>该指令不存在。</p><p>本文将专注实现上面的功能，假设我们自己实现的脚手架名为<code>Yue-cli</code>那么当我在终端中使用<code>Yue-cli</code>的时候，系统应该认识该指令，且能够获取当前脚手架的版本并能够获取帮助信息，下面给出具体的实现过程。</p><div class="titleX"><strong>项目准备</strong></div><p>在电脑中新创建文件夹，假设为 <code>Yue-cli</code> ,在该文件夹下面执行下面的命令先做一些准备工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y                         <span class="comment"># 初始化package.json</span></span><br><span class="line">npm install eslint husky --save-dev <span class="comment"># eslint是负责代码校验工作,husky提供了git钩子功能</span></span><br><span class="line">npx eslint --init                   <span class="comment"># 初始化eslint配置文件，用于语法检查</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>目录结构</strong></div><p>参考下面的目录结构来创建文件和文件夹，关键。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   └── www            &lt;!-- 全局命令执行的根文件 --&gt;</span><br><span class="line">├── node_modules       &lt;!-- 安装的包文件 --&gt;</span><br><span class="line">│   ├── @babel</span><br><span class="line">│   ...</span><br><span class="line">│   └── yaml</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json       &lt;!-- 元信息文件 --&gt;</span><br><span class="line">├── src       </span><br><span class="line">│   └── main.js        &lt;!-- 项目入口文件 --&gt;</span><br><span class="line">│── .huskyrc           &lt;!-- git hook --&gt;</span><br><span class="line">│── .eslintrc.json     &lt;!-- 代码规范校验文件 --&gt;</span><br><span class="line">└── util</span><br><span class="line">    └── constants.js   &lt;!-- 该文件用于存放公共常量数据 --&gt;</span><br></pre></td></tr></table></figure></p><div class="titleX"><strong>配置和链接</strong></div><p>❏ 配置 <code>package.json</code> 校验src文件夹下的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"lint"</span>:<span class="string">"eslint src"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>❏ 配置 <code>husky</code> 文件，当使用git提交前校验代码是否符合规范<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"npm run lint"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>❏ 链接全局包，编写 <code>package.json</code> 文件设置在终端中<code>执行 Yue-cli 时调用 bin 目录下的 www 文件</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bin"</span>: &#123;</span><br><span class="line">       <span class="string">"Yue-cli"</span>: <span class="string">"./bin/www"</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><p>❏ <code>bin</code> 目录下面的 <code>www</code> 文件设置使用 <code>main.js</code> 作为入口文件，并且以 <code>node 环境</code> 执行此文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../src/main.js'</span>);</span><br></pre></td></tr></table></figure><p>❏ 链接包到全局环境下使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure></p><p>到现在这一步，我们就已经可以成功的在命令行中使用<code>Yue-cli</code>命令了，当在终端中执行<code>Yue-cli</code>命令的时候其内部会执行main.js文件，如果我们在该文件中加上一行打印代码<code>console.log(&quot;hello Yue-cli&quot;)</code>,那么在终端中可以看到对应的输出。</p><div class="titleX" style="background:orange"><strong>使用 commander 解析命令行参数</strong></div><p><a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener">commander</a> 模块可以帮助我们自动的生成 help 信息，解析选项参数大家可以点击到<a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener"> npmjs网站 </a>查看包模块的详细情况。</p><p>先在系统中安装 <code>commander</code> 模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander</span><br></pre></td></tr></table></figure></p><p>在入口文件 main.js 文件中引入该模块并测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">"commander"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// process.argv就是用户在命令行中传入的参数</span></span><br><span class="line">program.version(<span class="string">'1.0.1'</span>).parse(process.argv);</span><br></pre></td></tr></table></figure></p><p>此时，我们终端使用<code>Yue-cli --help</code> 或者是 <code>Yue-cli --version</code> 就能看到对应的提示信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ Yue-cli --version</span><br><span class="line">1.0.1</span><br><span class="line"></span><br><span class="line">wendingding$ Yue-cli --<span class="built_in">help</span></span><br><span class="line">Usage: Yue-cli [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version  output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>     display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure></p><p>注意：脚手架的这个版本号应该使用的是当前cli项目的版本号，我们需要动态的来获取，具体实现方式是直接把<code>package.json</code> 文件中的 <code>version</code> 字段值导入到<code>main.js</code>文件中直接使用即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, version &#125; = <span class="built_in">require</span>(<span class="string">"../package"</span>);</span><br></pre></td></tr></table></figure><p>另外，当我们使用脚手架工具的时候，往往不同的指令会对应不同的功能，譬如<code>vue create app</code>的作用是创建项目，而<code>vue ui</code>的作用是开启一个服务以 UI 界面的方式来创建项目，也就是说不能的 命令 它的功能、别名以及使用示例这些信息都是不同的，如何实现呢？</p><p><a href="">commander</a> 模块我为了提供了对应的方法，下面给出具体的示例(演示使用，实际功能暂欠缺)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.js 文件的内容 */</span></span><br><span class="line"><span class="comment">/* 0.导入模块 */</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">"commander"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导入常量(package 包中的名称和版本号) */</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, version &#125; = <span class="built_in">require</span>(<span class="string">"../package"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1.Yue-cli crete */</span></span><br><span class="line">program</span><br><span class="line">    <span class="comment">/*  命令的名称 */</span></span><br><span class="line">    .command(<span class="string">"create"</span>) </span><br><span class="line">    <span class="comment">/*  命令的别名 */</span></span><br><span class="line">    .alias(<span class="string">"c"</span>) </span><br><span class="line">    <span class="comment">/* 命令的描述 */</span></span><br><span class="line">    .description(<span class="string">"create a project whit Yue-cli...."</span>) </span><br><span class="line">    <span class="comment">/* 该命令的具体功能(动作) */</span></span><br><span class="line">    .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt; create`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.Yue-cli config */</span></span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">"config"</span>)</span><br><span class="line">    .alias(<span class="string">"conf"</span>)</span><br><span class="line">    .description(<span class="string">"config info...."</span>)</span><br><span class="line">    .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt; config`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.Yue-cli xxx  (其它未定义指令) */</span></span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">"*"</span>)</span><br><span class="line">    .alias(<span class="string">""</span>)</span><br><span class="line">    .description(<span class="string">"command not found"</span>)</span><br><span class="line">    .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt; nothing`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4.示例信息 */</span></span><br><span class="line"><span class="keyword">const</span> examples = [</span><br><span class="line">    <span class="string">"Yue-cli create &lt;project-name&gt;"</span>,</span><br><span class="line">    <span class="string">"Yue-cli config get &lt;k&gt;"</span>,</span><br><span class="line">    <span class="string">"Yue-cli config set &lt;k&gt; &lt;v&gt;"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.监听用户的help 事件</span></span><br><span class="line">program.on(<span class="string">'--help'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">/* 当终端输入 Yue-cli --help指令的时候打印nExamples信息 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'\nExamples:'</span>);</span><br><span class="line">    examples.forEach(<span class="function"><span class="params">example</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`   <span class="subst">$&#123;example&#125;</span>`</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6.版本信息 + 命令行参数解析 */</span></span><br><span class="line">program.version(<span class="string">`version = <span class="subst">$&#123;version&#125;</span>`</span>).parse(process.argv);</span><br></pre></td></tr></table></figure></p><p>我们来看看此时，我们的工具拥有了哪些功能？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ Yue-cli --<span class="built_in">help</span></span><br><span class="line">Usage: Yue-cli [options] [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version   output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>      display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create|c        create a project whit Yue-cli....</span><br><span class="line">  config|conf     config info....</span><br><span class="line">  *               <span class="built_in">command</span> not found</span><br><span class="line">  <span class="built_in">help</span> [<span class="built_in">command</span>]  display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">   Yue-cli create &lt;project-name&gt;</span><br><span class="line">   Yue-cli config get &lt;k&gt;</span><br><span class="line">   Yue-cli config <span class="built_in">set</span> &lt;k&gt; &lt;v&gt;</span><br><span class="line"></span><br><span class="line">wendingding$ Yue-cli --version</span><br><span class="line">version = 1.0.1</span><br><span class="line"></span><br><span class="line">wendingding$ Yue-cli create myapp</span><br><span class="line">执行 action-&gt; create</span><br><span class="line"></span><br><span class="line">wendingding$ Yue-cli config</span><br><span class="line">执行 action-&gt; config</span><br><span class="line"></span><br><span class="line">wendingding$ Yue-cli c app</span><br><span class="line">执行 action-&gt; create</span><br></pre></td></tr></table></figure></p><p>写到这里，脚手架工具的基本提示功能就已经实现了，但代码较长且脚手架的指令肯定不止 <code>create</code> 和 <code>config</code> 这么两个，因此这里适当调整下代码结构让其可维护性更高一些。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.js 文件的内容 */</span></span><br><span class="line"><span class="comment">/* 导入模块 */</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">"commander"</span>);</span><br><span class="line"><span class="comment">/* 导入常量(package 包中的名称和版本号) */</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, version &#125; = <span class="built_in">require</span>(<span class="string">"../util/constants"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组织映射结构 */</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    create: &#123; <span class="comment">// 项目创建(初始化)指令</span></span><br><span class="line">        description: <span class="string">'create project with Yue-cli'</span>,</span><br><span class="line">        alias: <span class="string">'c'</span>,</span><br><span class="line">        examples: [</span><br><span class="line">            <span class="string">'Yue-cli create &lt;project-name&gt;'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    config: &#123; <span class="comment">// 设置项目配置文件指令</span></span><br><span class="line">        description: <span class="string">'config info'</span>,</span><br><span class="line">        alias: <span class="string">'conf'</span>,</span><br><span class="line">        examples: [</span><br><span class="line">            <span class="string">'Yue-cli config get &lt;k&gt;'</span>,</span><br><span class="line">            <span class="string">'Yue-cli config set &lt;k&gt; &lt;v&gt;'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'*'</span>: &#123;</span><br><span class="line">        description: <span class="string">'command not found'</span>,</span><br><span class="line">        alias: <span class="string">''</span>,</span><br><span class="line">        examples: [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(actions).forEach(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    program</span><br><span class="line">        <span class="comment">/* 命名的名称 */</span></span><br><span class="line">        .command(action)</span><br><span class="line">        <span class="comment">/* 命名的别名 */</span></span><br><span class="line">        .alias(actions[action].alias)</span><br><span class="line">        <span class="comment">/* 命令的描述信息 */</span></span><br><span class="line">        .description(actions[action].description)</span><br><span class="line">        <span class="comment">/* 命令的任务(功能) */</span></span><br><span class="line">        .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 动作</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`执行 action-&gt;`</span>, action);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听用户的help 事件</span></span><br><span class="line">program.on(<span class="string">'--help'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'\nExamples:'</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.ownKeys(actions).forEach(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        actions[action].examples.forEach(<span class="function">(<span class="params">example</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`  <span class="subst">$&#123;example&#125;</span>`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 版本信息 + 命令行参数解析 */</span></span><br><span class="line">program.version(<span class="string">`version = <span class="subst">$&#123;version&#125;</span>`</span>).parse(process.argv);</span><br></pre></td></tr></table></figure><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;这是系列文章 &lt;a href=&quot;&quot;&gt;前端脚手架实现&lt;/a&gt; 的第一篇，主要讲解脚手架工具中的核心模块命令行参数解析功能的实现，重点讲解 Node 模块 &lt;a href=&quot;&quot;&gt;commander&lt;/a&gt;的使用。&lt;/div&gt;

&lt;p&gt;在前端开发中我
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
      <category term="前端工程化" scheme="https://weibo.com/u/3800117445/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Gossip -  ast &amp;&amp; render</title>
    <link href="https://weibo.com/u/3800117445/2019/04/10/Gossip%20-%20ast%20&amp;&amp;%20render/"/>
    <id>https://weibo.com/u/3800117445/2019/04/10/Gossip - ast &amp;&amp; render/</id>
    <published>2019-04-09T16:00:08.000Z</published>
    <updated>2020-05-17T01:05:43.288Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">在 <a href="http://wendingding.com/2019/08/25/Gossip%20-%20html-parser/" target="_blank" rel="noopener">html-parser</a> 这篇文章中，简单探讨了 html模板字符串 编译为 AST 抽象语法树的过程，本文作为后续将继续讨论 AST 转换为 渲染字符串并最终调整为 <code>render 渲染函数</code>的具体过程，这样的讨论有益于我们加深对常见的<code>模板引擎</code>其工作机制以及<code>Vue</code>等前端框架的理解 。</div><p><img src="../../../../src/ast_ex.png"></p><p>在上图中简单画出了这篇文章的代码要完成的主要工作，即把 <a href="http://wendingding.com/2019/08/25/Gossip%20-%20html-parser/" target="_blank" rel="noopener">html-parser</a> 中模板编译得到的 AST 抽象语法树处理为 <code>render字符串</code>继而包装为<code>render渲染函数</code>。</p><p>假设我们要编译的<code>模板字符串</code>为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span> title=<span class="string">"标题"</span>&gt;&lt;p&gt;hello&lt;/p&gt;&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>那么编译为 <code>AST 语法树</code>后大概应该长成下面这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &#123; <span class="attr">tag</span>: <span class="string">'div'</span>,</span><br><span class="line">  attrs:</span><br><span class="line">   [ &#123; <span class="attr">name</span>: <span class="string">'id'</span>, <span class="attr">value</span>: <span class="string">'app'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'title'</span>, <span class="attr">value</span>: <span class="string">'标题'</span> &#125; ],</span><br><span class="line">  children:</span><br><span class="line">   [ &#123; <span class="attr">tag</span>: <span class="string">'p'</span>,</span><br><span class="line">       attrs: [],</span><br><span class="line">       children: [<span class="built_in">Array</span>],</span><br><span class="line">       parent: [Circular],</span><br><span class="line">       nodeType: <span class="number">1</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">tag</span>: <span class="string">'span'</span>,</span><br><span class="line">       attrs: [],</span><br><span class="line">       children: [<span class="built_in">Array</span>],</span><br><span class="line">       parent: [Circular],</span><br><span class="line">       nodeType: <span class="number">1</span> &#125; ],</span><br><span class="line">  parent: <span class="literal">null</span>,</span><br><span class="line">  nodeType: <span class="number">1</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们需要通过代码来得到的<code>renderString</code>应该是下面这样的字符串结构(忽略换行)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'_createElement("div",</span></span><br><span class="line"><span class="string">    &#123;id:"app",title:"标题"&#125;,</span></span><br><span class="line"><span class="string">    _createElement("p",null,_v("hello")),</span></span><br><span class="line"><span class="string">    _createElement("span",null,_v(_s(msg))))'</span></span><br></pre></td></tr></table></figure><p>在得到的整个字符串中，主要包含的要素有：<code>_createElement</code>这是创建函数的名称，<code>div</code>和<code>p</code>等这是对应标签的名称，<code>{id:&quot;app&quot;,title:&quot;标题&quot;}</code>这部分是对应标签的属性节点，如果当前标签存在子标签，那么应该以递归的方式来进行处理。因为整个过程比较复杂，所有下面分成 <strong>属性节点处理</strong> 和 <strong>标签(子)节点处理</strong>两个部分。</p><div class="titleX"><strong>属性节点的处理</strong></div><p>属性节点的处理要求把<code>attrs:[ { name: &#39;id&#39;, value: &#39;app&#39; }, { name: &#39;title&#39;, value: &#39;标题&#39; } ]</code>这样的对象结构转换为<code>{id:&quot;app&quot;,title:&quot;标题&quot;}</code>字符串，难度不大。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:"app",title:"标题", */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, <span class="number">-1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> attrs = [&#123; <span class="attr">name</span>: <span class="string">'id'</span>, <span class="attr">value</span>: <span class="string">'app'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'title'</span>, <span class="attr">value</span>: <span class="string">'标题'</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> attrsString = generateAttrs(attrs);</span><br><span class="line"><span class="built_in">console</span>.log(attrsString);  <span class="comment">/* &#123; id:"app",title:"标题" &#125; */</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中封装了的<code>generateAttrs</code>函数，虽然能够解决标签中简单属性节点但还需要注意一种特殊的属性节点，那就是<code>style</code>，我们在给标签设置行内样式的时候，是可以给 <code>style</code>设置多个样式的，比如宽度和高度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( generateAttrs([name:<span class="string">"style"</span>,<span class="attr">value</span>:<span class="string">"color:red;background:#000"</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*执行上面的代码，得到打印结果为*/</span></span><br><span class="line"><span class="string">'&#123; style:"color:red;background:#000" &#125;'</span></span><br><span class="line"><span class="comment">/* 我想要的结果 */</span></span><br><span class="line"><span class="string">'&#123; style:&#123;"color":"red","background":"#000"&#125; &#125;`</span></span><br></pre></td></tr></table></figure></p><p>调整<code>generateAttrs</code>函数的实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* 2.1 如果属性节点名称为 style那么则对 value进行中间处理 */</span></span><br><span class="line">        <span class="keyword">if</span> (attr.name === <span class="string">'style'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            attr.value.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> [key, value] = item.split(<span class="string">':'</span>);</span><br><span class="line">                obj[key] = value</span><br><span class="line">            &#125;);</span><br><span class="line">            attr.value = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:"app",title:"标题", */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, <span class="number">-1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="titleX"><strong>标签(子)节点的处理</strong></div><p>标签(子)节点的处理因为涉及到标签嵌套(标签可能存在多个子标签)所以会稍显复杂。</p><p>这里我们暂且不考虑标签的属性节点，假设我们有模板字符串为<code>&lt;p&gt;hello&lt;/p&gt;</code>,它转换之后的结果应该为<code>_createElement(&quot;p&quot;,null,_v(&quot;hello&quot;))</code>,这里<code>_createElement</code>为固定的函数名字，第一个参数<code>p</code>表示标签的类型(名称)，第二个参数用来放置属性节点( 如果没有属性节点那么显示为 null ),第三个参数<code>_v(&quot;hello&quot;)</code>表示 p标签的文本内容<code>hello</code>，此处如果标签中的内容为类似<code></code>的插值语法，那么还需要处理为<code>_createElement(&quot;span&quot;,null,_v(_s(msg))))</code>结构，做额外的处理。</p><p>那么怎么转换呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="built_in">JSON</span>.stringify(node.text); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;text&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generateText(&#123; <span class="attr">text</span>: <span class="string">"hello"</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(generateText(&#123; <span class="attr">text</span>: <span class="string">"My name is &#123;&#123;name&#125;&#125;"</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上述代码的执行结果 */</span></span><br><span class="line"><span class="comment">/* _v("hello") */</span></span><br><span class="line"><span class="comment">/* _v("My name is &#123;&#123;name&#125;&#125;") */</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我封装了一个专门用来处理标签内容(字符串)的函数<code>generateText</code>，内部的逻辑非常简单只是字符串的无脑拼接而已。但是<code>_v(&quot;My name is &quot;)</code>只能算是半成品，因为我们在真正渲染的时候，插值语法<code></code>中的变量是需要用真正的实例数据来进行替换的，因此我们需要进一步处理为<code>_v(&quot;My name is &quot;+_s(name))</code>这样的结构。那要怎么做呢？ </p><p>要处理这个问题无疑是个挑战，因为当我们面对<code>&quot;My name is  &quot;</code>这样内容的时候，首先应该先把普通字符串和插值语法的部分区分开来，然后对插值语法的部分单独处理成<code>_s(name)</code>结构，最后再拼接。</p><p>无疑，字符串插值语法部分的匹配需要用到正则表达式，下面试着给出对应的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultTagRE = <span class="regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tokens = [];</span><br><span class="line">    <span class="keyword">let</span> match, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文本内容 */</span></span><br><span class="line">    <span class="keyword">let</span> text = node.text;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果是全局匹配 那么每次匹配的时候都需要将 lastIndex 调整到0*/</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex = defaultTagRE.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 正则匹配(匹配插值语法部分的内容) */</span></span><br><span class="line">    <span class="keyword">while</span> (match = defaultTagRE.exec(text)) &#123;</span><br><span class="line">        index = match.index;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">            tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex, index)));</span><br><span class="line">        &#125;</span><br><span class="line">        tokens.push(<span class="string">`_s(<span class="subst">$&#123;match[<span class="number">1</span>].trim()&#125;</span>)`</span>);</span><br><span class="line">        lastIndex = index + match[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt; text.length) &#123;</span><br><span class="line">        tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"tokens"</span>, tokens); <span class="comment">/* tokens [ '"My name is "', '_s(name)' ] */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;tokens.join(<span class="string">'+'</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generateText(&#123; <span class="attr">text</span>: <span class="string">"hello"</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(generateText(&#123; <span class="attr">text</span>: <span class="string">"My name is &#123;&#123;name&#125;&#125; biubiubiu @"</span> &#125;));</span><br><span class="line"><span class="comment">/* 打印结果 */</span></span><br><span class="line"><span class="comment">/* _v("hello")  */</span></span><br><span class="line"><span class="comment">/* _v("My name is "+_s(name)+" biubiubiu @")*/</span></span><br></pre></td></tr></table></figure><p>此外，我们还需要考虑到标签的嵌套，这个问题我们可以通过函数的递归调用来实现。</p><p>最后一步，我们还需要完成<code>RenderString-&gt;RenderFunction</code>,即把拼接好的字符串转换为函数，这个过程需要用到两个小技巧。我们可以通过 <code>new Function</code>来创建函数并将字符串转换为函数体内容，此外插值语法(如 <code></code> )中的<code>name</code>变量应该通过作用域绑定的方式来进行处理，因此这里还用到了<code>with特性</code>。</p><p>下面给出整个过程的完整代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 形如：abc-123 */</span></span><br><span class="line"><span class="keyword">const</span> nc_name = <span class="string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;aaa:bbb&gt; */</span></span><br><span class="line"><span class="keyword">const</span> q_nameCapture = <span class="string">`((?:<span class="subst">$&#123;nc_name&#125;</span>\\:)?<span class="subst">$&#123;nc_name&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;div   匹配开始标签的左半部分 */</span></span><br><span class="line"><span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;q_nameCapture&#125;</span>`</span>);</span><br><span class="line"><span class="comment">/* 匹配开始标签的右半部分(&gt;) 形如`&gt;`或者`  &gt;`前面允许存在 N(N&gt;=0)个空格 */</span></span><br><span class="line"><span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span>;</span><br><span class="line"><span class="comment">/* 匹配闭合标签：形如 &lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">const</span> endTag = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;\\/<span class="subst">$&#123;q_nameCapture&#125;</span>[^&gt;]*&gt;`</span>);</span><br><span class="line"><span class="comment">/* 匹配属性节点：形如 id="app" 或者 id='app' 或者 id=app 等形式的字符串 */</span></span><br><span class="line"><span class="keyword">const</span> att =<span class="regexp">/^\s*([^\s"'&lt;&gt;\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=&lt;div&gt;`]+)))?/</span></span><br><span class="line"><span class="comment">/* 匹配插值语法：形如 &#123;&#123;msg&#125;&#125; */</span></span><br><span class="line"><span class="keyword">const</span> defaultTagRE = <span class="regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标记节点类型(文本节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_TEXT = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(元素节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_ELEMENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = []; <span class="comment">/* 数组模拟栈结构 */</span></span><br><span class="line"><span class="keyword">let</span> root = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> currentParent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 推进函数：每处理完一部分模板就向前推进删除一段 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">advance</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        html = html.substring(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析开始标签部分：主要提取标签名和属性节点 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parser_start_html</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 00-正则匹配 &lt;div id="app" title="标题"&gt;模板结构*/</span></span><br><span class="line">        <span class="keyword">let</span> start = html.match(startTagOpen);</span><br><span class="line">        <span class="keyword">if</span> (start) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 01-提取标签名称 形如 div */</span></span><br><span class="line">            <span class="keyword">const</span> tagInfo = &#123;</span><br><span class="line">                tag: start[<span class="number">1</span>],</span><br><span class="line">                attrs: []</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除&lt;div部分 */</span></span><br><span class="line">            advance(start[<span class="number">0</span>].length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 02-提取属性节点部分 形如：id="app" title="标题"*/</span></span><br><span class="line">            <span class="keyword">let</span> attr, end;</span><br><span class="line">            <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(att))) &#123;</span><br><span class="line">                tagInfo.attrs.push(&#123;</span><br><span class="line">                    name: attr[<span class="number">1</span>],</span><br><span class="line">                    value: attr[<span class="number">3</span>] || attr[<span class="number">4</span>] || attr[<span class="number">5</span>]</span><br><span class="line">                &#125;);</span><br><span class="line">                advance(attr[<span class="number">0</span>].length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 03-处理开始标签 形如 &gt;*/</span></span><br><span class="line">            <span class="keyword">if</span> (end) &#123;</span><br><span class="line">                advance(end[<span class="number">0</span>].length);</span><br><span class="line">                <span class="keyword">return</span> tagInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (html) &#123;</span><br><span class="line">        <span class="keyword">let</span> textTag = html.indexOf(<span class="string">'&lt;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果以&lt;开头 */</span></span><br><span class="line">        <span class="keyword">if</span> (textTag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* (1) 可能是开始标签 形如:&lt;div id="app"&gt; */</span></span><br><span class="line">            <span class="keyword">let</span> startTagMatch = parser_start_html();</span><br><span class="line">            <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">                start(startTagMatch.tag, startTagMatch.attrs);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* (2) 可能是结束标签 形如:&lt;/div&gt;*/</span></span><br><span class="line">            <span class="keyword">let</span> endTagMatch = html.match(endTag);</span><br><span class="line">            <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">                advance(endTagMatch[<span class="number">0</span>].length);</span><br><span class="line">                end(endTagMatch[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 文本内容的处理 */</span></span><br><span class="line">        <span class="keyword">let</span> text;</span><br><span class="line">        <span class="keyword">if</span> (textTag &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            text = html.substring(<span class="number">0</span>, textTag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            advance(text.length);</span><br><span class="line">            chars(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文本处理函数：&lt;span&gt;  hello &lt;span&gt; =&gt; text的值为 " hello "*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chars</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.先处理文本字符串中所有的空格，全部替换为空 */</span></span><br><span class="line">    text = text.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.把数据组织成&#123;text:"hello",type:3&#125;的形式保存为当前父节点的子元素 */</span></span><br><span class="line">    <span class="keyword">if</span> (text) &#123;</span><br><span class="line">        currentParent.children.push(&#123;</span><br><span class="line">            text,</span><br><span class="line">            nodeType: NODE_TYPE_TEXT</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = createASTElement(tag, attrs);</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        root = element;</span><br><span class="line">    &#125;</span><br><span class="line">    currentParent = element;</span><br><span class="line">    stack.push(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">tagName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = stack.pop();</span><br><span class="line">    currentParent = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (currentParent) &#123;</span><br><span class="line">        element.parent = currentParent;</span><br><span class="line">        currentParent.children.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createASTElement</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        tag,</span><br><span class="line">        attrs,</span><br><span class="line">        children: [],</span><br><span class="line">        parent: <span class="literal">null</span>,</span><br><span class="line">        nodeType: NODE_TYPE_ELEMENT</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ****************** */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* 2.1 如果属性节点名称为 style那么则对 value进行中间处理 */</span></span><br><span class="line">        <span class="keyword">if</span> (attr.name === <span class="string">'style'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            attr.value.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> [key, value] = item.split(<span class="string">':'</span>);</span><br><span class="line">                obj[key] = value</span><br><span class="line">            &#125;);</span><br><span class="line">            attr.value = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:"app",title:"标题", */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, <span class="number">-1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateChildren</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = el.children;</span><br><span class="line">    <span class="keyword">return</span> (children &amp;&amp; children.length &gt; <span class="number">0</span>)</span><br><span class="line">     ? <span class="string">`<span class="subst">$&#123;children.map(c =&gt; generate(c)).join(<span class="string">','</span>)&#125;</span>`</span> </span><br><span class="line">     : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 如果是子标签那么就递归调用 */</span></span><br><span class="line">    <span class="keyword">return</span> node.nodeType == <span class="number">1</span> ? generateRenderString(node) : generateText(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tokens = [];</span><br><span class="line">    <span class="keyword">let</span> match, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文本内容 */</span></span><br><span class="line">    <span class="keyword">let</span> text = node.text;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果是全局匹配 那么每次匹配的时候都需要将 lastIndex 调整到0*/</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex = defaultTagRE.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 正则匹配(匹配插值语法部分的内容) */</span></span><br><span class="line">    <span class="keyword">while</span> (match = defaultTagRE.exec(text)) &#123;</span><br><span class="line">        index = match.index;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">            tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex, index)));</span><br><span class="line">        &#125;</span><br><span class="line">        tokens.push(<span class="string">`_s(<span class="subst">$&#123;match[<span class="number">1</span>].trim()&#125;</span>)`</span>);</span><br><span class="line">        lastIndex = index + match[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt; text.length) &#123;</span><br><span class="line">        tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;tokens.join(<span class="string">'+'</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数：完成每个部分字符串(标签名 &amp;&amp; 属性节点 &amp;&amp; 子节点)的拼接 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRenderString</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = generateChildren(el);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_createElement("<span class="subst">$&#123;el.tag&#125;</span>",<span class="subst">$&#123;el.attrs.length ? generateAttrs(el.attrs) : <span class="string">'null'</span>&#125;</span><span class="subst">$&#123; children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span> : <span class="string">''</span>&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compilerToFunction</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* Html-&gt;AST */</span></span><br><span class="line">    <span class="keyword">let</span> root = compiler(template);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* AST-&gt;RenderString */</span></span><br><span class="line">    <span class="keyword">let</span> renderString = generateRenderString(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* RenderString-&gt;RenderFunction */</span></span><br><span class="line">    <span class="keyword">let</span> renderFn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">`with(this)&#123; return <span class="subst">$&#123;renderString&#125;</span>&#125;`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"renderString"</span>, renderString,<span class="string">'renderFn'</span>, renderFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const template = `&lt;div&gt;&lt;span class="span-class"&gt;Hi 夏!&lt;/span&gt;&lt;/div&gt;`;</span></span><br><span class="line"><span class="comment">// const template = `&lt;div id="app" title="标题"&gt;&lt;p&gt;hello&lt;/p&gt;&lt;span&gt;vito&lt;/span&gt;&lt;/div&gt;`</span></span><br><span class="line"> <span class="keyword">const</span> template = <span class="string">`&lt;a id="app" title="标题"&gt;&lt;p&gt;hello&lt;/p&gt;&lt;span&gt;My name is &#123;&#123;name&#125;&#125; dududu!!!&lt;/span&gt;&lt;/a&gt;`</span>;</span><br><span class="line">    </span><br><span class="line">compilerToFunction(template);</span><br></pre></td></tr></table></figure><p>最后，给出上述代码的测试结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">renderString </span><br><span class="line">    _createElement(<span class="string">"a"</span>,</span><br><span class="line">        &#123; id:<span class="string">"app"</span>,title:<span class="string">"标题"</span> &#125;,</span><br><span class="line">        _createElement(<span class="string">"p"</span>,null,_v(<span class="string">"hello"</span>)),</span><br><span class="line">        _createElement(<span class="string">"span"</span>,null,_v(<span class="string">"My name is"</span>+_s(name)+<span class="string">"dududu!!!"</span>))) </span><br><span class="line"></span><br><span class="line">renderFn </span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">anonymous</span></span>() &#123;</span><br><span class="line">        with(this)&#123; </span><br><span class="line">            <span class="built_in">return</span> _createElement(<span class="string">"a"</span>,</span><br><span class="line">                &#123; id:<span class="string">"app"</span>,title:<span class="string">"标题"</span> &#125;,</span><br><span class="line">                _createElement(<span class="string">"p"</span>,null,_v(<span class="string">"hello"</span>)),</span><br><span class="line">                _createElement(<span class="string">"span"</span>,null,_v(<span class="string">"My name is"</span>+_s(name)+<span class="string">"dududu!!!"</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../z.png" width="200px"></p><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;在 &lt;a href=&quot;http://wendingding.com/2019/08/25/Gossip%20-%20html-parser/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;html-parser&lt;/a&gt; 这篇文章
      
    
    </summary>
    
    
      <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
</feed>
