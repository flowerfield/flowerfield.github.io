<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2019-04-16T02:08:44.974Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javaScript系列 [21]-JavaScript数组基础</title>
    <link href="https://weibo.com/u/3800117445/2019/04/14/javaScript%E7%B3%BB%E5%88%97%20%5B21%5D-JavaScript%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80/"/>
    <id>https://weibo.com/u/3800117445/2019/04/14/javaScript系列 [21]-JavaScript数组基础/</id>
    <published>2019-04-14T15:22:16.000Z</published>
    <updated>2019-04-16T02:08:44.974Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将JavaScript语言中数组这种重要的数据结构，全文内容包括但不限于数组的简单介绍、数组的创建、数组中元素的访问、数组的类型以及数组相关的核心方法等内容。</div><p class="titleX"><strong>数组核心概念</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base30.png?raw=true"></p><blockquote><p>在JavaScript语言中，数组的构造函数为<code>Array</code>，如果我们使用<code>typeof</code>关键字来检查数组的类型会得到<code>object</code>的结果，这也从侧面说明了数组本质上是Object对象类型的数据，因为可以认为数组是特殊的对象(关于这一点，这篇文章将不做展开)。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">90</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr);  <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);         <span class="comment">// [1, 2, 3, 90]</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base32.png?raw=true"></p><p><strong>数组</strong>  数组是值的有序集合<a href=""> 譬如：[1,3,5,7,9] </a>，数组中的每个值称为元素。<br><strong>索引</strong>  每个元素在数组中都有一个位置，用数字表示称为索引，默认从0开始递增。<br><strong>类型</strong>  JavaScript中的数组是<code>无类型的</code>(指的是数组元素可以是任意类型且允许存在不同类型的元素)。<br><strong>动态</strong>  JavaScript中的数组是<code>动态的</code>，会根据需要增长或缩减，无需提前声明大小且不用关心空间分配。<br><strong>长度</strong> JavaScript中每个数组都拥有<a href=""> length属性</a>，通常该属性的值为数组的长度。<br><strong>备注</strong>  <code>JavaScript中的数组是对象的特殊形式</code>，但通常数组的实现是经过优化的，访问数组元素相比对象而言性能更好。 </p><p class="titleX"><strong>数组的创建</strong></p><p>通常，创建数组有两种方式，一种是直接通过字面量的方式创建，一种是通过Array构造函数的方式创建，在具体写代码的时候又有一些注意点。</p><p><span class="spaceT backColorT" style="width:160px">① 字面量方式创建数组</span> </p><p>字面量(直接量)创建数组是最简单的方式，只需要直接使用<code>[ ]</code>并在中括号中设置数组元素即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> empty  = [];                                 <span class="comment">//没有元素的空数组</span></span><br><span class="line"><span class="keyword">var</span> ages   = [<span class="number">12</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">88</span>,<span class="number">101</span>];                  <span class="comment">//有五个元素的数字数组</span></span><br><span class="line"><span class="keyword">var</span> books  = [<span class="string">"老虎老虎"</span>,<span class="string">"你好，忧愁"</span>,<span class="string">"兄弟"</span>,<span class="string">"或者"</span>]; <span class="comment">//有四个元素的字符串数组</span></span><br><span class="line"><span class="keyword">var</span> music  = [<span class="string">"那个女孩"</span>,<span class="string">"take me to your heart"</span>]; <span class="comment">//有两个元素的字符串数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*稍微复杂的数组：该数组拥有6个元素，包含字符串、数值、数组、对象和布尔值等类型的元素*/</span></span><br><span class="line"><span class="keyword">var</span> dataArr1 = [<span class="string">"前端开发"</span>,<span class="number">5</span>,<span class="string">"1904"</span>,<span class="literal">true</span>,[<span class="string">"张三"</span>,<span class="string">"李四"</span>],&#123;<span class="string">"address"</span>:<span class="string">"广州市天河区"</span>,<span class="string">"num"</span>:<span class="number">88</span>&#125;];</span><br><span class="line"><span class="comment">/*数组直接量中的值(元素)不一定非的是常量，可以是任意的表达式(变量)*/</span></span><br><span class="line"><span class="keyword">var</span> dataArr2 = [ages, books,&#123;<span class="attr">name</span>:<span class="string">"zs"</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> dataArr3 = [<span class="number">10</span>,,<span class="number">30</span>];</span><br><span class="line"><span class="built_in">console</span>.log(dataArr3.length,dataArr3[<span class="number">1</span>]);   <span class="comment">//3，undefined</span></span><br><span class="line"><span class="keyword">var</span> dataArr4 = [,,];</span><br><span class="line"><span class="built_in">console</span>.log(dataArr4.length,dataArr4);      <span class="comment">//2,[undefined,undefined]</span></span><br></pre></td></tr></table></figure></p><p><span class="spaceT backColorT" style="width:180px">② 使用构造函数创建数组</span><br>调用构造函数Array是创建数组的第二种方法，在调用构造函数的时候可以有多种方式。</p><p><strong>语法</strong> <code>new Array()</code> <code>new Array(length)</code> <code>new Array(ele1,ele2,..)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*使用构造函数Array来创建数组实例*/</span></span><br><span class="line">  <span class="comment">/*01-不传递任何参数 初始化空数组*/</span></span><br><span class="line">  <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>();     <span class="comment">//空数组 等价于 var arr1 = [];</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr1.length);   <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*02-传递数组的长度参数*/</span></span><br><span class="line">  <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr2.length);   <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*03-传递数组的元素*/</span></span><br><span class="line">  <span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"demoString"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr3);          <span class="comment">//[3,4,5,"demoString"]</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr3.length);   <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*其它用法*/</span></span><br><span class="line">  <span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="built_in">Array</span>;      <span class="comment">//空数组 当Array构造函数没有参数时可以省略()</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr4.length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr5 = <span class="built_in">Array</span>(<span class="string">"demo1"</span>,<span class="string">"demo2"</span>,<span class="literal">true</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr5);                  <span class="comment">//["demo1", "demo2", true]</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr5));   <span class="comment">//检查是否是数组 true</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr5.length);           <span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 在使用Array构造函数来创建数组的时候，<code>如果没有传递参数，那么()可以被省略</code>，这种情况下会初始化得到一个空的数组，如果仅仅传递一个参数且该参数是数值那么将会初始化得到一个指定长度的空数组(数组中每个元素值均为<code>undefined</code>)，<a href="">调用构造函数Array的时候，new关键字可以省略</a>。 </p><p class="titleX"><strong>数组的访问以及length属性</strong></p><p>数组其实就是一组数据，我们对数组的可以有很多操作(添加、移除、排序、翻转、遍历等)，这些操作主要通过对应的方法和结构来实现，这里先简单介绍数组的<code>length属性</code>、<code>索引下标访问</code>。</p><p>我们可以直接通过下标(索引)来操作数组，这些操作包括添加、修改和读取。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*演示通过[下标]索引操作数组*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"苹果"</span>,<span class="string">"西瓜"</span>,<span class="string">"橘子"</span>,<span class="string">"晓夏"</span>,<span class="string">"描夏"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过索引访问指定元素  索引范围[0 , length - 1]*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);              <span class="comment">//苹果</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[arr.length - <span class="number">1</span>]); <span class="comment">//描夏</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[arr.length]);     <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过索引修改指定元素*/</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"百香果"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);               <span class="comment">//["百香果","西瓜","橘子","晓夏","描夏"];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过索引来添加指定元素*/</span></span><br><span class="line">arr[arr.length] = <span class="string">"米桃儿"</span>;</span><br><span class="line">arr[arr.length] = <span class="string">"香蕉"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);               <span class="comment">//["百香果", "西瓜", "橘子", "晓夏", "描夏", "米桃儿", "香蕉"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);        <span class="comment">//7</span></span><br></pre></td></tr></table></figure></p><p>在数组中<span style="color:red"> length 是一个可读可写的属性。</span>当我们读取某个数组的length属性时，表示获取数组的长度(最大索引，特殊情况除外)。当我们对数组的length属性进行写操作的时候，会影响数组的结构。下面简单总结为两点：</p><blockquote><p> ❏ 为数组元素赋值的时候，如果它的索引i大于或等于当前长度，那么length值将设置为i + 1 ;<br> ❏ 设置length属性小于当前长度的非负整数时，数组中那些索引值超出的元素将被删除。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-第一种情况 索引 &gt;= 数组.length*/</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">123</span>,<span class="string">"string"</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.length);         <span class="comment">//数组的长度为3</span></span><br><span class="line">arr1[<span class="number">5</span>] = <span class="string">"测试元素"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);                <span class="comment">// [123, "string", true, empty × 2, "测试元素"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.length);         <span class="comment">//6 数组的长度被设置为 5 + 1 == 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-第二种情况 设置length的值 &lt; 数组.length*/</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"苹果"</span>,<span class="string">"西瓜"</span>,<span class="string">"香蕉"</span>,<span class="string">"橙子"</span>,<span class="string">"橘子"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr2.length);         <span class="comment">//5</span></span><br><span class="line">arr2.length = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);                <span class="comment">// ["苹果", "西瓜", "香蕉"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.length);         <span class="comment">//3 数组中超出的元素被删除</span></span><br></pre></td></tr></table></figure><p></p><p class="titleX"><strong>数组常用方法</strong></p><br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base31.png?raw=true"><p></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">添加 | 移除 | 合并 | 截取操作</span></p><p><strong>数组的合并方法 concat( )</strong></p><p><strong><code>语法</code></strong> <code>array.concat(value1,...)</code><br><strong><code>作用</code></strong> <code>concat()</code>方法用来衔接(拼接合并)数组，会将合并后的新数组返回。<br><strong><code>参数</code></strong> <code>concat()</code>方法的参数非常灵活可以是N个普通元素或者是数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.concat(<span class="number">4</span>);            <span class="comment">//返回[1,2,3,4];</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);         <span class="comment">//[1,2,3]  注意arr数组本身并没有被修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>, <span class="number">5</span>));        <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>, <span class="number">5</span>]));      <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>, <span class="number">5</span>],<span class="number">6</span>));    <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>, <span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>]));<span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>,[<span class="number">5</span> ,[<span class="number">6</span>,<span class="number">7</span>]]));<span class="comment">//[1,2,3,4,5,[6,7]];</span></span><br></pre></td></tr></table></figure></p><p><strong>数组元素的添加 push( )和unshift( )</strong></p><p><strong><code>语法</code></strong> <code>array.push(value,...)</code> <code>array.unshift(value,...)</code><br><strong><code>说明</code></strong> <code>push()</code>和<code>unshift()</code>这两个方法，它们均直接修改当前数组本身并返回最新的数组长度。<br><strong><code>作用</code></strong> <code>unshift()</code>方法把元素插入到开头原本元素顺次后移，<code>push()</code>方法把元素追加到数组的屁股。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*数组的添加(插入操作)*/</span></span><br><span class="line"><span class="comment">/*01-push() 追加到数组末尾*/</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"苹果"</span>,<span class="string">"橙子"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.push(<span class="number">123</span>));          <span class="comment">//3   把123追到到数组末尾并更新length值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);                    <span class="comment">//["苹果", "橙子", 123]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.length)              <span class="comment">//3</span></span><br><span class="line"><span class="comment">/*多个参数值的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.push(<span class="string">"猴子"</span>,<span class="string">"斑马"</span>));  <span class="comment">//5   追加数据 + 更新length值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);                    <span class="comment">//["苹果", "橙子", 123, "猴子", "斑马"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-unshift() 插入到数组开头*/</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"苹果"</span>,<span class="string">"橙子"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);</span><br><span class="line">arr2.unshift(<span class="string">"老虎"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr2.length);</span><br><span class="line"><span class="comment">/*多个参数值的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.unshift(<span class="number">100</span>, <span class="string">"犀牛"</span>));  <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);                      <span class="comment">//[100, "犀牛", "老虎", "苹果", "橙子"]</span></span><br></pre></td></tr></table></figure><p><strong>数组元素的移除 pop( )和shift( )</strong></p><p><strong><code>语法</code></strong> <code>array.pop()</code> <code>array.shift()</code><br><strong><code>作用</code></strong> <code>array.pop()</code>和<code>array.shift()</code>方法方法删除数组的最后一个(第一个)元素并返回删除项。<br><strong><code>说明</code></strong> 如果数组为空，那么它们不会修改数组本身而是直接返回undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"苹果"</span>,<span class="string">"橙子"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());     <span class="comment">//"橙子" 删除最后一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);           <span class="comment">//["苹果"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());     <span class="comment">//"苹果"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);           <span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());     <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">/*操作arr数组*/</span></span><br><span class="line">arr.push(<span class="string">"百香果"</span>,<span class="string">"哈密瓜"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);           <span class="comment">//["百香果","哈密瓜"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.shift());   <span class="comment">//"百香果"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);           <span class="comment">//["哈密瓜"]</span></span><br></pre></td></tr></table></figure><p><strong>数组的截取方法 slice( )</strong></p><p><strong><code>语法</code></strong> <code>array.slice( start,end )</code><br><strong><code>作用</code></strong> <code>slice()</code>方法截取数组中指定的元素并保存到新数组中返回。<br><strong><code>说明</code></strong> <code>start</code>和<code>end</code>参数均可以接收负数值(表示倒数)，<code>end</code>缺省表示默认截取到数组末尾。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr1 = [<span class="number">18</span>,<span class="string">"文顶顶"</span>,<span class="string">"广州市"</span>,<span class="string">"0415"</span>,<span class="literal">true</span>];</span><br><span class="line"> <span class="keyword">var</span> arr2 = [<span class="number">18</span>,<span class="string">"wendingding"</span>,<span class="string">"广州市"</span>,<span class="string">"0415"</span>,<span class="literal">true</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">console</span>.log(arr1.slice(<span class="number">2</span>, <span class="number">4</span>));    <span class="comment">// ["广州市", "0415"]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr1);                <span class="comment">// [18,"文顶顶","广州市","0415",true];</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr1.slice(<span class="number">2</span>));       <span class="comment">// ["广州市","0415",true]</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">/*参数是负数的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.slice(<span class="number">2</span>, <span class="number">-1</span>));   <span class="comment">//["广州市", "0415"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.slice(<span class="number">2</span>, <span class="number">-2</span>));   <span class="comment">//["广州市"]</span></span><br></pre></td></tr></table></figure></p><p><strong>数组的插入、删除和替换方法 splice( )</strong> </p><p><strong><code>语法</code></strong> <code>array.splice( start,deleteCount,value,...)</code><br><strong><code>作用</code></strong> <code>splice()</code>将删除从start索引开始的零个或多个元素并使用参数列表中的值来替换它们。<br><strong><code>说明</code></strong> 在有必要时，数组中所有的元素都会移动以保持连续性，该方法修改的是数组本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">18</span>,<span class="string">"文顶顶"</span>,<span class="string">"广州市"</span>,<span class="string">"0415"</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="comment">/* 删除数组中的数据</span></span><br><span class="line"><span class="comment"> * 参数1：从索引为1的位置开始</span></span><br><span class="line"><span class="comment"> * 参数3：删除3个元素</span></span><br><span class="line"><span class="comment"> * 返回值：把删除的元素保存到新数组中返回</span></span><br><span class="line"><span class="comment"> * 原数组：移除指定的元素(其它的元素会移动等)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>, <span class="number">3</span>));    <span class="comment">//["文顶顶","广州市","0415"]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr);                 <span class="comment">//[18,true]</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*插入(新增)数组中的数据*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"demoA"</span>, <span class="string">"demoB"</span>, <span class="string">"北京市"</span>)); <span class="comment">//[]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr);         <span class="comment">//[18, "demoA", "demoB", "北京市", true]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>备注</strong> <code>splice()</code>方法在使用的时候，如果传递的第二个参数值为0，那么表示插入操作。具体执行的时候，会把参数列表中的数据依次插入到指定索引位置，数组中已有的元素则顺序后移。</p></blockquote><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组转换为字符串的操作</span></p><p>JavaScript中数组转换为字符串的相关方法主要有<code>toString()</code>、<code>toLocaleString()</code>以及<code>join()</code>，前两个方法用来把数组转换为字符串形式输出，<code>join()</code>方法把数组的元素按既定格式拼接后输出。</p><p><strong><code>语法</code></strong> <code>array.toString()</code> <code>array.toLocaleString()</code> <code>array.join([separator])</code><br><strong><code>说明</code></strong> <code>toString()</code>方法在执行的时候内部会分别拿到每个元素来调用toString方法，然后把结果以逗号的形式拼接成字符串返回，<code>toLocaleString()</code>方法和<code>toString()</code>用法一样，而且大多数情况下得到的结果是一致的，区别在于它每个元素调用的是toLocaleString方法。<code>join()</code>方法会先将数组的每个元素都转换为字符串，并通过在中间插入指定的 separator 字符串将它们衔接起来，最后返回衔接好的字符串。<br><strong><code>注意</code></strong> <a href="">如果<code>join()</code>方法的<code>separator</code>参数缺省，那么默认为逗号和toString方法等价</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*数组中的每个元素本身就是字符串 这种情况直接衔接*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"广东省"</span>,<span class="string">"广州市"</span>,<span class="string">"天河区"</span>,<span class="string">"体育中心"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString());        <span class="comment">//"广东省","广州市","天河区","体育中心"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.toLocaleString());  <span class="comment">//"广东省","广州市","天河区","体育中心"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*参数缺省的情况，分隔符默认为逗号*/</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join());            <span class="comment">//"广东省","广州市","天河区","体育中心"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"-"</span>));         <span class="comment">//"广东省"-"广州市"-"天河区"-"体育中心"</span></span><br></pre></td></tr></table></figure><div class="titleX"><strong>数组的遍历和计算等操作</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base33.png?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组的遍历</span></p><p>JavaScript中数组的遍历有多种方式，我们可以用 <code>for循环结构</code> 来遍历数组，也可以使用专门遍历对象的 <code>for..in结构</code>，当然还有ES5推出的 <code>forEach方法</code> ，下面将通过代码的方式一一介绍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-for循环结构遍历数组*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">18</span>,<span class="string">"wendingding"</span>,<span class="string">"广州"</span>,<span class="string">"0408"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,len = arr.length;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-for..in循环结构遍历数组*/</span></span><br><span class="line"><span class="keyword">for</span> (index <span class="keyword">in</span> arr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*index 当前的key即索引值 对应的是0，1，2，3...*/</span></span><br><span class="line">  <span class="comment">/*arr   遍历的数组对象*/</span></span><br><span class="line">  <span class="built_in">console</span>.log(index, arr[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-forEach方法遍历数组*/</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,arrT</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*index 索引值*/</span></span><br><span class="line">  <span class="comment">/*value 当前索引值对应的数组元素*/</span></span><br><span class="line">  <span class="comment">/*arrT  其实就是遍历的数组本身，在这里其实就是arr的引用*/</span></span><br><span class="line">  <span class="built_in">console</span>.log(index, value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历的结果</span></span><br><span class="line"><span class="comment">// 0 18</span></span><br><span class="line"><span class="comment">// 1 "wendingding"</span></span><br><span class="line"><span class="comment">// 2 "广州"</span></span><br><span class="line"><span class="comment">// 3 "0408"</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong> 上面介绍了遍历数组的三种方法，在开发中具体使用的时候具体选择使用哪种方式需要看特定的业务场景，需要注意的是<span style="color:#f08">在遍历数组的时候不建议使用 for..in 循环，这是因为 for..in 在使用的时候会枚举从原型中继承来的成员</span>。 <code>forEach()</code>方法会按照索引从小到大来遍历数组，并对数组中的每一个元素调用一次回调函数。每次在调用回调函数的时候，带有三个参数<code>可以简单表示为f(arr[i],i,arr)</code>,回调函数的返回值都会被忽略。此外，<code>forEach()</code>方法的语法有两种形式，这里列出。</p><p><strong><code>语法</code></strong> <code>array.forEach(f)</code> <code>array.forEach(f,o)</code></p><blockquote><p>如果在调用forEach()方法的时候指定了第二个参数<code>o</code>，那么在调用该(回调)函数f的时候this被绑定给<code>o</code>,若未指定第二个参数，那么回调函数中的this默认指向全局对象，在严格模式下this指向的是null。</p></blockquote><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数组的过滤和映射</span></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将JavaScript语言中数组这种重要的数据结构，全文内容包括但不限于数组的简单介绍、数组的创建、数组中元素的访问、数组的类型以及数组相关的核心方法等内容。&lt;/div&gt;

&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;数组核心概念&lt;/
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [20]-JavaScript严格模式</title>
    <link href="https://weibo.com/u/3800117445/2019/04/14/javaScript%E7%B3%BB%E5%88%97%20%5B20%5D-JavaScript%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weibo.com/u/3800117445/2019/04/14/javaScript系列 [20]-JavaScript严格模式/</id>
    <published>2019-04-14T00:22:16.000Z</published>
    <updated>2019-04-15T03:54:29.179Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将重点介绍ES5中严格模式相关的知识点，包括但不限于严格模式的介绍、写法、严格模式和非严格模式使用对比等内容。</div><p class="titleX"><strong>严格模式简单介绍</strong></p><p>在<code>JavaScript</code>中有严格模式和非严格模式两种运行环境。</p><blockquote><p><strong>严格模式的主要特点</strong><br>❏ 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;<br>❏ 消除代码运行的一些不安全之处，保证代码运行的安全；<br>❏ 提高编译器效率，增加运行速度；<br>❏ 为未来新版本的Javascript做好铺垫。</p></blockquote><p><strong>严格模式</strong> 体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它。此外，同样的代码在严格模式中，可能会有不一样的运行结果甚至是无法运行。掌握严格模式相关的内容有助于更细致深入地理解Javascript，让你变成一个更好的程序员，而<strong>实现严格模式</strong> 只需要在脚本代码中添加上下面介绍的关键字即可。 </p><p><strong>关键字</strong> <code>“use strict”;</code><br><strong>关键字具体说明</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1) 注意区分大小写，必须全部都是小写的</span><br><span class="line">(2) 注意空格，整个字符串总共10个字符</span><br><span class="line">(3) 单引号和双引号无所谓，但是需要有引号</span><br><span class="line">(4) 必须写在作用域的最顶部，注意其具体的位置</span><br><span class="line">(5) 可以加分号，也可以不加，但是必须是一个字符串</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong> 下面的关键字写法均是错误的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"USE strict";</span><br><span class="line">" use strict ";</span><br><span class="line">"("USE strict").toLowerCase();"</span><br></pre></td></tr></table></figure></p><p class="titleX"><strong>严格模式使用注意点</strong></p><blockquote><p><strong>➥ 严格模式使用注意</strong></p><p>〇 修正this的值<br>① 所有的变量必须使用var 关键字声明<br>② 不能使用<code>delete</code>关键字删除全局变量<br>③ 在对象中不允许有同名的属性<br>④ 函数的参数必须唯一(不能出现同名的参数)<br>⑤ <code>arguments</code>对象的行为不同，严格模式下和实参相对独立<br>⑥ 禁用了<code>argument.callee</code>和<code>caller函数</code><br>⑦ 不能在if语句中声明函数<br>⑧ 禁止使用<code>eval</code>和<code>argument</code>作为标识符<br>⑨ 禁用了<code>with</code>语句和八进制字面量</p></blockquote><p><strong>001 所有的变量都必须使用var关键字声明</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>;             <span class="comment">//错误的演示</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p><strong>002 不能使用delete关键字删除全局变量</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在非严格模式下,删除失败(静默失败)   失败了不吭声,严格模式下直接报错</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></p><p><strong>003 在对象中不允许有同名的属性</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在非严格模式下,会使用后面的属性赋值作为最终值,在严格模式下则直接报错</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    name:<span class="string">"李四"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></p><p><strong>004 函数的参数必须唯一(不能出现同名的参数)</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在非严格模式下,如果函数在定义的时候,使用了多个同名的参数,则在函数内部形参的实际值为最后一个传入的实参值</span></span><br><span class="line"><span class="comment">//在严格模式下,直接报错</span></span><br><span class="line"><span class="comment">//    function func(a,a,a) &#123;</span></span><br><span class="line"><span class="comment">//        console.log(a);</span></span><br><span class="line"><span class="comment">//        console.log(arguments);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p><strong>005 arguments对象的行为不同</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）严格模式下,在函数内部修改了对象的指向,对arguments的值不会产生影响</span><br><span class="line">（2）在严格模式下,形参的值和arguments的值是相互独立的,在函数内部修改了形参的值对arguments不受影响</span><br><span class="line">（3）在非严格模式下，修改了形参的值，arguments中的数据会跟着改变</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试引用类型的值作为函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在函数内部修改形参的值</span></span><br><span class="line">    obj = &#123;<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcName(&#123;<span class="attr">name</span>:<span class="string">"张三"</span>&#125;);</span><br><span class="line"><span class="comment">//测试基本类型数据作为函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="string">"hi"</span>);</span><br></pre></td></tr></table></figure><p><strong>006 禁用了argument.callee和caller函数</strong></p><p><code>argument.callee</code>是对函数自身的引用 <code>argument.calller</code>是对调用函数的引用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n ==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>) + n;</span><br><span class="line">&#125;)(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num);       <span class="comment">//55</span></span><br></pre></td></tr></table></figure></p><p><strong>007 不能在if语句中声明函数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果在if语句中声明函数，则会产生语法错误</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"________"</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"呵呵呵呵"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        demo();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>008 禁止使用eval和argument作为标识符</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span> = <span class="string">"测试的字符串"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">arguments</span> = <span class="string">"参数列表"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure></p><p><strong>009 修正this的值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在严格模式下,函数<span class="keyword">this</span>的值始终是指定的值,无论指定的是什么值</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"测试的name"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在非严格模式下,打印出来的this为全局的对象window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//在严格模式下打印出来的this为undefined</span></span><br><span class="line">&#125;</span><br><span class="line">demoTest();</span><br></pre></td></tr></table></figure></p><p><strong>010 禁用了with语句</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>:<span class="string">"暂时干"</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line">  <span class="keyword">with</span>(o)</span><br><span class="line">  &#123;</span><br><span class="line">      name = <span class="string">"lisi"</span>;</span><br><span class="line">      age = <span class="number">48</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure></p><p><strong>11 禁用了八进制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以0开头的数据常常引起混乱</span></span><br><span class="line"><span class="comment">//var num = 023;     //2*8 + 3 ==&gt; 19</span></span><br><span class="line"><span class="comment">//console.log(num); //19</span></span><br></pre></td></tr></table></figure></p><p class="titleX"><strong>严格模式书写格式和作用范围</strong></p><p><strong>严格模式书写格式</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">01 必须使用单引号或者是双引号括住字符串</span><br><span class="line">02 必须使用小写,不能出现大写字符</span><br><span class="line">03 必须是10个字符，不能多和也不能少</span><br><span class="line">04 字符串后面的分号可以省略</span><br><span class="line">05 必须写在当前作用域的最顶上</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//"use strict";   //正确写法</span></span><br><span class="line"><span class="comment">//"use strict"    //正确写法     分号可以省略</span></span><br><span class="line"><span class="comment">//'use strict';   //正确写法     可以使用单引号</span></span><br><span class="line"><span class="comment">//"use  strict";    //错误写法   必须是10个字符</span></span><br><span class="line"><span class="comment">//"use Strict";     //错误写法   所有的字符都必须小写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//  "use strict";           //错误写法 </span></span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><strong>作用范围</strong></p><p><span style="color:#195">① 函数的顶部(只对当前的函数有效)</span><br><span style="color:#195">② script标签的顶部,只对当前的标签有效,对页面中其他的script无效</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//位置01       对func01和func02都有效</span></span><br><span class="line"><span class="comment">//"use strict";</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func01</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//位置02   对func01有效,对func02无效</span></span><br><span class="line">    <span class="comment">//"use strict";</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func02</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//位置03 对func02有效,但对func01无效</span></span><br><span class="line">   <span class="comment">//"use strict";</span></span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func01();</span><br><span class="line">func02();</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将重点介绍ES5中严格模式相关的知识点，包括但不限于严格模式的介绍、写法、严格模式和非严格模式使用对比等内容。&lt;/div&gt;

&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;严格模式简单介绍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [19]-JavaScript的字符串</title>
    <link href="https://weibo.com/u/3800117445/2019/04/13/javaScript%E7%B3%BB%E5%88%97%20%5B19%5D-JavaScript%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://weibo.com/u/3800117445/2019/04/13/javaScript系列 [19]-JavaScript的字符串/</id>
    <published>2019-04-13T00:22:16.000Z</published>
    <updated>2019-04-15T06:29:49.244Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将重点介绍javaScript语言中字符串，操作字符串的常见方法以及具体的代码实现等。</div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base26.png?raw=true"></p><div class="titleX"><strong>字符串简单介绍</strong></div><blockquote><p>关于字符串(类型)，其实在我的<a href="http://wendingding.com/2019/04/09/javaScript%E7%B3%BB%E5%88%97%20[16]-JavaScript%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/" target="_blank" rel="noopener">另一篇文章中 JavaScript语言基础 </a>已经有过下面这段简单介绍。</p></blockquote><p><strong><code>定义</code></strong> 由〇个或多个16位Unicode字符组成的字符序列。<br><strong><code>表示</code></strong> 字符串可以由双引号或单引号表示。<br><strong><code>操作</code></strong> 可以通过length属性来获取字符串的长度，且多个字符串之间可以通过 + 来进行拼接。<br><strong><code>注意</code></strong> JavaScript中的字符串是<code>不可变的</code>，即改变某个变量保存的字符串需先销毁然后再重新填充。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hi ~"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Wendingding!"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = str1 + <span class="string">" "</span> +str2;    <span class="comment">/*字符串的拼接 */</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);              <span class="comment">/*输出结果：Hi ~ Wendingding!*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.length);       <span class="comment">/*输出结果：17 */</span></span><br></pre></td></tr></table></figure></p><p>其实，掌握了上面这些知识点就已经对JavaScript语言中的字符串有了一个七七八八的概念了，需要注意的是，本文的核心是在此基础上讲清楚<code>字符串操作(大小写转换、搜索、拼接、查找等)相关的知识点</code>，因为这涉及到一大堆的方法(函数)，因此要解释清楚它们这将会是庞大艰难的任务，下面我将先列出JavaScript语言中String相关的所有操作然后再分门别类的进行介绍。</p><p><div class="titleX"><strong>字符串核心方法</strong></div><br>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base28.png?raw=true"><br><strong>字符串的拼接</strong></p><blockquote><p>JavaScript提供了<code>concat()</code>方法来进行字符串的拼接。</p></blockquote><p><strong><code>语法</code></strong> <code>string.concat(value,...)</code><br><strong><code>说明</code></strong> <code>concat()</code>方法可以接受N(一个或多个)个待连接的字符串，它的作用是将每个参数都转换为字符串(若不是字符串则内部会自动转换)，并将它们按顺序追加到当前字符串的末尾并返回最后的结果。<br><strong><code>备注</code></strong> <code>concat()</code>方法更简单的写法是直接使用符号 <code>+</code> 来实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 第一种拼接的方式 使用+*/</span></span><br><span class="line"><span class="comment">/*02 第二种拼接的方式 使用concat方法*/</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hello "</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"wendingding"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1 + str2 + <span class="string">"!"</span>);       <span class="comment">//Hello wendingding !</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.concat(str2 + <span class="string">"?"</span>)); <span class="comment">//Hello wendingding?</span></span><br><span class="line"><span class="comment">/*备注：需要注意concat方法并不会修改拼接的字符串本身而是把结果作为返回值*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);                    <span class="comment">//Hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);                    <span class="comment">//Hello</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.concat(<span class="string">"world"</span>, <span class="string">"!"</span>,<span class="string">" Nice to"</span>, <span class="string">"meet u"</span>));</span><br><span class="line"><span class="comment">//Hello world ! Nice tomeet u  演示接收多个参数的情况</span></span><br></pre></td></tr></table></figure></p><p><strong>字符串的大小写转换</strong></p><blockquote><p>JavaScript提供了专门处理大小写字符转换的方法,它们分别是<code>toLowerCase()</code>、<code>toUpperCase()</code>、<code>toLocaleUpperCase()</code>以及<code>toLocaleLowerCase()</code>四个方法，其中后面的两个方法在进行大小写转换的时候需要考虑当前本地化语言环境的大小写映射，大多数情况下它们和前两个方法保持一致。</p></blockquote><p><span class="spaceT backColorT" style="width:280px">toLowerCase( ) 和 toLocaleLowerCase( )</span> 将字符串转换为小写<br><span class="spaceT backColorT" style="width:280px">toUpperCase( ) 和 toLocaleUpperCase( )</span> 将字符串转换为大写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hi! Nice to meet u"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase());       <span class="comment">//hi! nice to meet u</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase()); <span class="comment">//hi! nice to meet u</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());       <span class="comment">//HI! NICE TO MEET U</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleUpperCase()); <span class="comment">//HI! NICE TO MEET U</span></span><br></pre></td></tr></table></figure><p><strong>字符串的子串搜索</strong></p><p>在开发中有时候我们需要检查某个字符串中是否存在指定的字符或者是子字符串，这时候就需要用到JavaScript提供的子串搜索方法，它们是<code>indexOf()</code>和<code>lastIndexOf()</code>方法。这两个方法的核心区分在于 <code>indexOf()</code> 方法从前往后搜索而 <code>lastIndexOf()</code> 方法从后往前搜索。</p><p><strong><code>语法</code></strong> <code>string.indexOf(substring,[start])</code>  <code>string.lastIndexOf(substring,[start])</code><br><strong><code>参数</code></strong> <code>substring</code>表示要搜索的字符(子字符串)。<br><strong><code>参数</code></strong> <code>start</code> 是可选的整数值用来指定开始搜索的位置，合法值为 <a href="">0 ~ string.length-1</a>。<br><strong><code>说明</code></strong> <code>indexOf()方法</code>默认从第一个字符开始搜索，<code>lastIndexOf()方法</code>则默认从最后一个字符开始。<br><strong><code>结果</code></strong> 若没有找到指定字符(子串)就返回-1，否则就返回找到的子串中第一个字符的位置。<br><strong><code>备注</code></strong> 在字符串中第一个字符的位置为 0，最后一个字符的位置为string.length -1 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello ! Hello wendingding."</span>;</span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="string">"ding"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(sub1));     <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(sub1)); <span class="comment">//8</span></span><br><span class="line"><span class="comment">/*indexOf 前——&gt;后   lastIndexOf 后--&gt;前*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(sub2));     <span class="comment">//17</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(sub2)); <span class="comment">//21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*测试第二个参数[start]的使用情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(sub1,<span class="number">2</span>));   <span class="comment">//8 查找的范围缩小为"llo ! Hello wendingding."</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"123456"</span>.lastIndexOf(<span class="string">"3"</span>,<span class="number">1</span>));  <span class="comment">//-1 查找范围为"12"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"123456"</span>.lastIndexOf(<span class="string">"3"</span>,<span class="number">4</span>)); <span class="comment">//2 查找范围为"12345"</span></span><br></pre></td></tr></table></figure></p><p><strong>字符串的子串切割</strong></p><p>JavaScript字符串提供了<code>split()</code>方法来将一个字符串切割为数组。</p><p><strong><code>语法</code></strong> <code>string.split(delimiter,limit)</code><br><strong><code>参数</code></strong> <code>delimiter</code>是用来切割(分割)的字符串或正则表达式，<code>limit</code>用于指定数组长度(默认不限制)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"苹果,香蕉,橙子,榴莲,水蜜桃"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"javaScript ios java go python perl"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-以逗号来分隔切割字符串为数组*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">","</span>));      <span class="comment">//["苹果", "香蕉", "橙子", "榴莲", "水蜜桃"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-以特殊字符来切割*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a|b|c|d"</span>.split(<span class="string">"|"</span>)); <span class="comment">//["a","b","c","d"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:2:3:4"</span>.split(<span class="string">":"</span>)); <span class="comment">//["1","2","3","4"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-对比参数是字符串和正则表达式的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="string">" "</span>));     <span class="comment">//["javaScript","ios","java","go","python","perl"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.split(<span class="regexp">/\s+/</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*04-以空字符串分隔切割字符串为数组，每个字符都切割*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">""</span>));</span><br><span class="line"><span class="comment">//["苹", "果", ",", "香", "蕉", ",", "橙", "子", ",", "榴", "莲", ",", "水", "蜜", "桃"]</span></span><br><span class="line"><span class="comment">/*说明：这种方式常用来把完整的单词切割成字符*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.split(<span class="string">""</span>));   <span class="comment">//["h","e","l","l","o"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*05-limit参数的使用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.split(<span class="string">""</span>,<span class="number">3</span>)); <span class="comment">//["h","e","l"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">","</span>,<span class="number">3</span>));   <span class="comment">//["苹果", "香蕉", "橙子"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*06-匹配的分隔符在开头或者结尾*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.split(<span class="string">"he"</span>)); <span class="comment">//["","llo"];</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.split(<span class="string">"lo"</span>)); <span class="comment">//["hel",""];</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"helohe"</span>.split(<span class="string">"he"</span>));<span class="comment">//["","lo",""];</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>  <code>split()</code>方法常用来处理高度结构化的字符串，在开发中经常使用。<a href="">在使用split()来切割字符串的时候，得到的数组中每个元素都是字符串类型(得到的一定是字符串数组)，且指定的分隔符不可能出现在数组元素中</a>。如果分隔符匹配给定字符串的开头或者是结尾内容，那么返回数组的第一个元素和最后一个元素将是空字符串(参考上文代码的06)。</p><p><strong>获取字符串的指定字符(编码)</strong></p><p>JavaScript语言提供了<code>charAt()</code>和<code>charCodeAt()</code>方法来获取字符串中的指定字符或字符编码。</p><p><strong><code>语法</code></strong> <code>string.charAt(n)</code> <code>string.charCodeAt(n)</code><br><strong><code>作用</code></strong>  <code>charAt()</code>用于获取字符串中的第<code>n个字</code> ，<code>charCodeAt()</code>方法获取的是第<code>n个字符的编码</code>。<br><strong><code>说明</code></strong> 字符串的第一个字符的索引编号为0，长度为<a href=""> string.length - </a>。<br><strong><code>备注</code></strong> JavaScript中并没有字符数据类型，所以返回的<code>某个字符</code>其实是一个长度为1的字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;hello world&quot;;</span><br><span class="line">/*charAt方法返回的是指定位置(索引)的字符*/</span><br><span class="line">console.log(str[0]);                    //&quot;h&quot; 也可以直接使用索引下标访问</span><br><span class="line">console.log(str.charAt(0));             //&quot;h&quot;</span><br><span class="line">console.log(str.charAt(1));             //&quot;e&quot;</span><br><span class="line">console.log(str.charAt(str.length -1)); //&quot;d&quot;</span><br><span class="line"></span><br><span class="line">/*注意：如果charAt的参数不在 0 ~ length-1范围内，则返回空字符串*/</span><br><span class="line">console.log(str.charAt(-1));            //&quot;&quot;</span><br><span class="line">console.log(str.charAt(str.length));    //&quot;&quot;</span><br><span class="line"></span><br><span class="line">/*charCodeAt方法返回的是指定位置(索引)字符对应的字符编码*/</span><br><span class="line">console.log(str.charCodeAt(0));         //104</span><br><span class="line">/*注意：如果charCodeAt的参数不在 0 ~ length-1范围内，则返回NaN*/</span><br><span class="line">console.log(str.charCodeAt(-1));        //NaN</span><br><span class="line">console.log(str.charCodeAt(str.length));//NaN</span><br></pre></td></tr></table></figure></p><p><strong>编码</strong> <code>charCodeAt()</code>方法返回的字符编码指的是<code>Unicode编码</code>，为16位整数，取值在0~65535之间。</p><blockquote><p>有时候我们需要根据Unicode编码来创建字符串，因此JavaScript提供了和<code>charCodeAt()</code>相反的方法<code>fromCharCode()</code>，该方法定义在String构造函数身上是一个静态方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法：String.fromCharCode(c1,c2,c3,...)*/</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">String</span>.fromCharCode(<span class="number">104</span>,<span class="number">105</span>,<span class="number">32</span>,<span class="number">44</span>,<span class="number">32</span>,<span class="number">88</span>,<span class="number">105</span>,<span class="number">97</span>,<span class="number">32</span>,<span class="number">33</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);                    <span class="comment">//hi , Xia !</span></span><br></pre></td></tr></table></figure><p><strong>字符串的截取</strong></p><p>字符串截取是编程中经常用到的操作，JavaScript提供了<code>slice()</code>、<code>substr()</code>和<code>substring()</code>三个方法来实现字符串的截取操作，这三个方法在使用的时候<span style="color:#f08"> 很像但是又不太一样</span>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base29.png?raw=true"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*截取字符串的方法比较*/</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="string">"hi 文顶顶"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*01-如果只传递一个参数，表现一致*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">3</span>));     <span class="comment">//文顶顶 默认截取 3 ~ test.length-1的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">3</span>));    <span class="comment">//文顶顶</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">3</span>)); <span class="comment">//文顶顶</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-传递第二个参数</span></span><br><span class="line"><span class="comment">* slice(start,end)     (开始截取的位置，结束截取的位置[不包含])</span></span><br><span class="line"><span class="comment">* substr(start,length) (开始截取的位置，截取的长度)</span></span><br><span class="line"><span class="comment">* substring(from,to)   (开始位置，结束位置)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">3</span>,<span class="number">4</span>));     <span class="comment">//文</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">3</span>,<span class="number">4</span>));    <span class="comment">//文顶顶</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">//文</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong> 我们在给这些截取字符串的方法传递参数的时候，是可以传递负值的，如果传递的值是负数那么这三个方法将表现出巨大的差异，在使用的时候要注意区分。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">"hi 文顶顶"</span>;</span><br><span class="line"><span class="comment">/*01-参数为负数的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">-2</span>));              <span class="comment">//"顶顶" 倒数第三个(索引值为 -2 + test.length-1)</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">-2</span> + test.length));<span class="comment">//"顶顶"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">-2</span>));             <span class="comment">//"顶顶"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*substring方法的参数不能为负数，如果是负数那么默认转换为0*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">-2</span>));          <span class="comment">//"hi 文顶顶"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-更复杂(两个参数)的情况*/</span></span><br><span class="line"><span class="comment">/*slice方法中第二个参数为负数，那么将 + string.length*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">3</span>,<span class="number">-1</span>));           <span class="comment">//"文顶"  等价于slice(3,5)</span></span><br><span class="line"><span class="comment">/*substr方法中第二个参数为负数，那么转换为0*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">3</span>,<span class="number">-1</span>));          <span class="comment">//""     等价于substr(3,0)</span></span><br><span class="line"><span class="comment">/*substring方法中第二个参数为负数，会先转换为0，然后比较两个参数的大小再调整*/</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">3</span>,<span class="number">-1</span>));       <span class="comment">//"hi "  等价于test.substring(0,3)</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">3</span>,<span class="number">1</span>));        <span class="comment">//"i "   等价于test.substring(1,3)</span></span><br></pre></td></tr></table></figure></p><p><strong>备注</strong> <code>substring()</code>方法会将两个参数中较小的数值作为开始位置，将较大的数值作为结束位置，因此像上面示例代码中的<code>test.substring(3,1)</code>这行代码，相当于调用了<code>test.substring(1,3)</code>。</p><blockquote><p><code>substring()</code>方法的参数不接受负值，如果传递了负值那么总是会被转换为0。<code>substr()</code>方法已经不再在ECMAScript的内容，已经被弃用。</p></blockquote><p><strong>清除字符串前后空格</strong></p><p>在早期的时候，JavaScript中并没有专门用来清除字符串前后N各空格的方法可以使用。但是，在开发中又确实有这样的需求，譬如我们在获取用户的表单输入后往往需要先做清空格处理和校验之后才提交给服务器端，以前在处理这种开发场景的时候可能需要自己来封装一个专门的方法或者直接使用jQuery框架中的<code>$.trim()</code>方法。庆幸的是在ES5中，JavaScript为我们提供了这样一个trim方法，它的使用方式非常简单直接调用即可，作用是<a href=""> 清除字符串前后的1个或多个空格</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testStr = <span class="string">" abc def  "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(testStr);         <span class="comment">//" abc def  "</span></span><br><span class="line"><span class="built_in">console</span>.log(testStr.trim());  <span class="comment">//"abc def"</span></span><br></pre></td></tr></table></figure><p class="titleX"><strong>字符串其它说明</strong></p><p>在JavaScript中字符串除了上述介绍的这些方法外，其实还有一些内容。譬如<code>String()函数</code>用来把数字、布尔值等数据转换为字符串，<code>localeCompare()</code>方法用于比较两个字符串的顺序，<code>toString()</code>和<code>valueOf()</code>方法对于字符串而言很少使用,<code>search()</code>、<code>match()</code>以及<code>replace()</code>方法用来进行字符串的模式匹配，因为它们或多或少的涉及到正则表达式的知识点所以此文不再额外扩展。</p><p>当然，字符串知识模块还有一些内容没有讲解，譬如构造函数以及String对象类型甚至ES6新增的字符串模板等，我并没有把它们纳入到本文的范围中，大家可以自行查阅相关资料和扩展。</p><p><code>string</code>是JavaScript中的一种原始(简单|基本)数据类型，字符串中的length属性指定该字符串中字符的个数(长度)，上文中介绍了字符串操作的诸多常用方法。需要重申的是：<span style="color:red">JavaScript中的字符串是不可变的</span>，文中介绍的所有方法都不允许改变当前字符串的的内容，它们做的只是返回一个全新的字符串，并没有修改原始字符串。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将重点介绍javaScript语言中字符串，操作字符串的常见方法以及具体的代码实现等。&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/js
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [18]-JavaScript流程控制</title>
    <link href="https://weibo.com/u/3800117445/2019/04/12/javaScript%E7%B3%BB%E5%88%97%20%5B18%5D-JavaScript%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://weibo.com/u/3800117445/2019/04/12/javaScript系列 [18]-JavaScript流程控制/</id>
    <published>2019-04-12T00:22:16.000Z</published>
    <updated>2019-04-12T08:58:00.467Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍javaScript语言中流程控制语句，包括顺序、选择和循环三种控制结构以及具体的控制语句如if else 、while等的基本使用。</div><div class="titleX"><strong>流程控制语句简单介绍</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base17.png?raw=true"></p><p>JavaScript程序是一系列可执行语句的集合。</p><p>默认情况下，JavaScript解释器依照语句的编写顺序从头到尾，从上到下的依次执行，这种默认执行代码的结构其实就是 <strong>顺序结构</strong>。而除了顺序结构外，JavaScript中还有一些特定的控制语句能够改变代码的默认(顺序)执行方式，这些特定的控制语句总体上可以分成 <strong>条件语句</strong>、<strong>循环语句</strong>和<strong>跳转语句</strong>。</p><p>以上，根据它们的执行特点我们可以总结出JavaScript中的流程控制结构有三种，分别是<strong><code>顺序结构</code></strong>、<strong><code>选择结构</code></strong> 和 <strong><code>循环结构</code></strong>。 JavaScript程序在执行的时候默认就是 <strong>顺序结构</strong>，因此下文将主要讲解其它两种流程控制结构和基本用法。</p><div class="titleX"><strong>选择控制结构</strong></div><p>JavaScript中选择控制语句主要有<code>单分支(if)</code>、<code>双分支(if..else)</code>、<code>多分支(if..else if...)</code>和<code>多值选择(switch)</code>等，接下来分别对它们进行介绍。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">① 单分支结构</span></p><p> javaScript语言中的单分支选择结构主要使用if语句来实现。</p><p><strong>单分支选择结构流程图</strong><br> <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base18.png?raw=true" height="250px"></p><p><strong>语法示例</strong></p><pre>      if ( condition ) {           expression1;      }</pre> <p> 在上面的语法结构中，if后面的圆括号( <code>condition</code> )编写是判断的条件(通常是条件表达式)，条件表达式的结果应该为布尔类型值(<a href="">如果不是布尔值则会调用Boolean函数转换为布尔值</a>)，在单分支结构语句中，当条件为“真”的时候，执行if里面的代码，当条件为“假”的时候，那么不执行if里面的代码，而会执行 if 语句后面的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*演示 单分支if语句的基本使用*/</span></span><br><span class="line"><span class="comment">/*01 满足条件执行一条语句 &#123;&#125; 可以省略*/</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"-----"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"---end---"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----</span></span><br><span class="line"><span class="comment">//---end---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 满足条件执行代码块*/</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hi,你已经是成年了~"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"该自己对自己负责了。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"---end---"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hi,你已经是成年了~</span></span><br><span class="line"><span class="comment">//该自己对自己负责了。</span></span><br><span class="line"><span class="comment">//---end---</span></span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">② 双分支结构</span></p><p>双分支选择结构主要用<code>if-else</code>语句来实现，在双分支结构中，当条件为“真”的时候执行if语句后面的代码，当条件为“假”的时候执行else后面的代码。</p><p><strong>双分支选择结构流程图</strong></p><p> <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base19.png?raw=true" height="250px"></p><p><strong>语法示例</strong></p><pre>     if ( condition ) {           expression1;      }else {            expression2;      }      expression3;</pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*演示：双分支选择结构的代码示例*/</span></span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">15</span>;</span><br><span class="line"> <span class="keyword">if</span> (age &gt;= <span class="number">18</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"测试结果：成年人"</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"测试结果：未成年人"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"___end____"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//测试结果：未成年人</span></span><br><span class="line"> <span class="comment">//---end---</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">③ 多分支结构</span></p><p>多分支选择结构主要用<code>if-else if-else</code>语句来写，在多分支结构中，当前面的条件为“真”的时候，将不会判断后面的条件，当前面的条件为“假”的时候，会继续判断后面的条件，直到符合条件为止继而执行相应的代码块。</p><p><strong>多分支选择结构流程图</strong><br> <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base20.png?raw=true" height="250px"></p><p><strong>语法示例</strong> </p><pre>     if ( condition1 ) {           expression1;      }else if( condition2 ) {            expression2;      }else if( condition3 ) {            expression3;      }else {            expression4;      }      expression5;</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="number">98</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">60</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"测试成绩：不及格"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &lt;= <span class="number">75</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"测试成绩：良好"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &lt;= <span class="number">85</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"测试成绩：优秀"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"测试成绩：优秀+"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"___end____"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试成绩：优秀+</span></span><br><span class="line"><span class="comment">//___end____"</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong> 在多分支语句中，当条件表达式满足前面的条件时，会执行前面的语句，尽管布尔语句同时也满足后面的条件，但并不会再执行后面的分支语句。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">④ 多值选择结构</span></p><p> 多值选择结构主要通过<code>switch-case</code>语句来实现。</p><p><strong>多值选择结构流程图</strong><br>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base21.png?raw=true" height="300px"></p><p><strong>多值选择结构语法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:           <span class="comment">//如果n==1,那么从此处开始执行</span></span><br><span class="line">        <span class="comment">//执行代码块1</span></span><br><span class="line">        <span class="keyword">break</span>;        <span class="comment">//停止执行switch语句</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:           <span class="comment">//如果n==2,那么从此处开始执行</span></span><br><span class="line">        <span class="comment">//执行代码块2</span></span><br><span class="line">        <span class="keyword">break</span>;        <span class="comment">//停止执行switch语句</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:           <span class="comment">//如果n==3,那么从此处开始执行</span></span><br><span class="line">        <span class="comment">//执行代码块3</span></span><br><span class="line">        <span class="keyword">break</span>;        <span class="comment">//停止执行switch语句</span></span><br><span class="line">    <span class="keyword">default</span>:          <span class="comment">//如果n的值非1\2\3，那么执行下面的代码</span></span><br><span class="line">        <span class="comment">//执行代码块4</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 当switch后面圆括号()中表达式的值与某个case后面的值匹配时，则执行这个case后面的语句。在匹配的时候会按照从上之下的顺序依次执行，<a href="">如果表达式的值与所有case后面的值都不匹配，则执行default后面的语句</a>。</p><p> 语句中的 <code>break</code> 用于结束多值选择结构语句，如果没有 <code>break</code> 则会从满足条件的case开始顺序执行完整个switch语句(这种情况被称之为case穿透)，直到遇到break为止。<span style="color:#f08">在大多数情况下，我们都应该使用 break 语句来终止每个 case 语句块</span>。</p><blockquote><p>ECMAScript标准允许每个case关键字跟随任意的表达式。在执行的时候，会先计算switch后面()中的表达式，然后按照从上到下的顺序来计算每个case后面的表达式，直到case表达式的值和switch后面表达式的值匹配位置。需要注意的是，<code>它们在进行匹配的时候实际上使用的是全等判断</code>(即不会进行有任何类型的转换）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> day=<span class="keyword">new</span> <span class="built_in">Date</span>().getDay();</span><br><span class="line"><span class="keyword">switch</span> (day)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  x=<span class="string">"Today it's Sunday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  x=<span class="string">"Today it's Monday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  x=<span class="string">"Today it's Tuesday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  x=<span class="string">"Today it's Wednesday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">  x=<span class="string">"Today it's Thursday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">  x=<span class="string">"Today it's Friday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">  x=<span class="string">"Today it's Saturday"</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class="tip"><strong>备注</strong> 虽然我们在开发中大多数情况下，<code>default</code> 语句都是出现在switch结构的末尾，位于所有case的后面，但实际上 default 可以被卸载switch语句内的任何位置。</p><div class="titleX"><strong>循环控制结构</strong></div><p>和大多数编程语言一样，JavaScript语言中的循环控制结构也无非<code>while</code>、<code>do-while</code>以及<code>for</code>循环三种。<a href=""><strong>说明</strong> JavaScript中主要用来枚举对象的 for..in 、数组的 forEach 方法、map 方法以及新标准中的 for..of 等循环遍历方法，在此处暂不做介绍</a>。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">while循环结构</span></p><p>执行 <code>while循环结构</code> 语句的时候，先判断while后面的条件是否为“真”，如果为“真”那么就执行一遍循环体，然后继续检查条件是否为“真”，重复这个过程，直到while条件为“假”时停止。</p><p>如果条件一直为“真”，循环体中又没有结束循环的语句时，代码就会陷入到死循环。</p><p><strong>while循环流程图</strong></p><p>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base22.png?raw=true" height="300px"></p><p><strong>while循环语法和代码示例</strong></p><pre>    while(condition)    {        expression;    }</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"第"</span>+(i + <span class="number">1</span>)+<span class="string">"次打印，大家好，我是陆超！真好 "</span>);</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第1次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第2次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第3次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第4次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第5次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第6次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第7次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第8次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">第9次打印，大家好，我是陆超！真好</span></span><br><span class="line"><span class="comment">第10次打印，大家好，我是陆超！真好 </span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">do-while循环结构</span></p><p><strong>do-while循环流程图</strong><br>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base23.png?raw=true" height="300px"></p><p><strong>do-while循环语法和代码示例</strong></p><pre>    do{        expression;    }while(condition);</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"The number is "</span> + i);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i&lt;<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"循环结束后i的值为,"</span>,i);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The number is 0</span></span><br><span class="line"><span class="comment">The number is 1</span></span><br><span class="line"><span class="comment">The number is 2</span></span><br><span class="line"><span class="comment">The number is 3</span></span><br><span class="line"><span class="comment">The number is 4</span></span><br><span class="line"><span class="comment">循环结束后i的值为, 5</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><code>do/while循环</code>和<code>while循环</code>非常相似，它们的区别在于<code>do-while循环</code>是在循环的尾部而不是顶部检测循环表达式是否满足条件，这也意味着<code>do-while循环</code>的循环体将至少会执行一次。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">for循环结构</span></p><p><strong>for循环</strong> 提供了一种更方便的循环控制结构，它在while/do-while循环模式的基础上进行了简化。<strong>for循环语句</strong> 直接将<span style="color:#f08">循环条件的初始化、检测和更新</span>三步操作明确的声明为语法的一部分，更直接简洁。</p><p><strong>for循环流程图</strong><br>  <img src="https://github.com/flowerField/Source/blob/master/Blog/js_base24.png?raw=true" height="350px"></p><p><strong>for循环语法</strong></p><pre>    for(initialization; condition; increnment){        expression;    }</pre><p>在 for 循环中，<code>initialization</code>(初始化表达式); <code>condition</code>(循环条件表达式); <code>increnment</code>(计数器变量更新)三个表达式之间需要使用分号来进行分隔，它们分别负责计数器的初始化操作、循环条件判断以及循环计数器变量的更新操作。接下来，简单说明for循环的工作机制。</p><p>在整个for循环结构中，<a href=""><code>initialization</code> 初始化表达式只会在循环开始前执行一次，然后检查<code>condition</code> 循环条件表达式的值是否为”真”，如果为”真”那么就执行循环体中的代码，最后执行<code>increnment</code> 计数器变量更新表达式。然后，接着检查循环条件的值是否为”真”，如果为”真”那么就执行循环体，重复这个过程</a>，直到循环条件的值为”假”或者在循环体中遇到break语句才会结束循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*嵌套for循环实现打印99乘法表*/</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;table&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j&lt;= i; j++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;td&gt;"</span>+j+<span class="string">"x"</span>+i+<span class="string">"="</span>+i*j+<span class="string">"&lt;/td &gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/table&gt;"</span>);</span><br></pre></td></tr></table></figure><p><strong>打印九九乘法表</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base25.png?raw=true"></p><p class="tip"><strong>备注</strong> 在 for 循环中的三个表达式中任何一个都可以忽略，省略三个都可以忽略，但至少要保持其结构的完整性(即不能省略两个分号)，最简单形式是<code>for( ; ; ){ ... }</code>，不过这将构成一个死循环同 <code>while(true){...}</code>一样。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍javaScript语言中流程控制语句，包括顺序、选择和循环三种控制结构以及具体的控制语句如if else 、while等的基本使用。&lt;/div&gt;

&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;流程控制语句简单介绍&lt;/str
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [17]-JavaScript的运算符</title>
    <link href="https://weibo.com/u/3800117445/2019/04/10/javaScript%E7%B3%BB%E5%88%97%20%5B17%5D-JavaScript%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://weibo.com/u/3800117445/2019/04/10/javaScript系列 [17]-JavaScript的运算符/</id>
    <published>2019-04-10T00:22:16.000Z</published>
    <updated>2019-04-11T09:42:56.306Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍javaScript语言中的运算符(<code>operator</code>)，包括但不限于算术运算符、逻辑运算符、关系运算符以及赋值运算符等内容，而对于位运算符及关键字运算符则仅会做简单说明。</div><div class="titleX"><strong>运算符简介</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base12.png?raw=true"></p><p>JavaScript语言中的运算符如果按照<code>符号</code>来划分那么总体可以分成<strong>标点符号所表示的运算符</strong>和<strong>关键字运算符</strong>两大类，其中前者指代的是类似于<code>+</code>、<code>*</code>、<code>&amp;&amp;</code>、<code>==</code>等运算符，而后者指代的是类似于<code>in</code>、<code>delete</code>、<code>typeof</code>以及<code>instanceof</code>的运算符。需要说明的是，本文只介绍前者，也就是所谓<strong>标点符号所表示的运算符</strong>。</p><p>其实，如果按照运算符的作用和具体使用方式来划分，又可以分成如上图所示的<strong>基本算术运算符</strong>、<strong>逻辑运算符</strong>、<strong>关系运算符</strong>、<strong>赋值运算符</strong>等几种，而这也是开发中习惯的分类方式。听上去感觉非常繁杂甚至让人害怕，其实 enmmm ~ 大可不必 <a href=""><strong> : )</strong></a></p><div class="titleX"><strong>运算符基本使用</strong></div><p>接下来，我将分别介绍JavaScript中各种类型的运算符，包括它们都有哪些具体的运算符，应该如何使用，使用的示例代码以及额外的注意点等(位运算符不在本文说明的范围，有兴趣的朋友可以参考<a href="http://wendingding.com/2018/08/03/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20XOR/" target="_blank" rel="noopener"> 数据安全系列 XOR </a>这篇文章。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">基本算术运算符</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base14.png?raw=true"></p><p>在这里我们先介绍基本的算术运算符，它们是 <a href="">*(乘法)、/(除法)、+(加法)、-(减法)和 %(求余|模运算)</a>。这些运算符中，除了<code>+(加法)</code>稍微复杂点外，其余的四种运算符都很简单，就是简单的求积、求商、差以及余数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">8</span>,num2 = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基本的算术运算符*/</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 + num2);     <span class="comment">//34</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 - num1);     <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 - num2);     <span class="comment">//-18</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 * num2);     <span class="comment">//208</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 / num2);     <span class="comment">//0.3076923076923077</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 / num1);     <span class="comment">//3.25</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 % num1);     <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 % num2);     <span class="comment">//8</span></span><br></pre></td></tr></table></figure><p><strong>算术运算符的使用注意点说明</strong></p><blockquote><p>① 除加法外，其他运算符在必要时会将操作数转换为数字，如<code>无法转换则结果为NaN</code>。<br>② 除数为0的结果为正无穷大或者是负无穷大，而<code>0/0的结果是NaN</code>。<br>③ 模(%)运算中，计算的结果和第一个操作数的符号保持一致，且模运算也适用于整数和浮点数。<br>④ 加法(+)可以对两个数字做加法，也可以用来连接字符串，具体的情况可以参考下面的示例代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*算术运算符的使用注意点*/</span></span><br><span class="line"><span class="comment">/*01 默认把非数字转换为数字，如果无法转换则转换为NaN,最终结果为NaN*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> - <span class="number">3</span>);            <span class="comment">//9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> / <span class="number">3</span>);            <span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12a"</span>* <span class="number">3</span>);            <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 考虑0作为除数的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> / <span class="number">0</span>);            <span class="comment">//Infinity   无穷大</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-12</span>  / <span class="number">0</span>);            <span class="comment">//-Infinity  负无穷大</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span>   / <span class="number">0</span>);            <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 模运算的符号问题，以及在浮点数中的应用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span>  % <span class="number">1</span>  );         <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-12"</span> % <span class="number">5</span>  );         <span class="comment">//-2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"-12"</span> % <span class="number">-5</span> );         <span class="comment">//-2  模运算结果的符号只和第一个操作数相关</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">6.5</span>  % <span class="number">2.1</span>);         <span class="comment">//0.19999999999999973</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04 加法用来拼接字符串的用法和注意点*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">2</span>);               <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hi"</span> + <span class="string">" XiaoXia"</span>);   <span class="comment">//"Hi XiaoXia"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>  + <span class="string">"3"</span>);          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>  +  <span class="number">3</span> );          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">2</span>   + <span class="string">"3"</span>);          <span class="comment">//"23"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   + <span class="number">2</span> + <span class="string">"Nice"</span> );  <span class="comment">//"3Nice"</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   + (<span class="number">2</span> + <span class="string">"Nice"</span>)); <span class="comment">//"12Nice"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Nice"</span> + <span class="number">1</span> + <span class="number">2</span>);      <span class="comment">//"Nice12"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">true</span>);         <span class="comment">//2 布尔类型的值转换为数字1后再做加法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">false</span>);        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">41</span>   + <span class="literal">null</span>);         <span class="comment">//41  null转换为数字0后再做加法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">41</span>   + <span class="literal">undefined</span>);    <span class="comment">//NaN undefined转换为数字(NaN)后做加法</span></span><br></pre></td></tr></table></figure><p><strong>特别说明</strong> 处理+运算符的时候，如果操作数都是数字那就做加法计算，如果都是字符串那就拼接，如果是此外的其他情况，那运算是默认会执行必要的类型转换，而运算符的行为依赖于类型转换的结果，<span style="color:#f08">加号的转换规则需要优先考虑字符串连接</span>。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">关系运算符</span><br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base15.png?raw=true"></p><p><strong>关系运算符</strong> 用于测试两个值之间的关系,比如”相等”、”大于”等，根据关系是否存在(成立)而返回 <code>true</code> 或者是 <code>false</code>。<a href="">关系表达式总是返回一个布尔值</a>,通常用在if、while以及for语句中用于控制程序的执行流程。下面将依次介绍关系运算符中的比较运算符(<code>&lt;、&lt;=、&gt;、&gt;=</code>) 和 (不)相(全)等运算符。</p><p><strong>比较运算符</strong> 用来检测两个操作数的大小关系(<a href="">数值大小或者字母表的顺序</a>)。需要注意JavaScript字符串是一个由16位整数值组成的序列，字符串的比较本质上是对两个字符串中的字符对应的数值进行比较，而且字符串比较是区分大小写的，所有的大写的ASCII字母都”小于”小写的ASCII字母，<a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">点击查看ASCII表</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*比较运算符的简单使用：返回值均为布尔值*/</span></span><br><span class="line"><span class="comment">/*01-两个操作符都是数字的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>  &lt;  <span class="number">3</span> );        <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span> &lt;  <span class="number">4</span> );        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>  &lt;= <span class="number">3</span> );        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">65</span> &gt;  <span class="number">41</span>);        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">65</span> &gt;= <span class="number">41</span>);        <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-两个操作符都是字符串的情况*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &lt;  <span class="string">"b"</span>  );   <span class="comment">//true  "a"-97 "b"-98</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &lt;  <span class="string">"ba"</span> );   <span class="comment">//true  比较第一位</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ab"</span> &gt;  <span class="string">"ac"</span> );   <span class="comment">//false 比较第二位 b-98 c-99</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span>&lt;  <span class="string">"abx"</span>);   <span class="comment">//true  比较第三位 c-99 x-120</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  &gt;  <span class="string">"2"</span> );    <span class="comment">//false "1"-49 "2"-50</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>  &gt;  <span class="string">"a"</span> );    <span class="comment">//false "A"-65 "a"-97</span></span><br></pre></td></tr></table></figure></p><p><strong>比较运算符</strong> 的操作数可以是任意类型的，但只有<span style="color:orange"> 数字和字符串才能真正的执行比较操作 </span>，其它的操作都将进行类型转换。在进行类型转换的时候，比较运算符更偏爱数字所以会优先把操作数都转换为数字再比较，只有当两个操作数都是字符串的时候才会进行字符串的比较( <code>字母表顺序</code> )。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*如果比较运算符的两个操作数类型不都是字符串和数字的情况~*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span>  &gt;  <span class="number">0</span> );       <span class="comment">//false  "a"转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>  &gt; <span class="string">"c"</span>);       <span class="comment">//false  "c"转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"12"</span> &gt;  <span class="number">10</span>);       <span class="comment">//true   "12"转换为数字12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>   &gt; <span class="literal">undefined</span>); <span class="comment">//false   undefined转换为NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>   &gt; <span class="literal">null</span>);      <span class="comment">//true    null转换为0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-1</span>   &gt; <span class="literal">null</span>);      <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>简单总结下，如果比较运算符的两个操作数类型不同(不全是数字或者不全是字符串)的时候，会<span style="color:#f08">优先把操作数转换为数字。如果操作数中出现NaN(无论是类型转换前还是转换后)，最终结果都将是NaN。</span></p><p><strong>相等(==)和全等(===)运算符</strong> 用于比较两个值是否相等或全等，如果满足则返回 true。其实<a href="">相等(==)和全等(===)的核心区别在于相等仅比较值，而全等需要比较值和类型。</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*相等：仅仅比较值，如果类型不同那么会进行类型转换(限于字符串、布尔值和对象)，优先转换为数字*/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>   == <span class="number">1</span>);         <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  == <span class="number">1</span>);         <span class="comment">//true   "1"先被转换为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1a"</span> == <span class="number">1</span>);         <span class="comment">//false  "1a"先被转换为数字这里得到的是NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="number">1</span>);         <span class="comment">//true   true先被转换为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="string">"1"</span>);       <span class="comment">//true   true先被转换为数字1,"1"被转换为数字1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>  == <span class="literal">NaN</span>);       <span class="comment">//false  NaN和任何的值都不等包括它自己</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true   比较特殊(因为本质上undefined派生自null)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*需要注意：undefined和null在和数字比较的时候并不会转换成NaN和0*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>    == <span class="literal">undefined</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>    == <span class="literal">null</span>);      <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*全等：也称为严格相等，既比较值也比较类型，类型不同则直接返回false*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>  === <span class="number">1</span>);         <span class="comment">//false  类型不同</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> === <span class="number">1</span>);         <span class="comment">//false  类型不同</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">//false  类型不同</span></span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 需要注意区分<code>&quot;==&quot;(相等)</code>、<code>&quot;===&quot;(全等)</code>和<code>&quot;=&quot;(赋值)</code>，此外还有<code>&quot;!=&quot;</code>和<code>&quot;!==&quot;</code>运算符，它们的检测规则刚好是 <strong>相等</strong> 和 <strong>全等</strong> 的求反。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">逻辑运算符</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base16.png?raw=true"></p><p>图示已经列出了JavaScript语言中的三种逻辑运算符(<code>&quot;逻辑非&quot;</code>、<code>&quot;逻辑或&quot;</code>和<code>&quot;逻辑与&quot;</code>)以及它们的具体使用方式，在开发中逻辑运算符常用在条件表达式中(如if语句的条件判断)，下面给出参考代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01-逻辑非 该运算符只有一个操作数，作用是对操作数取反*/</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">true</span>);             <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">0</span>);                <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">undefined</span>);        <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-逻辑或 该运算符需要两个操作数</span></span><br><span class="line"><span class="comment">* 运算规则：如果第一个操作数为真那么就直接返回第一个操作数，否则返回第二个操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">0</span> || <span class="number">1</span>);        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">false</span>);    <span class="comment">//true 返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">1</span> || <span class="number">2</span>);        <span class="comment">//1    返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">2</span> || <span class="number">4</span>);        <span class="comment">//2    返回操作数1</span></span><br><span class="line"><span class="built_in">console</span>.log(  <span class="string">""</span> || <span class="number">5</span>);        <span class="comment">//5    第一个操作数转换为false，返回第二个操作数</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>&gt;<span class="number">2</span> || <span class="string">"Hi"</span>);     <span class="comment">//Hi"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03-逻辑与 该运算符需要两个操作数</span></span><br><span class="line"><span class="comment">* 运算规则：如果第一个操作数为真那么就直接返回第二个操作数，否则返回第一个操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">0</span> &amp;&amp; <span class="number">1</span>);        <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);    <span class="comment">//false 返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">1</span> &amp;&amp; <span class="number">2</span>);        <span class="comment">//2     返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(   <span class="number">2</span> &amp;&amp; <span class="number">4</span>);        <span class="comment">//4     返回操作数2</span></span><br><span class="line"><span class="built_in">console</span>.log(  <span class="string">""</span> &amp;&amp; <span class="number">5</span>);        <span class="comment">//""</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span>&gt;<span class="number">2</span> &amp;&amp; <span class="string">"Hi"</span>);     <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">其它常用运算符</span></p><p>在最后，再简单介绍JavaScript语言中的<code>赋值运算符</code>、<code>自增自减运算符</code>以及特殊的<code>三元运算符</code>。</p><p><strong>赋值运算符</strong> JavaScript使用<code>=</code>运算符来给变量赋值，该运算符希望它的左操作数是一个左值(一个变量或者是对象属性)，而它的右操作数可以是任意类型的任意值。需要注意的是，<code>=</code>的优先级很低，且它的结合性是从右至左(即如果一个表达式中出现了多个赋值运算符，那么运算的顺序是从右至左的)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">8.26</span>;             <span class="comment">//将变量a的值设置为8.26</span></span><br><span class="line">    a = <span class="string">"Xia"</span>;            <span class="comment">//二次赋值</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> i,j=k=o=<span class="number">408</span>;          <span class="comment">//把j、k、o三个变量初始化为408</span></span><br><span class="line"><span class="built_in">console</span>.log(i, j, k,o);   <span class="comment">//undefined 408 408 408</span></span><br></pre></td></tr></table></figure></p><p><strong>带操作的赋值运算符</strong> 主要有<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>以及<code>%=</code>等，当然还包括<code>&lt;&lt;=</code>等位操作符和赋值操作符的组合(此文不涉及位操作符)。这里列出的这些运算符它们其实是算术运算符和赋值运算符的组合，是一种常用的简写形式，下面给出示例代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a += b);  <span class="comment">//等价于 a = a + b    3 (这是a更新后的值)</span></span><br><span class="line"><span class="built_in">console</span>.log(a -= b);  <span class="comment">//等价于 a = a - b    1</span></span><br><span class="line"><span class="built_in">console</span>.log(a *= b);  <span class="comment">//等价于 a = a * b    2</span></span><br><span class="line"><span class="built_in">console</span>.log(a /= b);  <span class="comment">//等价于 a = a / b    1</span></span><br><span class="line"><span class="built_in">console</span>.log(a %= b);  <span class="comment">//等价于 a = a % b    1</span></span><br></pre></td></tr></table></figure></p><p>现在，我们来看开发中经常使用的<code>自增(++i或i++)</code>和<code>自减(--i或i--)</code>运算符，它们的作用是在当前值的基础上+1或者是-1，而<code>++i</code>和<code>i++</code>对于i这个变量本身而言没区别，它们的区别在于如果有涉及返回值的操作，那么<code>++i</code>的更新会体现在返回值中(换句话说就是先对变量的+1，然后把结果返回)，而<code>i++</code>则不会(先把i返回，然后再执行变量的+1操作)，自减运算符同理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*说明：i++ 等价于 i = i + 1*/</span></span><br><span class="line"><span class="keyword">var</span> i  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> r1 = i++;     <span class="comment">//先把i的值赋值给r1,然后在执行i+1</span></span><br><span class="line"><span class="built_in">console</span>.log(i);   <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(r1);  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> r2 = ++j;     <span class="comment">//先执行j+1,然后把j+1的值赋值给r2</span></span><br><span class="line"><span class="built_in">console</span>.log(j)    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(r2);  <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*思考：var k = 0; console.log(k++ + ++k + k  + k++);*/</span></span><br></pre></td></tr></table></figure></p><p><strong>条件运算符( ? : )</strong> 也被称为三元运算符，因为该运算符需要三个操作数，语法为<code>**条件表达式？表达式1：表达式2**</code>,其运算的规则是<span style="color:#f08">检查条件表达式的值，如果该值为真则返回表达式1，否则返回表达式2</span>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> &lt; <span class="number">2</span> ? <span class="string">"小于"</span> : <span class="string">"大于"</span>;              <span class="comment">//条件表达式1&lt;2的结果为真(true)</span></span><br><span class="line"><span class="built_in">console</span>.log(a);     <span class="comment">//小于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = (<span class="number">1</span> &lt; <span class="number">2</span>) &amp;&amp; (<span class="number">3</span> &gt; <span class="number">5</span>) ? <span class="string">"看书"</span> : <span class="string">"睡觉"</span>;<span class="comment">//条件表达式的结果为真(false)</span></span><br><span class="line"><span class="built_in">console</span>.log(b);    <span class="comment">//睡觉</span></span><br></pre></td></tr></table></figure><p class="tip"><strong>运算符的优先级备注</strong> 我们在编写JavaScript表达式的时候，需要注意运算符是有优先级的，譬如<code>var a = x + y * b;</code>这行代码，因为 乘法运算符比 加法运算符的优先级，其次是等号赋值运算符，因此其执行顺序是先计算 <code>y * b</code>，然后再 <code>+ x</code>的值，最终才把结果赋值给a。在开发中，我们可以通过圆括号来强行指定运算顺序。如果<code>var a = (x + y) * b;</code>这样写代码，那么就先加再乘最后才进行赋值操作。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍javaScript语言中的运算符(&lt;code&gt;operator&lt;/code&gt;)，包括但不限于算术运算符、逻辑运算符、关系运算符以及赋值运算符等内容，而对于位运算符及关键字运算符则仅会做简单说明。&lt;/div&gt;

&lt;div class=&quot;
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [16]-JavaScript语言基础</title>
    <link href="https://weibo.com/u/3800117445/2019/04/09/javaScript%E7%B3%BB%E5%88%97%20%5B16%5D-JavaScript%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>https://weibo.com/u/3800117445/2019/04/09/javaScript系列 [16]-JavaScript语言基础/</id>
    <published>2019-04-09T00:22:16.000Z</published>
    <updated>2019-04-11T01:04:53.721Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍javaScript最基础的知识点，包括但不限于JavaScript的简单介绍、历史、引入方式、变量、标识符命名规范、数据类型以及操作符等内容。</div><div class="titleX"><strong>JavaScript简介</strong></div><p><strong><code>概述</code></strong> JavaScript是一门动态、<code>弱类型</code>的解释型高级编程语言，它基于<code>原型</code>，<code>支持面向对象</code>和函数式编程等多种编程范式，通常简称为js。在世界上的绝大多数网站中都能看到JavaScript的身影，世界上所有的主流浏览器(<a href="https://zh.wikipedia.org/wiki/Google_Chrome" target="_blank" rel="noopener">Chrome</a>、<a href="https://zh.wikipedia.org/wiki/Internet_Explorer" target="_blank" rel="noopener">IE</a>、<a href="https://zh.wikipedia.org/wiki/Firefox" target="_blank" rel="noopener">Firefox</a>、<a href="https://zh.wikipedia.org/wiki/Safari" target="_blank" rel="noopener">Safari</a>、<a href="https://zh.wikipedia.org/wiki/Opera%E7%80%8F%E8%A6%BD%E5%99%A8" target="_blank" rel="noopener">Opera</a>)都支持它。</p><p><strong><code>作者</code></strong> <a href="https://brendaneich.com/" target="_blank" rel="noopener">Brendan Eich</a></p><p><strong><code>背景</code></strong> JavaScript诞生于1995年，其诞生的初衷是为了减轻服务器端的压力而在客户端提供一种表单验证的功能。最初命名为Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名为<code>LiveScript</code>，同年12月，Netscape Navigator 2.0 Beta 3中部署时被重命名为JavaScript，当时网景公司与昇阳电脑公司(<a href="https://zh.wikipedia.org/wiki/%E6%98%87%E9%99%BD%E9%9B%BB%E8%85%A6" target="_blank" rel="noopener">Sun</a>)组成的开发联盟为了让这门语言搭上Java这个编程语言“热词”，将其临时改名为JavaScript(其实就像现在某些网红蹭热度一样)。</p><p><strong><code>标准</code></strong> 1996年11月，网景正式向<code>ECMA（欧洲计算机制造商协会）</code>提交语言标准。1997年6月，ECMA以JavaScript语言为基础制定了<a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">ECMAScript</a>标准规范<a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="noopener">ECMA-262</a>。JavaScript成为了ECMAScript最著名的实现之一。实现ECMAScript规范的语言还有Adobe的<a href="https://zh.wikipedia.org/wiki/ActionScript" target="_blank" rel="noopener">ActionScript</a>和微软的<a href="https://zh.wikipedia.org/wiki/JScript" target="_blank" rel="noopener">JScript</a>。</p><p><strong><code>范围</code></strong> 虽然在大多数情况下，我们都认为ECMAScript和JavaScript表达的是相同的含义，但实际上JavaScript所表达的却比ECMAScript要广泛的多。完整的JavaScript应该由以下三部分组成：</p><blockquote><p>❐ <span class="liYY">ECMAScript</span> 由ECMA-262定义，提供核心语法功能。<br>❐ <span class="liYY">DOM</span>    全称<code>Document Object Model</code>文档对象模型，提供访问和操作网页的API。<br>❐ <span class="liYY">BOM</span>    全称<code>Browser Object Model</code>浏览器对象模型，提供与浏览器交互的方法和接口。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base07.png?raw=true"></p><p><strong><code>历史</code></strong> ECMAScript迄今已经历多个版本的迭代，下面给出主要的版本历史。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base09.png?raw=true"><br><strong><code>关系</code></strong> ECMAScript是标准(规范)，JavaScript是实现。H5是一种新的技术，JS用于实现H5新标签深层的扩展功能。HTML表示网页的核心内容和结构，CSS用于设置网页的样式，JavaScript控制网页的行为。</p><p><strong><code>应用</code></strong> JavaScript主要用于浏览器Web、物联网、游戏、桌面和移动应用开发和以及服务器端的开发。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base08.png?raw=true" height="200px"></p><p><strong><code>参考</code></strong> <a href="http://ecma-international.org/" target="_blank" rel="noopener">ECMA官网</a> <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf" target="_blank" rel="noopener">ECMA-262规范PDF文件</a> <a href="https://brendaneich.com/" target="_blank" rel="noopener">布兰登·艾克博客</a> </p><div class="titleX"><strong>JavaScript初体验</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">在html页面中使用JavaScript</span></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base01.png?raw=true" height="280px"></p><p>在html页面中编写JavaScript代码需要借助script标签，具体的使用方式有两种。<strong><code>① 在页面中嵌入JavaScript代码</code></strong>。在html页面中创建script标签，设置script标签的type属性为text/javascript，并在标签中直接编写JavaScript代码即可。<strong><code>② 在页面中引入外部的js文件</code></strong>。在html页面中创建script标签，把javaScript代码单独保存在.js后缀的文件中，然后通过设置script标签的src属性来引入js文件。</p><p><a href="">script 标签</a>的 type 属性可以省略，默认值即为<code>text/javascript</code>。<br><a href="">script 标签</a>的 属性(节点)主要有：<code>type</code>(类型)、<code>src</code>(资源地址)、<code>async</code>(异步加载)、<code>defer</code>(延迟执行)、<code>charset</code>(字符集)等。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">注释</span> JavaScript遵循C语言的注释风格，支持单行和多行注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单行注释 // </span><br><span class="line">多行注释 /*...*/</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">语句</span></p><p><strong><code>概念</code></strong> 在JavaScript中，可以简单认为一行完整的代码就是一条语句(<code>statement</code>)。<br><strong><code>分类</code></strong> 整体来讲，JavaScript的语句大致可以区分为<code>声明赋值语句</code>和<code>控制语句</code>两种。<br><strong><code>分号</code></strong> JavaScript中使用<code>分号(;)</code>来间隔多条语句，若各语句独占一行那么大部分情况下可省略分号。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">控制输出</span></p><p>JavaScript需要具体的JavaScript引擎(解析器)来解析，该引擎通常由浏览器提供，即JavaScript代码需要运行在浏览器中。JavaScript代码中常见的控制输出方式有以下三种：</p><blockquote><p>❐ <span class="liYY">输出到页面</span>    <code>document.write()</code><br>❐ <span class="liYY">弹出框显示</span>    <code>alert()</code><br>❐ <span class="liYY">控制台输出</span>    <code>console.log()</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 弹出对话框提示*/</span></span><br><span class="line">alert(<span class="string">"喜欢我就点我吧！"</span>);</span><br><span class="line">alert(<span class="string">"小姐姐你好，我是阿狸~"</span>);</span><br><span class="line">alert(<span class="string">"拜拜 &gt;.&lt; "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 直接向在网页中输出内容*/</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"蝉鸣的夏季，刚好遇见你。"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;遇见&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 控制台打印输出*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"文顶顶"</span>);</span><br></pre></td></tr></table></figure><div class="titleX"><strong>变量</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">直接量</span></p><p><strong><code>说明</code></strong> 直接量(<code>literal</code>)指的是程序中直接使用的数据值。</p><p>当一个值(数字、字符串等)直接出现在JavaScript程序中时，我们称之为<code>直接量</code>。</p><p>JavaScript语言中直接量(字面量)有很多，包括数字直接量、字符串直接量、数组直接量、对象直接量以及正则表达式直接量等等，下面简单给出一些直接量的示例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">null;            //空</span><br><span class="line">18;              //数字</span><br><span class="line">19.3;            //小数</span><br><span class="line">"wendingding";   //字符串文本</span><br><span class="line">true;            //布尔值</span><br><span class="line">false;           //布尔值</span><br><span class="line">/abc/gi;         //正则表达式直接量</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">变量基础</span></p><p><strong><code>定义</code></strong> 变量是编程语言中能够存储计算结果或表示值的抽象概念。<br><strong><code>使用</code></strong> 在JavaScript语言中 <span style="color:red">变量需要先声明再使用</span>。<br><strong><code>声明</code></strong> 使用 <code>var</code> 关键字来声明变量，如果省略var关键字那么该变量默认成为全局变量。<br><strong><code>作用</code></strong> 记录特定的内容，并通过变量名来访问它们。<br><strong><code>备注</code></strong> JavaScript变量是无类型的(<code>untype</code>)，任何变量都可以被赋予任何类型的值。<br><strong><code>原理</code></strong> 当使用var关键字声明变量时，计算机会从内存中分配储存空间来存放不同类型的内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*01 先声明两个变量，然后再输出变量的值到控制台*/</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"wendingding"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);                 <span class="comment">//变量的值可以被修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 可以一次性声明多个变量*/</span></span><br><span class="line"><span class="keyword">var</span> address = <span class="string">"北京市"</span>,className = <span class="string">"H5"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(address,className);   <span class="comment">//北京市 H5</span></span><br></pre></td></tr></table></figure></p><p><strong><code>语法说明</code></strong> <code>var name_1 [ = value1][,...,name_n [ = value_n]]]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*声明示例*/</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'&lt;strong&gt;&lt;/strong&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> p,q;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>,y = <span class="number">3</span>,z;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*示例说明</span></span><br><span class="line"><span class="comment">* JavaScript中的=和数学中的=不一样，在JavaScript中=是赋值运算符。</span></span><br><span class="line"><span class="comment">* var a = '&lt;strong&gt;&lt;/strong&gt;';  这句话分成两个部分。</span></span><br><span class="line"><span class="comment">* 左值 ：在等号左侧，是变量名（同时被赋值）</span></span><br><span class="line"><span class="comment">* 右值 ：在等号右侧，是存放进变量中的东西（给变量赋值）</span></span><br><span class="line"><span class="comment">* 备注 ：使用var关键字多次声明同一个变量是无所谓的(正确、无意义也不报错)。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">命名规范</span></p><p><strong>标识符</strong> 标识符(<code>identifier</code>)指的是JavaScript代码中变量、函数、属性的名字，或者函数的参数。标识符(变量)在命名的时候并不能随心所欲，也有对应的规则和要求。下面列出具体的命名规范：</p><blockquote><p>① 标识符可以使用下划线、字母、数字和$符号。<br>② 标识符不能以数字开头。<br>③ 标识符区分大小写(区别于HTML)。<br>④ 标识符不能使用JavaScript的关键字和保留字。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 常见(合法)的标识符命名方式*/</span></span><br><span class="line"><span class="comment">/*纯字母*/</span></span><br><span class="line"><span class="keyword">var</span> age  = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"wendingding"</span>;</span><br><span class="line"><span class="keyword">var</span> stuAge  = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> stuName = <span class="string">"宁夏"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字母、数字、下划线、$的组合*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1.5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> num$ = num1 + num2;</span><br><span class="line"><span class="keyword">var</span> stu_Score = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 错误的命名演示*/</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">if</span> = <span class="number">123</span>;               <span class="comment">//错误：使用关键字</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">super</span> =  <span class="string">"哈哈哈"</span>        <span class="comment">//错误：使用保留字</span></span><br><span class="line"><span class="keyword">var</span> <span class="number">2</span>age = <span class="number">123</span>;             <span class="comment">//错误：数字开头</span></span><br><span class="line"><span class="keyword">var</span> stu-address = <span class="string">"北京市"</span>;  <span class="comment">//错误：使用了非法的-</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">命名风格</span></p><p>JavaScript语言常用的标识符命名风格是<code>驼峰标识法(camel-case)</code>，即标识符的名称由多个单词组合的时候，每个单词的首字母大写以区分。驼峰标识又可以分成大驼峰标识和小驼峰标识，它们的区别在于整个标识符的首字母需要大写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小驼峰标识 var wenDingDing  = &quot;神秘人&quot;;</span><br><span class="line">大驼峰标识 var WenDingDing  = &quot;神秘人&quot;;</span><br></pre></td></tr></table></figure><p>当然，在写代码的时候给标识符命名并非一定要使用驼峰标识，这只是一种建议的风格，譬如有的开发者就喜欢用下划线来连接单词，类似于<a href="">wen_ding_ding</a>、<a href="">stu_Name</a>这样。类似的还有匈牙利命名法等，但在JavaScript编程中不建议使用。</p><p><strong><code>JavaScript规定的关键字</code></strong> 关键字通常用于执行特定的操作。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base05.png?raw=true" width="600px"></p><p><strong><code>JavaScript规定的保留字</code></strong> 保留字是给语言未来发展而预留的。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base06.png?raw=true" width="600px"></p><div class="titleX"><strong>数据类型</strong></div><blockquote><p>在编程语言中，能够表示并操作的值的类型被称为数据类型(<code>type</code>)，能够支持多种数据类型是每一门编程语言的基本特征。在编写程序的时候，如果我们需要将某个(些)值保存起来以备将来使用时，就会将该 <strong>值</strong> <code>赋值</code>给一个<code>变量</code>(将值保存到变量中)。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base02.png?raw=true"></p><p>JavaScript语言的数据类型可以简单的分成<code>基本(简单)类型</code>和<code>复杂(复合)类型</code>。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base03.png?raw=true" height="200px"></p><p>基本类型主要包括：<code>字符串(string)</code>、<code>数值(number)</code>、<code>布尔值(boolean)</code>、<code>Null</code>和<code>undefined</code>五种。其中Null类型有一个值，即<a href="">null</a>表示为空，而undefined类型也只有一个对应值<a href="">undefined</a>，表示变量未定义(即声明变量后未给变量赋值)。</p><p>复杂类型主要是对象类型，包括Object对象、Function函数、RegExp正则等，这里不做具体的展开。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">typeof关键字</span></p><p>如果我们需要判断变量的类型，那么可以使用<span style="color:red"> typeof 关键字(操作符)</span>。</p><p><strong><code>语法</code></strong> <code>typeof 变量  |  typeof(变量)</code><br><strong><code>结果</code></strong> typeof 关键字执行后的结果总是为一个string类型的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*多种类型的变量*/</span></span><br><span class="line"><span class="keyword">var</span> age   = <span class="number">18</span>;                     <span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">var</span> name  = <span class="string">"宁夏"</span>;                  <span class="comment">//字符串类型</span></span><br><span class="line"><span class="keyword">var</span> isFun = <span class="literal">true</span>;                   <span class="comment">//布尔类型值</span></span><br><span class="line"><span class="keyword">var</span> a;                              <span class="comment">//未定义</span></span><br><span class="line"><span class="keyword">var</span> obj   = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">desc</span>:<span class="string">"描述信息"</span>&#125;;   <span class="comment">//Object类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我是fn函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);            <span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> name);           <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> isFun);          <span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);              <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);            <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*typeof的两种使用方式*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);             <span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(fn));            <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);            <span class="comment">//object</span></span><br></pre></td></tr></table></figure></p><p><strong><code>注意</code></strong> 对null执行typeof计算的结果为object,其实这被认为是JavaScript这门语言的一个设计错误。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">字符串类型</span></p><p><strong><code>定义</code></strong> 由〇个或多个16位Unicode字符组成的字符序列。<br><strong><code>表示</code></strong> 字符串可以由双引号或单引号表示。<br><strong><code>操作</code></strong> 可以通过length属性来获取字符串的长度，且多个字符串之间可以通过 + 来进行拼接。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hi ~"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Wendingding!"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = str1 + <span class="string">" "</span> +str2;    <span class="comment">/*字符串的拼接 */</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);              <span class="comment">/*输出结果：Hi ~ Wendingding!*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.length);       <span class="comment">/*输出结果：17 */</span></span><br></pre></td></tr></table></figure></p><p><strong><code>注意</code></strong> JavaScript中的字符串是不可变的，这也就意味着要改变某个变量保存的字符串，那么需要先销毁原来的字符串然后再用另外一个包含新值的字符串来填充该变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">'Hi ! '</span>;</span><br><span class="line">test = test + <span class="string">'Nice to meet u ~'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test);  <span class="comment">//Hi ! Nice to meet u ~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*描述上述代码的内部执行细节</span></span><br><span class="line"><span class="comment">* 说明：上述示例代码中 test变量的值最开始时为Hi ！，而后变成了Hi ! Nice to meet u ~   </span></span><br><span class="line"><span class="comment">*      但这并不意味着字符串是可变的，要想理解这一点需要把变量和字符串区分开来。</span></span><br><span class="line"><span class="comment">* 上述第二行代码的实现过程为(整个过程在浏览器后台处理)：</span></span><br><span class="line"><span class="comment">* [1] 先创建一个能容纳21位字符的新字符串。</span></span><br><span class="line"><span class="comment">* [2] 在新创建的字符串中填充Hi ! 和 Nice to meet u ~内容。</span></span><br><span class="line"><span class="comment">* [3] 销毁原先的Hi ! 和 Nice to meet u ~ 字符串，因为它们没用了。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">布尔类型</span></p><p><strong><code>说明</code></strong> 布尔类型用来表示正确和错误两种状态(同灯泡有开和关两种状态一样)。<br><strong><code>取值</code></strong> 布尔类型(boolean)只有两个值，分别是true和false。<br><strong><code>注意</code></strong> 布尔类型常用于条件表达式，布尔类型的值和字符串以及数值等可以相互转换。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">undefined类型</span> </p><p>undefined类型的值也只有一个，那就是<code>undefined</code>。我们在使用var来声明变量，但是没有对该变量进行初始化的时候，变量的值就为undefined，表示未定义。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">Null类型</span>  </p><p>Null类型的值只有一个，那就是<code>null(关键字)</code>，通常表示空对象指针。<br>注意 ① <span style="color:red">typeof null 的结果为 object 而非 null</span>。<br>注意 ② 实际上，undefined的值派生自null，因此ECMA-262规定它们的相等性测试需要返回true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 布尔类型值*/</span></span><br><span class="line"><span class="keyword">var</span> boolA = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> boolB = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 声明变量但未赋值(未定义)*/</span></span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 设置变量的值为null*/</span></span><br><span class="line"><span class="keyword">var</span> boolA = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(boolA);               <span class="comment">//null 表示空对象</span></span><br><span class="line"><span class="built_in">console</span>.log(test);                <span class="comment">//undefined 未定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*04 测试undefined和null*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">数值类型</span></p><p><strong><code>定义</code></strong> 数值简单说就是数字，在JavaScript语言中数值类型包含整数和浮点数(小数)。<br><strong><code>小数</code></strong> 浮点数就是小数，数值中必须包含一个小数点，小数点后面必须至少有一位数字。<br><strong><code>备注</code></strong> 实际上JavaScript内部并不直接区分整数值和浮点数值，其所有数字均用浮点数值表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 数值的两种类型*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span>;       <span class="comment">/*整型-数据1*/</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">4.0075e7</span>;  <span class="comment">/*整型-数据2  科学计数发*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*浮点数特点：数值中必须包含一个小数点，小数点后面必须至少有一位数字。*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum1 = <span class="number">8.26</span>;  <span class="comment">/*浮点型-数据1*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum2 = <span class="number">1.1</span>;   <span class="comment">/*浮点型-数据2*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum3 = <span class="number">0.5</span>;   <span class="comment">/*浮点型-数据3*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum4 = <span class="number">.8</span>;    <span class="comment">/*浮点型-数据4-不建议*/</span></span><br><span class="line"><span class="keyword">var</span> floatNum5 = <span class="number">3.2e-4</span>;<span class="comment">/*浮点型-数据4 科学计数法*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02 整数和浮点数的默认转换*/</span></span><br><span class="line"><span class="keyword">var</span> intNum1 = <span class="number">10.0</span>;  <span class="comment">/*整数，解析为10*/</span></span><br><span class="line"><span class="keyword">var</span> intNum2 = <span class="number">2.</span>;    <span class="comment">/*整数，解析为2*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 03  浮点数注意点</span></span><br><span class="line"><span class="comment"> * 001 默认，当小数点后面超过6个0，则以科学计数法的方式来表示。</span></span><br><span class="line"><span class="comment"> * 002 浮点数值的最高精度为17位小数，但算术运算时其精度不如整数。</span></span><br><span class="line"><span class="comment"> * 003 JavaScript使用基于IEEE754数值的浮点格式表示，计算因此存在舍入误差问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong><code>进制</code></strong> JavaScript中的数值类型支持多种进制，包括二进制、八进制、十进制和十六进制等。<br><strong><code>说明</code></strong> 在进行算术运算时，所有<a href="">八进制、十六进制的数据最终都会转换为十进制的数据</a>。<br><strong><code>特点</code></strong> 八进制的特点是数字以 <code>0</code> 开头，十六进制则以 <code>0x</code> 或 <code>0X</code> 开头。<br><strong><code>补充</code></strong> 实际上ECMAScript并不支持八进制直接量，且严格模式下八进制直接量被禁止，因此不建议用。十六进制值是<a href=""> 0 ~ 9之间的数字和a(A) ~ f(F)之间的字母 </a>构成，字母对应的数字为10~15。此外，我们还可以通过调用<code>toString</code>方法传递参数的方式来实现进制的转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*进制的转换  通过toString方法*/</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">17</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);              <span class="comment">//默认以十进制的方式打印(数字)  17</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString());   <span class="comment">//默认以十进制的方式打印(字符串)</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">2</span>));  <span class="comment">//设置以二进制的方式打印(字符串) 10001</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">8</span>));  <span class="comment">//设置以八进制的方式打印(字符串) 21</span></span><br><span class="line"><span class="built_in">console</span>.log(num1.toString(<span class="number">16</span>)); <span class="comment">//设置是十六进制的方式打印(字符串)11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二进制、八进制、16进制的数据*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">070</span>);   <span class="comment">//8进制的数据   对应的十进制值为56</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0x11</span>);  <span class="comment">//16进制的数据  对应的十进制数值为17</span></span><br></pre></td></tr></table></figure><p><strong><code>NaN</code></strong> 全称<code>Not a Number</code>(非数值)，NaN用于表示本来要返回数值的操作数而实际未返回的情况。</p><blockquote><p>① 任何涉及NaN的操作都会返回NaN。<br>② <span style="color:red">NaN与任何值都不相等，包括NaN自身</span>。</p></blockquote><p><strong>说明</strong> 上面列出了NaN的两个特点，针对NaN的这两个特点，ECMAScript提供了<a href="">isNaN() 函数</a>。isNaN()函数接收一个参数，该参数可以是任何类型的，该函数在执行的时候会尝试把参数转换为数值，如果参数不能被转换为数值(转换失败)，那么返回true，否则返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"20.3"</span>));   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"5red"</span>));   <span class="comment">//true   无法转换为数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>));     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"red"</span>));    <span class="comment">//true   无法转换为数值</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>二进制浮点数的误差问题</strong> JavaScript在使用数字(实数)的时候，常常只是真实值的一个近似表示。原因就在于JavaScript采用的是<a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE-754浮点数表示法</a>(这是一种二进制浮点数表示法),这种表示法可以精确地表示分数，比如1/2、1/8和1/1024等，而我们开发中常用的反而都是十进制分数，比如1/10、1/100等，神奇的地方就在于这种表示法无法精确的表示类似于0.1 、0.2和0.3这种简单的数字。正是因为上面的原因，所以JavaScript语言中才会存在奇葩的 <a href="http://0.30000000000000004.com/" target="_blank" rel="noopener">0.1 + 0.2 == 0.3</a> 不成立的问题。</p></blockquote><div class="titleX"><strong>类型的转换</strong></div><p>在JavaScript的基本数据类型中，字符串、数值以及其他类型之间是可以相互转换的，而这种转换大概又可以细分成两种，其一是在进行算术运算时默认会执行的<strong><code>自动转换</code></strong>，其二就是<strong><code>强制转换</code></strong>了。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base04.png?raw=true" height="220px"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666">类型间的强制转换</span>  </p><p>强制类型转换需要用到一些特定的函数，这些函数可以是<code>Number()</code>、<code>Bumber()</code>、<code>String()</code>也可以是<code>parseInt()</code>、<code>parseFloat()</code>、<code>toString()</code>等，下面将通过代码来演示它们的具体使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*01 Number(构造)函数把其它类型转换为数值*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>));         <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>));   <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"miaoXia"</span>));   <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"18blue"</span>));    <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"18"</span>));        <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>));        <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>));       <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-1 String函数用于把其它类型转换为字符串*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">null</span>));       <span class="comment">//"null"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">undefined</span>));  <span class="comment">//"undefined"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">123</span>));        <span class="comment">//"123"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">21.5</span>));       <span class="comment">//"21.5"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">-0</span>));         <span class="comment">//"0"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">true</span>));       <span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">false</span>));      <span class="comment">//"false"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*02-2 toString函数</span></span><br><span class="line"><span class="comment">* a、其实其它类型的值直接调用toString方法也能强转为字符串</span></span><br><span class="line"><span class="comment">* b、toString方法可以接收一个参数，该参数用于表示转换时的进制数</span></span><br><span class="line"><span class="comment">* c、如果toString方法的参数缺省，那么默认采用的十进制</span></span><br><span class="line"><span class="comment">* d、null和undefined值无法调用toString方法</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">123</span>).toString());  <span class="comment">//"123"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>.toString());   <span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>.toString());  <span class="comment">//"false"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>.toString());    <span class="comment">//"NaN"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*03 Boolean函数用于将其它类型转换为字符串*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"Nice"</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));       <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">" "</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">123</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));        <span class="comment">//fasle</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>));      <span class="comment">//fasle</span></span><br></pre></td></tr></table></figure><p>在上面的代码示例中Number函数用于将其他类型的数据转换成数字，而<code>parseInt()</code>和<code>parseFloat()</code>函数相对于Number()函数而言更加灵活。</p><p><code>parseInt()</code>函数用于解析整数，如果字符串前缀是0x或0X，则将会被解析为十六进制数。解析规则为：<a href="">跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略数字后面的内容，如果第一个非空格字符是非法的数字直接量，将最终返回NaN</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*parseInt()基本使用*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">" 123"</span>));        <span class="comment">//123 忽略前面的N个空格</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123"</span>));         <span class="comment">//123</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123.59"</span>));      <span class="comment">//123 仅解析为整数</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"-13.14"</span>));      <span class="comment">//-13</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"826 Birthday"</span>));<span class="comment">//826</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"Birthday826"</span>))  <span class="comment">//NaN</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"0.1"</span>))          <span class="comment">//0</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">".1"</span>))           <span class="comment">//NaN 整数不能以.开头</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"0xff"</span>))         <span class="comment">//255 以十六进制来解析</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"071"</span>));         <span class="comment">//71  十进制处理(非八进制)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>parseInt()</code> 被定义为<code>declare function parseInt(s: string, radix?: number): number;</code> 该函数的第一个参数为字符串，它还可以接收第二个参数用于指定数字转换的进制基数，合法的取值范围是2~36。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"111"</span>,<span class="number">2</span>));       <span class="comment">// 7  = 1 * 2 * 2 + 1 * 2 + 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"aa"</span>,<span class="number">16</span>));       <span class="comment">//170 = 10 * 16 + 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"076"</span>,<span class="number">8</span>));       <span class="comment">//62  = 7 * 8 + 6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"077"</span>,<span class="number">10</span>));      <span class="comment">//77</span></span><br></pre></td></tr></table></figure><p><code>parseFloat()</code>函数用于解析浮点数。解析规则为：<a href="">跳过任意数量的前导空格，检索纯数字字符串后面第一个.后的不为数字的字符，并对之前所有的结果进行返回，如果第一个非空格字符是非法的数字直接量，将最终返回NaN，如果没有.则以整数解析的方式处理</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*parseFloat()基本使用*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 123"</span>));            <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 123.55"</span>));         <span class="comment">//123.55</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 8.26 Birthday"</span>));  <span class="comment">//8.26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" Birthday 8.26"</span>));  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0.1"</span>));             <span class="comment">//0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">".1"</span>));              <span class="comment">//0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0xff"</span>));            <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"abc 12.5"</span>));        <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"$12.5"</span>));           <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/js_base10.png?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍javaScript最基础的知识点，包括但不限于JavaScript的简单介绍、历史、引入方式、变量、标识符命名规范、数据类型以及操作符等内容。&lt;/div&gt;

&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;JavaScript
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据安全系列 OpenSSL</title>
    <link href="https://weibo.com/u/3800117445/2019/02/23/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20OpenSSL/"/>
    <id>https://weibo.com/u/3800117445/2019/02/23/数据安全系列 OpenSSL/</id>
    <published>2019-02-22T17:00:00.000Z</published>
    <updated>2019-02-24T10:28:22.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文对密码学中常用的底层库OpenSSL进行简单说明，包括基本介绍、简单使用等内容。</p></blockquote><div class="titleX"><strong>简单介绍</strong></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>是密码学中一个流行的底层密码库，也是SSL和TLS最常见的开源实现。</p><div class="tip"><br><div><strong><code>SSL</code></strong>全称为<code>Secure  Sockets   Layer</code>，<strong>安全套接层协议</strong>( 对网络连接进行加密处理 )。</div><br><div><strong><code>TLS</code></strong>全称为<code>Transport Layer Security</code>，<strong>安全传输层协议</strong>( 由记录协议和握手协议组成 )。</div><br></div><p>SSL协议由<code>Netscape</code>(网景)公司开发，因为应用广泛，到了1999年SSL已经成为互联网上的事实标准。同年，<code>IETF把SSL标准化后改名为TLS，它建立在SSL 3.0协议规范上，是SSL的后续版本</code>。 TLS 和 SSL，两者差别极小，可以简单看做是同一个东西的两个不同阶段。</p><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>是由一些志愿者合作开发的开源工具库，其目标是开发一个强壮的、具有完备功能的商业级工具集，以实现SSL 和 TLS协议以及一个全功能的通用加密库。OpenSSL主要以C语言实现，目前最新稳定版本为2018年9月11日发布的<code>1.1.1版本</code>。</p><p><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> OpenSSL </strong>的主要组成</span></p><div><br>❏  <div class="liYY"><strong>openssl</strong></div>  多用途的命令行工具。<br>❏  <div class="liYY"><strong>libcrypto</strong></div> 常用加密算法库。<br>❏  <div class="liYY"><strong>libssl</strong></div>   实现了SSL及TLS的加密模块应用库。<br></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> </strong>支持许多不同的加密算法：其中包括但不限于<strong>单向散列函数</strong>的 <a href="https://zh.wikipedia.org/wiki/MD5" target="_blank" rel="noopener">MD5</a>、<a href="https://zh.wikipedia.org/wiki/MD4" target="_blank" rel="noopener">MD4</a>、MD2、<a href="https://zh.wikipedia.org/wiki/SHA-1" target="_blank" rel="noopener">SHA-1</a>、<a href="https://zh.wikipedia.org/wiki/SHA-2" target="_blank" rel="noopener">SHA-2</a>、<a href="https://zh.wikipedia.org/wiki/SHA-3" target="_blank" rel="noopener">SHA-3</a>、RIPEMD-160、MDC-2、GOST R 34.11-94、BLAKE2、Whirlpool、SM3等算法，<strong>对称加密</strong>有 <a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener">AES</a>、Blowfish、Camellia、Chacha20、Poly1305、SEED、CAST-128、<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener">DES</a>、IDEA、RC2、RC4、<a href="https://zh.wikipedia.org/wiki/RC5" target="_blank" rel="noopener">RC5</a>、SM4、TDES、GOST 28147-89等算法，以及<strong>非对称加密</strong>的 <a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">RSA</a>、DSA、迪菲-赫尔曼密钥交换、椭圆曲线、SM2、X25519、Ed25519、X448、Ed448、GOST R 34.10-2001等算法。</p><p><strong>参考资料</strong> </p><p><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL官网</a><br><a href="https://zh.wikipedia.org/wiki/OpenSSL" target="_blank" rel="noopener">OpenSSL 维基百科</a><br><a href="https://github.com/openssl" target="_blank" rel="noopener">OpenSSL GitHub组织</a><br><a href="https://www.cnblogs.com/eshizhan/p/4988105.html" target="_blank" rel="noopener">OpenSSL Command-Line HOWTO</a><br><a href="https://oomake.com/download/openssl" target="_blank" rel="noopener">OpenSSL 版本下载地址①</a> &nbsp;<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">OpenSSL 版本下载地址②</a></p><div class="titleX"><strong>opsnssl 命令行简单说明</strong></div><p><strong><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> 的安装</strong></p><p>通常，很多操作系统都会默认安装OpenSSL 工具，我们可以通过在终端中输入<code>openssl version</code>命令来查看和进行验证。</p><p class="tip">早些年，Mac OSX默认自带安装 OpenSSL库，但是因为OpenSSL“心脏病失血”事件，Mac OSX 自 10.11 El Capitan 起，原本默认安装的 OpenSSL 被替换为 LibreSSL 。除Mac外，其它使用LibreSSL 取代 OpenSSL的系统还有 <strong>OpenBSD</strong> (<code>5.6 +</code>)和 <strong>Alpine Linux</strong> (<code>3.5.0 +</code>) 等。<br></p><p>我当前使用的是Mac OSX 系统10.13.3 版本，在终端中输入<code>openssl version</code>命令 可以看到本地显示的是<strong> LibreSSL </strong>的版本，为<code>LibreSSL 2.2.7</code>。<strong>LibreSSL</strong> 是 OpenBSD 开发者在 OpenSSL 爆出心脏出血漏洞之后 fork 的一个分支，旨在提供一个比 OpenSSL 更安全的替代品，更详细的信息可以参考<a href="https://hltj.me/security/2017/05/26/libressl-instead-openssl.html" target="_blank" rel="noopener">扔掉 OpenSSL，拥抱 LibreSSL</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl version</span><br><span class="line">LibreSSL 2.2.7</span><br><span class="line">wendingding$ which openssl</span><br><span class="line">/usr/bin/openssl</span><br></pre></td></tr></table></figure><p><strong>说明</strong> 上面的命令用于检查和验证当前系统中使用的openssl的版本和路径(位置)。<strong>LibreSSL</strong>可以理解为更安全的<strong>OpenSSL</strong>，使用方式几乎一致，接下来我就以电脑中已经安装的<code>LibreSSL 2.2.7</code>版本为例进行说明。在终端查看(输入任意无效命令)该工具支持的所有命令，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">wendingding:openssl wendingding$ openssl help</span><br><span class="line">openssl:Error: &apos;help&apos; is an invalid command.</span><br><span class="line"></span><br><span class="line">Standard commands</span><br><span class="line">asn1parse         ca                certhash          ciphers           </span><br><span class="line">crl               crl2pkcs7         dgst              dh                </span><br><span class="line">dhparam           dsa               dsaparam          ec                </span><br><span class="line">ecparam           enc               engine            errstr            </span><br><span class="line">gendh             gendsa            genpkey           genrsa            </span><br><span class="line">nseq              ocsp              passwd            pkcs12            </span><br><span class="line">pkcs7             pkcs8             pkey              pkeyparam         </span><br><span class="line">pkeyutl           prime             rand              req               </span><br><span class="line">rsa               rsautl            s_client          s_server          </span><br><span class="line">s_time            sess_id           smime             speed             </span><br><span class="line">spkac             ts                verify            version           </span><br><span class="line">x509              </span><br><span class="line"></span><br><span class="line">Message Digest commands (see the `dgst&apos; command for more details)</span><br><span class="line">gost-mac          md4               md5               md_gost94         </span><br><span class="line">ripemd160         sha               sha1              sha224            </span><br><span class="line">sha256            sha384            sha512            streebog256       </span><br><span class="line">streebog512       whirlpool         </span><br><span class="line"></span><br><span class="line">Cipher commands (see the `enc&apos; command for more details)</span><br><span class="line">aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb       </span><br><span class="line">aes-256-cbc       aes-256-ecb       base64            bf                </span><br><span class="line">bf-cbc            bf-cfb            bf-ecb            bf-ofb            </span><br><span class="line">camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  camellia-192-ecb  </span><br><span class="line">camellia-256-cbc  camellia-256-ecb  cast              cast-cbc          </span><br><span class="line">cast5-cbc         cast5-cfb         cast5-ecb         cast5-ofb         </span><br><span class="line">chacha            des               des-cbc           des-cfb           </span><br><span class="line">des-ecb           des-ede           des-ede-cbc       des-ede-cfb       </span><br><span class="line">des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb      </span><br><span class="line">des-ede3-ofb      des-ofb           des3              desx              </span><br><span class="line">rc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc           </span><br><span class="line">rc2-cfb           rc2-ecb           rc2-ofb           rc4               </span><br><span class="line">rc4-40</span><br></pre></td></tr></table></figure><p>通过上面列出的庞大的可选命令项，不难看出OpenSSL工具的强大和庞大，如果需要获取指定算法的帮助信息，只需要在终端输入<code>openssl 算法名称 --help</code>形式的命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl enc -help</span><br><span class="line">usage: enc -ciphername [-AadePp] [-base64] [-bufsize number] [-debug]</span><br><span class="line">    [-engine id] [-in file] [-iv IV] [-K key] [-k password]</span><br><span class="line">    [-kfile file] [-md digest] [-none] [-nopad] [-nosalt]</span><br><span class="line">    [-out file] [-pass arg] [-S salt] [-salt]</span><br><span class="line"></span><br><span class="line"> -A                 Process base64 data on one line (requires -a)</span><br><span class="line"> -a                 Perform base64 encoding/decoding (alias -base64)</span><br><span class="line"> -bufsize size      Specify the buffer size to use for I/O</span><br><span class="line"> -d                 Decrypt the input data</span><br><span class="line"> -debug             Print debugging information</span><br><span class="line"> -e                 Encrypt the input data (default)</span><br><span class="line"> -engine id         Use the engine specified by the given identifier</span><br><span class="line"> -in file           Input file to read from (default stdin)</span><br><span class="line"> -iv IV             IV to use, specified as a hexidecimal string</span><br><span class="line"> -K key             Key to use, specified as a hexidecimal string</span><br><span class="line"> -md digest         Digest to use to create a key from the passphrase</span><br><span class="line"> -none              Use NULL cipher (no encryption or decryption)</span><br><span class="line"> -nopad             Disable standard block padding</span><br><span class="line"> -out file          Output file to write to (default stdout)</span><br><span class="line"> -P                 Print out the salt, key and IV used, then exit</span><br><span class="line">                      (no encryption or decryption is performed)</span><br><span class="line"> -p                 Print out the salt, key and IV used</span><br><span class="line"> -pass source       Password source</span><br><span class="line"> -S salt            Salt to use, specified as a hexidecimal string</span><br><span class="line"> -salt              Use a salt in the key derivation routines (default)</span><br><span class="line"> -v                 Verbose</span><br><span class="line"></span><br><span class="line">Valid ciphername values:</span><br><span class="line"></span><br><span class="line"> -aes-128-cbc              -aes-128-cfb              -aes-128-cfb1            </span><br><span class="line"> -aes-128-cfb8             -aes-128-ctr              -aes-128-ecb             </span><br><span class="line"> -aes-128-gcm              -aes-128-ofb              -aes-128-xts             </span><br><span class="line"> -aes-192-cbc              -aes-192-cfb              -aes-192-cfb1            </span><br><span class="line"> -aes-192-cfb8             -aes-192-ctr              -aes-192-ecb             </span><br><span class="line"> -aes-192-gcm              -aes-192-ofb              -aes-256-cbc             </span><br><span class="line"> -aes-256-cfb              -aes-256-cfb1             -aes-256-cfb8            </span><br><span class="line"> -aes-256-ctr              -aes-256-ecb              -aes-256-gcm             </span><br><span class="line"> -aes-256-ofb              -aes-256-xts              -aes128                  </span><br><span class="line"> -aes192                   -aes256                   -bf                      </span><br><span class="line"> -bf-cbc                   -bf-cfb                   -bf-ecb                  </span><br><span class="line"> -bf-ofb                   -blowfish                 -camellia-128-cbc        </span><br><span class="line"> -camellia-128-cfb         -camellia-128-cfb1        -camellia-128-cfb8       </span><br><span class="line"> -camellia-128-ecb         -camellia-128-ofb         -camellia-192-cbc        </span><br><span class="line"> -camellia-192-cfb         -camellia-192-cfb1        -camellia-192-cfb8       </span><br><span class="line"> -camellia-192-ecb         -camellia-192-ofb         -camellia-256-cbc        </span><br><span class="line"> -camellia-256-cfb         -camellia-256-cfb1        -camellia-256-cfb8       </span><br><span class="line"> -camellia-256-ecb         -camellia-256-ofb         -camellia128             </span><br><span class="line"> -camellia192              -camellia256              -cast                    </span><br><span class="line"> -cast-cbc                 -cast5-cbc                -cast5-cfb               </span><br><span class="line"> -cast5-ecb                -cast5-ofb                -chacha                  </span><br><span class="line"> -des                      -des-cbc                  -des-cfb                 </span><br><span class="line"> -des-cfb1                 -des-cfb8                 -des-ecb                 </span><br><span class="line"> -des-ede                  -des-ede-cbc              -des-ede-cfb             </span><br><span class="line"> -des-ede-ofb              -des-ede3                 -des-ede3-cbc            </span><br><span class="line"> -des-ede3-cfb             -des-ede3-cfb1            -des-ede3-cfb8           </span><br><span class="line"> -des-ede3-ofb             -des-ofb                  -des3                    </span><br><span class="line"> -desx                     -desx-cbc                 -gost89                  </span><br><span class="line"> -gost89-cnt               -gost89-ecb               -id-aes128-GCM           </span><br><span class="line"> -id-aes192-GCM            -id-aes256-GCM            -rc2                     </span><br><span class="line"> -rc2-40-cbc               -rc2-64-cbc               -rc2-cbc                 </span><br><span class="line"> -rc2-cfb                  -rc2-ecb                  -rc2-ofb                 </span><br><span class="line"> -rc4</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>opsnssl + 单向散列函数应用</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 单向散列函数的特点</strong></span></p><blockquote><p><strong>① 散列计算后的密文是定长的。</strong><br><strong>② 明文相同，密文一定相同。</strong><br><strong>③ 明文不同，密文一定不同。</strong><br><strong>④ 计算过程不可逆，算法公开，效率高性能好。</strong></p></blockquote><p><strong>经典加密算法</strong> MD5加密 、SHA1 和 SHA512等<br><strong>散列函数进阶</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）先加盐，然后再进行MD5</span><br><span class="line">2）先乱序，再进行MD5加密</span><br><span class="line">3）乱序 | 加盐，多次MD5加密等</span><br><span class="line">4）使用消息认证机制，即HMAC-MD5-先对密钥进行加密，加密之后进行两次MD5散列</span><br></pre></td></tr></table></figure></p><p><code>001 对字符串进行简单的MD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; | md5</span><br><span class="line">d661517da45e21c9d180ad50ffcdf18d</span><br></pre></td></tr></table></figure></p><p><code>002 对任意的文件进行MD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ ls -a</span><br><span class="line">..DS_StoreAllNodeVue</span><br><span class="line">..123.pngCanvasOther</span><br><span class="line">wendingding$ md5 123.png </span><br><span class="line">MD5 (123.png) = 2feeda7a43bc96b94fa0fbe64673a593</span><br></pre></td></tr></table></figure></p><p><code>003 使用sha家族算法来对字符串进行加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha1</span><br><span class="line">(stdin)= 13fb6a32c9876c0b4aa05c5e930ff9332f84c62d</span><br><span class="line"></span><br><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha256</span><br><span class="line">(stdin)= a3c02021d3630ec36fd07c4f14236cac691f499bc47428a245e8618319d812df</span><br><span class="line"></span><br><span class="line">wendingding$ echo -n &quot;wendingding&quot; | openssl sha -sha512</span><br><span class="line">(stdin)= 9b4c77e0e1a99b99fc46bfa58dab5070d707b84384a8659c69b19442d1d19490cf63b145b645c7</span><br><span class="line">a7fe42ffba9a3bff800911f5957bc6a0a219b708c6c2dc9c2c</span><br></pre></td></tr></table></figure></p><p><code>004 对字符串应用hmacMD5加密</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo -n &quot;wendingding&quot; |openssl dgst -md5 -hmac &quot;123&quot;</span><br><span class="line">(stdin)= 82fce83fe44d72969f69565f3b16d3e9</span><br></pre></td></tr></table></figure></p><p class="tip"><br>消息认证机制（HMAC）原理是：消息的发送者和接收者有一个共享密钥，发送者使用共享密钥对消息加密计算得到MAC值，消息接收者使用共享密钥对消息加密计算得到MAC值，比较两个MAC值是否一致。在具体使用的时候，客户端需要在发送的时候把<code>（消息）+（消息·HMAC）</code>打包发送给服务器，服务器接收到数据后，对拿到的消息用共享的KEY进行HMAC，比较是否一致，如果一致则信任。<br></p><p><div class="titleX"><strong>opsnssl + 对称加密算法</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 对称加密算法的特点</strong></span></p><blockquote><p><strong>① 加密/解密使用相同的密钥。</strong><br><strong>② 加密和解密的过程是可逆的。</strong><br><strong>③ 效率高、性能好，但是存在密钥传输安全问题。</strong></p></blockquote><p><strong>经典加密算法</strong> DES、3DES 和 AES 等</p><p><code>001 AES-ECB加密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ mkdir openssl</span><br><span class="line">wendingding$ cd openssl/</span><br><span class="line">wendingding$ echo &quot;测试的字符串-des加密&quot; &gt;&gt; 123.txt</span><br><span class="line">wendingding$ cat 123.txt </span><br><span class="line">测试的字符串-des加密</span><br><span class="line">wendingding$ ls -a</span><br><span class="line">...123.txt</span><br><span class="line">wendingding$ openssl enc -des-ecb -K 616263 -nosalt -in 123.txt -out 123.bin</span><br><span class="line">wendingding:openssl wendingding$ ls -a</span><br><span class="line">...123.bin123.txt</span><br></pre></td></tr></table></figure></p><p><code>002 AES-ECB解密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl enc -des-ecb -K 616263 -nosalt -in 123.bin -out 123_new.txt -d</span><br><span class="line">wendingding$ cat 123_new.txt </span><br><span class="line">测试的字符串-des加密</span><br></pre></td></tr></table></figure></p><blockquote><p>密码算法可以分为分组密码和流密码两种。 </p></blockquote><p><strong><code>分组密码</code></strong>的特点是在解密和解密时，每次只能处理特定长度的一组数据，一个分组的比特数量就称之为分组长度。DES 和 3DES 的分组长度都是64比特，也就是每次只能加密64比特的明文，并生成64比特的密文。AES 的分组长度有128比特、192比特和256比特可以选择。</p><p><strong><code>流密码</code></strong>的特点是加密和解密时会对数据流进行连续处理。流密码中一般以1比特、8比特或者是32比特等作为单位俩进行加密和解密。</p><p class="tip"> <strong>备注</strong> 分组密码算法在具体实现的时候，又有很多的分组模式可以选择。常见的分组模式有 ECB 和 CBC 等。ECB模式的全称为 <code>Electronic CodeBook</code>模式，CBC模式全称为 <code>Cipher Block Chainning</code>模式，它的特点是分组后先将明文分组与前一个密文分组进行XOR运算，然后再进行加密。关于CBC和ECB的具体细节可以参考<a href="http://wendingding.com/2018/08/02/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E9%87%8A%E4%B9%89/" target="_blank" rel="noopener">数据安全系列 术语</a>这篇文章。</p><p><code>003 AES-CBC加密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;测试aes-cbc&quot; &gt;&gt; a.txt</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txt</span><br><span class="line">..123.txta.txt</span><br><span class="line">$ openssl enc -des-cbc -K 616263 -iv 0102030405060708 -nosalt -in a.txt -out a.bin</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txta.txt</span><br><span class="line">..123.txta.bin</span><br></pre></td></tr></table></figure></p><p><code>004 AES-CBC解密的过程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -des-cbc -K 616263 -iv 0102030405060708 -nosalt -in a.bin -out a_new.txt -d</span><br><span class="line">$ ls -a</span><br><span class="line">.123.bin123_new.txta.txt</span><br><span class="line">..123.txta.bina_new.txt</span><br><span class="line">$ cat a_new.txt </span><br><span class="line">测试aes-cbc</span><br></pre></td></tr></table></figure></p><p><strong>说明</strong> 上文命令行中的<code>-iv 0102030405060708</code>是CBC分组模式需要使用到的初始向量值。</p><p><div class="titleX"><strong>opsnssl + 非对称加密算法</strong></div><br><span style="border:0.2px solid #000;padding:5px 20px;background:#f8f8f0;color:#555"><strong> 非对称加密算法的特点</strong></span></p><blockquote><p><strong>① 加密的时候使用公钥，解密的时候使用私钥。</strong><br><strong>② 公钥是公开的，私钥是绝对保密的。</strong><br><strong>③ 效率不高，性能不好，可能会遭遇中间人攻击。</strong></p></blockquote><p><strong>经典加密算法</strong> RSA</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">这里简单介绍RSA算法的原理和小示例</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] RSA 原理</span><br><span class="line">        （<span class="number">1</span>）求N，准备两个质数p和q,N = p x q</span><br><span class="line">        （<span class="number">2</span>）求L,L是p<span class="number">-1</span>和q<span class="number">-1</span>的最小公倍数。L = lcm（p<span class="number">-1</span>,q<span class="number">-1</span>）</span><br><span class="line">        （<span class="number">3</span>）求E，E和L的最大公约数为<span class="number">1</span>（E和L互质）</span><br><span class="line">        （<span class="number">4</span>）求D，E x D mode L = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    [<span class="number">2</span>] RSA加密小实践</span><br><span class="line">        （<span class="number">1</span>）p = <span class="number">17</span>,q = <span class="number">19</span> =&gt;N = <span class="number">323</span></span><br><span class="line">        （<span class="number">2</span>）lcm（p<span class="number">-1</span>,q<span class="number">-1</span>）=&gt;lcm（<span class="number">16</span>，<span class="number">18</span>）=&gt;L= <span class="number">144</span></span><br><span class="line">        （<span class="number">3</span>）gcd（E,L）=<span class="number">1</span> =&gt;E=<span class="number">5</span></span><br><span class="line">        （<span class="number">4</span>）E乘以几可以mode L =<span class="number">1</span>? D=<span class="number">29</span>可以满足</span><br><span class="line">        （<span class="number">5</span>）得到公钥为：E=<span class="number">5</span>,N=<span class="number">323</span></span><br><span class="line">        （<span class="number">6</span>）得到私钥为：D=<span class="number">29</span>,N=<span class="number">323</span></span><br><span class="line">        （<span class="number">7</span>）加密 明文的E次方 mod N = <span class="number">123</span>的<span class="number">5</span>次方  mod <span class="number">323</span> = <span class="number">225</span>（密文）</span><br><span class="line">        （<span class="number">8</span>）解密 密文的D次方 mod N = <span class="number">225</span>的<span class="number">29</span>次方 mod <span class="number">323</span> = <span class="number">123</span>（明文）</span><br></pre></td></tr></table></figure><p><strong>非对称加密命令行介绍</strong></p><p><code>001 生成512位的RSA私钥</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl genrsa -out private.pem 512</span><br><span class="line">Generating RSA private key, 512 bit long modulus</span><br><span class="line">........+++++++++++++++++++++++++++</span><br><span class="line">..+++++++++++++++++++++++++++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure></p><p><code>002  以明文输出私钥内容</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -text -out private.txt</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure></p><p><code>003 校验私钥文件</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -check</span><br><span class="line">RSA key ok</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIBOwIBAAJBAKfq2SR+2arBoS1c+Jc8Pt7N6Jus4IaqvFttbBaBriVm/EFGY5c0</span><br><span class="line">eS4lDVwLWr0ld2bee720855YkFEsa6j9IlECAwEAAQJBAJwiSOogcTDPfpj5m8S0</span><br><span class="line">JhlyCNnH87YER8QTiK+cwVrQV7AVMNaNWMa4hKZh/rsXTD5oPemUsTTjEWNNNjbE</span><br><span class="line">o+kCIQDZypEycPx1knONDQSVbJwhEsFfnC81BPRUglAyLLK1NwIhAMVgWK6q5vI5</span><br><span class="line">ZKR73XhoHMC3OLE3alvx43JnD0TE+yi3AiAU618tACtPw8RznPd+vtL0Xk/StjbW</span><br><span class="line">meY6I9Y+K4ry2wIhAIPI9q15MsZch9RDV/aDHV+XdmTtKTjG4ySJp2o1U7U1AiBG</span><br><span class="line">IM0D897qkeovClo3kw/mFDA9lgfJu1ir0W3OLSmvXg==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><p><code>004 从私钥中提取公钥</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in private.pem -out public.pem -outform PEM -pubout</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure></p><p><code>005 以明文输出公钥内容</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsa -in public.pem -out public.txt -pubin -pubout -text</span><br><span class="line">writing RSA key</span><br><span class="line"></span><br><span class="line">wendingding$ cat public.txt</span><br><span class="line">Public-Key: (512 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:a7:ea:d9:24:7e:d9:aa:c1:a1:2d:5c:f8:97:3c:</span><br><span class="line">    3e:de:cd:e8:9b:ac:e0:86:aa:bc:5b:6d:6c:16:81:</span><br><span class="line">    ae:25:66:fc:41:46:63:97:34:79:2e:25:0d:5c:0b:</span><br><span class="line">    5a:bd:25:77:66:de:7b:bd:b4:f3:9e:58:90:51:2c:</span><br><span class="line">    6b:a8:fd:22:51</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKfq2SR+2arBoS1c+Jc8Pt7N6Jus4Iaq</span><br><span class="line">vFttbBaBriVm/EFGY5c0eS4lDVwLWr0ld2bee720855YkFEsa6j9IlECAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p><code>006 使用公钥加密文件</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ echo &quot;rsa算法测试&quot; &gt;&gt; msg.txt</span><br><span class="line">wendingding$ openssl rsautl -encrypt -pubin -inkey public.pem -in msg.txt -out msg.bin</span><br><span class="line">wendingding$ ls -l</span><br><span class="line">total 48</span><br><span class="line">-rw-r--r--  1 wendingding  staff    64  2 24 18:20 msg.bin</span><br><span class="line">-rw-r--r--  1 wendingding  staff    16  2 24 18:20 msg.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   497  2 24 18:19 private.pem</span><br><span class="line">-rw-r--r--  1 wendingding  staff  1626  2 24 18:19 private.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   182  2 24 18:19 public.pem</span><br><span class="line">-rw-r--r--  1 wendingding  staff   458  2 24 18:19 public.txt</span><br></pre></td></tr></table></figure></p><p><code>007 对加密后的文件进行解密操作</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ openssl rsautl -decrypt -inkey private.pem -in msg.bin -out a.txt</span><br><span class="line">wendingding$ cat a.txt</span><br><span class="line">rsa算法测试</span><br><span class="line"></span><br><span class="line">wendingding$ md5 a.txt </span><br><span class="line">MD5 (a.txt) = f0f64bc1852acfd133e27567bd71c92e</span><br><span class="line"></span><br><span class="line">wendingding$ md5 msg.txt </span><br><span class="line">MD5 (msg.txt) = f0f64bc1852acfd133e27567bd71c92e</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文对密码学中常用的底层库OpenSSL进行简单说明，包括基本介绍、简单使用等内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;titleX&quot;&gt;&lt;strong&gt;简单介绍&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="数据安全系列" scheme="https://weibo.com/u/3800117445/tags/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>开发工具系列 OSX(UNIX / Linux)常用命令行</title>
    <link href="https://weibo.com/u/3800117445/2019/02/22/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97%20OSX%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://weibo.com/u/3800117445/2019/02/22/开发工具系列 OSX系统基础命令/</id>
    <published>2019-02-22T15:45:13.000Z</published>
    <updated>2019-02-23T10:00:27.464Z</updated>
    
    <content type="html"><![CDATA[<p class="tip">本文简单记录工作中常用的命令行(持续更新)，因为我用的是<code>Mac OSX</code>系统，因此部分命令在<code>Windows系统</code>中将失效(或需调整)，此外需注意Windows的文件系统路径斜杠和<code>UNIX</code>是反的。</p><p><span class="Shell backColorT">pwd</span><br><strong>全称</strong> <strong><code>Print Working Directory</code></strong><br><strong>作用</strong> &nbsp;&nbsp;查看当前目录<br><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop/Test</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cd</span><br> <strong>全称</strong> <strong><code>Change Directory</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;切换目录，<code>../</code>表示返回上一层目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd ../</span><br><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop</span><br><span class="line">$ cd Test/</span><br><span class="line">$ pwd</span><br><span class="line">/Users/文顶顶/Desktop/Test</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">ls</span><br> <strong>全称</strong> <strong><code>List</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;查看当前目录下内容<br> <strong>参数</strong> <code>usage: ls [-ABCFGHLOPRSTUWabcdefghiklmnopqrstuwx1] [file ...]</code><br> <strong>示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">示例01：ls    列出当前目录下面的所有文件</span><br><span class="line">示例02：ls -a 列出当前目录下面的所有文件(包含隐藏文件)</span><br><span class="line">示例03：ls -l 列出当前目录下面的所有文件(列表方式)，包含文件的创建者和时间等信息</span><br><span class="line">示例04：ls -s 列出当前目录下面的所有文件(打印文件的大小)</span><br><span class="line">示例05：ls -t 列出当前目录下面的所有文件(按照时间来排序)</span><br><span class="line">  </span><br><span class="line">$ ls</span><br><span class="line">    ImageData数据.xmindVueindex.js</span><br><span class="line">    PQ.pngYu.jpg</span><br><span class="line"></span><br><span class="line">$ ls -a</span><br><span class="line">    .ImageData数据.xmindYu.jpg</span><br><span class="line">    ..PQ.pngindex.js</span><br><span class="line">    .DS_StoreVue</span><br><span class="line"></span><br><span class="line">$ ls -l</span><br><span class="line">    total 1216</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff   36971  2 21 15:39 ImageData数据.xmind</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff  519843  2 19 11:34 PQ.png</span><br><span class="line">    drwxr-xr-x  3 wendingding  staff      96  2 23 10:03 Vue</span><br><span class="line">    -rw-r--r--@ 1 wendingding  staff   56244  2 19 15:58 Yu.jpg</span><br><span class="line">    -rw-r--r--  1 wendingding  staff     363 12 20 15:33 index.js</span><br><span class="line">    </span><br><span class="line">$ ls -t</span><br><span class="line">    VueYu.jpgindex.js</span><br><span class="line">    ImageData数据.xmindPQ.png</span><br><span class="line"></span><br><span class="line">$ ls -s</span><br><span class="line">    total 1216</span><br><span class="line">    80   ImageData数据.xmind 112 Yu.jpg</span><br><span class="line">    1016 PQ.png   8 index.js</span><br><span class="line">       0 Vue</span><br></pre></td></tr></table></figure><p><strong>说明</strong> 这里简单对<code>ls - l</code>命令列出的文件详细信息中的各个字段加以说明<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命令行结果：-rw-r--r--@ 1 wendingding  staff   56244  2 19 15:58 Yu.jpg</span><br><span class="line">第一个字符：类型(如果是文件夹则为d,如果是文件则为-)</span><br><span class="line">第二三字符：文件的读取权限，如果是rw则表示可读可写</span><br><span class="line">其他的字符：第一个-r表示当前组的权限</span><br><span class="line">          第二个-r表示其它用户的操作权限</span><br><span class="line">          wendingding 是当前用户</span><br><span class="line">          staff       是当前用户所属的组</span><br><span class="line">          519843      是文件的大小(字节数)</span><br><span class="line">          2 19 15:58  是文件最后一次的修改时间</span><br><span class="line">          Yu.jpg      是文件的名称</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">mkdir</span><br><strong>全称</strong> <strong><code>Make Directory</code></strong><br><strong>作用</strong> &nbsp;&nbsp;创建目录<br><strong>参数</strong> <code>usage: mkdir [-pv] [-m mode] directory ...</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例01：mkdir Demo          创建Demo文件夹(目录)</span><br><span class="line">示例02：mkdir -v demo       创建demo文件夹并输出提示信息</span><br><span class="line">示例03：mkdir -p test/sub1  创建test文件夹并在该目录中创建sub1文件夹</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">touch</span><br><strong>作用</strong> &nbsp;&nbsp;在当前的目录中创建文件，可以通过<code>$ open 文件名称</code>命令来打开指定文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd demo</span><br><span class="line">$ ls -a</span><br><span class="line">...</span><br><span class="line">$ touch 1.txt 2.txt</span><br><span class="line">$ ls -a</span><br><span class="line">...1.txt2.txt</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">wc</span><br> <strong>全称</strong> <strong><code>Word Count</code></strong><br> <strong>参数</strong> <code>usage: wc [-clmw] [file ...]</code><br> <strong>作用</strong> &nbsp;&nbsp;获取文件的字数信息统计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例01：wc a.text           获取a.text文件的字数统计信息</span><br><span class="line">示例02：wc -c a.text        获取a.text文件的字数统计信息(统计字节数)</span><br><span class="line">示例03：wc -l a.text        获取a.text文件的字数统计信息(统计行数，从0开始计数)</span><br><span class="line">示例04：wc -m a.text        获取a.text文件的字数统计信息(统计字符数)</span><br><span class="line">示例05：wc -w a.text        获取a.text文件的字数统计信息(统计单词数)</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cat</span><br> <strong>全称</strong> <strong><code>Concatenate files and print on the standard output</code></strong><br> <strong>作用</strong> &nbsp;&nbsp;查看 | 创建 | 合并文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例01：cat index.html              打印并查看index.html文件的内容</span><br><span class="line">示例02：cat &gt; b.text                新建文件b.text并输入内容，需保存</span><br><span class="line">示例03：cat a.text b.text &gt; c.text  合并两个文件的内容给c.text </span><br><span class="line">示例04：cat -n a.text               输出a.text文件的内容并显示行号(空行会被编号)</span><br><span class="line">示例05：cat -b a.text               输出a.text文件的内容并显示行号(空行不被编号)  </span><br><span class="line">示例06：cat -n b.text &gt;&gt; a.text     对b.text文件的内容加上行号然后追加到a.text文件中</span><br><span class="line">示例07：cat -n b.text &gt; a.text      对b.text文件的内容加上行号然后替换a.text文件的内容</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">echo</span><br> <strong>作用</strong> &nbsp;&nbsp;回显字符(向控制台输出字符串信息)，默认会压缩多个空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例01: echo &quot;123&quot; &gt;  a.text  向a.text文件中输入123字符串(替换)</span><br><span class="line">示例02: echo &quot;123&quot; &gt;&gt; a.text  向a.text文件中输入123字符串(追加)</span><br><span class="line"></span><br><span class="line">$ echo &quot;wendingding-mitaoer&quot;</span><br><span class="line">wendingding-mitaoer</span><br><span class="line">$ touch a.txt</span><br><span class="line">$ echo &quot;MiaoXia&quot; &gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">MiaoXia</span><br><span class="line">$ echo &quot;ChanMing&quot; &gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">ChanMing</span><br><span class="line">$ echo &quot;De XiaJi&quot; &gt;&gt; a.txt </span><br><span class="line">$ cat a.txt </span><br><span class="line">ChanMing</span><br><span class="line">De XiaJi</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">more 和 less</span><br><strong>作用</strong> &nbsp;&nbsp;查看文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">示例01：more +3 a.text              从第三行开始查看a.text文件的内容</span><br><span class="line">示例02：more +/font a.text          搜索文件中指定字符串显示指定位置后的内容</span><br><span class="line">示例03：less -N a.text              显示a.text文件的内容前面加上行号</span><br><span class="line"></span><br><span class="line">$ cat 1.text </span><br><span class="line">Hi!</span><br><span class="line">How are you !</span><br><span class="line">Hello!</span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br><span class="line"></span><br><span class="line">$ more +3 1.text </span><br><span class="line">Hello!</span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"></span><br><span class="line">$ more +/old 1.text </span><br><span class="line">How old are you!</span><br><span class="line">Nice .</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">rm</span><br><strong>全称</strong> <code>Remove</code><br><strong>作用</strong> &nbsp;&nbsp;删除文件<br><strong>参数</strong> <code>usage: rm [-f | -i] [-dPRrvW] file ...</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例01： rm    1.text               删除a.text文件</span><br><span class="line">示例02： rm -i 1.text               删除文件前会逐一询问确认，输入YES表示删除</span><br><span class="line">示例03： rm -f 1.text               强制删除a.text文件不会询问确认</span><br><span class="line">示例04： rm -r test                 删除test文件夹以及该目录下面所有文件，Recurve(递归)</span><br><span class="line">示例05： rm -r *                    删除当前目录下面所有的文件</span><br><span class="line">示例06： rm -rf /*                  递归删除所有文件(不提醒) [请勿轻易尝试 ⚠️]</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">rmdir</span><br><strong>全称</strong> <code>Remove Directory</code><br><strong>作用</strong> 删除文件夹，只能删除空文件夹，不常用</p><p><span class="Shell backColorT">mv</span><br><strong>全称</strong> <code>Move</code><br><strong>作用</strong> 移动文件或重命名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例01：mv index.html ./demo/index.html  移动文件到demo目录</span><br><span class="line">示例02：mv index.html a.html             把index.html重命名为a.html</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">cp</span><br><strong>全称</strong> <code>Copy</code><br><strong>作用</strong> 复制文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例：cp index.html ./demo/index.html   把文件复制一份保存到demo目录</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">date</span><br><strong>作用</strong> 显示当前的日期和时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ date</span><br><span class="line">2019年 2月23日 星期六 06时52分47秒 CST</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">who</span><br><strong>作用</strong> <code>who</code>获取登录到系统中的所有用户信息，<code>who am i</code>指令用于获取当前登录到系统中的用户信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ who</span><br><span class="line">wendingding console  Feb 22 21:07 </span><br><span class="line">wendingding ttys000  Feb 23 09:28 </span><br><span class="line">wendingding ttys001  Feb 23 11:00 </span><br><span class="line">$ who am i</span><br><span class="line">wendingding ttys001  Feb 23 11:00</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">history</span><br><strong>作用</strong> 查看操作历史</p><p><span class="Shell backColorT">curl</span><br><strong>作用</strong> 发送网络请求，常用于测试(服务器)是否能够到达指定的网站<br><strong>说明</strong> 关于curl的更多用法，请参考另一篇介绍文章。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://wendingding.com</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-Hans&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt; 花田半亩&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;生死有命 富贵在天&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;icon&quot; href=&quot;/logo.jpeg&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/apollo.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;search&quot; type=&quot;application/opensearchdescription+xml&quot; title=&quot;花田半亩&quot;&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">...省略</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><span class="Shell backColorT">（星号）*</span><br><strong>作用</strong> 在UNIX系统中，星号常用于文件名替换(结合其它的命令)<br><strong>示例</strong> <code>01-Shell自动将模式*替换成当前目录下能够匹配到的所有文件名</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;我是1.txt&quot; &gt; 1.txt</span><br><span class="line">$ echo &quot;我是2.txt&quot; &gt; 2.txt</span><br><span class="line">$ echo &quot;我是a1文件的内容&quot; &gt; a1.txt</span><br><span class="line">$ echo &quot;我是a2文件的内容&quot; &gt; a2.txt</span><br><span class="line">$ echo &quot;我是a3文件的内容&quot; &gt; a3.txt</span><br><span class="line">$ ls -l</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:12 a3.txt</span><br><span class="line"></span><br><span class="line">$ cat 1.txt 2.txt a1.txt</span><br><span class="line">我是1.txt</span><br><span class="line">我是2.txt</span><br><span class="line">我是a1文件的内容</span><br><span class="line"></span><br><span class="line">$ cat *</span><br><span class="line">我是1.txt</span><br><span class="line">我是2.txt</span><br><span class="line">我是a1文件的内容</span><br><span class="line">我是a2文件的内容</span><br><span class="line">我是a3文件的内容</span><br><span class="line"></span><br><span class="line">$ echo *</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">$ echo * == *</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt == 1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">备注：主要是*出现的地方就被替换为当期那目录中所有的文件名</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong> <code>02-星号还能实现部分文件替换功能，与其它字符配合使用可以限制范围</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  12  2 23 17:11 2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a1.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:11 a2.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff  24  2 23 17:12 a3.txt</span><br><span class="line">-rw-r--r--  1 wendingding  staff   0  2 23 17:24 a4.mp4</span><br><span class="line">-rw-r--r--  1 wendingding  staff   0  2 23 17:24 text.mp4</span><br><span class="line">$ echo *txt</span><br><span class="line">1.txt 2.txt a1.txt a2.txt a3.txt</span><br><span class="line">$ cat a*</span><br><span class="line">我是a1文件的内容</span><br><span class="line">我是a2文件的内容</span><br><span class="line">我是a3文件的内容</span><br><span class="line">$ ls *ex*</span><br><span class="line">text.mp4</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong> <code>03-文件名替换的其他示例</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1] echo t*         打印出以t开头的所有文件名</span><br><span class="line">[2] rm   *.*        删除包含点号的所有文件</span><br><span class="line">[3] ls   a*         列出所有以a开头的文件</span><br><span class="line">[4] rm    *         删除当前目录下的所有文件( ⚠️)</span><br><span class="line">[5] echo a*b        打印出以a开头且以b结尾的所有文件名</span><br><span class="line">[6] cat  *.c        打印出以.c结尾的所有文件的内容</span><br><span class="line">[7] cp ../demo/* .  将../demo目录中的所有文件复制到当前目录</span><br><span class="line">[8] ls [a-z]*[!0-9] 列出以小写字母开头且不以数字结尾的所有文件</span><br></pre></td></tr></table></figure></p><hr><p class="tip">在使用星号命令的时候，在指定的命令被调用之前，这些文件名替换就已经完成了。在具体的操作中，利用星号文件名替换的功能，可以写出更复杂功能更强大的命令行。</p><p><span class="Shell backColorT"> vim </span><br><strong>作用</strong> 在Mac OSX系统，已经内置了vim编辑器，可以通过vim编辑器方便的在命令行中编辑文件的内容。<br><strong>说明</strong> vim编辑器的功能非常强大，有一套自己的命令相对复杂，这里简单列出常用的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1] 使用vim编辑器打开指定文件       $ vim 1.txt</span><br><span class="line">[2] 让文件进入编辑(INSERT插入)状态  敲击键盘上的i键</span><br><span class="line">[3] 保存并退出                    esc + shift + : + wq</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p class=&quot;tip&quot;&gt;本文简单记录工作中常用的命令行(持续更新)，因为我用的是&lt;code&gt;Mac OSX&lt;/code&gt;系统，因此部分命令在&lt;code&gt;Windows系统&lt;/code&gt;中将失效(或需调整)，此外需注意Windows的文件系统路径斜杠和&lt;code&gt;UNIX&lt;/
      
    
    </summary>
    
    
      <category term="开发工具系列" scheme="https://weibo.com/u/3800117445/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>开发工具系列 WebStorm常用快捷键(Mac版)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/21/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97%20Webstorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://weibo.com/u/3800117445/2019/02/21/开发工具系列 Webstorm常用快捷键/</id>
    <published>2019-02-21T11:45:13.000Z</published>
    <updated>2019-02-21T09:50:15.801Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-family:Georgia"><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; C</span>  复制<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; V</span>  粘贴<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; X</span>  剪切<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; D</span>  复制当前行或选中的区块<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; F</span>    在当前文档执行搜索(查找)<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; G</span>    跳转到文档的某处<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; P</span>    <span style="color:red">显示方法(函数)的参数信息</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; R</span>    在当前文档执行替换操作<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; W</span>    关闭当前选项卡<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; E</span>    弹出最近文件，支持选择后打开<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; B</span>    跳转到变量声明处<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; L</span>    跳转到指定行(输入)<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; Y</span>    浮动窗口显示变量声明行</span></p><p><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; +</span>    <span style="color:red">展开代码块</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; -</span>    <span style="color:red">折叠代码块</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 左</span>    光标移到行头<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 右</span>    光标移到行尾<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 上</span>    跳转到导航栏<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 移入</span>    显示主要信息<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;delete</span>    删除当前行<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;alt&nbsp;&nbsp;+&nbsp;&nbsp; L</span>    <span style="color:red">格式化处理整个文档</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; U</span>    对选中字符进行大小写切换<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; [</span>    选项卡切换</p><p><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;  /</span>    <span style="color:red">添加(取消)单行注释</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;  alt &nbsp;&nbsp;+&nbsp;&nbsp; /</span>    <span style="color:red">添加(取消)多行注释</span></p><p><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;alt &nbsp;&nbsp;+&nbsp;&nbsp; R </span>    运行项目<br><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;alt&nbsp;&nbsp;+&nbsp;&nbsp; I</span>    快速调整每行的缩进<br><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; J</span>    清除缩进变成单行</p><p><span class="spaceT backColorT">alt &nbsp;&nbsp;+&nbsp;&nbsp; /</span>    代码补全(连按选择)<br><span class="spaceT backColorT">shift &nbsp;&nbsp;+&nbsp;&nbsp;tab</span>    调整缩进</p><p></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span style=&quot;font-family:Georgia&quot;&gt;&lt;br&gt;&lt;span class=&quot;spaceT backColorT&quot;&gt;command &amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp; C&lt;/span&gt;  复制&lt;br&gt;&lt;span class=&quot;spac
      
    
    </summary>
    
    
      <category term="开发工具系列" scheme="https://weibo.com/u/3800117445/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [15]-Canvas绘图(压缩)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/20/javaScript%E7%B3%BB%E5%88%97%20%5B15%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%8E%8B%E7%BC%A9)/"/>
    <id>https://weibo.com/u/3800117445/2019/02/20/javaScript系列 [15]-Canvas绘图(压缩)/</id>
    <published>2019-02-20T00:22:16.000Z</published>
    <updated>2019-02-21T07:36:57.858Z</updated>
    
    <content type="html"><![CDATA[<p class="tip">写这篇文章的原因是因为今天早上的时候，突然遇到个需求需要等比例调整照片的大小（主要是想把图片等比例的缩小），我在Mac上通过图片处理软件捣鼓的时候发现比较麻烦，就随手百度了一个在线修改图片尺寸的网站，叫做<a href="http://www.gaitubao.com/" target="_blank" rel="noopener">改图宝</a>。这个网站提供给图片加logo、修改图片尺寸以及印章制作等诸多功能，界面简洁使用方便解决了我的问题，值得推荐。<br><br>然而，等到中午的时候，我发现还有一张图片需要处理，恰好电脑连不上网络，我就考虑能不能通过代码自己来实现，因为图片的<strong><code>选择 - 压缩 - 上传</code></strong>在实际开发中也是对应的场景，因此本文将介绍如何利用Canvas画布来对图片进行压缩的技术，包括实现思路和具体的代码。</p><div class="titleX"><strong>实现思路</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_38.png?raw=true"></p><p><strong>[ 1 ] 获取源图像数据</strong></p><p>在页面中我们使用<code>input标签(file类型)</code>来让用户选择对应的文件上传。为了等比例的对图片进行压缩，需要获取源图片的宽度和高度等数据参数，这里使用了<strong><a href="">FileReader构造函数</a></strong>(类)。</p><p>具体实现的时候，先调用<code>new FileReader()</code>创建一个FileReader的实例对象，然后为<code>input标签</code>注册<span style="color:red">change</span>事件监听。当用户选择好文件后，需要先检查是否是图片(<a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener">通过MIMEType类型判断</a>)，再通过FileReader实例来调用<code>readAsDataURL(file)</code>方法来读取图片文件的数据信息，以获取源图片文件的宽度和高度信息。</p><p><strong>[ 2 ] 计算宽高压缩比数据</strong></p><p>因为示例代码中演示的等比例的进行缩放(压缩)，因此需要通过得到目标图片的宽度和高度尺寸数据。<br>这里列出计算部分的<strong><span style="color:red">核心代码</span></strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetWidth,targetHeight;</span><br><span class="line"><span class="keyword">var</span> imgWidth = img.width, imgHeight = img.height;</span><br><span class="line"><span class="keyword">var</span> maxWidth = <span class="number">150</span>, maxHeight = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图片尺寸超过限制，那么需要重新计算宽高</span></span><br><span class="line"><span class="keyword">if</span> (imgWidth &gt; maxWidth || imgHeight &gt; maxHeight) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (imgWidth / imgHeight &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果更宽，那么就按照宽度限定尺寸</span></span><br><span class="line">    targetWidth = maxWidth;</span><br><span class="line">    targetHeight = <span class="built_in">Math</span>.round(maxWidth * (imgHeight / imgWidth));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果更高，那么就按照高度限定尺寸</span></span><br><span class="line">    targetHeight = maxHeight;</span><br><span class="line">    targetWidth = <span class="built_in">Math</span>.round(maxHeight * (imgWidth / imgHeight));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>[ 3 ] 绘制目标图片</strong></p><p>当目标图片(压缩后)的宽高都计算完成后，可以通过Canvas上下文的<code>drawImage</code>方法来完成图片的绘制，该方法的具体使用可以参考<a href="http://wendingding.com/2019/02/05/javaScript%E7%B3%BB%E5%88%97%20[14]-Canvas%E7%BB%98%E5%9B%BE(%E5%9B%BE%E5%83%8F" target="_blank" rel="noopener"> javaScript系列 [14]-Canvas绘图(图像)</a>这篇文章。</p><p><code>drawImage</code>方法的第一个参数为需要绘制的图片数据，该图片数据即为用户通过input标签选择的文件内容。当然，在具体实现的时候还需要读取文件的内容，监听加载完毕之后再设置Image数据源。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  /e.target.result是图片的base64地址信息</span><br><span class="line">  img.src = event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="titleX"><strong>完整代码</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"file"</span> id=<span class="string">"file"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"info"</span> style=<span class="string">"font-size: 13px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;canvas id=<span class="string">"canvas"</span> height=<span class="string">"200"</span> width=<span class="string">"200"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的文件选择标签</span></span><br><span class="line">  <span class="keyword">var</span> oInput  = <span class="built_in">document</span>.querySelector(<span class="string">'#file'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建FileReader对象用于读取文件信息</span></span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  <span class="keyword">var</span> file   = <span class="literal">null</span>;  <span class="comment">//文件对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 给文件选择标签添加事件监听</span></span><br><span class="line">  oInput.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//001 获取用户选择的文件</span></span><br><span class="line">    file = event.target.files[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//002 获取文件的MIMEType类型</span></span><br><span class="line">    <span class="keyword">var</span> fileType = file.type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 检查用户选择的文件是否是图片</span></span><br><span class="line">    <span class="keyword">if</span> (fileType.indexOf(<span class="string">"image"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//004 如果发现文件是图片则读取图片为DataURL</span></span><br><span class="line">      reader.readAsDataURL(file);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 创建Image图像实例</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="keyword">var</span> targetWidth,targetHeight;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[5] 监听FileReader对象是否处理完毕，设置图像实例的数据源</span></span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//说明：e.target.result是图片的base64地址信息</span></span><br><span class="line">    img.src = event.target.result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[6] 监听Image实例加载，压缩图片并生成预览图像</span></span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      setFileInfo();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//[7]在页面中创建canvas画布对图片进行缩放(压缩)后绘制</span></span><br><span class="line">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">      <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">      ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,ctx.canvas.width,ctx.canvas.height);</span><br><span class="line">      ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setFileInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件的名称</span></span><br><span class="line">      <span class="keyword">var</span> fileName = file.name;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取文件的大小</span></span><br><span class="line">      <span class="keyword">var</span> fileSize = (file.size / <span class="number">1024</span> / <span class="number">1024</span>).toFixed(<span class="number">3</span>) + <span class="string">"M"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 图片压缩比计算</span></span><br><span class="line">      <span class="keyword">var</span> imgWidth = img.width, imgHeight = img.height;</span><br><span class="line">      <span class="keyword">var</span> maxWidth = <span class="number">150</span>, maxHeight = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果图片尺寸超过限制，那么需要重新计算宽高</span></span><br><span class="line">      <span class="keyword">if</span> (imgWidth &gt; maxWidth || imgHeight &gt; maxHeight) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (imgWidth / imgHeight &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 如果更宽，那么就按照宽度限定尺寸</span></span><br><span class="line">          targetWidth = maxWidth;</span><br><span class="line">          targetHeight = <span class="built_in">Math</span>.round(maxWidth * (imgHeight / imgWidth));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果更高，那么就按照高度限定尺寸</span></span><br><span class="line">          targetHeight = maxHeight;</span><br><span class="line">          targetWidth = <span class="built_in">Math</span>.round(maxHeight * (imgWidth / imgHeight));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在页面中显示图片信息</span></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">"&lt;div&gt;1.已选择图片"</span> + fileName + <span class="string">"，大小为"</span> + fileSize + <span class="string">"。&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;2.图片原尺寸是："</span> + imgWidth + <span class="string">" x "</span> + imgHeight + <span class="string">"&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;3.图片压缩尺寸："</span> + maxWidth + <span class="string">" x "</span> + maxHeight + <span class="string">"&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;4.图片已压缩为："</span> + targetWidth + <span class="string">" x "</span> + targetHeight +<span class="string">"&lt;/div&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>);</span><br><span class="line">        oDiv.innerHTML = html;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>演示效果</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_37.gif?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p class=&quot;tip&quot;&gt;写这篇文章的原因是因为今天早上的时候，突然遇到个需求需要等比例调整照片的大小（主要是想把图片等比例的缩小），我在Mac上通过图片处理软件捣鼓的时候发现比较麻烦，就随手百度了一个在线修改图片尺寸的网站，叫做&lt;a href=&quot;http://www.gai
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [14]-Canvas绘图(图像)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/05/javaScript%E7%B3%BB%E5%88%97%20%5B14%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%9B%BE%E5%83%8F)/"/>
    <id>https://weibo.com/u/3800117445/2019/02/05/javaScript系列 [14]-Canvas绘图(图像)/</id>
    <published>2019-02-05T00:22:16.000Z</published>
    <updated>2019-02-20T02:14:17.334Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas画布图像绘制相关的技术细节。</div><h3 id="Canvas画布图像绘制基础"><a href="#Canvas画布图像绘制基础" class="headerlink" title="Canvas画布图像绘制基础"></a>Canvas画布图像绘制基础</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_35.png?raw=true"></p><div class="titleX"><strong>核心API</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制图像</strong></span></p><p><strong><code>语法</code></strong> </p><ul><li><code>ctx.drawImage(image,dx,dy);</code></li><li><code>ctx.drawImage(image,dx,dy,dw,dh);</code></li><li><code>ctx.drawImage(image,sx,sy,sw,sh,dx,dy,dw,dh);</code></li></ul><p><strong><code>作用</code></strong> 该方法可以将一幅图像绘制到Canvas画布中(<code>源图像 - 目标图像</code>)。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">dx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的原点坐标(X轴)</span></li><li><span style="font-family:Georgia">dy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的原点坐标(Y轴)</span></li><li><span style="font-family:Georgia">sx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的原点坐标(X轴)</span></li><li><span style="font-family:Georgia">sy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的原点坐标(Y轴)</span></li><li><span style="font-family:Georgia">sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的大小(高度)</span></li><li><span style="font-family:Georgia">sw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的大小(宽度)</span></li><li><span style="font-family:Georgia">dw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的大小(宽度)</span></li><li><span style="font-family:Georgia">dh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的大小(高度)</span></li><li><span style="font-family:Georgia">image&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 绘制到canvas上面的图像(<a href="">HTMLImageElement</a>)</span></li></ul><p><strong><code>说明</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1] drawImage方法的第一个参数可以是HTMLImageElement类型的图像或HTMLCanvasElement类型的Canvas对象</span><br><span class="line">    或者HTMLVideoElement类型的视频对象。</span><br><span class="line">[2] drawImage方法可以将一幅图像(Canvas对象 」视频帧)的整体或部分绘制到Canvas中，在绘制到画布的时候可以</span><br><span class="line">    任意指定绘制的位置以及缩放的比例。</span><br></pre></td></tr></table></figure></p><p><strong><code>图示</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_30.png?raw=true"><br><strong><code>示例-01</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"800"</span> height=<span class="string">"1000"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取画布和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> ctx  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建Image图像并设置数据源</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = <span class="string">"PQ.png"</span>;</span><br><span class="line">  img.alt = <span class="string">"我是一头小猪,我全家都是猪~"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 监听图片加载完毕，绘制图片到画布</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示001</span></span><br><span class="line">    <span class="comment">//把图片绘制到Canvas画布上，绘制参考的原点坐标为(0,0),等比例缩放图片大小至宽高均为200</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示002</span></span><br><span class="line">    <span class="comment">//剪切(剪切起点的参考坐标为[150,0])图片的一部分(右半边)绘制到画布上，绘制参考的原点坐标为(205,0)</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">150</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">300</span>,<span class="number">205</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示003</span></span><br><span class="line">    <span class="comment">//把图片(300 * 300)绘制到画布的指定位置，绘制参考的原点坐标为(360,0)</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">360</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_31.png?raw=true"></p><p><strong><code>示例-02</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"2000"</span> height=<span class="string">"800"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> ctx  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建Image图像并设置数据源</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src  = <span class="string">"hero.png"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 定义变量(源图片的宽度、高度、等分数量)</span></span><br><span class="line">  <span class="keyword">var</span> width  = <span class="number">1620</span>,height = <span class="number">240</span>,equalDivisionCount = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[5] 等Image图像加载完成后先把完整的图像绘制到画布</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[6] 通过定时器来控制图像的绘制(动画)</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      ctx.canvas.width = <span class="number">2000</span>;</span><br><span class="line">      ctx.drawImage(</span><br><span class="line">          img,</span><br><span class="line">          width * i/equalDivisionCount,<span class="number">0</span>,</span><br><span class="line">          width/equalDivisionCount,height,</span><br><span class="line">          width * i/equalDivisionCount,<span class="number">0</span>,</span><br><span class="line">          width/equalDivisionCount,height</span><br><span class="line">      );</span><br><span class="line">      i++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">7</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_32.gif?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>把Canvas画布转换为图像</strong></span></p><p><strong><code>语法</code></strong> <code>canvas.toDataURL()</code><br><strong><code>作用</code></strong> 该方法用于将Canvas画布的内容转换为图像。<br><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"200"</span> height=<span class="string">"200"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;img src=<span class="string">""</span> alt=<span class="string">""</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的img标签</span></span><br><span class="line">  <span class="keyword">var</span> oImage = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">//[2] 获取页面中的canvas标签</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="comment">//[3] 获取画布的上下文对象</span></span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//[4] 创建Image图片对象</span></span><br><span class="line">  <span class="keyword">var</span> img    = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="comment">//[5] 设置Image图像的数据源</span></span><br><span class="line">  img.src    = <span class="string">"PQ.png"</span>;</span><br><span class="line">  <span class="comment">//[6] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[7] 把图像绘制到Canvas画布中</span></span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[8] 把画布转换为图像保存并显示</span></span><br><span class="line">    oImage.src = canvas.toDataURL();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_33.png?raw=true"></p><p class="tip"><strong>备注</strong> Canvas标签对象的toDataURL方法把画布转换为Base64表示的图像，关于Base64编码相关的知识点可以参考<a href="http://wendingding.com/2018/07/31/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20Base64/" target="_blank" rel="noopener">数据安全系列 Base64</a>。</p><p><div class="titleX"><strong>操作图像像素的方法</strong></div><br><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>getImageData</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.getImageData(dx,dy,w,h)</code><br><strong><code>作用</code></strong> 获取(<strong>复制</strong>)Canvas画布上指定矩形区域的像素数据。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>putImageData</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.putImageData(imgData,dx,dy,[dirtyX],[dirtyY],[dirtyWidth],[dirtyHeight]);</code><br><strong><code>作用</code></strong> 该方法用于将指定ImageData对象的图像数据放回到画布上。<br><strong><code>参数</code></strong></p><ul><li><span style="font-family:Georgia">imgData &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    规定要放回画布的ImageData对象</span></li><li><span style="font-family:Georgia">dx &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    绘制到画布的位置(X坐标)，<a href="">以像素计</a>。</span></li><li><span style="font-family:Georgia">dy &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    绘制到画布的位置(Y坐标)，<a href="">以像素计</a>。</span></li><li><span style="font-family:Georgia">dirtyX &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的位置(X坐标)，默认为0。</span></li><li><span style="font-family:Georgia">dirtyY &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的位置(Y坐标)，默认为0。</span></li><li><span style="font-family:Georgia">dirtyWidth   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的大小(宽度)，默认为整幅图像的宽度。</span></li><li><span style="font-family:Georgia">dirtyHeight &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的大小(高度)，默认为整幅图像的高度。</span></li></ul><p><strong><code>说明</code></strong> <code>putImageData()</code>方法的后四个参数是可选的，在调用时要么传递3个参数要么传递7个参数。<br><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"1000"</span> height=<span class="string">"400"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas画布</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="comment">//[2] 获取Cnavas的上下文对象</span></span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 在画布指定位置绘制一个填空矩形</span></span><br><span class="line">  ctx.fillStyle=<span class="string">"#f9f"</span>;</span><br><span class="line">  ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//演示001</span></span><br><span class="line">  <span class="comment">//[4] 获取画布中指定矩形区域的图像数据，然后再放到画布的指定位置(相当于复制)</span></span><br><span class="line">  ctx.putImageData(ctx.getImageData(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>),<span class="number">120</span>,<span class="number">10</span>);</span><br><span class="line">  ctx.putImageData(ctx.getImageData(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>),<span class="number">230</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[5] 创建Image图像</span></span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="comment">//[6] 设置Image图像的数据源</span></span><br><span class="line">  img.src = <span class="string">"Yu.jpg"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//[7] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[8] 把图像绘制到Canvas画布中</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">10</span>,<span class="number">70</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示002</span></span><br><span class="line">    <span class="comment">//[9] 获取画布中指定矩形区域的图像数据，然后再放到画布的指定位置(测试参数）</span></span><br><span class="line">    <span class="keyword">var</span> imgData = ctx.getImageData(<span class="number">10</span>,<span class="number">70</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 3个参数的情况</span></span><br><span class="line"><span class="comment">    * 第一个参数：imageData对象</span></span><br><span class="line"><span class="comment">    * 第二个参数：绘制到画布的位置(X)</span></span><br><span class="line"><span class="comment">    * 第三个参数：绘制到画布的位置(Y)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    ctx.putImageData(imgData,<span class="number">120</span>,<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 7个参数的情况</span></span><br><span class="line"><span class="comment">    * 第一个参数：imageData对象</span></span><br><span class="line"><span class="comment">    * 第二个参数：绘制到画布的位置(X)</span></span><br><span class="line"><span class="comment">    * 第三个参数：绘制到画布的位置(Y)</span></span><br><span class="line"><span class="comment">    * 第四个参数：部分截取imageData对象的位置(X)</span></span><br><span class="line"><span class="comment">    * 第五个参数：部分截取imageData对象的位置(Y)</span></span><br><span class="line"><span class="comment">    * 第六个参数：部分截取imageData对象的大小(宽度)</span></span><br><span class="line"><span class="comment">    * 第七个参数：部分截取imageData对象的大小(高度)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    ctx.putImageData(imgData,<span class="number">230</span>,<span class="number">70</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">340</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">450</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">30</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">560</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_34.png?raw=true"></p><p class="tip"><strong>注意</strong> 在指定Canvas偏移量的时候，需要以CSS像素为单位，然而在指定图像数据中矩形区域时需要以设置像素为单位。此外，需要注意putImageData的后四个参数确定的区域被称为<code>脏矩形(dirty rectangle)</code>，当浏览器将脏矩形赋值到Canvas画布的时候，会默认将设备像素转换为CSS像素。</p><h3 id="ImageData对象"><a href="#ImageData对象" class="headerlink" title="ImageData对象"></a>ImageData对象</h3><p>在上文中介绍的<code>getImageData()</code>方法，其返回的是ImageData类型的对象，该对象包含<code>width</code>、<code>height</code>以及data等三个属性。其中<code>width</code>代表的是以设备像素(device pixel)为单位的图像数据宽度，而<code>height</code>相应的代表着数据的高度，此外<code>data</code>是包含着各个设备像素数值的数组。</p><p>在<code>ImageData</code>对象中，<code>data</code>属性所包含的每个数组元素，均对应表示图像数据中的相应像素值，每个像素中都存在四方面的信息，分别代表当前像素的颜色(<a href="">RGB - Red 」Green 」Blue</a>)和透明度(<a href="">A - alpha</a>)。这些信息都使用包含8个二进制位(2的八次方)的整数来表示，取值范围为 <span style="color:red"><strong>0</strong> ~ <strong>255</strong> </span>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">也就是说，</span><br><span class="line"></span><br><span class="line">ImageData.data[0]代表的是红色数值，</span><br><span class="line">ImageData.data[1]代表的是绿色数值，</span><br><span class="line">ImageData.data[2]代表的是蓝色数值，</span><br><span class="line">ImageData.data[3]代表的是透明度数值。</span><br><span class="line"></span><br><span class="line">循环往复(如果数据数组的长度为n，那么`ImageData.data[n-4]`代表红色数值，其它的类推)。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>createImageData方法</strong></span></p><p><strong><code>语法</code></strong> </p><ul><li><code>ctx.createImageData(w,h);</code></li><li><code>ctx.createImageData(imageDataOther);</code></li></ul><p><strong><code>作用</code></strong> 该方法根据指定的宽高(目标对象的宽高)来创建新的空白的ImageData对象。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">w 指定的宽度。</span> </li><li><span style="font-family:Georgia">h 指定的高度。</span> </li><li><span style="font-family:Georgia">imageDataOther 参考的图像数据。</span> </li></ul><p><strong><code>示例-01</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"600"</span> height=<span class="string">"400"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas画布和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建ImageData对象</span></span><br><span class="line">  <span class="keyword">var</span> imageData = ctx.createImageData(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(imageData);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * data: Uint8ClampedArray(16) [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]</span></span><br><span class="line"><span class="comment">   * height: 2</span></span><br><span class="line"><span class="comment">   * width:  2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 在画布中绘制红色矩形</span></span><br><span class="line">  ctx.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">  ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 获取画布中指定区域的图像数据</span></span><br><span class="line">  imageData = ctx.getImageData(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(imageData);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * data: Uint8ClampedArray(16) [255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255]</span></span><br><span class="line"><span class="comment">   * height: 2</span></span><br><span class="line"><span class="comment">   * width:  2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>新对象的默认像素值<code>transparent black</code>，表示为<a href="">(0, 0 , 0 , 0)</a>。其中前三项代表的是颜色，最后一项代表的是透明度，<code>color/alpha</code>以数组形式存在，而数组的大小为ImageData对象的四倍。</p></blockquote><p><strong><code>示例说明</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在上面的代码中ctx.createImageData(2,2)表示要创建2 * 2区域的空白ImageData对象。</span><br><span class="line">调用方法后得到的ImageData对象拥有 2 * 2 = 4个像素，每个像素由数组中的四个元素表示。</span><br><span class="line"></span><br><span class="line">打印ImageData属性得到的结果([4])显示为：</span><br><span class="line">data:Uint8ClampedArray(16) [255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255]</span><br><span class="line">我们观察下标0~3的这组数据：255,0,0,255，尝试给出标注结果为255(Red),0(Green),0(Blue),255(alpha)</span><br></pre></td></tr></table></figure></p><p>通过上面的分析，在掌握ImageData内部表示结构后，我们发现通过代码完全可以精准的控制图像的任何一个像素的显示，包括该像素的<code>RGB颜色和透明度</code>均可以控制，结合相应的算法和计算公式就可以简单的实现任何滤镜效果。</p><p><strong><code>示例-02</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> height=<span class="string">"400"</span> width=<span class="string">"600"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取画布和绘图上下文</span></span><br><span class="line">  <span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建ImageData对象(10 * 10)</span></span><br><span class="line">  <span class="keyword">var</span> imgData = ctx.createImageData(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 设置ImageData图像使用红色填充</span></span><br><span class="line">  <span class="keyword">var</span> length  = imgData.data.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;length; i+=<span class="number">4</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    imgData.data[i+<span class="number">0</span>] = <span class="number">255</span>;</span><br><span class="line">    imgData.data[i+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    imgData.data[i+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    imgData.data[i+<span class="number">3</span>] = <span class="number">255</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 把图像数据绘制到画布上面</span></span><br><span class="line">  ctx.putImageData(imgData,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_36.png?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas画布图像绘制相关的技术细节。&lt;/div&gt;

&lt;h3 id=&quot;Canvas画布图像绘制基础&quot;&gt;&lt;a href=&quot;#Canvas画布图像绘制基础&quot; class=&quot;headerlink&quot; title=&quot;Canvas画布图像绘制基础
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [13]-Canvas绘图(文本)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/04/javaScript%E7%B3%BB%E5%88%97%20%5B13%5D-Canvas%E7%BB%98%E5%9B%BE(%E6%96%87%E6%9C%AC)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/04/javaScript系列 [13]-Canvas绘图(文本)/</id>
    <published>2019-01-04T00:22:16.000Z</published>
    <updated>2019-02-19T02:45:45.495Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas画布绘制文本相关的技术细节。</div><h3 id="Canvas画布绘制文本"><a href="#Canvas画布绘制文本" class="headerlink" title="Canvas画布绘制文本"></a>Canvas画布绘制文本</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_27.png?raw=true"></p><div class="titleX"><strong>核心API</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制文本(描边)</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.strokeText( text , x , y , [ maxWidth ]);</code><br><strong><code>作用</code></strong> 用于在画布上绘制文本(描边·没有填色)。<br><strong><code>说明</code></strong> 文本的颜色为黑色，可以通过<code>strokeStyle</code>属性来设置颜色或渐变。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">text &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;绘制的文本信息</span></li><li><span style="font-family:Georgia">x &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的X轴坐标</span></li><li><span style="font-family:Georgia">y &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的Y轴坐标</span></li><li><span style="font-family:Georgia">maxWidth &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;允许的最大文本宽度，单位为像素</span></li></ul><p><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"20px Impact"</span>;</span><br><span class="line">ctx.strokeText(<span class="string">"Nice to meet you!"</span>,<span class="number">10</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建渐变</span></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.createLinearGradient(<span class="number">200</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">0</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0"</span>,<span class="string">"black"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0.5"</span>,<span class="string">"blue"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"1.0"</span>,<span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"25px KaiTi"</span>;</span><br><span class="line">ctx.strokeStyle = gradient;</span><br><span class="line">ctx.strokeText(<span class="string">"wendingding.com"</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_28.png?raw=true"><br><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制文本(填充)</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.fillText( text , x , y , [ maxWidth ]);</code><br><strong><code>作用</code></strong> 用于在画布上绘制填色的文本。<br><strong><code>说明</code></strong> 文本的颜色为黑色，可以通过<code>fillStyle</code>属性来设置颜色或渐变。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">text &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;绘制的文本信息</span></li><li><span style="font-family:Georgia">x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的X轴坐标</span></li><li><span style="font-family:Georgia">y &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的Y轴坐标</span></li><li><span style="font-family:Georgia">maxWidth &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;允许的最大文本宽度，单位为像素</span></li></ul><p><strong><code>示例</code></strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"20px Georgia"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"Nice to meet you!"</span>,<span class="number">10</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建渐变</span></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.createLinearGradient(<span class="number">200</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">0</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0"</span>,<span class="string">"black"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0.5"</span>,<span class="string">"blue"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"1.0"</span>,<span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用渐变填色</span></span><br><span class="line">ctx.fillStyle = gradient;</span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"25px KaiTi"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"wendingding.com"</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_29.png?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>计算文本信息的宽度</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.measureText( text ).width;</code><br><strong><code>作用</code></strong> 用于计算和返回指定文本的宽度，单位以像素计。<br><strong><code>说明</code></strong> <code>measureText</code>方法返回的本身是一个对象，我们需要用过width来获取宽度值。<br><strong><code>参数</code></strong> <code>text</code>表示要测量的文本。</p><p><div class="titleX"><strong>文字绘制相关属性介绍</strong></div><br><span class="prop"><strong>font</strong></span> 设置文字的字号和字体等信息。<br><span class="prop"><strong>textAlign</strong></span> 设置水平对齐方式，可选值有<code>start(默认) | end | left | right | center</code>。<br><span class="prop"><strong>textBaseline</strong></span> 设置垂直对齐方式，可选值有<code>alphabetic(默认) | top | middle | bottom | hanging | ideographic</code>。其中<code>hanging</code>表示文本基线是悬挂基线，<code>ideographic</code>表示文本基线是表意基线。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"How are you?"</span>;</span><br><span class="line">ctx.font = <span class="string">"30px Times New Roman"</span>;</span><br><span class="line"></span><br><span class="line">ctx.strokeText(str,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.fillText(str,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">ctx.fillText(str,<span class="number">50</span>,<span class="number">150</span>,<span class="number">120</span>);   <span class="comment">//约束最大宽度</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.measureText(str).width);</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,ctx.canvas.height);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textAlignArr = [<span class="string">"start"</span>,<span class="string">"end"</span>,<span class="string">"left"</span>,<span class="string">"right"</span>,<span class="string">"center"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;textAlignArr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.textAlign = textAlignArr[i];</span><br><span class="line">    ctx.fillText(str,<span class="number">100</span>,<span class="number">200</span> + (<span class="number">50</span> *(i + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(ctx.canvas.width,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line">str = <span class="string">"正"</span>;</span><br><span class="line"><span class="keyword">var</span> textBaselineArr = [<span class="string">"alphabetic"</span>,<span class="string">"top"</span>,<span class="string">"hanging"</span>,<span class="string">"middle"</span>,<span class="string">"ideographic"</span>,<span class="string">"bottom"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;textBaselineArr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.textBaseline = textBaselineArr[i];</span><br><span class="line">    ctx.fillText(str,<span class="number">100</span>  + (<span class="number">80</span> *(i + <span class="number">1</span>)),<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Canvas实现文字竖排案例"><a href="#Canvas实现文字竖排案例" class="headerlink" title="Canvas实现文字竖排案例"></a>Canvas实现文字竖排案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"1000px"</span> <span class="attr">height</span>=<span class="string">"700px"</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"templateText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里也。 化而為鸟， 其名為鹏， 鹏之背， 不知其幾千里也。 怒而飞， 其翼若垂天之雲。 是鸟也， 海运則將徙於南冥， 南冥者， 天池也。 </span></span><br><span class="line"><span class="undefined">#齐谐者， 志怪者也。 谐之言曰： 鹏之徙於南冥也， 水擊三千里， 摶扶搖而上者九萬里。 去以六月息者也， 野马也， 塵埃也， 生物之以息相吹也。 天之苍苍， 其正色邪？ 其远而無所至极邪？ 其视下也， 亦若是則已矣。 </span></span><br><span class="line"><span class="undefined">#且夫水之积也不厚， 則其负大舟也無力。 覆杯水於坳堂之上， 則芥為之舟， 置杯焉則胶， 水浅而舟大也。 风之积也不厚， 則其负大翼也無力。 故九萬里， 則风斯在下矣， 而後乃今培风。 背负青天而莫之夭厄者， 而後乃今將圖南。 </span></span><br><span class="line"><span class="undefined">#蜩與學鸠笑之曰： “ 我決起而飞， 枪榆枋， 時則不至， 而控於地而已矣。 奚以之九萬里而南為？ ” 适莽苍者， 三飧而反， 腹犹果然。 适百里者， 宿舂粮。 适千里者， 三月聚粮。 之二虫， 又何知？ </span></span><br><span class="line"><span class="undefined">#小知不及大知， 小年不及大年。 奚以知其然也？ 朝菌不知晦朔， 惠蛄不知春秋， 此小年也。 楚之南有冥灵者， 以五百歲為春， 五百歲為秋； 上古有大椿者， 以八千歲為春， 八千歲為秋； 而彭祖乃今以久特闻， 眾人匹之， 不亦悲乎？ </span></span><br><span class="line"><span class="undefined">#汤之问棘也是已： 穷發之北有冥海者， 天池也。 有鱼焉， 其廣數千里， 未有知其修者， 其名為鲲。 有鸟焉， 其名為鹏， 背若泰山， 翼若垂天之雲， 摶扶搖羊角而上者九萬里， 绝雲气， 负青天， 然後圖南， 且适南冥也。 </span></span><br><span class="line"><span class="undefined">#斥鹌笑之曰： “ 彼且奚适也？ 我腾跃而上， 不过數仞而下， 翱翔蓬蒿之间， 耻亦飞之至也。 而彼且奚适也？ ” 此小大之辨也。 </span></span><br><span class="line"><span class="undefined">#故夫知效一官， 行比一鄉， 德合一君， 而征一國者， 其自视也， 亦若此矣。 而宋荣子犹然笑之。 且舉世誉之而不加勸， 舉世非之而不加沮。 定乎內外之分， 辨乎荣辱之境， 斯已矣。 彼其於世， 未數數焉也。 虽然， 犹有未树也。</span></span><br><span class="line"><span class="undefined">#夫列子禦风而行， 泠然善也， 旬有五日而後反。 彼於致福， 未數數然也。 此虽免乎行， 犹有所待者也。 </span></span><br><span class="line"><span class="undefined">#若夫乘天地之正， 而禦六气之辩， 以游無穷者， 彼且惡乎待哉！ 故曰： 至人無己， 神人無功， 聖人無名。 </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m      = <span class="number">30</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h      = ctx.canvas.height;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> w      = ctx.canvas.width;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> count  = <span class="built_in">Math</span>.floor(w / m);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= count; i++) &#123;</span></span><br><span class="line"><span class="undefined">        ctx.beginPath();</span></span><br><span class="line"><span class="undefined">        ctx.moveTo(i*m - 0.5 ,0);</span></span><br><span class="line"><span class="undefined">        ctx.lineTo(i*m - 0.5 ,h);</span></span><br><span class="line"><span class="javascript">        ctx.strokeStyle = <span class="string">"#1D244F"</span>;</span></span><br><span class="line"><span class="undefined">        ctx.stroke();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    CanvasRenderingContext2D.prototype.fillTextVertical = <span class="function"><span class="keyword">function</span> (<span class="params">text, x, y</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">        self.textAlign = <span class="string">'center'</span>;</span></span><br><span class="line"><span class="javascript">        self.textBaseline = <span class="string">'middle'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrText = text.split(<span class="string">''</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrWidth = arrText.map(<span class="function"><span class="keyword">function</span> (<span class="params">letter</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> self.measureText(letter).width;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        arrText.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">letter, index</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(letter == <span class="string">"#"</span>)</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="undefined">                y = 12 + 50;</span></span><br><span class="line"><span class="undefined">                x = x - 30;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> letterWidth = arrWidth[index];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> code = letter.charCodeAt(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (code &lt;= <span class="number">256</span>) &#123;</span></span><br><span class="line"><span class="undefined">                self.translate(x, y);</span></span><br><span class="line"><span class="javascript">                self.rotate(<span class="number">90</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span></span><br><span class="line"><span class="undefined">                self.translate(-x, -y);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; text.charCodeAt(index - <span class="number">1</span>) &lt; <span class="number">256</span>) &#123;</span></span><br><span class="line"><span class="undefined">                y = y + arrWidth[index - 1] / 2;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            self.fillText(letter, x, y);</span></span><br><span class="line"><span class="undefined">            self.setTransform(1, 0, 0, 1, 0, 0);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> letterWidth = arrWidth[index];</span></span><br><span class="line"><span class="undefined">            y = y + letterWidth;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(y &gt;= (self.canvas.height - <span class="number">12</span>))</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="undefined">                y = 12;</span></span><br><span class="line"><span class="undefined">                x = x - 30;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> templateText = <span class="built_in">document</span>.getElementById(<span class="string">"templateText"</span>).innerText;</span></span><br><span class="line"><span class="javascript">    ctx.font = <span class="string">'20px STKaiti, sans-serif'</span>;</span></span><br><span class="line"><span class="javascript">    ctx.fillStyle = <span class="string">"#1D244F"</span>;</span></span><br><span class="line"><span class="javascript">    ctx.fillTextVertical(<span class="string">"逍遥游( 上)  · 庄子"</span>, canvas.width - <span class="number">25</span>,  <span class="number">0</span>);</span></span><br><span class="line"><span class="undefined">    ctx.fillTextVertical(templateText, canvas.width - 25, 12);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas画布绘制文本相关的技术细节。&lt;/div&gt;

&lt;h3 id=&quot;Canvas画布绘制文本&quot;&gt;&lt;a href=&quot;#Canvas画布绘制文本&quot; class=&quot;headerlink&quot; title=&quot;Canvas画布绘制文本&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [12]-Canvas绘图(曲线)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/03/javaScript%E7%B3%BB%E5%88%97%20%5B12%5D-Canvas%E7%BB%98%E5%9B%BE(%E6%9B%B2%E7%BA%BF)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/03/javaScript系列 [12]-Canvas绘图(曲线)/</id>
    <published>2019-01-03T00:21:15.000Z</published>
    <updated>2019-02-19T02:45:45.480Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas中的弧度、曲线、圆弧以及文字的绘制方法以及径向渐变等内容，并提供饼状图等综合案例。</div><h3 id="Canvas中的弧度、曲线和圆弧"><a href="#Canvas中的弧度、曲线和圆弧" class="headerlink" title="Canvas中的弧度、曲线和圆弧"></a>Canvas中的弧度、曲线和圆弧</h3><div class="titleX"><strong>专业术语</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_13.png?raw=true" width="500px"><br><strong><code>夹角</code></strong> 从一个点发射(延伸)出两条线段，两条线相交的部分会构成一个夹角。<br><strong><code>角度</code></strong> 两条相交直线中的任何一条与另一条相叠合时必须转动的量的量度，单位符号为<code>°</code>。<br><strong><code>周角</code></strong> 一条直线围绕起点需要与自己相叠合时必须转动的量的量度被称为周角，周角等分为<code>360</code>度。<br><strong><code>弧度</code></strong> 角的度量单位，弧长等于半径的弧其所对的圆心角为1弧度(<span style="color:red">弧长等于半径时，射线夹角为1弧度</span>)。<br><br><div style="border:1px solid #888;width:300px;height:44px;line-height:44px;text-align:center;"><strong>公式 &nbsp;&nbsp;&nbsp;&nbsp; 弧度 = 角度 * π / 180</strong></div><p>在使用JavaScript编写代码进行相关计算的时候，经常需要使用Math提供的成员，这里简单说明。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_14.png?raw=true"></p><p><strong><span style="color:red">Math.PI</span></strong> 代表着<strong>π</strong>。</p><p><strong><span style="color:red">Math.sin(弧度)</span></strong> 夹角对面的边 与 斜边的比值。<br><strong><span style="color:red">Math.cos(弧度)</span></strong> 夹角侧面的边 与 斜边的比值。</p><p>这里给出圆形上点坐标的计算公式，其中<code>x0</code>和<code>y0</code>为圆心坐标，<code>rad</code>为弧度，<code>R</code>为圆的半径。</p><div style="border:1px solid #888;width:400px;height:44px;line-height:44px;text-align:center;margin-bottom:10px"><strong>坐标 &nbsp;&nbsp;&nbsp;&nbsp; ( x0 + Math.cos(rad) x R&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;&nbsp;&nbsp;y0 + Math.sin(rad) x R )</strong></div><div class="titleX"><strong>核心API介绍</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制圆弧</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.arc(x,y,r,startAngle,endAngle,counterclockwise);</code><br><strong><code>作用</code></strong> 通过该方法来绘制圆弧或者(半)圆。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x 圆心X轴坐标</span></li><li><span style="font-family:Georgia">y 圆心Y轴坐标</span></li><li><span style="font-family:Georgia">r 圆的半径</span></li><li><span style="font-family:Georgia">startAngle  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;开始弧度</span></li><li><span style="font-family:Georgia">endAngle    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结束弧度</span></li><li><span style="font-family:Georgia">counterclockwise &nbsp;&nbsp;是否逆时针旋转(默认为false)</span></li></ul><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制圆弧曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.arcTo(x1,y1,x2,y2,r);</code><br><strong><code>作用</code></strong> 参考两个点并根据指定半径来创建一条圆弧路径。<br><strong><code>备注</code></strong> 绘制的圆弧与当前点到第一个点的连线相切且与第一第二个点的连线也相切。<br><strong><code>说明</code></strong> <code>arcTo</code>方法的这些特性决定了该方法非常适合用来绘制圆角矩形。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x1 第一个参考点的X轴坐标</span></li><li><span style="font-family:Georgia">y1 第一个参考点的Y轴坐标</span></li><li><span style="font-family:Georgia">x2 第二个参考点的X轴坐标</span></li><li><span style="font-family:Georgia">y3 第二个参考点的Y轴坐标</span></li><li><span style="font-family:Georgia">r &nbsp;&nbsp;&nbsp;圆的半径</span></li></ul><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>圆形渐变</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.createRadialGradient(x0,y0,r0,x1,y1,r1);;</code><br><strong><code>作用</code></strong> 通过该方法来绘制圆弧或者(半)圆。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 渐变开始圆的X轴坐标</span></li><li><span style="font-family:Georgia">y0 渐变开始圆的Y轴坐标</span></li><li><span style="font-family:Georgia">r0 开始圆的半径</span></li><li><span style="font-family:Georgia">x1 渐变结束圆的X轴坐标</span></li><li><span style="font-family:Georgia">y1 渐变结束圆的Y轴坐标</span></li><li><span style="font-family:Georgia">r1 结束圆的半径</span></li></ul><h3 id="Canvas曲线-圆弧绘制示例"><a href="#Canvas曲线-圆弧绘制示例" class="headerlink" title="Canvas曲线-圆弧绘制示例"></a>Canvas曲线-圆弧绘制示例</h3><p><div class="titleX"><strong>数学方程绘制图形Demo1</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_17.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 通过代数方程来绘制直线</span></span><br><span class="line"><span class="comment">//设置路径(起点)</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">30</span>,y = <span class="number">0</span>; x &lt; <span class="number">1000</span> ; x++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过代数方程来绘制直线</span></span><br><span class="line">    y = x / <span class="number">2</span> * <span class="number">0.3</span>;</span><br><span class="line">    ctx.lineTo(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置描边的颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"#0Af"</span>;</span><br><span class="line"><span class="comment">//描边绘制出图案</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 通过三角函数来绘制曲线(正玄/余弦)</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">30</span>,y = <span class="number">0</span>; x &lt; <span class="number">1000</span> ; x++)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">// 高度 * 波长 + 中心轴位置</span></span><br><span class="line">    y = <span class="number">50</span> * <span class="built_in">Math</span>.sin(x/<span class="number">25</span>) + <span class="number">100</span>;</span><br><span class="line">    ctx.lineTo(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置描边的颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line"><span class="comment">//描边绘制出图案</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>数学方程绘制图形Demo2</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_20.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">offsetX,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dig = <span class="built_in">Math</span>.PI / <span class="number">15</span> * n;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">30</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="built_in">Math</span>.sin(i * dig);</span><br><span class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.cos(i * dig);</span><br><span class="line">        ctx.lineTo(offsetX + x * <span class="number">80</span>,<span class="number">150</span> + y * <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//闭合路径</span></span><br><span class="line">    ctx.closePath();</span><br><span class="line">    <span class="comment">//设置样式并填充</span></span><br><span class="line">    ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    <span class="comment">//设置样式并描边</span></span><br><span class="line">    ctx.strokeStyle = <span class="string">"#666"</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">14</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">7</span>,<span class="number">26</span>];</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">n,i</span>)</span>&#123;</span><br><span class="line">    draw((i + <span class="number">1</span>) * <span class="number">160</span>,n);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制相切曲线Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_21.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x0 = <span class="number">100</span>,y0 = <span class="number">100</span>,</span><br><span class="line">    x1 = <span class="number">500</span>,y1 = <span class="number">100</span>,</span><br><span class="line">    x2 = <span class="number">450</span>,y2 = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x0,y0);</span><br><span class="line">ctx.arcTo(x1,y1,x2,y2,<span class="number">30</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x0,y0);</span><br><span class="line">ctx.lineTo(x1,y1);</span><br><span class="line">ctx.lineTo(x2,y2);</span><br><span class="line"></span><br><span class="line">ctx.fillText(<span class="string">'x0,y0'</span>,x0,y0+<span class="number">10</span>)</span><br><span class="line">ctx.fillText(<span class="string">'x1,y1'</span>,x1+<span class="number">10</span>,y1+<span class="number">10</span>)</span><br><span class="line">ctx.fillText(<span class="string">'x2,y2'</span>,x2+<span class="number">10</span>,y2)</span><br><span class="line">ctx.strokeStyle = <span class="string">"#333"</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制圆角矩形Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_22.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawRoundedRect</span>(<span class="params">x,y,w,h,r,isFill,isStrokeRect</span>)</span>&#123;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo( x + r , y );</span><br><span class="line">    ctx.arcTo(  x + w , y , x + w , y + h , r);</span><br><span class="line">    ctx.arcTo(  x + w , y + h , x , y + h , r);</span><br><span class="line">    ctx.arcTo(  x , y + h , x , y , r);</span><br><span class="line">    ctx.arcTo(  x , y ,  x + r , y , r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isFill) &#123;</span><br><span class="line">        ctx.fillStyle = getRandomColor();</span><br><span class="line">        ctx.fill();</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ctx.strokeStyle = getRandomColor();</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(isStrokeRect)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo( x + r , y );</span><br><span class="line">        ctx.lineTo(x + w  , y );</span><br><span class="line">        ctx.lineTo(x + w  , y + h);</span><br><span class="line">        ctx.lineTo(x  , y + h);</span><br><span class="line">        ctx.lineTo(x  , y);</span><br><span class="line">        ctx.lineTo(x + r  , y);</span><br><span class="line"></span><br><span class="line">        ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">        ctx.fillText(<span class="string">"x0,y0"</span>,x + r,y);</span><br><span class="line">        ctx.fillText(<span class="string">"x1,y1"</span>,x + w,y);</span><br><span class="line">        ctx.fillText(<span class="string">"x2,y2"</span>,x + w,y + h + <span class="number">10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x3,y3"</span>,x<span class="number">-10</span>,y + h + <span class="number">10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x4,y4"</span>,x - <span class="number">10</span>,y<span class="number">-10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x5,y5"</span>,x + r,y + <span class="number">10</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawRoundedRect(<span class="number">50</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">drawRoundedRect(<span class="number">200</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">drawRoundedRect(<span class="number">350</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">10</span>,<span class="literal">true</span>);</span><br><span class="line">drawRoundedRect(<span class="number">500</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">drawRoundedRect(<span class="number">650</span>,<span class="number">40</span>,<span class="number">120</span>,<span class="number">100</span>,<span class="number">30</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制弧线、扇形、圆弧和圆Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_16.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制弧线</span></span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制扇形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"#f09"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充扇形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3.2</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">3.8</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">"#195"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制半圆</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"#666"</span>;</span><br><span class="line">ctx.arc(<span class="number">450</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.arc(<span class="number">570</span>,<span class="number">80</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制五环图案Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_15.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)</span><br><span class="line">&#123;   ctx.beginPath();</span><br><span class="line">    <span class="keyword">if</span>( i &gt;=<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.arc(x + (i * <span class="number">80</span>) <span class="number">-200</span>,y + <span class="number">60</span>,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ctx.arc(x + (i * <span class="number">80</span>),y,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.strokeStyle = getRandomColor();</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制等分的圆Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_18.png?raw=true" height="140px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//描边</span></span><br><span class="line">drawCircle(<span class="number">100</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">200</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">3</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">300</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">4</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">400</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">20</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">500</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">600</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">200</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充</span></span><br><span class="line">drawCircle(<span class="number">100</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">2</span>);</span><br><span class="line">drawCircle(<span class="number">200</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">3</span>);</span><br><span class="line">drawCircle(<span class="number">300</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">4</span>);</span><br><span class="line">drawCircle(<span class="number">400</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">20</span>);</span><br><span class="line">drawCircle(<span class="number">500</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">100</span>);</span><br><span class="line">drawCircle(<span class="number">600</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params">x,y,r,n,isStroke</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span>  i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//计算开始和结束的角度</span></span><br><span class="line">        <span class="keyword">var</span> angle = <span class="number">2</span> * <span class="built_in">Math</span>.PI / n;</span><br><span class="line">        <span class="keyword">var</span> startAngle  = angle * i;</span><br><span class="line">        <span class="keyword">var</span> endAngle    = angle * (i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始路径</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置绘制圆的起点</span></span><br><span class="line">        ctx.moveTo(x,y);</span><br><span class="line">        ctx.arc(x,y,r,startAngle,endAngle,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isStroke)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ctx.strokeStyle = getRandomColor();</span></span><br><span class="line">            ctx.stroke();</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ctx.fillStyle = getRandomColor();</span><br><span class="line">            ctx.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取填充的颜色/随机</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制饼状图综合示例</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_19.png?raw=true" height="140px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PieChart</span> (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx        = ctx || <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">this</span>.x          = <span class="keyword">this</span>.ctx.canvas.width/<span class="number">2</span> - <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">this</span>.y          = <span class="keyword">this</span>.ctx.canvas.height/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.r          = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">this</span>.outLine    = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>.dataList   = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PieChart.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>:PieChart,</span><br><span class="line">    init:function(dataList)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataList = dataList || [&#123;<span class="attr">title</span>:<span class="string">"默认"</span>,<span class="attr">value</span>:<span class="number">100</span>&#125;];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据数据来计算并转换弧度</span></span><br><span class="line">        <span class="keyword">this</span>.transformAngle();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制饼状图</span></span><br><span class="line">        <span class="keyword">this</span>.drawPie();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawPie:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> startAngle = <span class="number">0</span>,endAngle;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">this</span>.dataList.length ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> item = <span class="keyword">this</span>.dataList[i];</span><br><span class="line">            endAngle = startAngle + item.angle;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</span><br><span class="line">            <span class="keyword">this</span>.ctx.arc(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y,<span class="keyword">this</span>.r,startAngle,endAngle,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">var</span> color= <span class="keyword">this</span>.ctx.strokeStyle= <span class="keyword">this</span>.ctx.fillStyle= <span class="keyword">this</span>.getRandomColor();</span><br><span class="line">            <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">            <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制标题</span></span><br><span class="line">            <span class="keyword">this</span>.drawPieTitle(startAngle,item.angle,color,item.title)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制图例</span></span><br><span class="line">            <span class="keyword">this</span>.drawPieLegend(i,item.title);</span><br><span class="line">            startAngle = endAngle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    drawPieTitle:<span class="function"><span class="keyword">function</span>(<span class="params">startAngle,angle,color,title</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> edge    = <span class="keyword">this</span>.r + <span class="keyword">this</span>.outLine;</span><br><span class="line">        <span class="keyword">var</span> edgeX   = <span class="built_in">Math</span>.cos(startAngle + angle / <span class="number">2</span>) * edge; <span class="comment">/*x轴方向的直角边*/</span></span><br><span class="line">        <span class="keyword">var</span> edgeY   = <span class="built_in">Math</span>.sin(startAngle + angle / <span class="number">2</span>) * edge; <span class="comment">/*y轴方向的直角边*/</span></span><br><span class="line">        <span class="keyword">var</span> outX    = <span class="keyword">this</span>.x + edgeX;                          <span class="comment">/*计算延伸出去的点坐标*/</span></span><br><span class="line">        <span class="keyword">var</span> outY    = <span class="keyword">this</span>.y + edgeY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//画出坐标点</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(outX,outY);</span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = color;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制文字下划线</span></span><br><span class="line">        <span class="keyword">var</span> textWidth   = <span class="keyword">this</span>.ctx.measureText(title).width + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">var</span> lineX       = outX &gt; <span class="keyword">this</span>.x ? outX + textWidth : outX - textWidth;</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(lineX,outY);</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制文字</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.font           = <span class="string">"15px KaiTi"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textAlign      = outX &gt; <span class="keyword">this</span>.x ? <span class="string">"left"</span> : <span class="string">"right"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textBaseline   = <span class="string">"bottom"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillText(title,outX,outY);</span><br><span class="line">    &#125;,</span><br><span class="line">    drawPieLegend:<span class="function"><span class="keyword">function</span>(<span class="params">index,title</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在计算的时候最好的能够反着计算</span></span><br><span class="line">        <span class="keyword">var</span> space = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">var</span> rectW = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">var</span> rectH = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">var</span> rectX = <span class="keyword">this</span>.x + <span class="keyword">this</span>.r + <span class="number">80</span>;</span><br><span class="line">        <span class="keyword">var</span> rectY = <span class="keyword">this</span>.y + (index * <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//绘制矩形</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.fillRect(rectX,rectY,rectW,rectH);</span><br><span class="line">        <span class="comment">// this.ctx.beginPath();</span></span><br><span class="line">        <span class="comment">// 绘制文字</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.textAlign      = <span class="string">'left'</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textBaseline   = <span class="string">'top'</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillStyle      = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillText(title,rectX + rectW + space,rectY);</span><br><span class="line">    &#125;,</span><br><span class="line">    getRandomColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'rgb('</span>+r+<span class="string">','</span>+g+<span class="string">','</span>+b+<span class="string">')'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    transformAngle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self    = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> total   = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.dataList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">            total += item.value;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.dataList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">            self.dataList[i].angle = <span class="number">2</span> * <span class="built_in">Math</span>.PI * item.value/total;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>  data = [&#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">title</span>:<span class="string">"UI"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">26</span>,<span class="attr">title</span>:<span class="string">"java"</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">title</span>:<span class="string">"iOS"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">63</span>,<span class="attr">title</span>:<span class="string">"H5"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">25</span>,<span class="attr">title</span>:<span class="string">"Node"</span>&#125;]</span><br><span class="line"><span class="keyword">var</span>  pie  = <span class="keyword">new</span> PieChart().init(data);</span><br></pre></td></tr></table></figure><h3 id="Canvas中的贝塞尔曲线"><a href="#Canvas中的贝塞尔曲线" class="headerlink" title="Canvas中的贝塞尔曲线"></a>Canvas中的贝塞尔曲线</h3><p><a href="">贝塞尔曲线</a>(<code>Bézier curve</code>)，最初由法国物理学家和数学家<code>Paul de Casteljau</code>发明，1962年被法国工程师皮埃尔·贝塞尔（<code>Pierre Bézier</code>）广泛发表并运用在汽车的车身设计上，现在多应用在计算机图形系统中。</p><p><a href="">贝塞尔曲线</a>分为平方(<code>quadratic</code>)贝塞尔曲线和立方(<code>cubic</code>)贝塞尔曲线两其中平方贝塞尔曲线是一种二次曲线，由两个锚点和一个控制点总共三个点来定义，而立方贝塞尔曲线是一种三次曲线，由两个锚点和两个控制点共四个点来定义。它们的区别在于立方贝塞尔曲线能够在两个方向上弯曲。</p><p><a href="">Canvas</a>支持两种贝塞尔曲线，分别由<code>quadraticCurveTo</code>和<code>bezierCurveTo</code>方法来实现。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>二次贝塞尔曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.quadraticCurveTo(x0,y0,x1,y1);;</code><br><strong><code>作用</code></strong> 通过使用表示二次贝塞尔曲线的指定控制点，向当前路径添加一个点绘制曲线。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y0 控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x1 结束点(锚点)的X轴坐标</span></li><li><span style="font-family:Georgia">y1 结束点(锚点)的Y轴坐标</span></li></ul><p><strong><code>说明</code></strong> 二次贝塞尔曲线需要两个点。分别是用于二次贝塞尔计算中的控制点和曲线的结束点。<br><strong><code>注意</code></strong> 曲线还需要一个开始点(路径最后的点)如果路径不存在，那么可以使用<code>moveTo()</code>方法来定义。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>三次贝塞尔曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.bezierCurveTo(x0,y0,x1,y1,x2,y2);;</code><br><strong><code>作用</code></strong> 通过使用表示二次贝塞尔曲线的指定控制点，向当前路径添加一个点绘制曲线。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 第一个控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y0 第一个控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x1 第二个控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y1 第二个控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x2 结束点(锚点)的X轴坐标</span></li><li><span style="font-family:Georgia">y2 结束点(锚点)的Y轴坐标</span></li></ul><p><strong><code>说明</code></strong> 三次贝塞尔曲线需要三个点，两个控制点和一个锚点。<br><strong><code>注意</code></strong> 曲线还需要一个开始点(路径最后的点)如果路径不存在，那么可以使用<code>moveTo()</code>方法来定义。</p><h3 id="Canvas贝塞尔曲线绘制示例"><a href="#Canvas贝塞尔曲线绘制示例" class="headerlink" title="Canvas贝塞尔曲线绘制示例"></a>Canvas贝塞尔曲线绘制示例</h3><p><div class="titleX"><strong>二次贝塞尔曲线示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_24.png?raw=true" height="150px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置曲线的起点(当前路径的最后点没有则通过moveTo设置)</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.quadraticCurveTo(<span class="number">100</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制文字</span></span><br><span class="line"><span class="keyword">var</span> margin = <span class="number">15</span>;</span><br><span class="line">ctx.fillText(<span class="string">"(100,100)"</span>,<span class="number">100</span> - margin,<span class="number">100</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"(100,300)"</span>,<span class="number">100</span> - margin,<span class="number">300</span> + margin);</span><br><span class="line">ctx.fillText(<span class="string">"(500,200)"</span>,<span class="number">500</span> - margin,<span class="number">200</span> + margin);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制点</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">300</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">500</span>,<span class="number">200</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>三次贝塞尔曲线示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_25.png?raw=true" height="200px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置曲线的起点(当前路径的最后点没有则通过moveTo设置)</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.bezierCurveTo(<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">50</span>,<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制文字</span></span><br><span class="line"><span class="keyword">var</span> margin = <span class="number">15</span>;</span><br><span class="line">ctx.fillText(<span class="string">"起点 (100,100)"</span>,<span class="number">100</span> - margin,<span class="number">100</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"控制点 (100,300)"</span>,<span class="number">100</span> - margin,<span class="number">300</span> + margin);</span><br><span class="line">ctx.fillText(<span class="string">"(300,50)"</span>,<span class="number">300</span> - margin,<span class="number">50</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"(500,200)"</span>,<span class="number">500</span> - margin,<span class="number">200</span> + margin);</span><br><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制点</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">300</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">500</span>,<span class="number">200</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>贝塞尔曲线复杂图形示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_26.png?raw=true" height="150px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制贝塞尔曲线</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBezierCurve</span>(<span class="params">dx,dy,n</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">var</span> x0,x1,x3,y1,y2,y3;</span><br><span class="line">    <span class="keyword">var</span> dig = <span class="built_in">Math</span>.PI / <span class="number">15</span> * n;</span><br><span class="line"></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">30</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span>  X = <span class="built_in">Math</span>.sin(i * dig);</span><br><span class="line">        <span class="keyword">var</span>  Y = <span class="built_in">Math</span>.cos(i * dig);</span><br><span class="line">        x0 = dx + X * s;</span><br><span class="line">        x1 = dx + X * s + <span class="number">100</span>;</span><br><span class="line">        x2 = dx + X * s;</span><br><span class="line"></span><br><span class="line">        y0 = dy + Y * s - <span class="number">100</span>;</span><br><span class="line">        y1 = dy + Y * s;</span><br><span class="line">        y2 = dy + Y * s;</span><br><span class="line">        ctx.bezierCurveTo(x0 , y0 , x1 , y1 , x2 , y2);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.closePath();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制和填充</span></span><br><span class="line">    ctx.fillStyle   = <span class="string">"#eee"</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawBezierCurve(<span class="number">150</span>,<span class="number">250</span>,<span class="number">13</span>);</span><br><span class="line">drawBezierCurve(<span class="number">480</span>,<span class="number">250</span>,<span class="number">24</span>);</span><br><span class="line">drawBezierCurve(<span class="number">820</span>,<span class="number">250</span>,<span class="number">31</span>);</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas中的弧度、曲线、圆弧以及文字的绘制方法以及径向渐变等内容，并提供饼状图等综合案例。&lt;/div&gt;

&lt;h3 id=&quot;Canvas中的弧度、曲线和圆弧&quot;&gt;&lt;a href=&quot;#Canvas中的弧度、曲线和圆弧&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [11]-Canvas绘图(路径)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/02/javaScript%E7%B3%BB%E5%88%97%20%5B11%5D-Canvas%E7%BB%98%E5%9B%BE(%E8%B7%AF%E5%BE%84)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/02/javaScript系列 [11]-Canvas绘图(路径)/</id>
    <published>2019-01-02T00:20:14.000Z</published>
    <updated>2019-02-19T02:45:45.484Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas中的路径、矩形以及描边和填充等绘制方法，非零正交原则以及线性渐变等内容，并提供折线图和柱状图等综合案例。</div><h3 id="Canvas路径和状态"><a href="#Canvas路径和状态" class="headerlink" title="Canvas路径和状态"></a>Canvas路径和状态</h3><div class="titleX"><strong>核心API介绍</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置绘制的起点</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.moveTo(x, y);</code><br><strong><code>参数</code></strong> 第一个参数和第二个参数都是相对于<a href="">Canvas</a>画布左上角的X轴和Y轴坐标。<br><strong><code>作用</code></strong> 设置<a href="">Canvas</a>上下文绘制路径的起点，相当于设置画笔从哪个位置开始移动。<br><strong><code>注意</code></strong> 使用<a href="">Canvas</a>上下文绘制路径前必须先设置起点，否则绘制无效。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置绘制目标点</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.lineTo(x, y);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是相对于<a href="">Canvas</a>画布左上角的X轴和Y轴坐标。<br><strong><code>作用</code></strong>  设置<a href="">Canvas</a>上下文绘制路径的目标点，相当于设置画笔移动的目标位置。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置描边</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.stroke();</code><br><strong><code>作用</code></strong>  根据路径来绘制(描边)，可以在绘制前通过<code>strokeStyle</code>来设置描边样式。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置填充</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.fill();</code><br><strong><code>作用</code></strong>  对闭合路径的内容进行绘制(填充),可以通过<code>fillStyle</code>来设置样式，默认黑色。<br><strong><code>参数</code></strong> <code>fill</code>方法有两个可选参数(<code>nonzero | evenodd</code>) ，控制填充时使用环绕原则(默认)或奇偶原则。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>矩形路径</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.rect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>注意</code></strong>  <code>rect</code>方法只是规划了矩形的路径，并没有填充和描边，因此还需要搭配<code>stroke</code>或<code>fill</code>使用。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>描边矩形</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.strokeRect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法绘制完矩形路径后立即进行<code>stroke</code>描边绘制，等价于<code>rect + stroke</code>组合。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>填充矩形</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.fillRect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法绘制完矩形路径后立即进行<code>fill</code>填充绘制，等价于<code>rect + fill</code>方法的组合。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>矩形擦除</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.clearRect(x, y, width, hegiht);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法用于擦除指定矩形内绘制的内容，需注意如果重置画布宽度，内容将自动重绘。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>开始和闭合路径</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.beginPath();</code>和<code>ctx.closePath();</code><br><strong><code>作用</code></strong>  开始路径的作用是将不同的绘制路径进行隔离，闭合路径会自动连接最开始和最后的点。<br><strong><code>注意</code></strong>  执行开始路径方法时表示将要重新绘制一个新的路径，可以分开设置和管理多个路径的样式。</p><p><div class="titleX"><strong>路径的核心属性介绍</strong></div><br><span class="prop"><strong>lineCap</strong></span> 设置或返回线条末端线帽样式，可选值有<code>butt默认</code>|<code>round圆形</code>|<code>square正方形</code><br><span class="prop"><strong>lineJoin</strong></span>设置或返回所创建边角的类型，可选值有<code>miter默认</code>|<code>round圆角</code>|<code>bevel斜角</code><br><span class="prop"><strong>lineWidth</strong></span>设置或返回当前线条的宽度，以像素计，默认值为1。<br><span class="prop"><strong>miterLimit</strong></span>设置或返回最大斜接长度。<br><span class="prop" style="background:#195;color:#fff"><strong>fillStyle</strong></span>设置或返回用于填充绘画的颜色、渐变或模式。<br><span class="prop" style="background:#195;color:#fff"><strong>strokeStyle</strong></span>设置或返回用于笔触(描边)的颜色、渐变或模式。<br><span class="prop"><strong>shadowColor</strong></span>设置或返回用于阴影的颜色，和<code>shadowBlur</code>一起使用。<br><span class="prop"><strong>shadowBlur</strong></span>设置或返回用于阴影的模糊级别，和<code>shadowColor</code>一起使用。<br><span class="prop"><strong>shadowOffsetX</strong></span>设置或返回阴影距形状的水平距离，0指示阴影位于形状的正下方。<br><span class="prop"><strong>shadowOffsetY</strong></span>设置或返回阴影距形状的垂直距离，0指示阴影位于形状的正下方。</p><h3 id="Canvas路径绘制示例"><a href="#Canvas路径绘制示例" class="headerlink" title="Canvas路径绘制示例"></a>Canvas路径绘制示例</h3><p><div class="titleX"><strong>路径绘制Demo</strong></div><br><strong><code>Demo-1 绘制交叉和平行线</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_04.png?raw=true" width="500px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 绘制一条直线</span></span><br><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">20.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">20.5</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"#195"</span>;   <span class="comment">//设置描边样式</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 绘制两条平行线</span></span><br><span class="line">ctx.moveTo(<span class="number">20.5</span>,<span class="number">40</span>);        <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">20.5</span>,<span class="number">120</span>);       <span class="comment">//设置目标点</span></span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">40.5</span>,<span class="number">40</span>);        <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">40.5</span>,<span class="number">120</span>);       <span class="comment">//设置目标点</span></span><br><span class="line">ctx.stroke();               <span class="comment">//绘制路径(描边)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//03 绘制两条交叉线条</span></span><br><span class="line">ctx.moveTo(<span class="number">60</span>,<span class="number">60</span>);          <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">100</span>);        <span class="comment">//设置目标点</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">60</span>);         <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">60</span>,<span class="number">100</span>);         <span class="comment">//设置目标点</span></span><br><span class="line">ctx.stroke();               <span class="comment">//绘制路径(描边)</span></span><br></pre></td></tr></table></figure><p><strong><code>Demo-2 开始路径和闭合路径</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_05.png?raw=true" width="400px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 绘制两条交叉的线(演示beginPath方法的使用)</span></span><br><span class="line"><span class="comment">//(1) 设置并绘制第一条线</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2) 设置并绘制第二条线</span></span><br><span class="line">ctx.beginPath();         <span class="comment">//重新开启路径</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">//设置线条和描边的样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 绘制两条相接的线(演示closePath方法的使用)</span></span><br><span class="line">ctx.beginPath();        <span class="comment">//重新开启路径</span></span><br><span class="line">ctx.moveTo(<span class="number">180.5</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">180.5</span>,<span class="number">180.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">260</span>,<span class="number">180.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置关闭路径(自动连接两个点闭合以构成封闭区域)</span></span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置图形填充和样式</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#eee"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><strong><code>Demo-3 绘制虚线的N种方式</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_06.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 绘制虚线的第一种方式(通过fillRect矩形绘制API)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一个参数：矩形的起点X</span></span><br><span class="line">    <span class="comment">//第二个参数：矩形的起点Y</span></span><br><span class="line">    <span class="comment">//第三个参数：矩形的宽度</span></span><br><span class="line">    <span class="comment">//第四个参数：矩形的高度</span></span><br><span class="line">    ctx.fillRect((i *<span class="number">2</span>),<span class="number">30</span>,<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line">    ctx.fillRect((i *<span class="number">2</span>),<span class="number">70</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    ctx.fillRect((i *<span class="number">5</span>),<span class="number">100</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 绘制虚线的第二种方式(通过路径和setLineDash绘制API)</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">130.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">130.5</span>);</span><br><span class="line">ctx.setLineDash([<span class="number">5</span>]);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启路径绘制另一条虚线</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">160.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">160.5</span>);</span><br><span class="line"><span class="comment">//参数说明[第一段的长度、第二段的长度、第三段的长度 * 重复]</span></span><br><span class="line">ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"><span class="comment">//获取虚线的排列方式(不重复那段的排列方式)</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.getLineDash()); <span class="comment">//[5, 10, 15, 5, 10, 15]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启路径绘制另一条虚线(偏移量参照)</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">180.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">180.5</span>);</span><br><span class="line"><span class="comment">//设置虚线的偏移量</span></span><br><span class="line">ctx.lineDashOffset = <span class="number">-30</span>;</span><br><span class="line">ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></p><p><strong><code>Demo-4 绘制实心三角形和矩形(四边形)</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_07.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//001 使用路径的方式绘制三角(边)形</span></span><br><span class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">80</span>,<span class="number">100</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line"><span class="comment">// ctx.lineTo(20,20);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(填充)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#195"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.stroke();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 使用路径的方式绘制四角(边)形</span></span><br><span class="line"><span class="comment">//备注：如果是填充的话，那么只需要四个点的坐标即可确定</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">150</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">350</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">350</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">// ctx.closePath();</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.strokeStyle = "red";</span></span><br><span class="line"><span class="comment">// ctx.stroke();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(填充)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure></p><p><strong><code>Demo-5 绘制矩形API使用示例</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_08.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制矩形API介绍</span></span><br><span class="line"><span class="comment">//001 使用rect + stroke|fill 方法绘制矩形(非独立路径)</span></span><br><span class="line"><span class="comment">//第一个参数：矩形左上角X</span></span><br><span class="line"><span class="comment">//第二个参数：矩形左上角Y</span></span><br><span class="line"><span class="comment">//第三个参数：矩形的宽度W</span></span><br><span class="line"><span class="comment">//第四个参数：矩形的高度H</span></span><br><span class="line">ctx.rect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.stroke();                   <span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.fill();                  //绘制(填充)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 使用fillRect绘制(独立路径)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"green"</span>;        <span class="comment">//设置填充颜色</span></span><br><span class="line">ctx.fillRect(<span class="number">20</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 使用strokeRect绘制(独立路径)</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;        <span class="comment">//设置描边颜色</span></span><br><span class="line">ctx.strokeRect(<span class="number">20</span>,<span class="number">210</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 擦除画布</span></span><br><span class="line"><span class="comment">//ctx.clearRect(20,150,50,40);</span></span><br></pre></td></tr></table></figure></p><p><div class="titleX"><strong>柱状图综合案例</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_09.png?raw=true"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制柱状图的构造函数</span></span><br><span class="line"><span class="keyword">var</span> RectChart = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rects = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx    = ctx || <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置计算参数</span></span><br><span class="line">    <span class="keyword">this</span>.m      = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">this</span>.w      = <span class="keyword">this</span>.ctx.canvas.width;</span><br><span class="line">    <span class="keyword">this</span>.h      = <span class="keyword">this</span>.ctx.canvas.height;</span><br><span class="line">    <span class="keyword">this</span>.cols   = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.w / <span class="keyword">this</span>.m);</span><br><span class="line">    <span class="keyword">this</span>.rows   = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.h / <span class="keyword">this</span>.m);</span><br><span class="line">    <span class="keyword">this</span>.pointW = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">this</span>.x      = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">this</span>.y      = <span class="number">350</span>;</span><br><span class="line">    <span class="keyword">this</span>.rectW  = <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置原型对象</span></span><br><span class="line">RectChart.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>:RectChart,</span><br><span class="line">    init:function(rects)&#123;</span><br><span class="line">        <span class="keyword">this</span>.rects = rects;</span><br><span class="line">        <span class="keyword">this</span>.drawGrid();</span><br><span class="line">        <span class="keyword">this</span>.drawAxis();</span><br><span class="line">        <span class="keyword">this</span>.drawRect();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawGrid:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//002 设置路径</span></span><br><span class="line">        <span class="comment">//[1] 绘制所有的行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span> ; i &lt; <span class="keyword">this</span>.rows ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo(<span class="number">0</span>,(i * <span class="keyword">this</span>.m)+<span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.w,(i * <span class="keyword">this</span>.m)+<span class="number">0.5</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[2] 绘制所有的列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span> ; j &lt; <span class="keyword">this</span>.cols ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo((j * <span class="keyword">this</span>.m) + <span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.ctx.lineTo((j * <span class="keyword">this</span>.m) + <span class="number">0.5</span>,<span class="keyword">this</span>.h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//003 绘制网格</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#ddd"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawAxis:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//004 绘制坐标(横坐标和纵坐标 X-Y)</span></span><br><span class="line">        <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</span><br><span class="line">            y = <span class="keyword">this</span>.y,</span><br><span class="line">            xl = <span class="number">650</span>,</span><br><span class="line">            yl = <span class="number">300</span>,</span><br><span class="line">            m  = <span class="keyword">this</span>.m;</span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制X轴坐标</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(x,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl - m,y - m/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl - m,y - m/<span class="number">2</span> + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制Y轴坐标</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(x,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x,y - yl);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x - m/<span class="number">2</span>,y - yl + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x - m/<span class="number">2</span> + m,y - yl + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x,y - yl);</span><br><span class="line">        <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawRect:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//绘制坐标点的每条连接线</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>.rects.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">rect</span>)</span>&#123;</span><br><span class="line">            self.ctx.fillStyle = rect.color;</span><br><span class="line">            self.ctx.fillRect(rect.x,self.y - rect.h,self.rectW,rect.h);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备绘制数据</span></span><br><span class="line"><span class="keyword">var</span> rects = [</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">h</span>:<span class="number">50</span>,<span class="attr">color</span>:<span class="string">"red"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">200</span>,<span class="attr">h</span>:<span class="number">250</span>,<span class="attr">color</span>:<span class="string">"pink"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">300</span>,<span class="attr">h</span>:<span class="number">120</span>,<span class="attr">color</span>:<span class="string">"#195"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">400</span>,<span class="attr">h</span>:<span class="number">300</span>,<span class="attr">color</span>:<span class="string">"#47e"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">500</span>,<span class="attr">h</span>:<span class="number">20</span>,<span class="attr">color</span>:<span class="string">"#302"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用构造函数绘制</span></span><br><span class="line"><span class="keyword">new</span> RectChart().init(rects);</span><br></pre></td></tr></table></figure><h3 id="Non-Zero-Winding-Number-Rule-amp-Odd-even-Rule"><a href="#Non-Zero-Winding-Number-Rule-amp-Odd-even-Rule" class="headerlink" title="Non-Zero Winding Number Rule &amp; Odd-even Rule"></a>Non-Zero Winding Number Rule &amp; Odd-even Rule</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_10.png?raw=true" width="300px"></p><p><div class="titleX"><strong>非零正交(环绕)原则</strong></div><br>我们在使用绘图上下文对象的<code>fill</code>方法进行填充绘制的时候，如果传递参数(<code>nonzero</code>)或默认不传递任何参数，那么在填充的时候使用<strong>非零正交(环绕)原则</strong>。</p><blockquote><p><strong>非零正交(环绕)原则 · 规则</strong><br>❐ 在路径包围的区域中，向外发射一条和所有围绕它的边相交的射线<br>❐ 开启一个计数器，计数器的初始值为0<br>❐ 如果这个射线遇到顺时针围绕，那么计数器 +1<br>❐ 如果这个射线遇到顺时针围绕，那么计数器 -1<br>❐ 如果最终计数器的值非〇，则这块区域在路径内浏览器会对其进行填充。</p></blockquote><p>这里我们可以给出两个非零正交(环绕)原则应用的典型案例-绘制镂空矩形和圆环。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_11.png?raw=true" width="300px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制正方形(顺时针)</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制正方形(逆时针)</span></span><br><span class="line">ctx.moveTo(<span class="number">75</span>,<span class="number">75</span>);</span><br><span class="line">ctx.lineTo(<span class="number">75</span>,<span class="number">125</span>);</span><br><span class="line">ctx.lineTo(<span class="number">125</span>,<span class="number">125</span>);</span><br><span class="line">ctx.lineTo(<span class="number">125</span>,<span class="number">75</span>);</span><br><span class="line">ctx.lineTo(<span class="number">75</span>,<span class="number">75</span>);</span><br><span class="line"><span class="comment">//设置填充(非零正交原则)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#299"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆环</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">60</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">true</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">"rgba(250,50,79,1)"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>奇偶填充原则</strong></div><br>我们在使用绘图上下文对象的<code>fill</code>方法进行填充绘制的时候，如果传递参数(<code>evenodd</code>)那么在填充的时候使用<strong>奇偶填充原则</strong>。</p><blockquote><p><strong>奇偶填充原则 · 规则</strong><br>❐ 在路径包围的区域中，向外发射一条和所有围绕它的边相交的射线<br>❐ 查看相交线的个数，如果为奇数，就填充，如果是偶数，就不填充。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_12.png?raw=true" width="300px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> x = ctx.canvas.width / <span class="number">2</span>,</span><br><span class="line">    y = ctx.canvas.height/ <span class="number">2</span>,</span><br><span class="line">    r = <span class="number">50</span>,</span><br><span class="line">    start = - <span class="built_in">Math</span>.PI / <span class="number">2</span>,</span><br><span class="line">    end = <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">ctx.arc(x, y, r, start, end);</span><br><span class="line">ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x, y - r);</span><br><span class="line">ctx.lineTo(x - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.lineTo(x + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x - r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(x + <span class="number">150</span>, y, r, start, end);</span><br><span class="line">ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x + <span class="number">150</span>, y - r);</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> - r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> + r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">ctx.fill(<span class="string">'evenodd'</span>);</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas中的路径、矩形以及描边和填充等绘制方法，非零正交原则以及线性渐变等内容，并提供折线图和柱状图等综合案例。&lt;/div&gt;

&lt;h3 id=&quot;Canvas路径和状态&quot;&gt;&lt;a href=&quot;#Canvas路径和状态&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [10]-Canvas绘图(基础)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/javaScript%E7%B3%BB%E5%88%97%20%5B10%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%9F%BA%E7%A1%80)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/javaScript系列 [10]-Canvas绘图(基础)/</id>
    <published>2019-01-01T00:20:13.000Z</published>
    <updated>2019-01-18T06:21:06.420Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将对Canvas绘图技术进行简单介绍，主要包括Canvas标签、CanvasRenderingContext2D对象核心API的使用以及复杂图形的绘制等内容。</div><h3 id="Canvas简单介绍"><a href="#Canvas简单介绍" class="headerlink" title="Canvas简单介绍"></a>Canvas简单介绍</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_23.png?raw=true"></p><div class="titleX"><strong>基本信息</strong></div><p><a href="">Canvas</a> 是HTML5提供的一种新标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="">Canvas</a> 是一个<strong><code>矩形区域的画布</code></strong>，在画布上面我们可以通过<code>javaScript</code>控制每一个像素来绘制图形。</p><p><a href="">Canvas</a> 标签使用<code>javaScript</code>在网页上绘制图像，其本身不具备绘图功能。通过使用<code>canvas</code>并调用相关API，可用多种方式来绘制路径、矩形、圆形、字符以及图像等。</p><p class="tip"><strong>拓展</strong> 最早<a href="">Canvas</a>由<code>Apple</code>公司引入到WebKit内核，用于<code>Mac OSX</code>的Dashboard，后来又在<strong>Safari</strong>和<strong>Google Chrome</strong>中被实现。<a href="">Canvas</a>标签是<strong><code>WhatWG Web applications 1.0 规范</code></strong>的内容，也包含于HTML5中。<br></p><p class="titleX"><strong>应用的领域和趋势</strong></p><blockquote><p><span style="color:#000"><strong>① 炫酷的场景秀</strong></span>：用Canvas实现动态的广告效果能够非常融洽的跨平台运行。<br><span style="color:#000"><strong>② 数据的可视化</strong></span>：各种统计类的图表(趋势图、饼状图、折线图等)，已经有成熟的开源框架。<br><span style="color:#000"><strong>③ 游戏开发领域</strong></span>：Canvas是<code>HTML5</code>游戏开发首选，其在基于Web的图像方面比Flash更立体和精巧。</p><p><span style="color:#000"><strong>[1] Web图形编辑器</strong></span>：<code>Photoshop</code>图形编辑器将能够100%基于Web实现。<br><span style="color:#000"><strong>[2] 远程可视化控制</strong></span>：Canvas能更好的实现基于Web的数据传输以gous可视化控制界面。<br><span style="color:#000"><strong>[3] 各种类型模拟器</strong></span>：从视觉效果和核心功能等方面来说，模拟器可以完全由<code>JavaScript</code>来实现。</p></blockquote><p><strong>参考资料</strong>  <a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">W3school</a> 、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noopener">MDN_Canvas_API</a><br><a href="https://www.w3.org/TR/2015/REC-2dcontext-20151119/" target="_blank" rel="noopener">HTML Canvas 2D Context</a></p><div class="titleX"><strong>绘图准备和初体验</strong></div><p><a href="">Canvas</a> 标签默认拥有<code>300 * 150</code>的宽高，可以通过设置边框来查看。<br><a href="">Canvas</a> 标签支持鼠标右键·(复制图片)·以及(图片另存为)的操作，同图片一致。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_01.png?raw=true"></p><p><a href="">Canvas</a> 标签的参考坐标系如上图所示，其<code>Y轴</code>的方向区别于常见的数学坐标系。<br><a href="">Canvas</a> 标签的浏览器兼容很好(<code>IE9+</code>)，若浏览器不兼容建议设置标签内容友好提示。<br><a href="">Canvas</a> 标签本身并不能绘制图形只是画布，具体绘图工作主要有Canvas上下文对象完成。<br><a href="">Canvas</a> 标签上下文对象是<code>javaScript</code>操作Canvas的接口，常用类型是<code>CanvasRenderingContext2D</code>。<br><a href="">Canvas</a> 标签在设置画布宽度和高度的时候建议在标签中直接通过<code>width</code>和<code>height</code>属性节点来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"300px"</span>&gt;</span>当前浏览器不支持canvas，请升级浏览器<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//01 获取canvas画布</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="comment">//02 获取canvas上下文对象</span></span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">//03 设置路径</span></span><br><span class="line">    <span class="comment">//开启路径(可省略)</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="comment">//设置路径的起点</span></span><br><span class="line">    ctx.moveTo(<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//设置路径对应值</span></span><br><span class="line">    ctx.lineTo(<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//设置线条(描边)颜色</span></span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">    <span class="comment">//04 绘制线条(描边)</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>代码说明</strong> 上面的代码将会在canvas画布上绘制出一条<span style="color:red">红色</span>的线条。</p><p class="tip"><strong>注意</strong> 请不要使用<code>CSS</code>来控制<a href="">Canvas</a> 标签的宽高，这样会导致内部图片拉伸和变形，如果重新设置<a href="">Canvas</a> 标签的宽高属性将会擦除画布中已有的所有内容。</p><h3 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h3><div class="titleX"><strong><span style="color:#000">CanvasRenderingContext2D</span> 核心API介绍</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_02.png?raw=true"></p><p>这里列出<code>CanvasRenderingContext2D</code>原型对象上面几乎所有的核心成员供参考。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">canvas                      //当前的画布对象</span><br><span class="line">filter                      //设置模糊和灰度等过滤效果</span><br><span class="line">globalAlpha                 //设置透明度(0~1)</span><br><span class="line">shadowBlur                  //阴影的模糊级别</span><br><span class="line">shadowColor                 //阴影的颜色</span><br><span class="line">shadowOffsetX               //阴影距形状的水平距离</span><br><span class="line">shadowOffsetY               //阴影距形状的垂直距离</span><br><span class="line">fillStyle                   //设置矩形填充的样式(颜色)</span><br><span class="line">strokeStyle                 //设置描边样式</span><br><span class="line">lineCap                     //线条末端的类型   round butt(默认) square</span><br><span class="line">lineJoin                    //相交线的拐点类型 round miter(默认) bevel</span><br><span class="line">lineWidth                   //设置线条的宽度   </span><br><span class="line">miterLimit                  //最大斜接长度(两条线交汇处内角和外角之间的距离)</span><br><span class="line">lineDashOffset              //设置虚线偏移量</span><br><span class="line">font                        //设置字体的绘制参数(字号、字体、粗体等)</span><br><span class="line">textAlign                   //设置文字的水平对齐方式</span><br><span class="line">textBaseline                //设置文字基线(垂直对齐方式)</span><br><span class="line">globalCompositeOperation    //设置如何将一个源(新)图像绘制到目标(旧)图像上</span><br><span class="line">imageSmoothingEnabled       //设置图片是否平滑(非稳定)</span><br><span class="line">imageSmoothingQuality       //设置图像平滑度的属性(非稳定)</span><br><span class="line"></span><br><span class="line">moveTo()                    //设置路径(起点)</span><br><span class="line">lineTo()                    //设置路径</span><br><span class="line">beginPath()                 //开启路径</span><br><span class="line">closePath()                 //关闭路径</span><br><span class="line">setLineDash()               //设置虚线宽度数据</span><br><span class="line">getLineDash()               //获取虚线宽度集合</span><br><span class="line"></span><br><span class="line">rect()                      //绘制矩形</span><br><span class="line">fillRect()                  //矩形填充</span><br><span class="line">strokeRect()                //设置描边(矩形)</span><br><span class="line">clearRect()                 //擦除矩形区域内容</span><br><span class="line"></span><br><span class="line">stroke()                    //设置描边</span><br><span class="line">fill()                      //设置填充</span><br><span class="line">clip()                      //剪切指定形状和尺寸的区域</span><br><span class="line">arc()                       //绘制圆弧(圆)               </span><br><span class="line">arcTo()                     //绘制曲线</span><br><span class="line">ellipse()                   //添加椭圆路径(非稳定)</span><br><span class="line">bezierCurveTo()             //绘制贝塞尔曲线(3)</span><br><span class="line">quadraticCurveTo()          //绘制贝塞尔曲线(2)</span><br><span class="line">isPointInPath()             //检查某个点是否在指定的路径中</span><br><span class="line">isPointInStroke()           //检查某个点是否在指定(范围)</span><br><span class="line">createLinearGradient()      //创建线性渐变</span><br><span class="line">createRadialGradient()      //创建放射状/环形的渐变</span><br><span class="line"></span><br><span class="line">fillText()                  //矩形填充(绘制文字)</span><br><span class="line">strokeText()                //设置描边(文字绘制)</span><br><span class="line">measureText()               //获取并计算文本宽度</span><br><span class="line"></span><br><span class="line">drawImage()                 //绘制图片</span><br><span class="line">createImageData()           //创建新的ImageData对象</span><br><span class="line">getImageData()              //获取ImageData对象(矩形区域的像素数据)</span><br><span class="line">putImageData()              //从指定ImageData对象中把图像放到画布上面</span><br><span class="line">createPattern()             //在指定的方向上重复指定的元素</span><br><span class="line">drawFocusIfNeeded()         //如有必要则绘制焦点</span><br><span class="line"></span><br><span class="line">save()                      //保存状态</span><br><span class="line">scale()                     //设置缩放</span><br><span class="line">rotate()                    //设置旋转</span><br><span class="line">restore()                   //返回之前保存过的路径状态和属性</span><br><span class="line">translate()                 //平移(重新映射画布上的(0,0)位置)</span><br><span class="line">transform()                 //替换绘图的当前转换矩阵</span><br><span class="line">setTransform()              //将当前转换重置为单位矩阵,然后运行transform()</span><br><span class="line">resetTransform()            //使用单位矩阵重新设置当前变形(非稳定)</span><br></pre></td></tr></table></figure><p>画布的上下文<code>CanvasRenderingContext2D</code>对象为图形的绘制提供了丰富的接口，我们可以直接调用相关的API来绘制路径、圆弧和矩形等图案。此外，要得到目标图案其实有很多种方法<span style="color:#195"><strong>到达罗马的路途并非只有一条</strong></span>，而所有复杂的图案都离不开点、线和面，而且它们应该是<span style="color:red"><strong>渐进的</strong></span>。</p><div style="background:#eee;color:#34495e;width:120px;text-align:center"><strong>点-线-面</strong></div><p>这里先在页面中提供一个400 * 300的画布，获取画布的上下文对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br></pre></td></tr></table></figure><p><strong>矩形点和圆形点的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">5</span>);            <span class="comment">//矩形点</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">11.5</span>,<span class="number">40</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);   <span class="comment">//圆形点</span></span><br><span class="line">ctx.fill();                         <span class="comment">//设置填充</span></span><br></pre></td></tr></table></figure><p><strong>线条的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式(一) 通过绘制连续的矩形来绘制线条</span></span><br><span class="line"><span class="comment">//示例：(实线)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">80</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">40</span> + (i * <span class="number">1</span>),<span class="number">25</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：(虚线)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">20</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">40</span> + (i * <span class="number">4</span>),<span class="number">40</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式(二) 通过路径的方式来绘制线条</span></span><br><span class="line"><span class="comment">//示例：(色度稀释的线条)</span></span><br><span class="line">ctx.moveTo(<span class="number">40</span>,<span class="number">60</span>);</span><br><span class="line">ctx.lineTo(<span class="number">320</span>,<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：(色度正常的线条)</span></span><br><span class="line">ctx.moveTo(<span class="number">40</span>,<span class="number">70.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">320</span>,<span class="number">70.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置描边</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></p><p><strong>面(矩形)的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式(一) 以“矩形点” + 循环的方式来绘制矩形</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">40</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">20</span> + (i * <span class="number">3</span>),<span class="number">100</span>,<span class="number">3</span>,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式(二) 直接绘制矩形</span></span><br><span class="line">ctx.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.fillRect(<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><p>这里贴出上面代码运行的结果图。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_03.png?raw=true" width="500px"></p><p class="tip"><strong>备注</strong> 在使用canvas上下文绘制线条的时候，我们会发现线条最终的颜色看上去并不是黑色的感觉比较淡，此外线条的宽度看上去也并不是<code>1px</code>而是<code>2px</code>。其实，主要原因是在canvas在进行绘制的时候，对齐的点是线的中心位置，因此就会把线分成上下两个0.5px，在进行显示的时候会补齐，因此其色度自然也是不饱和的。在绘制的时候，可以考虑给绘制坐标设置<code>0.5px</code>的偏移量来解决。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将对Canvas绘图技术进行简单介绍，主要包括Canvas标签、CanvasRenderingContext2D对象核心API的使用以及复杂图形的绘制等内容。&lt;/div&gt;

&lt;h3 id=&quot;Canvas简单介绍&quot;&gt;&lt;a href=&quot;#Canv
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>网络编程系列 FormData</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20FormData/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/网络编程系列 FormData/</id>
    <published>2018-12-31T16:03:00.000Z</published>
    <updated>2019-01-08T08:00:27.202Z</updated>
    
    <content type="html"><![CDATA[<p></p><p class="titleX"><strong>FormData 简单介绍</strong></p><a href="">FormData</a>是<code>Ajax 2.0</code>-<a href="https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html" target="_blank" rel="noopener">XMLHttpRequest Level 2</a> 提供的一个接口对象，可以使用该对象来模拟和处理表单并方便的进行<strong>文件上传</strong>操作。<p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(FormData)</span><br><span class="line">ƒ FormData()</span><br><span class="line">    <span class="built_in">arguments</span>: <span class="literal">null</span></span><br><span class="line">    caller: <span class="literal">null</span></span><br><span class="line">    length: <span class="number">0</span></span><br><span class="line">    name: <span class="string">"FormData"</span></span><br><span class="line">    prototype: FormData</span><br><span class="line">        append: ƒ append()</span><br><span class="line">        <span class="keyword">delete</span>: ƒ <span class="keyword">delete</span>()</span><br><span class="line">        entries: ƒ entries()</span><br><span class="line">        forEach: ƒ forEach()</span><br><span class="line">        get: ƒ ()</span><br><span class="line">        getAll: ƒ getAll()</span><br><span class="line">        has: ƒ has()</span><br><span class="line">        keys: ƒ keys()</span><br><span class="line">        set: ƒ ()</span><br><span class="line">        values: ƒ values()</span><br><span class="line">        <span class="keyword">constructor</span>: ƒ FormData()</span><br><span class="line">        Symbol(Symbol.iterator): ƒ entries()</span><br><span class="line">        Symbol(Symbol.toStringTag): "FormData"</span><br><span class="line">        __proto__: Object</span><br><span class="line">    __proto__: ƒ ()</span><br><span class="line">    [[Scopes]]: Scopes[0]</span><br></pre></td></tr></table></figure><p>通过打印并查看formData的结构，可以发现该接口对象本身非常简单。在<a href="">FormData</a>构造函数原型对象上只有<code>append</code>、<code>forEach</code>、<code>keys</code>等少数方法。</p><div class="titleX"><strong>FormData的主要用处</strong></div><blockquote><p>❐ 网络请求中模拟和处理表单数据<br>❐ 网络请求中用来异步的上传文件</p></blockquote><div class="titleX"><strong>FormData实例的创建</strong></div><p><span style="color:#888">◆</span> <strong><code>new FormData (form? : HTMLFormElement)</code></strong></p><p>在使用FormData构造函数创建实例对象的时候，可以传递一个HTML表单元素，该表单元素允许是任何形式的表单控件，包括文件输入框、复选框等。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"formTest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"wendingding"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">value</span>=<span class="string">"123456789"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//列出创建formData实例对象的几种方式</span></span><br><span class="line"><span class="comment">//001 通过构造函数创建不传递任务参数</span></span><br><span class="line"><span class="keyword">var</span> formData1 = <span class="keyword">new</span> FormData();   <span class="comment">//空的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过调用对象的方法来设置数据(模拟表单)</span></span><br><span class="line"><span class="comment">//设置数据</span></span><br><span class="line">formData1.set(<span class="string">"name"</span>,<span class="string">"文顶顶"</span>);</span><br><span class="line">formData1.set(<span class="string">"email"</span>,<span class="string">"wendingding_ios@126.com"</span>);</span><br><span class="line">formData1.set(<span class="string">"friends"</span>,<span class="string">"熊大"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置数据(追加)</span></span><br><span class="line">formData1.append(<span class="string">"friends"</span>,<span class="string">"光头强"</span>);</span><br><span class="line">formData1.append(<span class="string">"friends"</span>,<span class="string">"萝卜头"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看实例数据</span></span><br><span class="line">formData1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 获取表单标签传递给FormData构造函数</span></span><br><span class="line"><span class="keyword">var</span> formData2 = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms.namedItem(<span class="string">"formTest"</span>))</span><br><span class="line">formData2.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> 表单标签必须要设置name属性节点才能获取其数据</div><p><strong>说明</strong> 在上面的示例代码中介绍了两种创建(获取)formData实例对象的方式，可以<span style="color:#f33">先创建一个空的实例对象也可以直接通过页面中的表单标签来进行初始化处理</span>。</p><p>当formData数据装填好之后，可以直接通过ajax方法提交到服务器端，下面给出上面代码的执行结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name 文顶顶</span><br><span class="line">email wendingding_ios@126.com</span><br><span class="line">friends 熊大</span><br><span class="line">friends 光头强</span><br><span class="line">friends 萝卜头</span><br><span class="line">----------------------------------</span><br><span class="line">user wendingding</span><br><span class="line">pass 123456789</span><br></pre></td></tr></table></figure><div class="titleX"><strong>FormData的主要方法</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/formData.png?raw=true"></p><p>如上图所示，FormData构造函数的原型对象上面定义了一堆方法。这些方法使用方式都很简单，接下来我们通过代码的方式简单介绍他们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 创建空的formData实例对象</span></span><br><span class="line">   <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//02 设置数据(添加)</span></span><br><span class="line">   data.set(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">   data.set(<span class="string">"name"</span>,<span class="string">"LiuY"</span>);</span><br><span class="line">   data.set(<span class="string">"type"</span>,<span class="string">"法师"</span>);</span><br><span class="line">   data.set(<span class="string">"address"</span>,<span class="string">"泉水中心"</span>);</span><br><span class="line">   <span class="comment">//03 设置数据(修改和删除)</span></span><br><span class="line">   data.set(<span class="string">"name"</span>,<span class="string">"MiTaoer"</span>);</span><br><span class="line">   data.delete(<span class="string">"address"</span>);</span><br><span class="line">   <span class="comment">//04 设置数据(追加)</span></span><br><span class="line">   data.append(<span class="string">"type"</span>,<span class="string">"战士"</span>);</span><br><span class="line">   data.append(<span class="string">"type"</span>,<span class="string">"辅助"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//05 读取数据(指定key-one)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.get(<span class="string">"name"</span>));          <span class="comment">//MiTaoer</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.get(<span class="string">"type"</span>));          <span class="comment">//法师</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//06 读取数据(指定key-All)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.getAll(<span class="string">"type"</span>));       <span class="comment">//["法师", "战士", "辅助"]</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//07 检查是否拥有指定的key</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.has(<span class="string">"age"</span>));           <span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.has(<span class="string">"email"</span>));         <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//08 迭代器的基本使用(keys)</span></span><br><span class="line">   <span class="keyword">var</span> keyIterator = data.keys()      <span class="comment">//获取迭代器对象</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "age"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "name"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: true, value: undefined&#125;</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"___________________"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//09 迭代器的基本使用(values)</span></span><br><span class="line">   <span class="keyword">var</span> valueIterator = data.values();  <span class="comment">//获取迭代器对象</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "18"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "MiTaoer"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "法师"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "战士"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "辅助"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: true, value: undefined&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//10 迭代器的基本使用(entries)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.entries().next());     <span class="comment">//&#123;done: false, value: ["age", "18"]&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//11 formData对象的遍历</span></span><br><span class="line">   data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">       <span class="comment">//输出结果</span></span><br><span class="line">       <span class="comment">// age 18</span></span><br><span class="line">       <span class="comment">// name MiTaoer</span></span><br><span class="line">       <span class="comment">// type 法师</span></span><br><span class="line">       <span class="comment">// type 战士</span></span><br><span class="line">       <span class="comment">// type 辅助</span></span><br><span class="line">       <span class="built_in">console</span>.log(key,value);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><p><a href="">formData对象</a>的这些方法其实不用进行过多的赘述，上面的代码和说明简单易懂。总体上来说，它提供了一整套的操作数据的方法囊括了添加(set)、修改、查询和删除等操作，<code>append</code>方法和set方法的不同之处在于它不会覆盖而是以数组push的方式来处理同名的数据。</p><p><a href="">formData对象</a>的<code>keys()</code>、<code>values()</code>和<code>entries()</code>方法使用类似，调用后将得到一个<code>Iterator类型</code>的迭代器对象，该对象能够能够调用<code>next()</code>方法来进行迭代操作，打印结果中的<code>done</code>使用布尔类型的值来进行标记，如果迭代结束那么值为<strong>true</strong>。</p><p><a href="">formData对象</a>的<code>forEach()</code>接收一个回调函数参数，其中第一个参数为当前遍历数据的<code>value</code>值，第二个参数为<code>key</code>(同数组的forEach方法一致)。如果是Ajax发送GET请求，需要通过<a href="">formData对象</a>的方式来提交表单数据，那么可以借助该方法来拼接查询字符串。</p><p></p><p class="titleX"><strong>FormData的典型用法</strong></p>这里给定如下的表单数据，然后介绍如何使用FormData来处理表单数据发送GET和POST请求。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"formTest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"check"</span>&gt;</span> 是否勾选<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交表单数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><div style="background:#195;color:#fff;width:120px;text-align:center"><strong>GET请求</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"GET"</span>,<span class="string">"http://127.0.0.1:3000?"</span>+getData(),<span class="literal">true</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取页面中的表单数据并处理为查询字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms.namedItem(<span class="string">"formTest"</span>));</span><br><span class="line">    data.append(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">    data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">        arr.push(key+<span class="string">"="</span>+value);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码示例可以发现，使用formData来处理表单数据发送GET请求并没有什么优势，也需要通过循环来处理然后把键值对转换为查询字符串的形式拼接在<code>URL字符串</code>的后面。</p><div style="background:#195;color:#fff;width:120px;text-align:center"><strong>POST请求</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 处理参数</span></span><br><span class="line">    <span class="comment">//方式(1) 模拟表单数据</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">    data.set(<span class="string">"name"</span>,<span class="string">"文顶顶"</span>);</span><br><span class="line">    data.set(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">    data.set(<span class="string">"email"</span>,<span class="string">"yangyong@520it.com"</span>);</span><br><span class="line">    data.append(<span class="string">"email"</span>,<span class="string">"wendingding_ios@126.com"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式(2) 获取表单数据</span></span><br><span class="line">    <span class="comment">//var data = new FormData(document.forms.namedItem("formTest"));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//04 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>,<span class="string">"http://127.0.0.1:3000"</span>,<span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    xhr.send(data);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果发送的是POST请求，那么提交表单数据需要通过<code>setRequestHeader</code>方法来设置<code>&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;</code>，而formData数据直接作为<code>send</code>方法的参数来进行提交即可。<code>POST</code>请求通过formData提交给服务器端的数据，如果是Node服务器端则很难处理(同文件一样)。<a href="">formData</a>最主要的用途其实是用来异步的进行文件上传。</p><p><div style="background:#195;color:#fff;width:200px;text-align:center"><strong>POST请求进行文件上传</strong></div><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userID"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file-name"</span> <span class="attr">id</span>=<span class="string">"fileID"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn    = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oUser   = <span class="built_in">document</span>.getElementById(<span class="string">"userID"</span>);</span><br><span class="line"><span class="keyword">var</span> oFileID = <span class="built_in">document</span>.getElementById(<span class="string">"fileID"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 获取表单中的文件内容</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">    data.set(<span class="string">"user"</span>,oUser.value);</span><br><span class="line">    <span class="built_in">Array</span>.from(oFileID.files).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">        data.append(<span class="string">"fileName"</span>,file);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//04 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>,<span class="string">"http://127.0.0.1:5000/api"</span>,<span class="literal">true</span>);</span><br><span class="line">    xhr.send(data);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里顺便贴出测试文件上传写的Node代码以及文件上传后的监听结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：node文件名称为uploadServer.js</span></span><br><span class="line"><span class="comment">//01 导入模块(需先通过npm来进行安装)</span></span><br><span class="line"><span class="keyword">var</span> express   =   <span class="built_in">require</span>(<span class="string">'express'</span>);     </span><br><span class="line"><span class="keyword">var</span> multer    =   <span class="built_in">require</span>(<span class="string">'multer'</span>);         </span><br><span class="line"><span class="keyword">var</span> body      =   <span class="built_in">require</span>(<span class="string">'body-parser'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.listen(<span class="number">5000</span>);</span><br><span class="line">app.use(body.urlencoded( &#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125; ));</span><br><span class="line">app.use(multer( &#123; <span class="attr">dest</span>: <span class="string">'./upload/'</span> &#125; ).any());</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 监听网络请求并设置打印接收到的参数信息</span></span><br><span class="line">app.post(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">    res.send(<span class="string">"Nice ! 上传成功 ~ "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);      <span class="comment">//普通POST数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.files);     <span class="comment">//文件POST数据</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">app.use(express.static(<span class="string">'./html/'</span>));</span><br></pre></td></tr></table></figure></p><p><strong>代码说明</strong> 需要先通过<code>npm install express multer body-parser</code>命令在当前路径中安装对应的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node uploadServer.js </span><br><span class="line">&#123; user: <span class="string">'wen'</span> &#125;</span><br><span class="line">[ &#123; fieldname: <span class="string">'fileName'</span>,</span><br><span class="line">    originalname: <span class="string">'formData.png'</span>,</span><br><span class="line">    encoding: <span class="string">'7bit'</span>,</span><br><span class="line">    mimetype: <span class="string">'image/png'</span>,</span><br><span class="line">    destination: <span class="string">'./upload/'</span>,</span><br><span class="line">    filename: <span class="string">'f416da3b522ece9e4cc2eccd5b7a62e8'</span>,</span><br><span class="line">    path: <span class="string">'upload/f416da3b522ece9e4cc2eccd5b7a62e8'</span>,</span><br><span class="line">    size: 50002 &#125;,</span><br><span class="line">  &#123; fieldname: <span class="string">'fileName'</span>,</span><br><span class="line">    originalname: <span class="string">'Snip20190107_1.png'</span>,</span><br><span class="line">    encoding: <span class="string">'7bit'</span>,</span><br><span class="line">    mimetype: <span class="string">'image/png'</span>,</span><br><span class="line">    destination: <span class="string">'./upload/'</span>,</span><br><span class="line">    filename: <span class="string">'2a2dd60e217b9cc08f2cc0048a1d27ab'</span>,</span><br><span class="line">    path: <span class="string">'upload/2a2dd60e217b9cc08f2cc0048a1d27ab'</span>,</span><br><span class="line">    size: 1309894 &#125; ]</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;FormData 简单介绍&lt;/strong&gt;&lt;/p&gt;&lt;a href=&quot;&quot;&gt;FormData&lt;/a&gt;是&lt;code&gt;Ajax 2.0&lt;/code&gt;-&lt;a href=&quot;https://dvcs.w3.org/hg/x
      
    
    </summary>
    
    
      <category term="网络编程系列" scheme="https://weibo.com/u/3800117445/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-请召文</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E8%AF%B7%E5%8F%AC%E6%96%87/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 请召文/</id>
    <published>2018-12-31T16:00:03.000Z</published>
    <updated>2019-01-10T08:39:05.527Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#近代先朝， 帝主尊荣位。 勋戚侯王， 玉叶金枝贵。 #宰执中宫， 彩女嫔妃类。 梦断华胥， 来受甘露味。  #国士朝臣， 经纬匡时世。 牧化黎民， 未遂忠良志。 #失宠怀忧， 谪降边邦地。 恋国游魂， 来受甘露味。  #武将戎臣， 统领三军队。 结阵交锋， 锣鼓喧天地。 #北战南征， 失陷沙场内。 为国亡身， 来受甘露味。  #学古穷经， 锦绣文章士。 映雪偷光， 苦志寒窗内。 #命运蹉跎， 金榜无名字。 郁郁幽魂， 来受甘露味。  #割爱辞亲， 早入空门内。 访道寻师， 只为超生死。 #暑往寒来， 不觉无常至。 返照回光， 早证菩提位。  #羽服黄冠， 早发修真志。 炼药烧丹， 养性还元气。 #苦行劳神， 指望登仙位。 莫恋遗形， 来受甘露味。  #孝子贤孙， 义勇忠良士。 烈女贞妻， 视死如归去。 #仗节亡躯， 千古留英气。 耿耿灵魂， 来受甘露味。  #女道尼流， 身住黄金地。 鸾凤缘空， 不染人间事。 #未了无为， 流浪虚生死。 清净幽魂， 来受甘露味。  #地理天文， 医药阴阳类。 卜卦占龟， 风鉴并星士。 #报吉谈凶， 难免无常对。 舍伪归真， 来受甘露味。  #坐贾行商， 种种经营辈。 艺术多能， 贸易求财利。 #背井离乡， 死在他方地。 旅梦悠悠， 来受甘露味。  #犯法遭刑， 牢狱长幽系。 负命谋财， 债主冤家类。 #肿毒瘟癀， 冻死饥亡辈。 速离黄泉， 来受甘露味。  #车碾伤残， 马踏身形碎。 墙倒崖崩， 自刎悬梁缢。 #水火漂焚， 虎咬蛇伤类。 九横孤魂， 来受甘露味。  #饮血茹毛， 生长蛮夷地。 负债偿劳， 婢妾并奴隶。 #喑哑盲聋， 残疾无依恃。 受苦冤魂， 来受甘露味。  #忤逆爹娘， 怨黩天和地。 谤佛欺僧， 毁像焚经偈。 #邪见深坑， 苦报无边际。 十恶狂魂， 来受甘露味。  #大施门开， 荐拔孤魂辈。 祖祢先亡， 五姓冤家类。 #八难三途， 平等俱超济。 仗佛光明， 来受甘露味。  #阿弥陀佛， 宿有无边誓。 观见众生， 苦海常漂溺。 #垂手殷勤， 特驾慈航济。 普载众生， 同赴莲池会。 </script><script>  /*1D244F*/    $(function(){$("<canvas id='canvas' width='1156px' height='460px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1156px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=5,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-60,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("来受甘露味",r.canvas.width-32,5),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#近代先朝， 帝主尊荣位。 勋戚侯王， 玉叶金枝
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-逍遥游（下）</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E9%80%8D%E9%81%A5%E6%B8%B8(%E4%B8%8B)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 逍遥游(下)/</id>
    <published>2018-12-31T16:00:02.000Z</published>
    <updated>2019-01-10T08:36:45.884Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#堯让天下於许由， 曰： “ 日月出矣， 而爝火不息， 其與光也， 不亦难乎？ 時雨降矣， 而犹浸灌， 其於泽也， 不亦勞乎？ 夫子立而天下治， 而我犹屍之， 吾自视缺然。 请致天下。 ” 许由曰： “子治天下， 天下既已治也， 而我犹代子， 吾將為名乎？ 名者， 實之賓也， 吾將為賓乎？ 鹪鹩巢於深林， 不过一枝； 偃鼠饮河， 不过满腹。 歸休乎君， 予無所用天下為。 庖人虽不治庖， 屍祝不越樽俎而代之矣。 ” #肩吾问於连叔曰： “ 吾闻言於接舆， 大而無當， 往而不返。 吾驚怖其言， 犹河汉而無极也。 大有徑庭， 不近人情焉。 ” 连叔曰： “ 其言谓何哉？ ” 曰： “ 藐姑射之山， 有神人居焉， 肌肤若冰雪， 淖约若處子， 不食五谷， 吸风饮露， 乘雲气， 禦飞龙， 而游乎四海之外。 其神凝， 使物不疵厲而年谷熟。 吾是以狂而不信也。 ” 连叔曰： “ 然。 瞽者無以與乎文章之观， 聋者無以與乎钟鼓之聲。 豈惟形骸有聋盲哉， 夫知亦有之。 是其言也， 犹時汝也。 之人也， 之德也， 將磅礴萬物以為一。 世蕲乎亂， 孰弊弊焉以天下為事？ 之人也， 物莫之傷， 大浸稽天而不溺， 大旱金石流土山焦而不热。 是其塵垢秕糠， 將犹陶铸堯舜者也。 孰肯以物為事？ #宋人资章甫适诸越， 越人斷發文身， 無所用之。#堯平治天下之民， 平海內之政， 往见四子藐姑射之山， 汾水之阳， 杳然喪其天下焉。 ”#惠子谓莊子曰： “ 魏王贻我大瓠之种， 我树之成而實五石。 以盛水浆， 其堅不能自舉也。 剖之以為瓢， 則瓠落無所容。 非不枵然大也， 吾為其無用而掊之。 ” 莊子曰： “ 夫子固拙於用大矣。 宋人有善為不龟手之药者， 世世以並辟光為事。 客闻之， 请買其方百金。 聚族而谋曰： 我世世為並辟光， 不过數金， 今一朝而鬻技百金， 请與之。 客得之以说吳王。 越有难， 吳王使之將， 冬與越人水戰， 大败越人， 裂地而封之。 能不龟手一也， 或以封， 或不免與並辟光， 則所用之異也。 今子有五石之瓠， 何不虑以為大樽， 而浮於江湖。 而憂其瓠落無所容， 則夫子犹有蓬之心也夫？ ”#惠子曰： “ 吾有大树， 人谓之樗。 其大本臃肿而不中绳墨， 其小枝卷曲而不中规矩。 立之途， 匠者不顾。 今子之言， 大而無用， 眾所同去也。 ” 莊子曰： “ 子独不见狸生乎？ 卑身而伏， 以候敖者， 東西跳梁， 不辟高下， 中於机辟， 死於网罟。 今夫嫠牛， 其大若垂天之雲， 此能為大矣， 而不能執鼠。 今子有大树， 患其無用， 何不树之於無何有之鄉， 廣莫之野， 彷徨乎無為其側， 逍遥乎寢臥其下。 不夭斤斧， 物無害者。 無所可用， 安所困苦哉！ ”</script><script>    $(function(){$("<canvas id='canvas' width='1216px' height='540px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1216px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=62,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-30,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("逍遥游( 下)  · 庄子",r.canvas.width-32,0),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#堯让天下於许由， 曰： “ 日月出矣， 而爝火
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-逍遥游（上）</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E9%80%8D%E9%81%A5%E6%B8%B8(%E4%B8%8A)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 逍遥游(上)/</id>
    <published>2018-12-31T16:00:01.000Z</published>
    <updated>2019-01-10T09:14:30.947Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里也。 化而為鸟， 其名為鹏， 鹏之背， 不知其幾千里也。 怒而飞， 其翼若垂天之雲。 是鸟也， 海运則將徙於南冥， 南冥者， 天池也。 #齐谐者， 志怪者也。 谐之言曰： 鹏之徙於南冥也， 水擊三千里， 摶扶搖而上者九萬里。 去以六月息者也， 野马也， 塵埃也， 生物之以息相吹也。 天之苍苍， 其正色邪？ 其远而無所至极邪？ 其视下也， 亦若是則已矣。 #且夫水之积也不厚， 則其负大舟也無力。 覆杯水於坳堂之上， 則芥為之舟， 置杯焉則胶， 水浅而舟大也。 风之积也不厚， 則其负大翼也無力。 故九萬里， 則风斯在下矣， 而後乃今培风。 背负青天而莫之夭厄者， 而後乃今將圖南。 #蜩與學鸠笑之曰： “ 我決起而飞， 枪榆枋， 時則不至， 而控於地而已矣。 奚以之九萬里而南為？ ” 适莽苍者， 三飧而反， 腹犹果然。 适百里者， 宿舂粮。 适千里者， 三月聚粮。 之二虫， 又何知？ #小知不及大知， 小年不及大年。 奚以知其然也？ 朝菌不知晦朔， 惠蛄不知春秋， 此小年也。 楚之南有冥灵者， 以五百歲為春， 五百歲為秋； 上古有大椿者， 以八千歲為春， 八千歲為秋； 而彭祖乃今以久特闻， 眾人匹之， 不亦悲乎？ #汤之问棘也是已： 穷發之北有冥海者， 天池也。 有鱼焉， 其廣數千里， 未有知其修者， 其名為鲲。 有鸟焉， 其名為鹏， 背若泰山， 翼若垂天之雲， 摶扶搖羊角而上者九萬里， 绝雲气， 负青天， 然後圖南， 且适南冥也。 #斥鹌笑之曰： “ 彼且奚适也？ 我腾跃而上， 不过數仞而下， 翱翔蓬蒿之间， 耻亦飞之至也。 而彼且奚适也？ ” 此小大之辨也。 #故夫知效一官， 行比一鄉， 德合一君， 而征一國者， 其自视也， 亦若此矣。 而宋荣子犹然笑之。 且舉世誉之而不加勸， 舉世非之而不加沮。 定乎內外之分， 辨乎荣辱之境， 斯已矣。 彼其於世， 未數數焉也。 虽然， 犹有未树也。#夫列子禦风而行， 泠然善也， 旬有五日而後反。 彼於致福， 未數數然也。 此虽免乎行， 犹有所待者也。 #若夫乘天地之正， 而禦六气之辩， 以游無穷者， 彼且惡乎待哉！ 故曰： 至人無己， 神人無功， 聖人無名。 </script><script>    $(function(){$("<canvas id='canvas' width='1216px' height='540px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1216px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=62,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-60,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("逍遥游( 上)  · 庄子",r.canvas.width-32,0),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-斯人若彩虹</title>
    <link href="https://weibo.com/u/3800117445/2018/12/31/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E6%96%AF%E4%BA%BA%E8%8B%A5%E5%BD%A9%E8%99%B9/"/>
    <id>https://weibo.com/u/3800117445/2018/12/31/江湖夜雨系列 斯人若彩虹/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2018-12-31T08:54:12.819Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script>    console.log("哈哈哈");    var canvas = $("<canvas id='canvas' width='600px' height='400px'></canvas>");    canvas.appendTo($(".post-content"));    var ctx = $("#canvas").get(0).getContext("2d");    var gridSize = 15;    var canvasHeight = ctx.canvas.height;    var canvasWidth = ctx.canvas.width;    var xLineTotal = Math.floor(canvasHeight / gridSize);    for (var i = 0; i <= xLineTotal; i++) {        ctx.beginPath();        ctx.moveTo(0, i * gridSize - 0.5 );        ctx.lineTo(canvasWidth, i * gridSize - 0.5);        ctx.strokeStyle = '#eee';        ctx.stroke();    }    var yLineTotal = Math.floor(canvasWidth / gridSize);    for (var i = 0; i <= yLineTotal; i++) {        ctx.beginPath();        ctx.moveTo(i*gridSize - 0.5 ,0);        ctx.lineTo(i*gridSize - 0.5 ,canvasHeight);        ctx.strokeStyle = '#eee';        ctx.stroke();    }    ctx.font = "30px KaiTi";    ctx.fillStyle = "#2c3e50";    ctx.fillText("有人住高楼，有人在深沟;",100,100);    ctx.fillText("有人光万丈，有人一身锈;",100,150);    ctx.fillText("世人万千种，浮云莫强求;",100,200);    ctx.fillText("斯人若彩虹，遇上方知有。",100,250);    ctx.fillText("——韩寒",400,320);</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    console.log(&quot;哈哈哈&quot;);
    var canvas = $(&quot;&lt;canvas id=&#39;canvas&#39;
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
