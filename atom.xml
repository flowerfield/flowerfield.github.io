<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2019-02-21T09:50:15.801Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开发工具系列 WebStorm常用快捷键(Mac版)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/21/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97%20Webstorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://weibo.com/u/3800117445/2019/02/21/开发工具系列 Webstorm常用快捷键/</id>
    <published>2019-02-21T11:45:13.000Z</published>
    <updated>2019-02-21T09:50:15.801Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-family:Georgia"><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; C</span>  复制<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; V</span>  粘贴<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; X</span>  剪切<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; D</span>  复制当前行或选中的区块<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; F</span>    在当前文档执行搜索(查找)<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; G</span>    跳转到文档的某处<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; P</span>    <span style="color:red">显示方法(函数)的参数信息</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; R</span>    在当前文档执行替换操作<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; W</span>    关闭当前选项卡<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; E</span>    弹出最近文件，支持选择后打开<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; B</span>    跳转到变量声明处<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; L</span>    跳转到指定行(输入)<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; Y</span>    浮动窗口显示变量声明行</span></p><p><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; +</span>    <span style="color:red">展开代码块</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; -</span>    <span style="color:red">折叠代码块</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 左</span>    光标移到行头<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 右</span>    光标移到行尾<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 上</span>    跳转到导航栏<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp; 移入</span>    显示主要信息<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;delete</span>    删除当前行<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;alt&nbsp;&nbsp;+&nbsp;&nbsp; L</span>    <span style="color:red">格式化处理整个文档</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; U</span>    对选中字符进行大小写切换<br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; [</span>    选项卡切换</p><p><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;  /</span>    <span style="color:red">添加(取消)单行注释</span><br><span class="spaceT backColorT">command &nbsp;&nbsp;+&nbsp;&nbsp;  alt &nbsp;&nbsp;+&nbsp;&nbsp; /</span>    <span style="color:red">添加(取消)多行注释</span></p><p><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;alt &nbsp;&nbsp;+&nbsp;&nbsp; R </span>    运行项目<br><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;alt&nbsp;&nbsp;+&nbsp;&nbsp; I</span>    快速调整每行的缩进<br><span class="spaceT backColorT">control &nbsp;&nbsp;+&nbsp;&nbsp;shift &nbsp;&nbsp;+&nbsp;&nbsp; J</span>    清除缩进变成单行</p><p><span class="spaceT backColorT">alt &nbsp;&nbsp;+&nbsp;&nbsp; /</span>    代码补全(连按选择)<br><span class="spaceT backColorT">shift &nbsp;&nbsp;+&nbsp;&nbsp;tab</span>    调整缩进</p><p></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span style=&quot;font-family:Georgia&quot;&gt;&lt;br&gt;&lt;span class=&quot;spaceT backColorT&quot;&gt;command &amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp; C&lt;/span&gt;  复制&lt;br&gt;&lt;span class=&quot;spac
      
    
    </summary>
    
    
      <category term="开发工具系列" scheme="https://weibo.com/u/3800117445/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [15]-Canvas绘图(压缩)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/20/javaScript%E7%B3%BB%E5%88%97%20%5B15%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%8E%8B%E7%BC%A9)/"/>
    <id>https://weibo.com/u/3800117445/2019/02/20/javaScript系列 [15]-Canvas绘图(压缩)/</id>
    <published>2019-02-20T00:22:16.000Z</published>
    <updated>2019-02-21T07:36:57.858Z</updated>
    
    <content type="html"><![CDATA[<p class="tip">写这篇文章的原因是因为今天早上的时候，突然遇到个需求需要等比例调整照片的大小（主要是想把图片等比例的缩小），我在Mac上通过图片处理软件捣鼓的时候发现比较麻烦，就随手百度了一个在线修改图片尺寸的网站，叫做<a href="http://www.gaitubao.com/" target="_blank" rel="noopener">改图宝</a>。这个网站提供给图片加logo、修改图片尺寸以及印章制作等诸多功能，界面简洁使用方便解决了我的问题，值得推荐。<br><br>然而，等到中午的时候，我发现还有一张图片需要处理，恰好电脑连不上网络，我就考虑能不能通过代码自己来实现，因为图片的<strong><code>选择 - 压缩 - 上传</code></strong>在实际开发中也是对应的场景，因此本文将介绍如何利用Canvas画布来对图片进行压缩的技术，包括实现思路和具体的代码。</p><div class="titleX"><strong>实现思路</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_38.png?raw=true"></p><p><strong>[ 1 ] 获取源图像数据</strong></p><p>在页面中我们使用<code>input标签(file类型)</code>来让用户选择对应的文件上传。为了等比例的对图片进行压缩，需要获取源图片的宽度和高度等数据参数，这里使用了<strong><a href="">FileReader构造函数</a></strong>(类)。</p><p>具体实现的时候，先调用<code>new FileReader()</code>创建一个FileReader的实例对象，然后为<code>input标签</code>注册<span style="color:red">change</span>事件监听。当用户选择好文件后，需要先检查是否是图片(<a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener">通过MIMEType类型判断</a>)，再通过FileReader实例来调用<code>readAsDataURL(file)</code>方法来读取图片文件的数据信息，以获取源图片文件的宽度和高度信息。</p><p><strong>[ 2 ] 计算宽高压缩比数据</strong></p><p>因为示例代码中演示的等比例的进行缩放(压缩)，因此需要通过得到目标图片的宽度和高度尺寸数据。<br>这里列出计算部分的<strong><span style="color:red">核心代码</span></strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetWidth,targetHeight;</span><br><span class="line"><span class="keyword">var</span> imgWidth = img.width, imgHeight = img.height;</span><br><span class="line"><span class="keyword">var</span> maxWidth = <span class="number">150</span>, maxHeight = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图片尺寸超过限制，那么需要重新计算宽高</span></span><br><span class="line"><span class="keyword">if</span> (imgWidth &gt; maxWidth || imgHeight &gt; maxHeight) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (imgWidth / imgHeight &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果更宽，那么就按照宽度限定尺寸</span></span><br><span class="line">    targetWidth = maxWidth;</span><br><span class="line">    targetHeight = <span class="built_in">Math</span>.round(maxWidth * (imgHeight / imgWidth));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果更高，那么就按照高度限定尺寸</span></span><br><span class="line">    targetHeight = maxHeight;</span><br><span class="line">    targetWidth = <span class="built_in">Math</span>.round(maxHeight * (imgWidth / imgHeight));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>[ 3 ] 绘制目标图片</strong></p><p>当目标图片(压缩后)的宽高都计算完成后，可以通过Canvas上下文的<code>drawImage</code>方法来完成图片的绘制，该方法的具体使用可以参考<a href="http://wendingding.com/2019/02/05/javaScript%E7%B3%BB%E5%88%97%20[14]-Canvas%E7%BB%98%E5%9B%BE(%E5%9B%BE%E5%83%8F" target="_blank" rel="noopener"> javaScript系列 [14]-Canvas绘图(图像)</a>这篇文章。</p><p><code>drawImage</code>方法的第一个参数为需要绘制的图片数据，该图片数据即为用户通过input标签选择的文件内容。当然，在具体实现的时候还需要读取文件的内容，监听加载完毕之后再设置Image数据源。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  /e.target.result是图片的base64地址信息</span><br><span class="line">  img.src = event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="titleX"><strong>完整代码</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"file"</span> id=<span class="string">"file"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"info"</span> style=<span class="string">"font-size: 13px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;canvas id=<span class="string">"canvas"</span> height=<span class="string">"200"</span> width=<span class="string">"200"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的文件选择标签</span></span><br><span class="line">  <span class="keyword">var</span> oInput  = <span class="built_in">document</span>.querySelector(<span class="string">'#file'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建FileReader对象用于读取文件信息</span></span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  <span class="keyword">var</span> file   = <span class="literal">null</span>;  <span class="comment">//文件对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 给文件选择标签添加事件监听</span></span><br><span class="line">  oInput.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//001 获取用户选择的文件</span></span><br><span class="line">    file = event.target.files[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//002 获取文件的MIMEType类型</span></span><br><span class="line">    <span class="keyword">var</span> fileType = file.type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 检查用户选择的文件是否是图片</span></span><br><span class="line">    <span class="keyword">if</span> (fileType.indexOf(<span class="string">"image"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//004 如果发现文件是图片则读取图片为DataURL</span></span><br><span class="line">      reader.readAsDataURL(file);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 创建Image图像实例</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="keyword">var</span> targetWidth,targetHeight;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[5] 监听FileReader对象是否处理完毕，设置图像实例的数据源</span></span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//说明：e.target.result是图片的base64地址信息</span></span><br><span class="line">    img.src = event.target.result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[6] 监听Image实例加载，压缩图片并生成预览图像</span></span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      setFileInfo();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//[7]在页面中创建canvas画布对图片进行缩放(压缩)后绘制</span></span><br><span class="line">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">      <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">      ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,ctx.canvas.width,ctx.canvas.height);</span><br><span class="line">      ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setFileInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件的名称</span></span><br><span class="line">      <span class="keyword">var</span> fileName = file.name;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取文件的大小</span></span><br><span class="line">      <span class="keyword">var</span> fileSize = (file.size / <span class="number">1024</span> / <span class="number">1024</span>).toFixed(<span class="number">3</span>) + <span class="string">"M"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 图片压缩比计算</span></span><br><span class="line">      <span class="keyword">var</span> imgWidth = img.width, imgHeight = img.height;</span><br><span class="line">      <span class="keyword">var</span> maxWidth = <span class="number">150</span>, maxHeight = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果图片尺寸超过限制，那么需要重新计算宽高</span></span><br><span class="line">      <span class="keyword">if</span> (imgWidth &gt; maxWidth || imgHeight &gt; maxHeight) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (imgWidth / imgHeight &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 如果更宽，那么就按照宽度限定尺寸</span></span><br><span class="line">          targetWidth = maxWidth;</span><br><span class="line">          targetHeight = <span class="built_in">Math</span>.round(maxWidth * (imgHeight / imgWidth));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果更高，那么就按照高度限定尺寸</span></span><br><span class="line">          targetHeight = maxHeight;</span><br><span class="line">          targetWidth = <span class="built_in">Math</span>.round(maxHeight * (imgWidth / imgHeight));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在页面中显示图片信息</span></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">"&lt;div&gt;1.已选择图片"</span> + fileName + <span class="string">"，大小为"</span> + fileSize + <span class="string">"。&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;2.图片原尺寸是："</span> + imgWidth + <span class="string">" x "</span> + imgHeight + <span class="string">"&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;3.图片压缩尺寸："</span> + maxWidth + <span class="string">" x "</span> + maxHeight + <span class="string">"&lt;/div&gt;\n"</span> +</span><br><span class="line">            <span class="string">"&lt;div&gt;4.图片已压缩为："</span> + targetWidth + <span class="string">" x "</span> + targetHeight +<span class="string">"&lt;/div&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>);</span><br><span class="line">        oDiv.innerHTML = html;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>演示效果</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_37.gif?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p class=&quot;tip&quot;&gt;写这篇文章的原因是因为今天早上的时候，突然遇到个需求需要等比例调整照片的大小（主要是想把图片等比例的缩小），我在Mac上通过图片处理软件捣鼓的时候发现比较麻烦，就随手百度了一个在线修改图片尺寸的网站，叫做&lt;a href=&quot;http://www.gai
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [14]-Canvas绘图(图像)</title>
    <link href="https://weibo.com/u/3800117445/2019/02/05/javaScript%E7%B3%BB%E5%88%97%20%5B14%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%9B%BE%E5%83%8F)/"/>
    <id>https://weibo.com/u/3800117445/2019/02/05/javaScript系列 [14]-Canvas绘图(图像)/</id>
    <published>2019-02-05T00:22:16.000Z</published>
    <updated>2019-02-20T02:14:17.334Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas画布图像绘制相关的技术细节。</div><h3 id="Canvas画布图像绘制基础"><a href="#Canvas画布图像绘制基础" class="headerlink" title="Canvas画布图像绘制基础"></a>Canvas画布图像绘制基础</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_35.png?raw=true"></p><div class="titleX"><strong>核心API</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制图像</strong></span></p><p><strong><code>语法</code></strong> </p><ul><li><code>ctx.drawImage(image,dx,dy);</code></li><li><code>ctx.drawImage(image,dx,dy,dw,dh);</code></li><li><code>ctx.drawImage(image,sx,sy,sw,sh,dx,dy,dw,dh);</code></li></ul><p><strong><code>作用</code></strong> 该方法可以将一幅图像绘制到Canvas画布中(<code>源图像 - 目标图像</code>)。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">dx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的原点坐标(X轴)</span></li><li><span style="font-family:Georgia">dy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的原点坐标(Y轴)</span></li><li><span style="font-family:Georgia">sx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的原点坐标(X轴)</span></li><li><span style="font-family:Georgia">sy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的原点坐标(Y轴)</span></li><li><span style="font-family:Georgia">sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的大小(高度)</span></li><li><span style="font-family:Georgia">sw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    源图像的大小(宽度)</span></li><li><span style="font-family:Georgia">dw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的大小(宽度)</span></li><li><span style="font-family:Georgia">dh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    目标图像的大小(高度)</span></li><li><span style="font-family:Georgia">image&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 绘制到canvas上面的图像(<a href="">HTMLImageElement</a>)</span></li></ul><p><strong><code>说明</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1] drawImage方法的第一个参数可以是HTMLImageElement类型的图像或HTMLCanvasElement类型的Canvas对象</span><br><span class="line">    或者HTMLVideoElement类型的视频对象。</span><br><span class="line">[2] drawImage方法可以将一幅图像(Canvas对象 」视频帧)的整体或部分绘制到Canvas中，在绘制到画布的时候可以</span><br><span class="line">    任意指定绘制的位置以及缩放的比例。</span><br></pre></td></tr></table></figure></p><p><strong><code>图示</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_30.png?raw=true"><br><strong><code>示例-01</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"800"</span> height=<span class="string">"1000"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取画布和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> ctx  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建Image图像并设置数据源</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = <span class="string">"PQ.png"</span>;</span><br><span class="line">  img.alt = <span class="string">"我是一头小猪,我全家都是猪~"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 监听图片加载完毕，绘制图片到画布</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示001</span></span><br><span class="line">    <span class="comment">//把图片绘制到Canvas画布上，绘制参考的原点坐标为(0,0),等比例缩放图片大小至宽高均为200</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示002</span></span><br><span class="line">    <span class="comment">//剪切(剪切起点的参考坐标为[150,0])图片的一部分(右半边)绘制到画布上，绘制参考的原点坐标为(205,0)</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">150</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">300</span>,<span class="number">205</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示003</span></span><br><span class="line">    <span class="comment">//把图片(300 * 300)绘制到画布的指定位置，绘制参考的原点坐标为(360,0)</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">360</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_31.png?raw=true"></p><p><strong><code>示例-02</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"2000"</span> height=<span class="string">"800"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> ctx  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建Image图像并设置数据源</span></span><br><span class="line">  <span class="keyword">var</span> img  = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src  = <span class="string">"hero.png"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 定义变量(源图片的宽度、高度、等分数量)</span></span><br><span class="line">  <span class="keyword">var</span> width  = <span class="number">1620</span>,height = <span class="number">240</span>,equalDivisionCount = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[5] 等Image图像加载完成后先把完整的图像绘制到画布</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[6] 通过定时器来控制图像的绘制(动画)</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      ctx.canvas.width = <span class="number">2000</span>;</span><br><span class="line">      ctx.drawImage(</span><br><span class="line">          img,</span><br><span class="line">          width * i/equalDivisionCount,<span class="number">0</span>,</span><br><span class="line">          width/equalDivisionCount,height,</span><br><span class="line">          width * i/equalDivisionCount,<span class="number">0</span>,</span><br><span class="line">          width/equalDivisionCount,height</span><br><span class="line">      );</span><br><span class="line">      i++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">7</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_32.gif?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>把Canvas画布转换为图像</strong></span></p><p><strong><code>语法</code></strong> <code>canvas.toDataURL()</code><br><strong><code>作用</code></strong> 该方法用于将Canvas画布的内容转换为图像。<br><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"200"</span> height=<span class="string">"200"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;img src=<span class="string">""</span> alt=<span class="string">""</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的img标签</span></span><br><span class="line">  <span class="keyword">var</span> oImage = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">//[2] 获取页面中的canvas标签</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="comment">//[3] 获取画布的上下文对象</span></span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//[4] 创建Image图片对象</span></span><br><span class="line">  <span class="keyword">var</span> img    = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="comment">//[5] 设置Image图像的数据源</span></span><br><span class="line">  img.src    = <span class="string">"PQ.png"</span>;</span><br><span class="line">  <span class="comment">//[6] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[7] 把图像绘制到Canvas画布中</span></span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[8] 把画布转换为图像保存并显示</span></span><br><span class="line">    oImage.src = canvas.toDataURL();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_33.png?raw=true"></p><p class="tip"><strong>备注</strong> Canvas标签对象的toDataURL方法把画布转换为Base64表示的图像，关于Base64编码相关的知识点可以参考<a href="http://wendingding.com/2018/07/31/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20Base64/" target="_blank" rel="noopener">数据安全系列 Base64</a>。</p><p><div class="titleX"><strong>操作图像像素的方法</strong></div><br><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>getImageData</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.getImageData(dx,dy,w,h)</code><br><strong><code>作用</code></strong> 获取(<strong>复制</strong>)Canvas画布上指定矩形区域的像素数据。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>putImageData</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.putImageData(imgData,dx,dy,[dirtyX],[dirtyY],[dirtyWidth],[dirtyHeight]);</code><br><strong><code>作用</code></strong> 该方法用于将指定ImageData对象的图像数据放回到画布上。<br><strong><code>参数</code></strong></p><ul><li><span style="font-family:Georgia">imgData &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    规定要放回画布的ImageData对象</span></li><li><span style="font-family:Georgia">dx &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    绘制到画布的位置(X坐标)，<a href="">以像素计</a>。</span></li><li><span style="font-family:Georgia">dy &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    绘制到画布的位置(Y坐标)，<a href="">以像素计</a>。</span></li><li><span style="font-family:Georgia">dirtyX &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的位置(X坐标)，默认为0。</span></li><li><span style="font-family:Georgia">dirtyY &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的位置(Y坐标)，默认为0。</span></li><li><span style="font-family:Georgia">dirtyWidth   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的大小(宽度)，默认为整幅图像的宽度。</span></li><li><span style="font-family:Georgia">dirtyHeight &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    部分截取imageData对象的大小(高度)，默认为整幅图像的高度。</span></li></ul><p><strong><code>说明</code></strong> <code>putImageData()</code>方法的后四个参数是可选的，在调用时要么传递3个参数要么传递7个参数。<br><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"1000"</span> height=<span class="string">"400"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas画布</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="comment">//[2] 获取Cnavas的上下文对象</span></span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 在画布指定位置绘制一个填空矩形</span></span><br><span class="line">  ctx.fillStyle=<span class="string">"#f9f"</span>;</span><br><span class="line">  ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//演示001</span></span><br><span class="line">  <span class="comment">//[4] 获取画布中指定矩形区域的图像数据，然后再放到画布的指定位置(相当于复制)</span></span><br><span class="line">  ctx.putImageData(ctx.getImageData(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>),<span class="number">120</span>,<span class="number">10</span>);</span><br><span class="line">  ctx.putImageData(ctx.getImageData(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>),<span class="number">230</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[5] 创建Image图像</span></span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  <span class="comment">//[6] 设置Image图像的数据源</span></span><br><span class="line">  img.src = <span class="string">"Yu.jpg"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//[7] 监听Image图像的加载</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[8] 把图像绘制到Canvas画布中</span></span><br><span class="line">    ctx.drawImage(img,<span class="number">10</span>,<span class="number">70</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示002</span></span><br><span class="line">    <span class="comment">//[9] 获取画布中指定矩形区域的图像数据，然后再放到画布的指定位置(测试参数）</span></span><br><span class="line">    <span class="keyword">var</span> imgData = ctx.getImageData(<span class="number">10</span>,<span class="number">70</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 3个参数的情况</span></span><br><span class="line"><span class="comment">    * 第一个参数：imageData对象</span></span><br><span class="line"><span class="comment">    * 第二个参数：绘制到画布的位置(X)</span></span><br><span class="line"><span class="comment">    * 第三个参数：绘制到画布的位置(Y)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    ctx.putImageData(imgData,<span class="number">120</span>,<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 7个参数的情况</span></span><br><span class="line"><span class="comment">    * 第一个参数：imageData对象</span></span><br><span class="line"><span class="comment">    * 第二个参数：绘制到画布的位置(X)</span></span><br><span class="line"><span class="comment">    * 第三个参数：绘制到画布的位置(Y)</span></span><br><span class="line"><span class="comment">    * 第四个参数：部分截取imageData对象的位置(X)</span></span><br><span class="line"><span class="comment">    * 第五个参数：部分截取imageData对象的位置(Y)</span></span><br><span class="line"><span class="comment">    * 第六个参数：部分截取imageData对象的大小(宽度)</span></span><br><span class="line"><span class="comment">    * 第七个参数：部分截取imageData对象的大小(高度)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    ctx.putImageData(imgData,<span class="number">230</span>,<span class="number">70</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">340</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">450</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">30</span>);</span><br><span class="line">    ctx.putImageData(imgData,<span class="number">560</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">60</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_34.png?raw=true"></p><p class="tip"><strong>注意</strong> 在指定Canvas偏移量的时候，需要以CSS像素为单位，然而在指定图像数据中矩形区域时需要以设置像素为单位。此外，需要注意putImageData的后四个参数确定的区域被称为<code>脏矩形(dirty rectangle)</code>，当浏览器将脏矩形赋值到Canvas画布的时候，会默认将设备像素转换为CSS像素。</p><h3 id="ImageData对象"><a href="#ImageData对象" class="headerlink" title="ImageData对象"></a>ImageData对象</h3><p>在上文中介绍的<code>getImageData()</code>方法，其返回的是ImageData类型的对象，该对象包含<code>width</code>、<code>height</code>以及data等三个属性。其中<code>width</code>代表的是以设备像素(device pixel)为单位的图像数据宽度，而<code>height</code>相应的代表着数据的高度，此外<code>data</code>是包含着各个设备像素数值的数组。</p><p>在<code>ImageData</code>对象中，<code>data</code>属性所包含的每个数组元素，均对应表示图像数据中的相应像素值，每个像素中都存在四方面的信息，分别代表当前像素的颜色(<a href="">RGB - Red 」Green 」Blue</a>)和透明度(<a href="">A - alpha</a>)。这些信息都使用包含8个二进制位(2的八次方)的整数来表示，取值范围为 <span style="color:red"><strong>0</strong> ~ <strong>255</strong> </span>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">也就是说，</span><br><span class="line"></span><br><span class="line">ImageData.data[0]代表的是红色数值，</span><br><span class="line">ImageData.data[1]代表的是绿色数值，</span><br><span class="line">ImageData.data[2]代表的是蓝色数值，</span><br><span class="line">ImageData.data[3]代表的是透明度数值。</span><br><span class="line"></span><br><span class="line">循环往复(如果数据数组的长度为n，那么`ImageData.data[n-4]`代表红色数值，其它的类推)。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>createImageData方法</strong></span></p><p><strong><code>语法</code></strong> </p><ul><li><code>ctx.createImageData(w,h);</code></li><li><code>ctx.createImageData(imageDataOther);</code></li></ul><p><strong><code>作用</code></strong> 该方法根据指定的宽高(目标对象的宽高)来创建新的空白的ImageData对象。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">w 指定的宽度。</span> </li><li><span style="font-family:Georgia">h 指定的高度。</span> </li><li><span style="font-family:Georgia">imageDataOther 参考的图像数据。</span> </li></ul><p><strong><code>示例-01</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"600"</span> height=<span class="string">"400"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取页面中的Canvas画布和对应的上下文</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建ImageData对象</span></span><br><span class="line">  <span class="keyword">var</span> imageData = ctx.createImageData(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(imageData);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * data: Uint8ClampedArray(16) [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]</span></span><br><span class="line"><span class="comment">   * height: 2</span></span><br><span class="line"><span class="comment">   * width:  2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 在画布中绘制红色矩形</span></span><br><span class="line">  ctx.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">  ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 获取画布中指定区域的图像数据</span></span><br><span class="line">  imageData = ctx.getImageData(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(imageData);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * data: Uint8ClampedArray(16) [255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255]</span></span><br><span class="line"><span class="comment">   * height: 2</span></span><br><span class="line"><span class="comment">   * width:  2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>新对象的默认像素值<code>transparent black</code>，表示为<a href="">(0, 0 , 0 , 0)</a>。其中前三项代表的是颜色，最后一项代表的是透明度，<code>color/alpha</code>以数组形式存在，而数组的大小为ImageData对象的四倍。</p></blockquote><p><strong><code>示例说明</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在上面的代码中ctx.createImageData(2,2)表示要创建2 * 2区域的空白ImageData对象。</span><br><span class="line">调用方法后得到的ImageData对象拥有 2 * 2 = 4个像素，每个像素由数组中的四个元素表示。</span><br><span class="line"></span><br><span class="line">打印ImageData属性得到的结果([4])显示为：</span><br><span class="line">data:Uint8ClampedArray(16) [255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255]</span><br><span class="line">我们观察下标0~3的这组数据：255,0,0,255，尝试给出标注结果为255(Red),0(Green),0(Blue),255(alpha)</span><br></pre></td></tr></table></figure></p><p>通过上面的分析，在掌握ImageData内部表示结构后，我们发现通过代码完全可以精准的控制图像的任何一个像素的显示，包括该像素的<code>RGB颜色和透明度</code>均可以控制，结合相应的算法和计算公式就可以简单的实现任何滤镜效果。</p><p><strong><code>示例-02</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"canvas"</span> height=<span class="string">"400"</span> width=<span class="string">"600"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[1] 获取画布和绘图上下文</span></span><br><span class="line">  <span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[2] 创建ImageData对象(10 * 10)</span></span><br><span class="line">  <span class="keyword">var</span> imgData = ctx.createImageData(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[3] 设置ImageData图像使用红色填充</span></span><br><span class="line">  <span class="keyword">var</span> length  = imgData.data.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;length; i+=<span class="number">4</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    imgData.data[i+<span class="number">0</span>] = <span class="number">255</span>;</span><br><span class="line">    imgData.data[i+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    imgData.data[i+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    imgData.data[i+<span class="number">3</span>] = <span class="number">255</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//[4] 把图像数据绘制到画布上面</span></span><br><span class="line">  ctx.putImageData(imgData,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_36.png?raw=true"></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas画布图像绘制相关的技术细节。&lt;/div&gt;

&lt;h3 id=&quot;Canvas画布图像绘制基础&quot;&gt;&lt;a href=&quot;#Canvas画布图像绘制基础&quot; class=&quot;headerlink&quot; title=&quot;Canvas画布图像绘制基础
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [13]-Canvas绘图(文本)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/04/javaScript%E7%B3%BB%E5%88%97%20%5B13%5D-Canvas%E7%BB%98%E5%9B%BE(%E6%96%87%E6%9C%AC)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/04/javaScript系列 [13]-Canvas绘图(文本)/</id>
    <published>2019-01-04T00:22:16.000Z</published>
    <updated>2019-02-19T02:45:45.495Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas画布绘制文本相关的技术细节。</div><h3 id="Canvas画布绘制文本"><a href="#Canvas画布绘制文本" class="headerlink" title="Canvas画布绘制文本"></a>Canvas画布绘制文本</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_27.png?raw=true"></p><div class="titleX"><strong>核心API</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制文本(描边)</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.strokeText( text , x , y , [ maxWidth ]);</code><br><strong><code>作用</code></strong> 用于在画布上绘制文本(描边·没有填色)。<br><strong><code>说明</code></strong> 文本的颜色为黑色，可以通过<code>strokeStyle</code>属性来设置颜色或渐变。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">text &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;绘制的文本信息</span></li><li><span style="font-family:Georgia">x &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的X轴坐标</span></li><li><span style="font-family:Georgia">y &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的Y轴坐标</span></li><li><span style="font-family:Georgia">maxWidth &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;允许的最大文本宽度，单位为像素</span></li></ul><p><strong><code>示例</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"20px Impact"</span>;</span><br><span class="line">ctx.strokeText(<span class="string">"Nice to meet you!"</span>,<span class="number">10</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建渐变</span></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.createLinearGradient(<span class="number">200</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">0</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0"</span>,<span class="string">"black"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0.5"</span>,<span class="string">"blue"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"1.0"</span>,<span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"25px KaiTi"</span>;</span><br><span class="line">ctx.strokeStyle = gradient;</span><br><span class="line">ctx.strokeText(<span class="string">"wendingding.com"</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_28.png?raw=true"><br><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制文本(填充)</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.fillText( text , x , y , [ maxWidth ]);</code><br><strong><code>作用</code></strong> 用于在画布上绘制填色的文本。<br><strong><code>说明</code></strong> 文本的颜色为黑色，可以通过<code>fillStyle</code>属性来设置颜色或渐变。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">text &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;绘制的文本信息</span></li><li><span style="font-family:Georgia">x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的X轴坐标</span></li><li><span style="font-family:Georgia">y &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文本的Y轴坐标</span></li><li><span style="font-family:Georgia">maxWidth &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;允许的最大文本宽度，单位为像素</span></li></ul><p><strong><code>示例</code></strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"20px Georgia"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"Nice to meet you!"</span>,<span class="number">10</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建渐变</span></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.createLinearGradient(<span class="number">200</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">0</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0"</span>,<span class="string">"black"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"0.5"</span>,<span class="string">"blue"</span>);</span><br><span class="line">gradient.addColorStop(<span class="string">"1.0"</span>,<span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用渐变填色</span></span><br><span class="line">ctx.fillStyle = gradient;</span><br><span class="line"><span class="comment">//设置文字的字号大小和字体样式</span></span><br><span class="line">ctx.font=<span class="string">"25px KaiTi"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"wendingding.com"</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_29.png?raw=true"></p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>计算文本信息的宽度</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.measureText( text ).width;</code><br><strong><code>作用</code></strong> 用于计算和返回指定文本的宽度，单位以像素计。<br><strong><code>说明</code></strong> <code>measureText</code>方法返回的本身是一个对象，我们需要用过width来获取宽度值。<br><strong><code>参数</code></strong> <code>text</code>表示要测量的文本。</p><p><div class="titleX"><strong>文字绘制相关属性介绍</strong></div><br><span class="prop"><strong>font</strong></span> 设置文字的字号和字体等信息。<br><span class="prop"><strong>textAlign</strong></span> 设置水平对齐方式，可选值有<code>start(默认) | end | left | right | center</code>。<br><span class="prop"><strong>textBaseline</strong></span> 设置垂直对齐方式，可选值有<code>alphabetic(默认) | top | middle | bottom | hanging | ideographic</code>。其中<code>hanging</code>表示文本基线是悬挂基线，<code>ideographic</code>表示文本基线是表意基线。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"How are you?"</span>;</span><br><span class="line">ctx.font = <span class="string">"30px Times New Roman"</span>;</span><br><span class="line"></span><br><span class="line">ctx.strokeText(str,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.fillText(str,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">ctx.fillText(str,<span class="number">50</span>,<span class="number">150</span>,<span class="number">120</span>);   <span class="comment">//约束最大宽度</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.measureText(str).width);</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,ctx.canvas.height);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textAlignArr = [<span class="string">"start"</span>,<span class="string">"end"</span>,<span class="string">"left"</span>,<span class="string">"right"</span>,<span class="string">"center"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;textAlignArr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.textAlign = textAlignArr[i];</span><br><span class="line">    ctx.fillText(str,<span class="number">100</span>,<span class="number">200</span> + (<span class="number">50</span> *(i + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(ctx.canvas.width,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line">str = <span class="string">"正"</span>;</span><br><span class="line"><span class="keyword">var</span> textBaselineArr = [<span class="string">"alphabetic"</span>,<span class="string">"top"</span>,<span class="string">"hanging"</span>,<span class="string">"middle"</span>,<span class="string">"ideographic"</span>,<span class="string">"bottom"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;textBaselineArr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.textBaseline = textBaselineArr[i];</span><br><span class="line">    ctx.fillText(str,<span class="number">100</span>  + (<span class="number">80</span> *(i + <span class="number">1</span>)),<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Canvas实现文字竖排案例"><a href="#Canvas实现文字竖排案例" class="headerlink" title="Canvas实现文字竖排案例"></a>Canvas实现文字竖排案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"1000px"</span> <span class="attr">height</span>=<span class="string">"700px"</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"templateText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里也。 化而為鸟， 其名為鹏， 鹏之背， 不知其幾千里也。 怒而飞， 其翼若垂天之雲。 是鸟也， 海运則將徙於南冥， 南冥者， 天池也。 </span></span><br><span class="line"><span class="undefined">#齐谐者， 志怪者也。 谐之言曰： 鹏之徙於南冥也， 水擊三千里， 摶扶搖而上者九萬里。 去以六月息者也， 野马也， 塵埃也， 生物之以息相吹也。 天之苍苍， 其正色邪？ 其远而無所至极邪？ 其视下也， 亦若是則已矣。 </span></span><br><span class="line"><span class="undefined">#且夫水之积也不厚， 則其负大舟也無力。 覆杯水於坳堂之上， 則芥為之舟， 置杯焉則胶， 水浅而舟大也。 风之积也不厚， 則其负大翼也無力。 故九萬里， 則风斯在下矣， 而後乃今培风。 背负青天而莫之夭厄者， 而後乃今將圖南。 </span></span><br><span class="line"><span class="undefined">#蜩與學鸠笑之曰： “ 我決起而飞， 枪榆枋， 時則不至， 而控於地而已矣。 奚以之九萬里而南為？ ” 适莽苍者， 三飧而反， 腹犹果然。 适百里者， 宿舂粮。 适千里者， 三月聚粮。 之二虫， 又何知？ </span></span><br><span class="line"><span class="undefined">#小知不及大知， 小年不及大年。 奚以知其然也？ 朝菌不知晦朔， 惠蛄不知春秋， 此小年也。 楚之南有冥灵者， 以五百歲為春， 五百歲為秋； 上古有大椿者， 以八千歲為春， 八千歲為秋； 而彭祖乃今以久特闻， 眾人匹之， 不亦悲乎？ </span></span><br><span class="line"><span class="undefined">#汤之问棘也是已： 穷發之北有冥海者， 天池也。 有鱼焉， 其廣數千里， 未有知其修者， 其名為鲲。 有鸟焉， 其名為鹏， 背若泰山， 翼若垂天之雲， 摶扶搖羊角而上者九萬里， 绝雲气， 负青天， 然後圖南， 且适南冥也。 </span></span><br><span class="line"><span class="undefined">#斥鹌笑之曰： “ 彼且奚适也？ 我腾跃而上， 不过數仞而下， 翱翔蓬蒿之间， 耻亦飞之至也。 而彼且奚适也？ ” 此小大之辨也。 </span></span><br><span class="line"><span class="undefined">#故夫知效一官， 行比一鄉， 德合一君， 而征一國者， 其自视也， 亦若此矣。 而宋荣子犹然笑之。 且舉世誉之而不加勸， 舉世非之而不加沮。 定乎內外之分， 辨乎荣辱之境， 斯已矣。 彼其於世， 未數數焉也。 虽然， 犹有未树也。</span></span><br><span class="line"><span class="undefined">#夫列子禦风而行， 泠然善也， 旬有五日而後反。 彼於致福， 未數數然也。 此虽免乎行， 犹有所待者也。 </span></span><br><span class="line"><span class="undefined">#若夫乘天地之正， 而禦六气之辩， 以游無穷者， 彼且惡乎待哉！ 故曰： 至人無己， 神人無功， 聖人無名。 </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m      = <span class="number">30</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h      = ctx.canvas.height;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> w      = ctx.canvas.width;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> count  = <span class="built_in">Math</span>.floor(w / m);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= count; i++) &#123;</span></span><br><span class="line"><span class="undefined">        ctx.beginPath();</span></span><br><span class="line"><span class="undefined">        ctx.moveTo(i*m - 0.5 ,0);</span></span><br><span class="line"><span class="undefined">        ctx.lineTo(i*m - 0.5 ,h);</span></span><br><span class="line"><span class="javascript">        ctx.strokeStyle = <span class="string">"#1D244F"</span>;</span></span><br><span class="line"><span class="undefined">        ctx.stroke();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    CanvasRenderingContext2D.prototype.fillTextVertical = <span class="function"><span class="keyword">function</span> (<span class="params">text, x, y</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">        self.textAlign = <span class="string">'center'</span>;</span></span><br><span class="line"><span class="javascript">        self.textBaseline = <span class="string">'middle'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrText = text.split(<span class="string">''</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrWidth = arrText.map(<span class="function"><span class="keyword">function</span> (<span class="params">letter</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> self.measureText(letter).width;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        arrText.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">letter, index</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(letter == <span class="string">"#"</span>)</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="undefined">                y = 12 + 50;</span></span><br><span class="line"><span class="undefined">                x = x - 30;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> letterWidth = arrWidth[index];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> code = letter.charCodeAt(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (code &lt;= <span class="number">256</span>) &#123;</span></span><br><span class="line"><span class="undefined">                self.translate(x, y);</span></span><br><span class="line"><span class="javascript">                self.rotate(<span class="number">90</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span></span><br><span class="line"><span class="undefined">                self.translate(-x, -y);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; text.charCodeAt(index - <span class="number">1</span>) &lt; <span class="number">256</span>) &#123;</span></span><br><span class="line"><span class="undefined">                y = y + arrWidth[index - 1] / 2;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            self.fillText(letter, x, y);</span></span><br><span class="line"><span class="undefined">            self.setTransform(1, 0, 0, 1, 0, 0);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> letterWidth = arrWidth[index];</span></span><br><span class="line"><span class="undefined">            y = y + letterWidth;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(y &gt;= (self.canvas.height - <span class="number">12</span>))</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="undefined">                y = 12;</span></span><br><span class="line"><span class="undefined">                x = x - 30;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> templateText = <span class="built_in">document</span>.getElementById(<span class="string">"templateText"</span>).innerText;</span></span><br><span class="line"><span class="javascript">    ctx.font = <span class="string">'20px STKaiti, sans-serif'</span>;</span></span><br><span class="line"><span class="javascript">    ctx.fillStyle = <span class="string">"#1D244F"</span>;</span></span><br><span class="line"><span class="javascript">    ctx.fillTextVertical(<span class="string">"逍遥游( 上)  · 庄子"</span>, canvas.width - <span class="number">25</span>,  <span class="number">0</span>);</span></span><br><span class="line"><span class="undefined">    ctx.fillTextVertical(templateText, canvas.width - 25, 12);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas画布绘制文本相关的技术细节。&lt;/div&gt;

&lt;h3 id=&quot;Canvas画布绘制文本&quot;&gt;&lt;a href=&quot;#Canvas画布绘制文本&quot; class=&quot;headerlink&quot; title=&quot;Canvas画布绘制文本&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [12]-Canvas绘图(曲线)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/03/javaScript%E7%B3%BB%E5%88%97%20%5B12%5D-Canvas%E7%BB%98%E5%9B%BE(%E6%9B%B2%E7%BA%BF)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/03/javaScript系列 [12]-Canvas绘图(曲线)/</id>
    <published>2019-01-03T00:21:15.000Z</published>
    <updated>2019-02-19T02:45:45.480Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas中的弧度、曲线、圆弧以及文字的绘制方法以及径向渐变等内容，并提供饼状图等综合案例。</div><h3 id="Canvas中的弧度、曲线和圆弧"><a href="#Canvas中的弧度、曲线和圆弧" class="headerlink" title="Canvas中的弧度、曲线和圆弧"></a>Canvas中的弧度、曲线和圆弧</h3><div class="titleX"><strong>专业术语</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_13.png?raw=true" width="500px"><br><strong><code>夹角</code></strong> 从一个点发射(延伸)出两条线段，两条线相交的部分会构成一个夹角。<br><strong><code>角度</code></strong> 两条相交直线中的任何一条与另一条相叠合时必须转动的量的量度，单位符号为<code>°</code>。<br><strong><code>周角</code></strong> 一条直线围绕起点需要与自己相叠合时必须转动的量的量度被称为周角，周角等分为<code>360</code>度。<br><strong><code>弧度</code></strong> 角的度量单位，弧长等于半径的弧其所对的圆心角为1弧度(<span style="color:red">弧长等于半径时，射线夹角为1弧度</span>)。<br><br><div style="border:1px solid #888;width:300px;height:44px;line-height:44px;text-align:center;"><strong>公式 &nbsp;&nbsp;&nbsp;&nbsp; 弧度 = 角度 * π / 180</strong></div><p>在使用JavaScript编写代码进行相关计算的时候，经常需要使用Math提供的成员，这里简单说明。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_14.png?raw=true"></p><p><strong><span style="color:red">Math.PI</span></strong> 代表着<strong>π</strong>。</p><p><strong><span style="color:red">Math.sin(弧度)</span></strong> 夹角对面的边 与 斜边的比值。<br><strong><span style="color:red">Math.cos(弧度)</span></strong> 夹角侧面的边 与 斜边的比值。</p><p>这里给出圆形上点坐标的计算公式，其中<code>x0</code>和<code>y0</code>为圆心坐标，<code>rad</code>为弧度，<code>R</code>为圆的半径。</p><div style="border:1px solid #888;width:400px;height:44px;line-height:44px;text-align:center;margin-bottom:10px"><strong>坐标 &nbsp;&nbsp;&nbsp;&nbsp; ( x0 + Math.cos(rad) x R&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;&nbsp;&nbsp;y0 + Math.sin(rad) x R )</strong></div><div class="titleX"><strong>核心API介绍</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制圆弧</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.arc(x,y,r,startAngle,endAngle,counterclockwise);</code><br><strong><code>作用</code></strong> 通过该方法来绘制圆弧或者(半)圆。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x 圆心X轴坐标</span></li><li><span style="font-family:Georgia">y 圆心Y轴坐标</span></li><li><span style="font-family:Georgia">r 圆的半径</span></li><li><span style="font-family:Georgia">startAngle  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;开始弧度</span></li><li><span style="font-family:Georgia">endAngle    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结束弧度</span></li><li><span style="font-family:Georgia">counterclockwise &nbsp;&nbsp;是否逆时针旋转(默认为false)</span></li></ul><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>绘制圆弧曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.arcTo(x1,y1,x2,y2,r);</code><br><strong><code>作用</code></strong> 参考两个点并根据指定半径来创建一条圆弧路径。<br><strong><code>备注</code></strong> 绘制的圆弧与当前点到第一个点的连线相切且与第一第二个点的连线也相切。<br><strong><code>说明</code></strong> <code>arcTo</code>方法的这些特性决定了该方法非常适合用来绘制圆角矩形。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x1 第一个参考点的X轴坐标</span></li><li><span style="font-family:Georgia">y1 第一个参考点的Y轴坐标</span></li><li><span style="font-family:Georgia">x2 第二个参考点的X轴坐标</span></li><li><span style="font-family:Georgia">y3 第二个参考点的Y轴坐标</span></li><li><span style="font-family:Georgia">r &nbsp;&nbsp;&nbsp;圆的半径</span></li></ul><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>圆形渐变</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.createRadialGradient(x0,y0,r0,x1,y1,r1);;</code><br><strong><code>作用</code></strong> 通过该方法来绘制圆弧或者(半)圆。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 渐变开始圆的X轴坐标</span></li><li><span style="font-family:Georgia">y0 渐变开始圆的Y轴坐标</span></li><li><span style="font-family:Georgia">r0 开始圆的半径</span></li><li><span style="font-family:Georgia">x1 渐变结束圆的X轴坐标</span></li><li><span style="font-family:Georgia">y1 渐变结束圆的Y轴坐标</span></li><li><span style="font-family:Georgia">r1 结束圆的半径</span></li></ul><h3 id="Canvas曲线-圆弧绘制示例"><a href="#Canvas曲线-圆弧绘制示例" class="headerlink" title="Canvas曲线-圆弧绘制示例"></a>Canvas曲线-圆弧绘制示例</h3><p><div class="titleX"><strong>数学方程绘制图形Demo1</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_17.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 通过代数方程来绘制直线</span></span><br><span class="line"><span class="comment">//设置路径(起点)</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">30</span>,y = <span class="number">0</span>; x &lt; <span class="number">1000</span> ; x++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过代数方程来绘制直线</span></span><br><span class="line">    y = x / <span class="number">2</span> * <span class="number">0.3</span>;</span><br><span class="line">    ctx.lineTo(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置描边的颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"#0Af"</span>;</span><br><span class="line"><span class="comment">//描边绘制出图案</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 通过三角函数来绘制曲线(正玄/余弦)</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">30</span>,y = <span class="number">0</span>; x &lt; <span class="number">1000</span> ; x++)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">// 高度 * 波长 + 中心轴位置</span></span><br><span class="line">    y = <span class="number">50</span> * <span class="built_in">Math</span>.sin(x/<span class="number">25</span>) + <span class="number">100</span>;</span><br><span class="line">    ctx.lineTo(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置描边的颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line"><span class="comment">//描边绘制出图案</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>数学方程绘制图形Demo2</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_20.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">offsetX,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dig = <span class="built_in">Math</span>.PI / <span class="number">15</span> * n;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">30</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="built_in">Math</span>.sin(i * dig);</span><br><span class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.cos(i * dig);</span><br><span class="line">        ctx.lineTo(offsetX + x * <span class="number">80</span>,<span class="number">150</span> + y * <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//闭合路径</span></span><br><span class="line">    ctx.closePath();</span><br><span class="line">    <span class="comment">//设置样式并填充</span></span><br><span class="line">    ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    <span class="comment">//设置样式并描边</span></span><br><span class="line">    ctx.strokeStyle = <span class="string">"#666"</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">14</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">7</span>,<span class="number">26</span>];</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">n,i</span>)</span>&#123;</span><br><span class="line">    draw((i + <span class="number">1</span>) * <span class="number">160</span>,n);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制相切曲线Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_21.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x0 = <span class="number">100</span>,y0 = <span class="number">100</span>,</span><br><span class="line">    x1 = <span class="number">500</span>,y1 = <span class="number">100</span>,</span><br><span class="line">    x2 = <span class="number">450</span>,y2 = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x0,y0);</span><br><span class="line">ctx.arcTo(x1,y1,x2,y2,<span class="number">30</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x0,y0);</span><br><span class="line">ctx.lineTo(x1,y1);</span><br><span class="line">ctx.lineTo(x2,y2);</span><br><span class="line"></span><br><span class="line">ctx.fillText(<span class="string">'x0,y0'</span>,x0,y0+<span class="number">10</span>)</span><br><span class="line">ctx.fillText(<span class="string">'x1,y1'</span>,x1+<span class="number">10</span>,y1+<span class="number">10</span>)</span><br><span class="line">ctx.fillText(<span class="string">'x2,y2'</span>,x2+<span class="number">10</span>,y2)</span><br><span class="line">ctx.strokeStyle = <span class="string">"#333"</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制圆角矩形Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_22.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawRoundedRect</span>(<span class="params">x,y,w,h,r,isFill,isStrokeRect</span>)</span>&#123;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo( x + r , y );</span><br><span class="line">    ctx.arcTo(  x + w , y , x + w , y + h , r);</span><br><span class="line">    ctx.arcTo(  x + w , y + h , x , y + h , r);</span><br><span class="line">    ctx.arcTo(  x , y + h , x , y , r);</span><br><span class="line">    ctx.arcTo(  x , y ,  x + r , y , r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isFill) &#123;</span><br><span class="line">        ctx.fillStyle = getRandomColor();</span><br><span class="line">        ctx.fill();</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ctx.strokeStyle = getRandomColor();</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(isStrokeRect)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo( x + r , y );</span><br><span class="line">        ctx.lineTo(x + w  , y );</span><br><span class="line">        ctx.lineTo(x + w  , y + h);</span><br><span class="line">        ctx.lineTo(x  , y + h);</span><br><span class="line">        ctx.lineTo(x  , y);</span><br><span class="line">        ctx.lineTo(x + r  , y);</span><br><span class="line"></span><br><span class="line">        ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">        ctx.fillText(<span class="string">"x0,y0"</span>,x + r,y);</span><br><span class="line">        ctx.fillText(<span class="string">"x1,y1"</span>,x + w,y);</span><br><span class="line">        ctx.fillText(<span class="string">"x2,y2"</span>,x + w,y + h + <span class="number">10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x3,y3"</span>,x<span class="number">-10</span>,y + h + <span class="number">10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x4,y4"</span>,x - <span class="number">10</span>,y<span class="number">-10</span>);</span><br><span class="line">        ctx.fillText(<span class="string">"x5,y5"</span>,x + r,y + <span class="number">10</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawRoundedRect(<span class="number">50</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">drawRoundedRect(<span class="number">200</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">drawRoundedRect(<span class="number">350</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">10</span>,<span class="literal">true</span>);</span><br><span class="line">drawRoundedRect(<span class="number">500</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">drawRoundedRect(<span class="number">650</span>,<span class="number">40</span>,<span class="number">120</span>,<span class="number">100</span>,<span class="number">30</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制弧线、扇形、圆弧和圆Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_16.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制弧线</span></span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制扇形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"#f09"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充扇形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">3.2</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="number">3.8</span>/<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">"#195"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制半圆</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"#666"</span>;</span><br><span class="line">ctx.arc(<span class="number">450</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="built_in">Math</span>.PI,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.arc(<span class="number">570</span>,<span class="number">80</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制五环图案Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_15.png?raw=true" height="120px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)</span><br><span class="line">&#123;   ctx.beginPath();</span><br><span class="line">    <span class="keyword">if</span>( i &gt;=<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.arc(x + (i * <span class="number">80</span>) <span class="number">-200</span>,y + <span class="number">60</span>,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ctx.arc(x + (i * <span class="number">80</span>),y,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.strokeStyle = getRandomColor();</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制等分的圆Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_18.png?raw=true" height="140px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//描边</span></span><br><span class="line">drawCircle(<span class="number">100</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">200</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">3</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">300</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">4</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">400</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">20</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">500</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="literal">true</span>);</span><br><span class="line">drawCircle(<span class="number">600</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">200</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充</span></span><br><span class="line">drawCircle(<span class="number">100</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">2</span>);</span><br><span class="line">drawCircle(<span class="number">200</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">3</span>);</span><br><span class="line">drawCircle(<span class="number">300</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">4</span>);</span><br><span class="line">drawCircle(<span class="number">400</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">20</span>);</span><br><span class="line">drawCircle(<span class="number">500</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">100</span>);</span><br><span class="line">drawCircle(<span class="number">600</span>,<span class="number">200</span>,<span class="number">40</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params">x,y,r,n,isStroke</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span>  i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//计算开始和结束的角度</span></span><br><span class="line">        <span class="keyword">var</span> angle = <span class="number">2</span> * <span class="built_in">Math</span>.PI / n;</span><br><span class="line">        <span class="keyword">var</span> startAngle  = angle * i;</span><br><span class="line">        <span class="keyword">var</span> endAngle    = angle * (i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始路径</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置绘制圆的起点</span></span><br><span class="line">        ctx.moveTo(x,y);</span><br><span class="line">        ctx.arc(x,y,r,startAngle,endAngle,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isStroke)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ctx.strokeStyle = getRandomColor();</span></span><br><span class="line">            ctx.stroke();</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ctx.fillStyle = getRandomColor();</span><br><span class="line">            ctx.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取填充的颜色/随机</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = getRandom();</span><br><span class="line">    <span class="keyword">var</span> g = getRandom();</span><br><span class="line">    <span class="keyword">var</span> b = getRandom();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>绘制饼状图综合示例</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_19.png?raw=true" height="140px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PieChart</span> (<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx        = ctx || <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">this</span>.x          = <span class="keyword">this</span>.ctx.canvas.width/<span class="number">2</span> - <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">this</span>.y          = <span class="keyword">this</span>.ctx.canvas.height/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.r          = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">this</span>.outLine    = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>.dataList   = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PieChart.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>:PieChart,</span><br><span class="line">    init:function(dataList)&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataList = dataList || [&#123;<span class="attr">title</span>:<span class="string">"默认"</span>,<span class="attr">value</span>:<span class="number">100</span>&#125;];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据数据来计算并转换弧度</span></span><br><span class="line">        <span class="keyword">this</span>.transformAngle();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制饼状图</span></span><br><span class="line">        <span class="keyword">this</span>.drawPie();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawPie:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> startAngle = <span class="number">0</span>,endAngle;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">this</span>.dataList.length ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> item = <span class="keyword">this</span>.dataList[i];</span><br><span class="line">            endAngle = startAngle + item.angle;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</span><br><span class="line">            <span class="keyword">this</span>.ctx.arc(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y,<span class="keyword">this</span>.r,startAngle,endAngle,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">var</span> color= <span class="keyword">this</span>.ctx.strokeStyle= <span class="keyword">this</span>.ctx.fillStyle= <span class="keyword">this</span>.getRandomColor();</span><br><span class="line">            <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">            <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制标题</span></span><br><span class="line">            <span class="keyword">this</span>.drawPieTitle(startAngle,item.angle,color,item.title)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制图例</span></span><br><span class="line">            <span class="keyword">this</span>.drawPieLegend(i,item.title);</span><br><span class="line">            startAngle = endAngle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    drawPieTitle:<span class="function"><span class="keyword">function</span>(<span class="params">startAngle,angle,color,title</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> edge    = <span class="keyword">this</span>.r + <span class="keyword">this</span>.outLine;</span><br><span class="line">        <span class="keyword">var</span> edgeX   = <span class="built_in">Math</span>.cos(startAngle + angle / <span class="number">2</span>) * edge; <span class="comment">/*x轴方向的直角边*/</span></span><br><span class="line">        <span class="keyword">var</span> edgeY   = <span class="built_in">Math</span>.sin(startAngle + angle / <span class="number">2</span>) * edge; <span class="comment">/*y轴方向的直角边*/</span></span><br><span class="line">        <span class="keyword">var</span> outX    = <span class="keyword">this</span>.x + edgeX;                          <span class="comment">/*计算延伸出去的点坐标*/</span></span><br><span class="line">        <span class="keyword">var</span> outY    = <span class="keyword">this</span>.y + edgeY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//画出坐标点</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(outX,outY);</span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = color;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制文字下划线</span></span><br><span class="line">        <span class="keyword">var</span> textWidth   = <span class="keyword">this</span>.ctx.measureText(title).width + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">var</span> lineX       = outX &gt; <span class="keyword">this</span>.x ? outX + textWidth : outX - textWidth;</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(lineX,outY);</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制文字</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.font           = <span class="string">"15px KaiTi"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textAlign      = outX &gt; <span class="keyword">this</span>.x ? <span class="string">"left"</span> : <span class="string">"right"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textBaseline   = <span class="string">"bottom"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillText(title,outX,outY);</span><br><span class="line">    &#125;,</span><br><span class="line">    drawPieLegend:<span class="function"><span class="keyword">function</span>(<span class="params">index,title</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在计算的时候最好的能够反着计算</span></span><br><span class="line">        <span class="keyword">var</span> space = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">var</span> rectW = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">var</span> rectH = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">var</span> rectX = <span class="keyword">this</span>.x + <span class="keyword">this</span>.r + <span class="number">80</span>;</span><br><span class="line">        <span class="keyword">var</span> rectY = <span class="keyword">this</span>.y + (index * <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//绘制矩形</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.fillRect(rectX,rectY,rectW,rectH);</span><br><span class="line">        <span class="comment">// this.ctx.beginPath();</span></span><br><span class="line">        <span class="comment">// 绘制文字</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.textAlign      = <span class="string">'left'</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.textBaseline   = <span class="string">'top'</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillStyle      = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.fillText(title,rectX + rectW + space,rectY);</span><br><span class="line">    &#125;,</span><br><span class="line">    getRandomColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'rgb('</span>+r+<span class="string">','</span>+g+<span class="string">','</span>+b+<span class="string">')'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    transformAngle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self    = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> total   = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.dataList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">            total += item.value;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.dataList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">            self.dataList[i].angle = <span class="number">2</span> * <span class="built_in">Math</span>.PI * item.value/total;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>  data = [&#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">title</span>:<span class="string">"UI"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">26</span>,<span class="attr">title</span>:<span class="string">"java"</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">title</span>:<span class="string">"iOS"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">63</span>,<span class="attr">title</span>:<span class="string">"H5"</span>&#125;,&#123;<span class="attr">value</span>:<span class="number">25</span>,<span class="attr">title</span>:<span class="string">"Node"</span>&#125;]</span><br><span class="line"><span class="keyword">var</span>  pie  = <span class="keyword">new</span> PieChart().init(data);</span><br></pre></td></tr></table></figure><h3 id="Canvas中的贝塞尔曲线"><a href="#Canvas中的贝塞尔曲线" class="headerlink" title="Canvas中的贝塞尔曲线"></a>Canvas中的贝塞尔曲线</h3><p><a href="">贝塞尔曲线</a>(<code>Bézier curve</code>)，最初由法国物理学家和数学家<code>Paul de Casteljau</code>发明，1962年被法国工程师皮埃尔·贝塞尔（<code>Pierre Bézier</code>）广泛发表并运用在汽车的车身设计上，现在多应用在计算机图形系统中。</p><p><a href="">贝塞尔曲线</a>分为平方(<code>quadratic</code>)贝塞尔曲线和立方(<code>cubic</code>)贝塞尔曲线两其中平方贝塞尔曲线是一种二次曲线，由两个锚点和一个控制点总共三个点来定义，而立方贝塞尔曲线是一种三次曲线，由两个锚点和两个控制点共四个点来定义。它们的区别在于立方贝塞尔曲线能够在两个方向上弯曲。</p><p><a href="">Canvas</a>支持两种贝塞尔曲线，分别由<code>quadraticCurveTo</code>和<code>bezierCurveTo</code>方法来实现。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>二次贝塞尔曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.quadraticCurveTo(x0,y0,x1,y1);;</code><br><strong><code>作用</code></strong> 通过使用表示二次贝塞尔曲线的指定控制点，向当前路径添加一个点绘制曲线。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y0 控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x1 结束点(锚点)的X轴坐标</span></li><li><span style="font-family:Georgia">y1 结束点(锚点)的Y轴坐标</span></li></ul><p><strong><code>说明</code></strong> 二次贝塞尔曲线需要两个点。分别是用于二次贝塞尔计算中的控制点和曲线的结束点。<br><strong><code>注意</code></strong> 曲线还需要一个开始点(路径最后的点)如果路径不存在，那么可以使用<code>moveTo()</code>方法来定义。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>三次贝塞尔曲线</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.bezierCurveTo(x0,y0,x1,y1,x2,y2);;</code><br><strong><code>作用</code></strong> 通过使用表示二次贝塞尔曲线的指定控制点，向当前路径添加一个点绘制曲线。<br><strong><code>参数</code></strong> </p><ul><li><span style="font-family:Georgia">x0 第一个控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y0 第一个控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x1 第二个控制点的X轴坐标</span></li><li><span style="font-family:Georgia">y1 第二个控制点的Y轴坐标</span></li><li><span style="font-family:Georgia">x2 结束点(锚点)的X轴坐标</span></li><li><span style="font-family:Georgia">y2 结束点(锚点)的Y轴坐标</span></li></ul><p><strong><code>说明</code></strong> 三次贝塞尔曲线需要三个点，两个控制点和一个锚点。<br><strong><code>注意</code></strong> 曲线还需要一个开始点(路径最后的点)如果路径不存在，那么可以使用<code>moveTo()</code>方法来定义。</p><h3 id="Canvas贝塞尔曲线绘制示例"><a href="#Canvas贝塞尔曲线绘制示例" class="headerlink" title="Canvas贝塞尔曲线绘制示例"></a>Canvas贝塞尔曲线绘制示例</h3><p><div class="titleX"><strong>二次贝塞尔曲线示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_24.png?raw=true" height="150px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置曲线的起点(当前路径的最后点没有则通过moveTo设置)</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.quadraticCurveTo(<span class="number">100</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制文字</span></span><br><span class="line"><span class="keyword">var</span> margin = <span class="number">15</span>;</span><br><span class="line">ctx.fillText(<span class="string">"(100,100)"</span>,<span class="number">100</span> - margin,<span class="number">100</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"(100,300)"</span>,<span class="number">100</span> - margin,<span class="number">300</span> + margin);</span><br><span class="line">ctx.fillText(<span class="string">"(500,200)"</span>,<span class="number">500</span> - margin,<span class="number">200</span> + margin);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制点</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">300</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">500</span>,<span class="number">200</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>三次贝塞尔曲线示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_25.png?raw=true" height="200px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置曲线的起点(当前路径的最后点没有则通过moveTo设置)</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.bezierCurveTo(<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">50</span>,<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制文字</span></span><br><span class="line"><span class="keyword">var</span> margin = <span class="number">15</span>;</span><br><span class="line">ctx.fillText(<span class="string">"起点 (100,100)"</span>,<span class="number">100</span> - margin,<span class="number">100</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"控制点 (100,300)"</span>,<span class="number">100</span> - margin,<span class="number">300</span> + margin);</span><br><span class="line">ctx.fillText(<span class="string">"(300,50)"</span>,<span class="number">300</span> - margin,<span class="number">50</span> - margin);</span><br><span class="line">ctx.fillText(<span class="string">"(500,200)"</span>,<span class="number">500</span> - margin,<span class="number">200</span> + margin);</span><br><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制点</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">100</span>,<span class="number">300</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.arc(<span class="number">500</span>,<span class="number">200</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>贝塞尔曲线复杂图形示例Demo</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_26.png?raw=true" height="150px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制贝塞尔曲线</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBezierCurve</span>(<span class="params">dx,dy,n</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">var</span> x0,x1,x3,y1,y2,y3;</span><br><span class="line">    <span class="keyword">var</span> dig = <span class="built_in">Math</span>.PI / <span class="number">15</span> * n;</span><br><span class="line"></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">30</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span>  X = <span class="built_in">Math</span>.sin(i * dig);</span><br><span class="line">        <span class="keyword">var</span>  Y = <span class="built_in">Math</span>.cos(i * dig);</span><br><span class="line">        x0 = dx + X * s;</span><br><span class="line">        x1 = dx + X * s + <span class="number">100</span>;</span><br><span class="line">        x2 = dx + X * s;</span><br><span class="line"></span><br><span class="line">        y0 = dy + Y * s - <span class="number">100</span>;</span><br><span class="line">        y1 = dy + Y * s;</span><br><span class="line">        y2 = dy + Y * s;</span><br><span class="line">        ctx.bezierCurveTo(x0 , y0 , x1 , y1 , x2 , y2);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.closePath();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制和填充</span></span><br><span class="line">    ctx.fillStyle   = <span class="string">"#eee"</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawBezierCurve(<span class="number">150</span>,<span class="number">250</span>,<span class="number">13</span>);</span><br><span class="line">drawBezierCurve(<span class="number">480</span>,<span class="number">250</span>,<span class="number">24</span>);</span><br><span class="line">drawBezierCurve(<span class="number">820</span>,<span class="number">250</span>,<span class="number">31</span>);</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas中的弧度、曲线、圆弧以及文字的绘制方法以及径向渐变等内容，并提供饼状图等综合案例。&lt;/div&gt;

&lt;h3 id=&quot;Canvas中的弧度、曲线和圆弧&quot;&gt;&lt;a href=&quot;#Canvas中的弧度、曲线和圆弧&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [11]-Canvas绘图(路径)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/02/javaScript%E7%B3%BB%E5%88%97%20%5B11%5D-Canvas%E7%BB%98%E5%9B%BE(%E8%B7%AF%E5%BE%84)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/02/javaScript系列 [11]-Canvas绘图(路径)/</id>
    <published>2019-01-02T00:20:14.000Z</published>
    <updated>2019-02-19T02:45:45.484Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将介绍Canvas中的路径、矩形以及描边和填充等绘制方法，非零正交原则以及线性渐变等内容，并提供折线图和柱状图等综合案例。</div><h3 id="Canvas路径和状态"><a href="#Canvas路径和状态" class="headerlink" title="Canvas路径和状态"></a>Canvas路径和状态</h3><div class="titleX"><strong>核心API介绍</strong></div><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置绘制的起点</strong></span></p><p><strong><code>语法</code></strong> <code>ctx.moveTo(x, y);</code><br><strong><code>参数</code></strong> 第一个参数和第二个参数都是相对于<a href="">Canvas</a>画布左上角的X轴和Y轴坐标。<br><strong><code>作用</code></strong> 设置<a href="">Canvas</a>上下文绘制路径的起点，相当于设置画笔从哪个位置开始移动。<br><strong><code>注意</code></strong> 使用<a href="">Canvas</a>上下文绘制路径前必须先设置起点，否则绘制无效。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置绘制目标点</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.lineTo(x, y);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是相对于<a href="">Canvas</a>画布左上角的X轴和Y轴坐标。<br><strong><code>作用</code></strong>  设置<a href="">Canvas</a>上下文绘制路径的目标点，相当于设置画笔移动的目标位置。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置描边</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.stroke();</code><br><strong><code>作用</code></strong>  根据路径来绘制(描边)，可以在绘制前通过<code>strokeStyle</code>来设置描边样式。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>设置填充</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.fill();</code><br><strong><code>作用</code></strong>  对闭合路径的内容进行绘制(填充),可以通过<code>fillStyle</code>来设置样式，默认黑色。<br><strong><code>参数</code></strong> <code>fill</code>方法有两个可选参数(<code>nonzero | evenodd</code>) ，控制填充时使用环绕原则(默认)或奇偶原则。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>矩形路径</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.rect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>注意</code></strong>  <code>rect</code>方法只是规划了矩形的路径，并没有填充和描边，因此还需要搭配<code>stroke</code>或<code>fill</code>使用。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>描边矩形</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.strokeRect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法绘制完矩形路径后立即进行<code>stroke</code>描边绘制，等价于<code>rect + stroke</code>组合。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>填充矩形</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.fillRect(x, y, width, height);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法绘制完矩形路径后立即进行<code>fill</code>填充绘制，等价于<code>rect + fill</code>方法的组合。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>矩形擦除</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.clearRect(x, y, width, hegiht);</code><br><strong><code>参数</code></strong>  第一个参数和第二个参数都是矩形左上角坐标的X和Y轴坐标，第三和第四个参数为矩形的宽高。<br><strong><code>作用</code></strong>  该方法用于擦除指定矩形内绘制的内容，需注意如果重置画布宽度，内容将自动重绘。</p><p><span style="border:1px solid #ccc;padding:2px 10px;color:#666"><strong>开始和闭合路径</strong></span></p><p><strong><code>语法</code></strong>  <code>ctx.beginPath();</code>和<code>ctx.closePath();</code><br><strong><code>作用</code></strong>  开始路径的作用是将不同的绘制路径进行隔离，闭合路径会自动连接最开始和最后的点。<br><strong><code>注意</code></strong>  执行开始路径方法时表示将要重新绘制一个新的路径，可以分开设置和管理多个路径的样式。</p><p><div class="titleX"><strong>路径的核心属性介绍</strong></div><br><span class="prop"><strong>lineCap</strong></span> 设置或返回线条末端线帽样式，可选值有<code>butt默认</code>|<code>round圆形</code>|<code>square正方形</code><br><span class="prop"><strong>lineJoin</strong></span>设置或返回所创建边角的类型，可选值有<code>miter默认</code>|<code>round圆角</code>|<code>bevel斜角</code><br><span class="prop"><strong>lineWidth</strong></span>设置或返回当前线条的宽度，以像素计，默认值为1。<br><span class="prop"><strong>miterLimit</strong></span>设置或返回最大斜接长度。<br><span class="prop" style="background:#195;color:#fff"><strong>fillStyle</strong></span>设置或返回用于填充绘画的颜色、渐变或模式。<br><span class="prop" style="background:#195;color:#fff"><strong>strokeStyle</strong></span>设置或返回用于笔触(描边)的颜色、渐变或模式。<br><span class="prop"><strong>shadowColor</strong></span>设置或返回用于阴影的颜色，和<code>shadowBlur</code>一起使用。<br><span class="prop"><strong>shadowBlur</strong></span>设置或返回用于阴影的模糊级别，和<code>shadowColor</code>一起使用。<br><span class="prop"><strong>shadowOffsetX</strong></span>设置或返回阴影距形状的水平距离，0指示阴影位于形状的正下方。<br><span class="prop"><strong>shadowOffsetY</strong></span>设置或返回阴影距形状的垂直距离，0指示阴影位于形状的正下方。</p><h3 id="Canvas路径绘制示例"><a href="#Canvas路径绘制示例" class="headerlink" title="Canvas路径绘制示例"></a>Canvas路径绘制示例</h3><p><div class="titleX"><strong>路径绘制Demo</strong></div><br><strong><code>Demo-1 绘制交叉和平行线</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_04.png?raw=true" width="500px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 绘制一条直线</span></span><br><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">20.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">20.5</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"#195"</span>;   <span class="comment">//设置描边样式</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 绘制两条平行线</span></span><br><span class="line">ctx.moveTo(<span class="number">20.5</span>,<span class="number">40</span>);        <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">20.5</span>,<span class="number">120</span>);       <span class="comment">//设置目标点</span></span><br><span class="line"></span><br><span class="line">ctx.moveTo(<span class="number">40.5</span>,<span class="number">40</span>);        <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">40.5</span>,<span class="number">120</span>);       <span class="comment">//设置目标点</span></span><br><span class="line">ctx.stroke();               <span class="comment">//绘制路径(描边)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//03 绘制两条交叉线条</span></span><br><span class="line">ctx.moveTo(<span class="number">60</span>,<span class="number">60</span>);          <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">100</span>);        <span class="comment">//设置目标点</span></span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">60</span>);         <span class="comment">//设置起点</span></span><br><span class="line">ctx.lineTo(<span class="number">60</span>,<span class="number">100</span>);         <span class="comment">//设置目标点</span></span><br><span class="line">ctx.stroke();               <span class="comment">//绘制路径(描边)</span></span><br></pre></td></tr></table></figure><p><strong><code>Demo-2 开始路径和闭合路径</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_05.png?raw=true" width="400px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 绘制两条交叉的线(演示beginPath方法的使用)</span></span><br><span class="line"><span class="comment">//(1) 设置并绘制第一条线</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2) 设置并绘制第二条线</span></span><br><span class="line">ctx.beginPath();         <span class="comment">//重新开启路径</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">//设置线条和描边的样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 绘制两条相接的线(演示closePath方法的使用)</span></span><br><span class="line">ctx.beginPath();        <span class="comment">//重新开启路径</span></span><br><span class="line">ctx.moveTo(<span class="number">180.5</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">180.5</span>,<span class="number">180.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">260</span>,<span class="number">180.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置关闭路径(自动连接两个点闭合以构成封闭区域)</span></span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置图形填充和样式</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#eee"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><strong><code>Demo-3 绘制虚线的N种方式</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_06.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 绘制虚线的第一种方式(通过fillRect矩形绘制API)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一个参数：矩形的起点X</span></span><br><span class="line">    <span class="comment">//第二个参数：矩形的起点Y</span></span><br><span class="line">    <span class="comment">//第三个参数：矩形的宽度</span></span><br><span class="line">    <span class="comment">//第四个参数：矩形的高度</span></span><br><span class="line">    ctx.fillRect((i *<span class="number">2</span>),<span class="number">30</span>,<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line">    ctx.fillRect((i *<span class="number">2</span>),<span class="number">70</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    ctx.fillRect((i *<span class="number">5</span>),<span class="number">100</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 绘制虚线的第二种方式(通过路径和setLineDash绘制API)</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">130.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">130.5</span>);</span><br><span class="line">ctx.setLineDash([<span class="number">5</span>]);</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启路径绘制另一条虚线</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">160.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">160.5</span>);</span><br><span class="line"><span class="comment">//参数说明[第一段的长度、第二段的长度、第三段的长度 * 重复]</span></span><br><span class="line">ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line"><span class="comment">//获取虚线的排列方式(不重复那段的排列方式)</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.getLineDash()); <span class="comment">//[5, 10, 15, 5, 10, 15]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启路径绘制另一条虚线(偏移量参照)</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">180.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">180.5</span>);</span><br><span class="line"><span class="comment">//设置虚线的偏移量</span></span><br><span class="line">ctx.lineDashOffset = <span class="number">-30</span>;</span><br><span class="line">ctx.setLineDash([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></p><p><strong><code>Demo-4 绘制实心三角形和矩形(四边形)</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_07.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//001 使用路径的方式绘制三角(边)形</span></span><br><span class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">80</span>,<span class="number">100</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line"><span class="comment">// ctx.lineTo(20,20);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(填充)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#195"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.stroke();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 使用路径的方式绘制四角(边)形</span></span><br><span class="line"><span class="comment">//备注：如果是填充的话，那么只需要四个点的坐标即可确定</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">150</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">350</span>,<span class="number">20</span>);</span><br><span class="line">ctx.lineTo(<span class="number">350</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">// ctx.closePath();</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.strokeStyle = "red";</span></span><br><span class="line"><span class="comment">// ctx.stroke();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制(填充)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure></p><p><strong><code>Demo-5 绘制矩形API使用示例</code></strong><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_08.png?raw=true" width="400px"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制矩形API介绍</span></span><br><span class="line"><span class="comment">//001 使用rect + stroke|fill 方法绘制矩形(非独立路径)</span></span><br><span class="line"><span class="comment">//第一个参数：矩形左上角X</span></span><br><span class="line"><span class="comment">//第二个参数：矩形左上角Y</span></span><br><span class="line"><span class="comment">//第三个参数：矩形的宽度W</span></span><br><span class="line"><span class="comment">//第四个参数：矩形的高度H</span></span><br><span class="line">ctx.rect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">ctx.stroke();                   <span class="comment">//绘制(描边)</span></span><br><span class="line"><span class="comment">// ctx.fill();                  //绘制(填充)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 使用fillRect绘制(独立路径)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"green"</span>;        <span class="comment">//设置填充颜色</span></span><br><span class="line">ctx.fillRect(<span class="number">20</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 使用strokeRect绘制(独立路径)</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>;        <span class="comment">//设置描边颜色</span></span><br><span class="line">ctx.strokeRect(<span class="number">20</span>,<span class="number">210</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 擦除画布</span></span><br><span class="line"><span class="comment">//ctx.clearRect(20,150,50,40);</span></span><br></pre></td></tr></table></figure></p><p><div class="titleX"><strong>柱状图综合案例</strong></div><br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_09.png?raw=true"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制柱状图的构造函数</span></span><br><span class="line"><span class="keyword">var</span> RectChart = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rects = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx    = ctx || <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置计算参数</span></span><br><span class="line">    <span class="keyword">this</span>.m      = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">this</span>.w      = <span class="keyword">this</span>.ctx.canvas.width;</span><br><span class="line">    <span class="keyword">this</span>.h      = <span class="keyword">this</span>.ctx.canvas.height;</span><br><span class="line">    <span class="keyword">this</span>.cols   = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.w / <span class="keyword">this</span>.m);</span><br><span class="line">    <span class="keyword">this</span>.rows   = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.h / <span class="keyword">this</span>.m);</span><br><span class="line">    <span class="keyword">this</span>.pointW = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">this</span>.x      = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">this</span>.y      = <span class="number">350</span>;</span><br><span class="line">    <span class="keyword">this</span>.rectW  = <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置原型对象</span></span><br><span class="line">RectChart.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>:RectChart,</span><br><span class="line">    init:function(rects)&#123;</span><br><span class="line">        <span class="keyword">this</span>.rects = rects;</span><br><span class="line">        <span class="keyword">this</span>.drawGrid();</span><br><span class="line">        <span class="keyword">this</span>.drawAxis();</span><br><span class="line">        <span class="keyword">this</span>.drawRect();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawGrid:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//002 设置路径</span></span><br><span class="line">        <span class="comment">//[1] 绘制所有的行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span> ; i &lt; <span class="keyword">this</span>.rows ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo(<span class="number">0</span>,(i * <span class="keyword">this</span>.m)+<span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.w,(i * <span class="keyword">this</span>.m)+<span class="number">0.5</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[2] 绘制所有的列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span> ; j &lt; <span class="keyword">this</span>.cols ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo((j * <span class="keyword">this</span>.m) + <span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.ctx.lineTo((j * <span class="keyword">this</span>.m) + <span class="number">0.5</span>,<span class="keyword">this</span>.h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//003 绘制网格</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#ddd"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawAxis:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//004 绘制坐标(横坐标和纵坐标 X-Y)</span></span><br><span class="line">        <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</span><br><span class="line">            y = <span class="keyword">this</span>.y,</span><br><span class="line">            xl = <span class="number">650</span>,</span><br><span class="line">            yl = <span class="number">300</span>,</span><br><span class="line">            m  = <span class="keyword">this</span>.m;</span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制X轴坐标</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(x,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl - m,y - m/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl - m,y - m/<span class="number">2</span> + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x + xl,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制Y轴坐标</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.moveTo(x,y);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x,y - yl);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x - m/<span class="number">2</span>,y - yl + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x - m/<span class="number">2</span> + m,y - yl + m);</span><br><span class="line">        <span class="keyword">this</span>.ctx.lineTo(x,y - yl);</span><br><span class="line">        <span class="keyword">this</span>.ctx.fill();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawRect:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//绘制坐标点的每条连接线</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>.rects.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">rect</span>)</span>&#123;</span><br><span class="line">            self.ctx.fillStyle = rect.color;</span><br><span class="line">            self.ctx.fillRect(rect.x,self.y - rect.h,self.rectW,rect.h);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备绘制数据</span></span><br><span class="line"><span class="keyword">var</span> rects = [</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">h</span>:<span class="number">50</span>,<span class="attr">color</span>:<span class="string">"red"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">200</span>,<span class="attr">h</span>:<span class="number">250</span>,<span class="attr">color</span>:<span class="string">"pink"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">300</span>,<span class="attr">h</span>:<span class="number">120</span>,<span class="attr">color</span>:<span class="string">"#195"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">400</span>,<span class="attr">h</span>:<span class="number">300</span>,<span class="attr">color</span>:<span class="string">"#47e"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>:<span class="number">500</span>,<span class="attr">h</span>:<span class="number">20</span>,<span class="attr">color</span>:<span class="string">"#302"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用构造函数绘制</span></span><br><span class="line"><span class="keyword">new</span> RectChart().init(rects);</span><br></pre></td></tr></table></figure><h3 id="Non-Zero-Winding-Number-Rule-amp-Odd-even-Rule"><a href="#Non-Zero-Winding-Number-Rule-amp-Odd-even-Rule" class="headerlink" title="Non-Zero Winding Number Rule &amp; Odd-even Rule"></a>Non-Zero Winding Number Rule &amp; Odd-even Rule</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_10.png?raw=true" width="300px"></p><p><div class="titleX"><strong>非零正交(环绕)原则</strong></div><br>我们在使用绘图上下文对象的<code>fill</code>方法进行填充绘制的时候，如果传递参数(<code>nonzero</code>)或默认不传递任何参数，那么在填充的时候使用<strong>非零正交(环绕)原则</strong>。</p><blockquote><p><strong>非零正交(环绕)原则 · 规则</strong><br>❐ 在路径包围的区域中，向外发射一条和所有围绕它的边相交的射线<br>❐ 开启一个计数器，计数器的初始值为0<br>❐ 如果这个射线遇到顺时针围绕，那么计数器 +1<br>❐ 如果这个射线遇到顺时针围绕，那么计数器 -1<br>❐ 如果最终计数器的值非〇，则这块区域在路径内浏览器会对其进行填充。</p></blockquote><p>这里我们可以给出两个非零正交(环绕)原则应用的典型案例-绘制镂空矩形和圆环。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_11.png?raw=true" width="300px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx    = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制正方形(顺时针)</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">150</span>);</span><br><span class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制正方形(逆时针)</span></span><br><span class="line">ctx.moveTo(<span class="number">75</span>,<span class="number">75</span>);</span><br><span class="line">ctx.lineTo(<span class="number">75</span>,<span class="number">125</span>);</span><br><span class="line">ctx.lineTo(<span class="number">125</span>,<span class="number">125</span>);</span><br><span class="line">ctx.lineTo(<span class="number">125</span>,<span class="number">75</span>);</span><br><span class="line">ctx.lineTo(<span class="number">75</span>,<span class="number">75</span>);</span><br><span class="line"><span class="comment">//设置填充(非零正交原则)</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#299"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆环</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">60</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">false</span>);</span><br><span class="line">ctx.arc(<span class="number">300</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI,<span class="literal">true</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">"rgba(250,50,79,1)"</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><div class="titleX"><strong>奇偶填充原则</strong></div><br>我们在使用绘图上下文对象的<code>fill</code>方法进行填充绘制的时候，如果传递参数(<code>evenodd</code>)那么在填充的时候使用<strong>奇偶填充原则</strong>。</p><blockquote><p><strong>奇偶填充原则 · 规则</strong><br>❐ 在路径包围的区域中，向外发射一条和所有围绕它的边相交的射线<br>❐ 查看相交线的个数，如果为奇数，就填充，如果是偶数，就不填充。</p></blockquote><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_12.png?raw=true" width="300px"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas  = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx     = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> x = ctx.canvas.width / <span class="number">2</span>,</span><br><span class="line">    y = ctx.canvas.height/ <span class="number">2</span>,</span><br><span class="line">    r = <span class="number">50</span>,</span><br><span class="line">    start = - <span class="built_in">Math</span>.PI / <span class="number">2</span>,</span><br><span class="line">    end = <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">ctx.arc(x, y, r, start, end);</span><br><span class="line">ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x, y - r);</span><br><span class="line">ctx.lineTo(x - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.lineTo(x + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x - r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(x + <span class="number">150</span>, y, r, start, end);</span><br><span class="line">ctx.fillStyle = <span class="string">"#000"</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(x + <span class="number">150</span>, y - r);</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> - r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">10</span>), y - r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">10</span>));</span><br><span class="line">ctx.lineTo(x + <span class="number">150</span> + r * <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI / <span class="number">5</span>), y + r * <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI / <span class="number">5</span>));</span><br><span class="line">ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">ctx.fill(<span class="string">'evenodd'</span>);</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将介绍Canvas中的路径、矩形以及描边和填充等绘制方法，非零正交原则以及线性渐变等内容，并提供折线图和柱状图等综合案例。&lt;/div&gt;

&lt;h3 id=&quot;Canvas路径和状态&quot;&gt;&lt;a href=&quot;#Canvas路径和状态&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>javaScript系列 [10]-Canvas绘图(基础)</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/javaScript%E7%B3%BB%E5%88%97%20%5B10%5D-Canvas%E7%BB%98%E5%9B%BE(%E5%9F%BA%E7%A1%80)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/javaScript系列 [10]-Canvas绘图(基础)/</id>
    <published>2019-01-01T00:20:13.000Z</published>
    <updated>2019-01-18T06:21:06.420Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文将对Canvas绘图技术进行简单介绍，主要包括Canvas标签、CanvasRenderingContext2D对象核心API的使用以及复杂图形的绘制等内容。</div><h3 id="Canvas简单介绍"><a href="#Canvas简单介绍" class="headerlink" title="Canvas简单介绍"></a>Canvas简单介绍</h3><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_23.png?raw=true"></p><div class="titleX"><strong>基本信息</strong></div><p><a href="">Canvas</a> 是HTML5提供的一种新标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="">Canvas</a> 是一个<strong><code>矩形区域的画布</code></strong>，在画布上面我们可以通过<code>javaScript</code>控制每一个像素来绘制图形。</p><p><a href="">Canvas</a> 标签使用<code>javaScript</code>在网页上绘制图像，其本身不具备绘图功能。通过使用<code>canvas</code>并调用相关API，可用多种方式来绘制路径、矩形、圆形、字符以及图像等。</p><p class="tip"><strong>拓展</strong> 最早<a href="">Canvas</a>由<code>Apple</code>公司引入到WebKit内核，用于<code>Mac OSX</code>的Dashboard，后来又在<strong>Safari</strong>和<strong>Google Chrome</strong>中被实现。<a href="">Canvas</a>标签是<strong><code>WhatWG Web applications 1.0 规范</code></strong>的内容，也包含于HTML5中。<br></p><p class="titleX"><strong>应用的领域和趋势</strong></p><blockquote><p><span style="color:#000"><strong>① 炫酷的场景秀</strong></span>：用Canvas实现动态的广告效果能够非常融洽的跨平台运行。<br><span style="color:#000"><strong>② 数据的可视化</strong></span>：各种统计类的图表(趋势图、饼状图、折线图等)，已经有成熟的开源框架。<br><span style="color:#000"><strong>③ 游戏开发领域</strong></span>：Canvas是<code>HTML5</code>游戏开发首选，其在基于Web的图像方面比Flash更立体和精巧。</p><p><span style="color:#000"><strong>[1] Web图形编辑器</strong></span>：<code>Photoshop</code>图形编辑器将能够100%基于Web实现。<br><span style="color:#000"><strong>[2] 远程可视化控制</strong></span>：Canvas能更好的实现基于Web的数据传输以gous可视化控制界面。<br><span style="color:#000"><strong>[3] 各种类型模拟器</strong></span>：从视觉效果和核心功能等方面来说，模拟器可以完全由<code>JavaScript</code>来实现。</p></blockquote><p><strong>参考资料</strong>  <a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">W3school</a> 、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noopener">MDN_Canvas_API</a><br><a href="https://www.w3.org/TR/2015/REC-2dcontext-20151119/" target="_blank" rel="noopener">HTML Canvas 2D Context</a></p><div class="titleX"><strong>绘图准备和初体验</strong></div><p><a href="">Canvas</a> 标签默认拥有<code>300 * 150</code>的宽高，可以通过设置边框来查看。<br><a href="">Canvas</a> 标签支持鼠标右键·(复制图片)·以及(图片另存为)的操作，同图片一致。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_01.png?raw=true"></p><p><a href="">Canvas</a> 标签的参考坐标系如上图所示，其<code>Y轴</code>的方向区别于常见的数学坐标系。<br><a href="">Canvas</a> 标签的浏览器兼容很好(<code>IE9+</code>)，若浏览器不兼容建议设置标签内容友好提示。<br><a href="">Canvas</a> 标签本身并不能绘制图形只是画布，具体绘图工作主要有Canvas上下文对象完成。<br><a href="">Canvas</a> 标签上下文对象是<code>javaScript</code>操作Canvas的接口，常用类型是<code>CanvasRenderingContext2D</code>。<br><a href="">Canvas</a> 标签在设置画布宽度和高度的时候建议在标签中直接通过<code>width</code>和<code>height</code>属性节点来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"300px"</span>&gt;</span>当前浏览器不支持canvas，请升级浏览器<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//01 获取canvas画布</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="comment">//02 获取canvas上下文对象</span></span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">//03 设置路径</span></span><br><span class="line">    <span class="comment">//开启路径(可省略)</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="comment">//设置路径的起点</span></span><br><span class="line">    ctx.moveTo(<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//设置路径对应值</span></span><br><span class="line">    ctx.lineTo(<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//设置线条(描边)颜色</span></span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">    <span class="comment">//04 绘制线条(描边)</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>代码说明</strong> 上面的代码将会在canvas画布上绘制出一条<span style="color:red">红色</span>的线条。</p><p class="tip"><strong>注意</strong> 请不要使用<code>CSS</code>来控制<a href="">Canvas</a> 标签的宽高，这样会导致内部图片拉伸和变形，如果重新设置<a href="">Canvas</a> 标签的宽高属性将会擦除画布中已有的所有内容。</p><h3 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h3><div class="titleX"><strong><span style="color:#000">CanvasRenderingContext2D</span> 核心API介绍</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_02.png?raw=true"></p><p>这里列出<code>CanvasRenderingContext2D</code>原型对象上面几乎所有的核心成员供参考。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">canvas                      //当前的画布对象</span><br><span class="line">filter                      //设置模糊和灰度等过滤效果</span><br><span class="line">globalAlpha                 //设置透明度(0~1)</span><br><span class="line">shadowBlur                  //阴影的模糊级别</span><br><span class="line">shadowColor                 //阴影的颜色</span><br><span class="line">shadowOffsetX               //阴影距形状的水平距离</span><br><span class="line">shadowOffsetY               //阴影距形状的垂直距离</span><br><span class="line">fillStyle                   //设置矩形填充的样式(颜色)</span><br><span class="line">strokeStyle                 //设置描边样式</span><br><span class="line">lineCap                     //线条末端的类型   round butt(默认) square</span><br><span class="line">lineJoin                    //相交线的拐点类型 round miter(默认) bevel</span><br><span class="line">lineWidth                   //设置线条的宽度   </span><br><span class="line">miterLimit                  //最大斜接长度(两条线交汇处内角和外角之间的距离)</span><br><span class="line">lineDashOffset              //设置虚线偏移量</span><br><span class="line">font                        //设置字体的绘制参数(字号、字体、粗体等)</span><br><span class="line">textAlign                   //设置文字的水平对齐方式</span><br><span class="line">textBaseline                //设置文字基线(垂直对齐方式)</span><br><span class="line">globalCompositeOperation    //设置如何将一个源(新)图像绘制到目标(旧)图像上</span><br><span class="line">imageSmoothingEnabled       //设置图片是否平滑(非稳定)</span><br><span class="line">imageSmoothingQuality       //设置图像平滑度的属性(非稳定)</span><br><span class="line"></span><br><span class="line">moveTo()                    //设置路径(起点)</span><br><span class="line">lineTo()                    //设置路径</span><br><span class="line">beginPath()                 //开启路径</span><br><span class="line">closePath()                 //关闭路径</span><br><span class="line">setLineDash()               //设置虚线宽度数据</span><br><span class="line">getLineDash()               //获取虚线宽度集合</span><br><span class="line"></span><br><span class="line">rect()                      //绘制矩形</span><br><span class="line">fillRect()                  //矩形填充</span><br><span class="line">strokeRect()                //设置描边(矩形)</span><br><span class="line">clearRect()                 //擦除矩形区域内容</span><br><span class="line"></span><br><span class="line">stroke()                    //设置描边</span><br><span class="line">fill()                      //设置填充</span><br><span class="line">clip()                      //剪切指定形状和尺寸的区域</span><br><span class="line">arc()                       //绘制圆弧(圆)               </span><br><span class="line">arcTo()                     //绘制曲线</span><br><span class="line">ellipse()                   //添加椭圆路径(非稳定)</span><br><span class="line">bezierCurveTo()             //绘制贝塞尔曲线(3)</span><br><span class="line">quadraticCurveTo()          //绘制贝塞尔曲线(2)</span><br><span class="line">isPointInPath()             //检查某个点是否在指定的路径中</span><br><span class="line">isPointInStroke()           //检查某个点是否在指定(范围)</span><br><span class="line">createLinearGradient()      //创建线性渐变</span><br><span class="line">createRadialGradient()      //创建放射状/环形的渐变</span><br><span class="line"></span><br><span class="line">fillText()                  //矩形填充(绘制文字)</span><br><span class="line">strokeText()                //设置描边(文字绘制)</span><br><span class="line">measureText()               //获取并计算文本宽度</span><br><span class="line"></span><br><span class="line">drawImage()                 //绘制图片</span><br><span class="line">createImageData()           //创建新的ImageData对象</span><br><span class="line">getImageData()              //获取ImageData对象(矩形区域的像素数据)</span><br><span class="line">putImageData()              //从指定ImageData对象中把图像放到画布上面</span><br><span class="line">createPattern()             //在指定的方向上重复指定的元素</span><br><span class="line">drawFocusIfNeeded()         //如有必要则绘制焦点</span><br><span class="line"></span><br><span class="line">save()                      //保存状态</span><br><span class="line">scale()                     //设置缩放</span><br><span class="line">rotate()                    //设置旋转</span><br><span class="line">restore()                   //返回之前保存过的路径状态和属性</span><br><span class="line">translate()                 //平移(重新映射画布上的(0,0)位置)</span><br><span class="line">transform()                 //替换绘图的当前转换矩阵</span><br><span class="line">setTransform()              //将当前转换重置为单位矩阵,然后运行transform()</span><br><span class="line">resetTransform()            //使用单位矩阵重新设置当前变形(非稳定)</span><br></pre></td></tr></table></figure><p>画布的上下文<code>CanvasRenderingContext2D</code>对象为图形的绘制提供了丰富的接口，我们可以直接调用相关的API来绘制路径、圆弧和矩形等图案。此外，要得到目标图案其实有很多种方法<span style="color:#195"><strong>到达罗马的路途并非只有一条</strong></span>，而所有复杂的图案都离不开点、线和面，而且它们应该是<span style="color:red"><strong>渐进的</strong></span>。</p><div style="background:#eee;color:#34495e;width:120px;text-align:center"><strong>点-线-面</strong></div><p>这里先在页面中提供一个400 * 300的画布，获取画布的上下文对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</span><br></pre></td></tr></table></figure><p><strong>矩形点和圆形点的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">5</span>);            <span class="comment">//矩形点</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">11.5</span>,<span class="number">40</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);   <span class="comment">//圆形点</span></span><br><span class="line">ctx.fill();                         <span class="comment">//设置填充</span></span><br></pre></td></tr></table></figure><p><strong>线条的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式(一) 通过绘制连续的矩形来绘制线条</span></span><br><span class="line"><span class="comment">//示例：(实线)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">80</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">40</span> + (i * <span class="number">1</span>),<span class="number">25</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：(虚线)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">20</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">40</span> + (i * <span class="number">4</span>),<span class="number">40</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式(二) 通过路径的方式来绘制线条</span></span><br><span class="line"><span class="comment">//示例：(色度稀释的线条)</span></span><br><span class="line">ctx.moveTo(<span class="number">40</span>,<span class="number">60</span>);</span><br><span class="line">ctx.lineTo(<span class="number">320</span>,<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：(色度正常的线条)</span></span><br><span class="line">ctx.moveTo(<span class="number">40</span>,<span class="number">70.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">320</span>,<span class="number">70.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置描边</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></p><p><strong>面(矩形)的绘制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式(一) 以“矩形点” + 循环的方式来绘制矩形</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">40</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ctx.fillRect(<span class="number">20</span> + (i * <span class="number">3</span>),<span class="number">100</span>,<span class="number">3</span>,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式(二) 直接绘制矩形</span></span><br><span class="line">ctx.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">ctx.fillRect(<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><p>这里贴出上面代码运行的结果图。<br><img src="https://github.com/flowerField/Source/blob/master/Blog/canvas_03.png?raw=true" width="500px"></p><p class="tip"><strong>备注</strong> 在使用canvas上下文绘制线条的时候，我们会发现线条最终的颜色看上去并不是黑色的感觉比较淡，此外线条的宽度看上去也并不是<code>1px</code>而是<code>2px</code>。其实，主要原因是在canvas在进行绘制的时候，对齐的点是线的中心位置，因此就会把线分成上下两个0.5px，在进行显示的时候会补齐，因此其色度自然也是不饱和的。在绘制的时候，可以考虑给绘制坐标设置<code>0.5px</code>的偏移量来解决。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文将对Canvas绘图技术进行简单介绍，主要包括Canvas标签、CanvasRenderingContext2D对象核心API的使用以及复杂图形的绘制等内容。&lt;/div&gt;

&lt;h3 id=&quot;Canvas简单介绍&quot;&gt;&lt;a href=&quot;#Canv
      
    
    </summary>
    
    
      <category term="javaScript系列" scheme="https://weibo.com/u/3800117445/tags/javaScript%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>网络编程系列 FormData</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20FormData/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/网络编程系列 FormData/</id>
    <published>2018-12-31T16:03:00.000Z</published>
    <updated>2019-01-08T08:00:27.202Z</updated>
    
    <content type="html"><![CDATA[<p></p><p class="titleX"><strong>FormData 简单介绍</strong></p><a href="">FormData</a>是<code>Ajax 2.0</code>-<a href="https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html" target="_blank" rel="noopener">XMLHttpRequest Level 2</a> 提供的一个接口对象，可以使用该对象来模拟和处理表单并方便的进行<strong>文件上传</strong>操作。<p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(FormData)</span><br><span class="line">ƒ FormData()</span><br><span class="line">    <span class="built_in">arguments</span>: <span class="literal">null</span></span><br><span class="line">    caller: <span class="literal">null</span></span><br><span class="line">    length: <span class="number">0</span></span><br><span class="line">    name: <span class="string">"FormData"</span></span><br><span class="line">    prototype: FormData</span><br><span class="line">        append: ƒ append()</span><br><span class="line">        <span class="keyword">delete</span>: ƒ <span class="keyword">delete</span>()</span><br><span class="line">        entries: ƒ entries()</span><br><span class="line">        forEach: ƒ forEach()</span><br><span class="line">        get: ƒ ()</span><br><span class="line">        getAll: ƒ getAll()</span><br><span class="line">        has: ƒ has()</span><br><span class="line">        keys: ƒ keys()</span><br><span class="line">        set: ƒ ()</span><br><span class="line">        values: ƒ values()</span><br><span class="line">        <span class="keyword">constructor</span>: ƒ FormData()</span><br><span class="line">        Symbol(Symbol.iterator): ƒ entries()</span><br><span class="line">        Symbol(Symbol.toStringTag): "FormData"</span><br><span class="line">        __proto__: Object</span><br><span class="line">    __proto__: ƒ ()</span><br><span class="line">    [[Scopes]]: Scopes[0]</span><br></pre></td></tr></table></figure><p>通过打印并查看formData的结构，可以发现该接口对象本身非常简单。在<a href="">FormData</a>构造函数原型对象上只有<code>append</code>、<code>forEach</code>、<code>keys</code>等少数方法。</p><div class="titleX"><strong>FormData的主要用处</strong></div><blockquote><p>❐ 网络请求中模拟和处理表单数据<br>❐ 网络请求中用来异步的上传文件</p></blockquote><div class="titleX"><strong>FormData实例的创建</strong></div><p><span style="color:#888">◆</span> <strong><code>new FormData (form? : HTMLFormElement)</code></strong></p><p>在使用FormData构造函数创建实例对象的时候，可以传递一个HTML表单元素，该表单元素允许是任何形式的表单控件，包括文件输入框、复选框等。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"formTest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"wendingding"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">value</span>=<span class="string">"123456789"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//列出创建formData实例对象的几种方式</span></span><br><span class="line"><span class="comment">//001 通过构造函数创建不传递任务参数</span></span><br><span class="line"><span class="keyword">var</span> formData1 = <span class="keyword">new</span> FormData();   <span class="comment">//空的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过调用对象的方法来设置数据(模拟表单)</span></span><br><span class="line"><span class="comment">//设置数据</span></span><br><span class="line">formData1.set(<span class="string">"name"</span>,<span class="string">"文顶顶"</span>);</span><br><span class="line">formData1.set(<span class="string">"email"</span>,<span class="string">"wendingding_ios@126.com"</span>);</span><br><span class="line">formData1.set(<span class="string">"friends"</span>,<span class="string">"熊大"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置数据(追加)</span></span><br><span class="line">formData1.append(<span class="string">"friends"</span>,<span class="string">"光头强"</span>);</span><br><span class="line">formData1.append(<span class="string">"friends"</span>,<span class="string">"萝卜头"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看实例数据</span></span><br><span class="line">formData1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 获取表单标签传递给FormData构造函数</span></span><br><span class="line"><span class="keyword">var</span> formData2 = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms.namedItem(<span class="string">"formTest"</span>))</span><br><span class="line">formData2.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> 表单标签必须要设置name属性节点才能获取其数据</div><p><strong>说明</strong> 在上面的示例代码中介绍了两种创建(获取)formData实例对象的方式，可以<span style="color:#f33">先创建一个空的实例对象也可以直接通过页面中的表单标签来进行初始化处理</span>。</p><p>当formData数据装填好之后，可以直接通过ajax方法提交到服务器端，下面给出上面代码的执行结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name 文顶顶</span><br><span class="line">email wendingding_ios@126.com</span><br><span class="line">friends 熊大</span><br><span class="line">friends 光头强</span><br><span class="line">friends 萝卜头</span><br><span class="line">----------------------------------</span><br><span class="line">user wendingding</span><br><span class="line">pass 123456789</span><br></pre></td></tr></table></figure><div class="titleX"><strong>FormData的主要方法</strong></div><p><img src="https://github.com/flowerField/Source/blob/master/Blog/formData.png?raw=true"></p><p>如上图所示，FormData构造函数的原型对象上面定义了一堆方法。这些方法使用方式都很简单，接下来我们通过代码的方式简单介绍他们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 创建空的formData实例对象</span></span><br><span class="line">   <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//02 设置数据(添加)</span></span><br><span class="line">   data.set(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">   data.set(<span class="string">"name"</span>,<span class="string">"LiuY"</span>);</span><br><span class="line">   data.set(<span class="string">"type"</span>,<span class="string">"法师"</span>);</span><br><span class="line">   data.set(<span class="string">"address"</span>,<span class="string">"泉水中心"</span>);</span><br><span class="line">   <span class="comment">//03 设置数据(修改和删除)</span></span><br><span class="line">   data.set(<span class="string">"name"</span>,<span class="string">"MiTaoer"</span>);</span><br><span class="line">   data.delete(<span class="string">"address"</span>);</span><br><span class="line">   <span class="comment">//04 设置数据(追加)</span></span><br><span class="line">   data.append(<span class="string">"type"</span>,<span class="string">"战士"</span>);</span><br><span class="line">   data.append(<span class="string">"type"</span>,<span class="string">"辅助"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//05 读取数据(指定key-one)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.get(<span class="string">"name"</span>));          <span class="comment">//MiTaoer</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.get(<span class="string">"type"</span>));          <span class="comment">//法师</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//06 读取数据(指定key-All)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.getAll(<span class="string">"type"</span>));       <span class="comment">//["法师", "战士", "辅助"]</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//07 检查是否拥有指定的key</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.has(<span class="string">"age"</span>));           <span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.has(<span class="string">"email"</span>));         <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//08 迭代器的基本使用(keys)</span></span><br><span class="line">   <span class="keyword">var</span> keyIterator = data.keys()      <span class="comment">//获取迭代器对象</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "age"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "name"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: false, value: "type"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(keyIterator.next());   <span class="comment">//&#123;done: true, value: undefined&#125;</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"___________________"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//09 迭代器的基本使用(values)</span></span><br><span class="line">   <span class="keyword">var</span> valueIterator = data.values();  <span class="comment">//获取迭代器对象</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "18"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "MiTaoer"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "法师"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "战士"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: false, value: "辅助"&#125;</span></span><br><span class="line">   <span class="built_in">console</span>.log(valueIterator.next());  <span class="comment">//&#123;done: true, value: undefined&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//10 迭代器的基本使用(entries)</span></span><br><span class="line">   <span class="built_in">console</span>.log(data.entries().next());     <span class="comment">//&#123;done: false, value: ["age", "18"]&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//11 formData对象的遍历</span></span><br><span class="line">   data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">       <span class="comment">//输出结果</span></span><br><span class="line">       <span class="comment">// age 18</span></span><br><span class="line">       <span class="comment">// name MiTaoer</span></span><br><span class="line">       <span class="comment">// type 法师</span></span><br><span class="line">       <span class="comment">// type 战士</span></span><br><span class="line">       <span class="comment">// type 辅助</span></span><br><span class="line">       <span class="built_in">console</span>.log(key,value);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><p><a href="">formData对象</a>的这些方法其实不用进行过多的赘述，上面的代码和说明简单易懂。总体上来说，它提供了一整套的操作数据的方法囊括了添加(set)、修改、查询和删除等操作，<code>append</code>方法和set方法的不同之处在于它不会覆盖而是以数组push的方式来处理同名的数据。</p><p><a href="">formData对象</a>的<code>keys()</code>、<code>values()</code>和<code>entries()</code>方法使用类似，调用后将得到一个<code>Iterator类型</code>的迭代器对象，该对象能够能够调用<code>next()</code>方法来进行迭代操作，打印结果中的<code>done</code>使用布尔类型的值来进行标记，如果迭代结束那么值为<strong>true</strong>。</p><p><a href="">formData对象</a>的<code>forEach()</code>接收一个回调函数参数，其中第一个参数为当前遍历数据的<code>value</code>值，第二个参数为<code>key</code>(同数组的forEach方法一致)。如果是Ajax发送GET请求，需要通过<a href="">formData对象</a>的方式来提交表单数据，那么可以借助该方法来拼接查询字符串。</p><p></p><p class="titleX"><strong>FormData的典型用法</strong></p>这里给定如下的表单数据，然后介绍如何使用FormData来处理表单数据发送GET和POST请求。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"formTest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"check"</span>&gt;</span> 是否勾选<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交表单数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><div style="background:#195;color:#fff;width:120px;text-align:center"><strong>GET请求</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"GET"</span>,<span class="string">"http://127.0.0.1:3000?"</span>+getData(),<span class="literal">true</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取页面中的表单数据并处理为查询字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms.namedItem(<span class="string">"formTest"</span>));</span><br><span class="line">    data.append(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">    data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">        arr.push(key+<span class="string">"="</span>+value);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码示例可以发现，使用formData来处理表单数据发送GET请求并没有什么优势，也需要通过循环来处理然后把键值对转换为查询字符串的形式拼接在<code>URL字符串</code>的后面。</p><div style="background:#195;color:#fff;width:120px;text-align:center"><strong>POST请求</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 处理参数</span></span><br><span class="line">    <span class="comment">//方式(1) 模拟表单数据</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">    data.set(<span class="string">"name"</span>,<span class="string">"文顶顶"</span>);</span><br><span class="line">    data.set(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">    data.set(<span class="string">"email"</span>,<span class="string">"yangyong@520it.com"</span>);</span><br><span class="line">    data.append(<span class="string">"email"</span>,<span class="string">"wendingding_ios@126.com"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式(2) 获取表单数据</span></span><br><span class="line">    <span class="comment">//var data = new FormData(document.forms.namedItem("formTest"));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//04 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>,<span class="string">"http://127.0.0.1:3000"</span>,<span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    xhr.send(data);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果发送的是POST请求，那么提交表单数据需要通过<code>setRequestHeader</code>方法来设置<code>&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;</code>，而formData数据直接作为<code>send</code>方法的参数来进行提交即可。<code>POST</code>请求通过formData提交给服务器端的数据，如果是Node服务器端则很难处理(同文件一样)。<a href="">formData</a>最主要的用途其实是用来异步的进行文件上传。</p><p><div style="background:#195;color:#fff;width:200px;text-align:center"><strong>POST请求进行文件上传</strong></div><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userID"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file-name"</span> <span class="attr">id</span>=<span class="string">"fileID"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01 获取页面中的btn标签</span></span><br><span class="line"><span class="keyword">var</span> oBtn    = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oUser   = <span class="built_in">document</span>.getElementById(<span class="string">"userID"</span>);</span><br><span class="line"><span class="keyword">var</span> oFileID = <span class="built_in">document</span>.getElementById(<span class="string">"fileID"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 给按钮标签添加点击事件</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//03 获取表单中的文件内容</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">    data.set(<span class="string">"user"</span>,oUser.value);</span><br><span class="line">    <span class="built_in">Array</span>.from(oFileID.files).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">        data.append(<span class="string">"fileName"</span>,file);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//04 使用Ajax发送GET请求</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>,<span class="string">"http://127.0.0.1:5000/api"</span>,<span class="literal">true</span>);</span><br><span class="line">    xhr.send(data);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;=<span class="number">300</span> || xhr.status == <span class="number">304</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>+xhr.responseText);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>+xhr.statusText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里顺便贴出测试文件上传写的Node代码以及文件上传后的监听结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：node文件名称为uploadServer.js</span></span><br><span class="line"><span class="comment">//01 导入模块(需先通过npm来进行安装)</span></span><br><span class="line"><span class="keyword">var</span> express   =   <span class="built_in">require</span>(<span class="string">'express'</span>);     </span><br><span class="line"><span class="keyword">var</span> multer    =   <span class="built_in">require</span>(<span class="string">'multer'</span>);         </span><br><span class="line"><span class="keyword">var</span> body      =   <span class="built_in">require</span>(<span class="string">'body-parser'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.listen(<span class="number">5000</span>);</span><br><span class="line">app.use(body.urlencoded( &#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125; ));</span><br><span class="line">app.use(multer( &#123; <span class="attr">dest</span>: <span class="string">'./upload/'</span> &#125; ).any());</span><br><span class="line"></span><br><span class="line"><span class="comment">//02 监听网络请求并设置打印接收到的参数信息</span></span><br><span class="line">app.post(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">    res.send(<span class="string">"Nice ! 上传成功 ~ "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);      <span class="comment">//普通POST数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.files);     <span class="comment">//文件POST数据</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">app.use(express.static(<span class="string">'./html/'</span>));</span><br></pre></td></tr></table></figure></p><p><strong>代码说明</strong> 需要先通过<code>npm install express multer body-parser</code>命令在当前路径中安装对应的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node uploadServer.js </span><br><span class="line">&#123; user: <span class="string">'wen'</span> &#125;</span><br><span class="line">[ &#123; fieldname: <span class="string">'fileName'</span>,</span><br><span class="line">    originalname: <span class="string">'formData.png'</span>,</span><br><span class="line">    encoding: <span class="string">'7bit'</span>,</span><br><span class="line">    mimetype: <span class="string">'image/png'</span>,</span><br><span class="line">    destination: <span class="string">'./upload/'</span>,</span><br><span class="line">    filename: <span class="string">'f416da3b522ece9e4cc2eccd5b7a62e8'</span>,</span><br><span class="line">    path: <span class="string">'upload/f416da3b522ece9e4cc2eccd5b7a62e8'</span>,</span><br><span class="line">    size: 50002 &#125;,</span><br><span class="line">  &#123; fieldname: <span class="string">'fileName'</span>,</span><br><span class="line">    originalname: <span class="string">'Snip20190107_1.png'</span>,</span><br><span class="line">    encoding: <span class="string">'7bit'</span>,</span><br><span class="line">    mimetype: <span class="string">'image/png'</span>,</span><br><span class="line">    destination: <span class="string">'./upload/'</span>,</span><br><span class="line">    filename: <span class="string">'2a2dd60e217b9cc08f2cc0048a1d27ab'</span>,</span><br><span class="line">    path: <span class="string">'upload/2a2dd60e217b9cc08f2cc0048a1d27ab'</span>,</span><br><span class="line">    size: 1309894 &#125; ]</span><br></pre></td></tr></table></figure><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;titleX&quot;&gt;&lt;strong&gt;FormData 简单介绍&lt;/strong&gt;&lt;/p&gt;&lt;a href=&quot;&quot;&gt;FormData&lt;/a&gt;是&lt;code&gt;Ajax 2.0&lt;/code&gt;-&lt;a href=&quot;https://dvcs.w3.org/hg/x
      
    
    </summary>
    
    
      <category term="网络编程系列" scheme="https://weibo.com/u/3800117445/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-请召文</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E8%AF%B7%E5%8F%AC%E6%96%87/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 请召文/</id>
    <published>2018-12-31T16:00:03.000Z</published>
    <updated>2019-01-10T08:39:05.527Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#近代先朝， 帝主尊荣位。 勋戚侯王， 玉叶金枝贵。 #宰执中宫， 彩女嫔妃类。 梦断华胥， 来受甘露味。  #国士朝臣， 经纬匡时世。 牧化黎民， 未遂忠良志。 #失宠怀忧， 谪降边邦地。 恋国游魂， 来受甘露味。  #武将戎臣， 统领三军队。 结阵交锋， 锣鼓喧天地。 #北战南征， 失陷沙场内。 为国亡身， 来受甘露味。  #学古穷经， 锦绣文章士。 映雪偷光， 苦志寒窗内。 #命运蹉跎， 金榜无名字。 郁郁幽魂， 来受甘露味。  #割爱辞亲， 早入空门内。 访道寻师， 只为超生死。 #暑往寒来， 不觉无常至。 返照回光， 早证菩提位。  #羽服黄冠， 早发修真志。 炼药烧丹， 养性还元气。 #苦行劳神， 指望登仙位。 莫恋遗形， 来受甘露味。  #孝子贤孙， 义勇忠良士。 烈女贞妻， 视死如归去。 #仗节亡躯， 千古留英气。 耿耿灵魂， 来受甘露味。  #女道尼流， 身住黄金地。 鸾凤缘空， 不染人间事。 #未了无为， 流浪虚生死。 清净幽魂， 来受甘露味。  #地理天文， 医药阴阳类。 卜卦占龟， 风鉴并星士。 #报吉谈凶， 难免无常对。 舍伪归真， 来受甘露味。  #坐贾行商， 种种经营辈。 艺术多能， 贸易求财利。 #背井离乡， 死在他方地。 旅梦悠悠， 来受甘露味。  #犯法遭刑， 牢狱长幽系。 负命谋财， 债主冤家类。 #肿毒瘟癀， 冻死饥亡辈。 速离黄泉， 来受甘露味。  #车碾伤残， 马踏身形碎。 墙倒崖崩， 自刎悬梁缢。 #水火漂焚， 虎咬蛇伤类。 九横孤魂， 来受甘露味。  #饮血茹毛， 生长蛮夷地。 负债偿劳， 婢妾并奴隶。 #喑哑盲聋， 残疾无依恃。 受苦冤魂， 来受甘露味。  #忤逆爹娘， 怨黩天和地。 谤佛欺僧， 毁像焚经偈。 #邪见深坑， 苦报无边际。 十恶狂魂， 来受甘露味。  #大施门开， 荐拔孤魂辈。 祖祢先亡， 五姓冤家类。 #八难三途， 平等俱超济。 仗佛光明， 来受甘露味。  #阿弥陀佛， 宿有无边誓。 观见众生， 苦海常漂溺。 #垂手殷勤， 特驾慈航济。 普载众生， 同赴莲池会。 </script><script>  /*1D244F*/    $(function(){$("<canvas id='canvas' width='1156px' height='460px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1156px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=5,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-60,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("来受甘露味",r.canvas.width-32,5),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#近代先朝， 帝主尊荣位。 勋戚侯王， 玉叶金枝
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-逍遥游（下）</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E9%80%8D%E9%81%A5%E6%B8%B8(%E4%B8%8B)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 逍遥游(下)/</id>
    <published>2018-12-31T16:00:02.000Z</published>
    <updated>2019-01-10T08:36:45.884Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#堯让天下於许由， 曰： “ 日月出矣， 而爝火不息， 其與光也， 不亦难乎？ 時雨降矣， 而犹浸灌， 其於泽也， 不亦勞乎？ 夫子立而天下治， 而我犹屍之， 吾自视缺然。 请致天下。 ” 许由曰： “子治天下， 天下既已治也， 而我犹代子， 吾將為名乎？ 名者， 實之賓也， 吾將為賓乎？ 鹪鹩巢於深林， 不过一枝； 偃鼠饮河， 不过满腹。 歸休乎君， 予無所用天下為。 庖人虽不治庖， 屍祝不越樽俎而代之矣。 ” #肩吾问於连叔曰： “ 吾闻言於接舆， 大而無當， 往而不返。 吾驚怖其言， 犹河汉而無极也。 大有徑庭， 不近人情焉。 ” 连叔曰： “ 其言谓何哉？ ” 曰： “ 藐姑射之山， 有神人居焉， 肌肤若冰雪， 淖约若處子， 不食五谷， 吸风饮露， 乘雲气， 禦飞龙， 而游乎四海之外。 其神凝， 使物不疵厲而年谷熟。 吾是以狂而不信也。 ” 连叔曰： “ 然。 瞽者無以與乎文章之观， 聋者無以與乎钟鼓之聲。 豈惟形骸有聋盲哉， 夫知亦有之。 是其言也， 犹時汝也。 之人也， 之德也， 將磅礴萬物以為一。 世蕲乎亂， 孰弊弊焉以天下為事？ 之人也， 物莫之傷， 大浸稽天而不溺， 大旱金石流土山焦而不热。 是其塵垢秕糠， 將犹陶铸堯舜者也。 孰肯以物為事？ #宋人资章甫适诸越， 越人斷發文身， 無所用之。#堯平治天下之民， 平海內之政， 往见四子藐姑射之山， 汾水之阳， 杳然喪其天下焉。 ”#惠子谓莊子曰： “ 魏王贻我大瓠之种， 我树之成而實五石。 以盛水浆， 其堅不能自舉也。 剖之以為瓢， 則瓠落無所容。 非不枵然大也， 吾為其無用而掊之。 ” 莊子曰： “ 夫子固拙於用大矣。 宋人有善為不龟手之药者， 世世以並辟光為事。 客闻之， 请買其方百金。 聚族而谋曰： 我世世為並辟光， 不过數金， 今一朝而鬻技百金， 请與之。 客得之以说吳王。 越有难， 吳王使之將， 冬與越人水戰， 大败越人， 裂地而封之。 能不龟手一也， 或以封， 或不免與並辟光， 則所用之異也。 今子有五石之瓠， 何不虑以為大樽， 而浮於江湖。 而憂其瓠落無所容， 則夫子犹有蓬之心也夫？ ”#惠子曰： “ 吾有大树， 人谓之樗。 其大本臃肿而不中绳墨， 其小枝卷曲而不中规矩。 立之途， 匠者不顾。 今子之言， 大而無用， 眾所同去也。 ” 莊子曰： “ 子独不见狸生乎？ 卑身而伏， 以候敖者， 東西跳梁， 不辟高下， 中於机辟， 死於网罟。 今夫嫠牛， 其大若垂天之雲， 此能為大矣， 而不能執鼠。 今子有大树， 患其無用， 何不树之於無何有之鄉， 廣莫之野， 彷徨乎無為其側， 逍遥乎寢臥其下。 不夭斤斧， 物無害者。 無所可用， 安所困苦哉！ ”</script><script>    $(function(){$("<canvas id='canvas' width='1216px' height='540px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1216px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=62,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-30,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("逍遥游( 下)  · 庄子",r.canvas.width-32,0),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#堯让天下於许由， 曰： “ 日月出矣， 而爝火
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-逍遥游（上）</title>
    <link href="https://weibo.com/u/3800117445/2019/01/01/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E9%80%8D%E9%81%A5%E6%B8%B8(%E4%B8%8A)/"/>
    <id>https://weibo.com/u/3800117445/2019/01/01/江湖夜雨系列 逍遥游(上)/</id>
    <published>2018-12-31T16:00:01.000Z</published>
    <updated>2019-01-10T09:14:30.947Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script type="text/template" id="templateText">#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里也。 化而為鸟， 其名為鹏， 鹏之背， 不知其幾千里也。 怒而飞， 其翼若垂天之雲。 是鸟也， 海运則將徙於南冥， 南冥者， 天池也。 #齐谐者， 志怪者也。 谐之言曰： 鹏之徙於南冥也， 水擊三千里， 摶扶搖而上者九萬里。 去以六月息者也， 野马也， 塵埃也， 生物之以息相吹也。 天之苍苍， 其正色邪？ 其远而無所至极邪？ 其视下也， 亦若是則已矣。 #且夫水之积也不厚， 則其负大舟也無力。 覆杯水於坳堂之上， 則芥為之舟， 置杯焉則胶， 水浅而舟大也。 风之积也不厚， 則其负大翼也無力。 故九萬里， 則风斯在下矣， 而後乃今培风。 背负青天而莫之夭厄者， 而後乃今將圖南。 #蜩與學鸠笑之曰： “ 我決起而飞， 枪榆枋， 時則不至， 而控於地而已矣。 奚以之九萬里而南為？ ” 适莽苍者， 三飧而反， 腹犹果然。 适百里者， 宿舂粮。 适千里者， 三月聚粮。 之二虫， 又何知？ #小知不及大知， 小年不及大年。 奚以知其然也？ 朝菌不知晦朔， 惠蛄不知春秋， 此小年也。 楚之南有冥灵者， 以五百歲為春， 五百歲為秋； 上古有大椿者， 以八千歲為春， 八千歲為秋； 而彭祖乃今以久特闻， 眾人匹之， 不亦悲乎？ #汤之问棘也是已： 穷發之北有冥海者， 天池也。 有鱼焉， 其廣數千里， 未有知其修者， 其名為鲲。 有鸟焉， 其名為鹏， 背若泰山， 翼若垂天之雲， 摶扶搖羊角而上者九萬里， 绝雲气， 负青天， 然後圖南， 且适南冥也。 #斥鹌笑之曰： “ 彼且奚适也？ 我腾跃而上， 不过數仞而下， 翱翔蓬蒿之间， 耻亦飞之至也。 而彼且奚适也？ ” 此小大之辨也。 #故夫知效一官， 行比一鄉， 德合一君， 而征一國者， 其自视也， 亦若此矣。 而宋荣子犹然笑之。 且舉世誉之而不加勸， 舉世非之而不加沮。 定乎內外之分， 辨乎荣辱之境， 斯已矣。 彼其於世， 未數數焉也。 虽然， 犹有未树也。#夫列子禦风而行， 泠然善也， 旬有五日而後反。 彼於致福， 未數數然也。 此虽免乎行， 犹有所待者也。 #若夫乘天地之正， 而禦六气之辩， 以游無穷者， 彼且惡乎待哉！ 故曰： 至人無己， 神人無功， 聖人無名。 </script><script>    $(function(){$("<canvas id='canvas' width='1216px' height='540px'></canvas>").appendTo($(".post-content")),$(".container,.wrap").css({margin:"0 20px 50px 20px",padding:0,width:"1000px"}),$(".post-content").css("width","1216px");for(var r=$("#canvas").get(0).getContext("2d"),t=r.canvas.height,e=r.canvas.width,a=Math.floor(e/30),n=0;n<=a;n++)r.beginPath(),r.moveTo(30*n-.5,0),r.lineTo(30*n-.5,t),r.strokeStyle="#1D244F",r.stroke();CanvasRenderingContext2D.prototype.fillTextVertical=function(n,i,o){var s=this,t=(s.canvas,n.split("")),l=t.map(function(t){return s.measureText(t).width}),e=s.textAlign,a=s.textBaseline;"left"==e?i+=Math.max.apply(null,l)/2:"right"==e&&(i-=Math.max.apply(null,l)/2),"bottom"==a||"alphabetic"==a||"ideographic"==a?o-=l[0]/2:"top"!=a&&"hanging"!=a||(o+=l[0]/2),s.textAlign="center",s.textBaseline="middle",t.forEach(function(t,e){if("#"==t)return o=62,void(i-=30);var a=l[e];t.charCodeAt(0)<=256?(s.translate(i,o),s.rotate(90*Math.PI/180),s.translate(-i,-o)):0<e&&n.charCodeAt(e-1)<256&&(o+=l[e-1]/2),s.fillText(t,i,o),s.setTransform(1,0,0,1,0,0);a=l[e];(o+=a)>=r.canvas.height-12&&(o=12,i-=30)}),s.textAlign=e,s.textBaseline=a};var i=document.getElementById("templateText").innerText;r.font="18px STKaiti, sans-serif",r.textAlign="center",r.textBaseline="top",r.fillStyle="#1D244F",r.fillTextVertical(i,r.canvas.width-60,0),r.beginPath(),r.font="18px bold STKaiti, sans-serif",r.fillTextVertical("逍遥游( 上)  · 庄子",r.canvas.width-32,0),$(".post-info,.post-title").css("display","none"),$(".post-content > ul").css("opacity",0),$(".post-info,.post-title,footer,.topDiv,.post-content > ul,.nav-list").remove()});</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/template&quot; id=&quot;templateText&quot;&gt;
#北冥有鱼， 其名為鲲， 鲲之大， 不知其幾千里
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>江湖夜雨-斯人若彩虹</title>
    <link href="https://weibo.com/u/3800117445/2018/12/31/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97%20%E6%96%AF%E4%BA%BA%E8%8B%A5%E5%BD%A9%E8%99%B9/"/>
    <id>https://weibo.com/u/3800117445/2018/12/31/江湖夜雨系列 斯人若彩虹/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2018-12-31T08:54:12.819Z</updated>
    
    <content type="html"><![CDATA[<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script>    console.log("哈哈哈");    var canvas = $("<canvas id='canvas' width='600px' height='400px'></canvas>");    canvas.appendTo($(".post-content"));    var ctx = $("#canvas").get(0).getContext("2d");    var gridSize = 15;    var canvasHeight = ctx.canvas.height;    var canvasWidth = ctx.canvas.width;    var xLineTotal = Math.floor(canvasHeight / gridSize);    for (var i = 0; i <= xLineTotal; i++) {        ctx.beginPath();        ctx.moveTo(0, i * gridSize - 0.5 );        ctx.lineTo(canvasWidth, i * gridSize - 0.5);        ctx.strokeStyle = '#eee';        ctx.stroke();    }    var yLineTotal = Math.floor(canvasWidth / gridSize);    for (var i = 0; i <= yLineTotal; i++) {        ctx.beginPath();        ctx.moveTo(i*gridSize - 0.5 ,0);        ctx.lineTo(i*gridSize - 0.5 ,canvasHeight);        ctx.strokeStyle = '#eee';        ctx.stroke();    }    ctx.font = "30px KaiTi";    ctx.fillStyle = "#2c3e50";    ctx.fillText("有人住高楼，有人在深沟;",100,100);    ctx.fillText("有人光万丈，有人一身锈;",100,150);    ctx.fillText("世人万千种，浮云莫强求;",100,200);    ctx.fillText("斯人若彩虹，遇上方知有。",100,250);    ctx.fillText("——韩寒",400,320);</script><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    console.log(&quot;哈哈哈&quot;);
    var canvas = $(&quot;&lt;canvas id=&#39;canvas&#39;
      
    
    </summary>
    
    
      <category term="江湖夜雨系列" scheme="https://weibo.com/u/3800117445/tags/%E6%B1%9F%E6%B9%96%E5%A4%9C%E9%9B%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-Event</title>
    <link href="https://weibo.com/u/3800117445/2018/12/08/Node%E7%B3%BB%E5%88%97-Event/"/>
    <id>https://weibo.com/u/3800117445/2018/12/08/Node系列-Event/</id>
    <published>2018-12-08T15:20:14.000Z</published>
    <updated>2018-12-08T03:42:33.047Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-0-EventEmitter介绍"><a href="#1-0-EventEmitter介绍" class="headerlink" title="1.0 EventEmitter介绍"></a>1.0 EventEmitter介绍</h4><p>Node中的<code>event</code>模块实现了事件处理相关功能，在该模块中定义了<a href="">EventEmitter类</a>。</p><p>在Node中，所有可能触发事件的对象都是继承了<a href="">EventEmitter类</a>的子类的实例对象，该类定义了诸多方法，譬如添加事件监听和移除事件监听以及自动触发事件等(通过下面的打印可以发现，这些方法均定义在原型对象上面)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.dir(events,&#123;<span class="attr">showHidden</span>:<span class="literal">true</span>,<span class="attr">colors</span>:<span class="literal">true</span>,<span class="attr">depth</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#123; [<span class="built_in">Function</span>: EventEmitter]</span><br><span class="line">  [length]: <span class="number">0</span>,</span><br><span class="line">  [name]: <span class="string">'EventEmitter'</span>,</span><br><span class="line">  [prototype]: </span><br><span class="line">   EventEmitter &#123;</span><br><span class="line">     [<span class="keyword">constructor</span>]: [Circular],</span><br><span class="line">     domain: undefined,</span><br><span class="line">     _events: undefined,</span><br><span class="line">     _maxListeners: undefined,</span><br><span class="line">     setMaxListeners: [Object],</span><br><span class="line">     getMaxListeners: [Object],</span><br><span class="line">     emit: [Object],</span><br><span class="line">     addListener: [Object],</span><br><span class="line">     on: [Object],</span><br><span class="line">     prependListener: [Object],</span><br><span class="line">     once: [Object],</span><br><span class="line">     prependOnceListener: [Object],</span><br><span class="line">     removeListener: [Object],</span><br><span class="line">     removeAllListeners: [Object],</span><br><span class="line">     listeners: [Object],</span><br><span class="line">     listenerCount: [Object],</span><br><span class="line">     eventNames: [Object] &#125;,</span><br><span class="line">  EventEmitter: [Circular],</span><br><span class="line">  usingDomains: true,</span><br><span class="line">  defaultMaxListeners: [Getter/Setter],</span><br><span class="line">  init: &#123; [<span class="built_in">Function</span>] [length]: <span class="number">0</span>, [name]: <span class="string">''</span>, [prototype]: [<span class="built_in">Object</span>] &#125;,</span><br><span class="line">  listenerCount: &#123; [<span class="built_in">Function</span>] [length]: <span class="number">2</span>, [name]: <span class="string">''</span>, [prototype]: [<span class="built_in">Object</span>] &#125; &#125;</span><br></pre></td></tr></table></figure><p><strong>EventEmitter结构说明</strong></p><p>上面的代码是在REPL环境中直接通过<code>console.dir方法</code>来打印events整个模块的输出。为了方便理解，我这里另外再提供一份EventEmitter构造函数的具体实现作为对照和参考。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventEmitter</span>(<span class="params"></span>) </span>&#123; EventEmitter.init.call(<span class="keyword">this</span>); &#125;</span><br><span class="line">EventEmitter.usingDomains = <span class="literal">false</span>;</span><br><span class="line">EventEmitter.prototype._events = <span class="literal">undefined</span>;</span><br><span class="line">EventEmitter.prototype._eventsCount = <span class="number">0</span>; <span class="comment">// 事件数量</span></span><br><span class="line">EventEmitter.prototype._maxListeners = <span class="literal">undefined</span>; <span class="comment">// 最大的监听器数</span></span><br></pre></td></tr></table></figure></p><p><code>events</code>模块中的<a href="">EventEmitter</a>指向的是模块自身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; events == events.EventEmitter</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p><a href="">EventEmitter</a>构造函数身上有个比较重要的静态方法即<code>init方法</code>，该方法主要用来根据条件执行初始化操作，所谓的初始化具体点讲其实就是设置<code>_events</code>、<code>_maxListeners</code>，下面列出该方法的具体实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EventEmitter.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._events === <span class="literal">undefined</span> || <span class="keyword">this</span>._events === <span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">this</span>)._events)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">this</span>._eventsCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._maxListeners = <span class="keyword">this</span>._maxListeners || <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><a href="">EventEmitter</a>的<code>defaultMaxListeners</code>属性内部实现了Getter和Setter方法，该属性用来设置和获取指定事件可以绑定的最大事件处理函数数量，该属性默认值为10。对于默认事件绑定数量，我们可以通过在REPL环境中直接打印<code>events.defaultMaxListeners</code>来进行查看。此外，在<a href="">EventEmitter</a>原型对象上面，提供了<code>setMaxListeners</code>和<code>getMaxListeners</code>方法来对<code>_maxListeners</code>属性进行获取和设置。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_event.png?raw=true"></p><h4 id="2-0-Event相关方法"><a href="#2-0-Event相关方法" class="headerlink" title="2.0 Event相关方法"></a>2.0 Event相关方法</h4><p>前文对<code>events</code>模块中的<a href="">EventEmitter构造函数</a>进行了简单介绍，接下来将主要说明具体事件监听绑定、移除和触发等相关的方法。</p><p><strong>事件的监听(绑定)</strong></p><p>当需要给指定对象添加事件监听(绑定事件处理函数)的时候，可以使用EventEmitter原型对象中的<code>on方法</code>或者是<code>addListener方法</code>，这两个方法的区别仅仅在于方法名，内部的实现一模一样，均调用events模块中的<code>_addListener方法</code>来实现。</p><blockquote><p><strong>_addListener方法核心过程</strong></p><p>① 验证监听器是否为函数对象。<br>② 避免类型为<code>newListener</code>的事件类型，造成递归调用。<br>③ 优化单个监听器的场景，不需使用额外的数组对象。<br>④ 基于prepend参数的值，控制监听器的添加顺序。</p></blockquote><p>这里先介绍事件监听(绑定)相关方法的语法，然后给出简短示例。</p><ul><li><code>EventEmitterInstance.on(event,listener)</code></li><li><code>EventEmitterInstance.addListener(event,listener)</code></li></ul><p><strong>参数说明</strong> <code>on</code>方法和<code>addListener</code>方法接受两个参数，其中event代表的是事件的类型(事件的名称，譬如<code>data</code>、<code>request</code>等)，而listener参数代表的是侦听器(事件处理函数)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：demo.js文件的内容</span></span><br><span class="line"><span class="comment">//001 导入模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 创建server服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 事件监听</span></span><br><span class="line"><span class="comment">// server.on("request",function(req,res)&#123;</span></span><br><span class="line">server.addListener(<span class="string">"request"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request--事件被触发"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"req.url:"</span>,req.url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//005 结束响应</span></span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 开启监听</span></span><br><span class="line">server.listen(<span class="number">4001</span>,<span class="string">"127.0.0.1"</span>);</span><br></pre></td></tr></table></figure></p><p>切换到当前所在目录，在终端中通过<code>node demo.js</code>命令执行上面的代码开启服务器端口监听，然后在浏览器中输入<a href="http://127.0.0.1:4001" target="_blank" rel="noopener">http://127.0.0.1:4001</a> 地址，能够得到下面的打印输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node demo.js </span><br><span class="line">request--事件被触发</span><br><span class="line">req.url: /</span><br><span class="line">request--事件被触发</span><br><span class="line">req.url: /favicon.ico</span><br></pre></td></tr></table></figure></p><p><strong>备注</strong> 在给指定对象绑定事件监听的时候，支持给某类型的事件(譬如<code>request</code>)绑定多个处理函数，默认最多可以绑定10个且支持给指定对象绑定多种类型的事件监听(譬如<code>request</code>事件、<code>end</code>事件等)。绑定处理函数的数量可以通过<code>getMaxListeners</code>和<code>setMaxListeners</code>方法来操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"><span class="comment">//获取events模块(EventEmitter构造函数)的defaultMaxListeners属性值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"defaultMaxListeners=="</span>,events.defaultMaxListeners);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"默认getMaxListeners =="</span>,rs.getMaxListeners());</span><br><span class="line">rs.setMaxListeners(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"设置getMaxListeners == 20"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"最新getMaxListeners =="</span>,rs.getMaxListeners());</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息</span></span><br><span class="line">defaultMaxListeners== <span class="number">10</span></span><br><span class="line">默认getMaxListeners == <span class="number">10</span></span><br><span class="line">设置getMaxListeners == <span class="number">20</span></span><br><span class="line">最新getMaxListeners == <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>除了上面介绍的<code>on</code>方法和<code>addListener</code>方法之外，<code>once</code>方法也能用来给指定的对象添加事件监听(绑定事件处理函数)，区别在于<code>once</code>方法当事件处理函数执行一次后绑定就会立即被解除，也就是该事件处理函数只会被执行一次。下面给出具体语法和简短示例：</p><ul><li><code>EventEmitterInstance.once(event,listener)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：once.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"Hi.text"</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 监听rs实例对象的data事件，当事件触发的时候执行回调函数组织读取的Buffer数据</span></span><br><span class="line">rs.addListener(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data...事件被触发"</span>);</span><br><span class="line">    data.push(chunk);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 监听rs实例对象的end事件，该事件当文件数据流读取完毕的时候触发</span></span><br><span class="line"><span class="comment">//    因为end事件只会被触发一次，所以完全可使用once方法来监听和绑定</span></span><br><span class="line">rs.once(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"end····事件被触发"</span>);</span><br><span class="line">    <span class="keyword">var</span> buf = Buffer.concat(data);</span><br><span class="line">    <span class="built_in">console</span>.log(buf.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：执行once.js文件测试once方法的使用</span></span><br><span class="line">wendingding$ node once.js </span><br><span class="line">data...事件被触发</span><br><span class="line">data...事件被触发</span><br><span class="line">data...事件被触发</span><br><span class="line">data...事件被触发</span><br><span class="line">end····事件被触发</span><br><span class="line">文顶顶：嗨，很高兴遇见你！</span><br></pre></td></tr></table></figure><p><strong>移除事件监听(解绑)</strong></p><p>若需要解除指定对象的事件侦听，则可使用移除事件相关的方法。EventEmitter提供了<code>removeListener</code>方法和<code>removeAllListeners</code>方法来进行解绑操作，<code>listeners</code>方法可以获取当前对象中指定事件绑定的所有处理函数。下面先列出语法然后给出简短代码示例：</p><ul><li><code>EventEmitterInstance.listeners(event)</code></li><li><code>EventEmitterInstance.removeListener(event,listener)</code></li><li><code>EventEmitterInstance.removeAllListeners(event)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：removeListener.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestHandleOne</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"url == "</span>,req.url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request1····事件被触发"</span>);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestHandleTwo</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"url == "</span>,req.url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request2····事件被触发"</span>);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给server对象添加request事件监听</span></span><br><span class="line">server.addListener(<span class="string">"request"</span>,requestHandleOne)</span><br><span class="line">server.addListener(<span class="string">"request"</span>,requestHandleTwo)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启服务端口监听</span></span><br><span class="line">server.listen(<span class="number">4002</span>,<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事件监听处理函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"request事件处理函数列表："</span>);</span><br><span class="line"><span class="keyword">var</span> handleList = server.listeners(<span class="string">"request"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> handleList)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"事件处理函数："</span>,handleList[key].name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"移除前："</span>,server.listenerCount(<span class="string">"request"</span>));</span><br><span class="line"><span class="comment">//移除事件监听（解除单个事件处理函数）</span></span><br><span class="line">server.removeListener(<span class="string">"request"</span>,requestHandleOne);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除事件监听（解除指定事件的所有处理函数）</span></span><br><span class="line"><span class="comment">//server.removeAllListeners("request");</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"移除后："</span>,server.listenerCount(<span class="string">"request"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"><span class="comment">//获取指定对象中指定事件侦听的数量</span></span><br><span class="line"><span class="keyword">var</span> server_request_listenerCount = events.EventEmitter.listenerCount(server,<span class="string">"request"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"server对象中request事件的侦听数量："</span>,server_request_listenerCount);</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong> </p><p>在上面的代码中我们首先创建了服务器<code>sever</code>对象，然后开启了服务器4002端口监听，并使用方法<code>addListener</code>为<code>request</code>事件添加两个侦听(分别是<code>requestHandleOne</code>和<code>requestHandleTwo</code>)函数。</p><p><code>server.listeners(&quot;request&quot;)</code>函数用来获取sever对象上所有request事件处理函数列表。<br><code>server.listenerCount(&quot;request&quot;)</code>函数用来获取sever对象上所有request事件处理函数的数量。</p><p>此外，在events模块的<a href="">EventEmitter构造函数</a>身上拥有一个<code>listenerCount</code>方法，该方法接收两个参数(<code>对象，事件</code>)以获取特定对象身上指定事件处理函数的数量。运行JavaScript代码，并在浏览器中访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node removeListener.js </span><br><span class="line">request事件处理函数列表：</span><br><span class="line">事件处理函数： requestHandleOne</span><br><span class="line">事件处理函数： requestHandleTwo</span><br><span class="line">移除前： 2</span><br><span class="line">移除后： 1</span><br><span class="line">server对象中request事件的侦听数量： 1</span><br><span class="line">url ==  /</span><br><span class="line">request2····事件被触发</span><br><span class="line">url ==  /favicon.ico</span><br><span class="line">request2····事件被触发</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-0-EventEmitter介绍&quot;&gt;&lt;a href=&quot;#1-0-EventEmitter介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 EventEmitter介绍&quot;&gt;&lt;/a&gt;1.0 EventEmitter介绍&lt;/h4&gt;&lt;p&gt;Node中的
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-OS</title>
    <link href="https://weibo.com/u/3800117445/2018/12/07/Node%E7%B3%BB%E5%88%97-os/"/>
    <id>https://weibo.com/u/3800117445/2018/12/07/Node系列-os/</id>
    <published>2018-12-07T15:20:13.000Z</published>
    <updated>2018-12-07T08:56:59.395Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-0-OS模块介绍"><a href="#1-0-OS模块介绍" class="headerlink" title="1.0 OS模块介绍"></a>1.0 OS模块介绍</h4><p> Node中的<a href="http://nodejs.cn/api/os.html" target="_blank" rel="noopener">OS模块</a>提供了和当前系统相关的一系列实用方法。在代码中可以直接用<code>os = require(&quot;os&quot;)</code>的方式来引入。OS模块本身非常的简单，本文将简单对其常用的方法和重要属性进行介绍并提供示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.dir(os,&#123;<span class="attr">showHiddren</span>:<span class="literal">true</span>,<span class="attr">depth</span>:<span class="number">0</span>,<span class="attr">colors</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">arch</span>: [<span class="built_in">Object</span>],</span><br><span class="line">  cpus: [<span class="built_in">Function</span>: cpus],</span><br><span class="line">  EOL: <span class="string">'\n'</span>,</span><br><span class="line">  endianness: [<span class="built_in">Object</span>],</span><br><span class="line">  freemem: [<span class="built_in">Object</span>],</span><br><span class="line">  homedir: [<span class="built_in">Object</span>],</span><br><span class="line">  hostname: [<span class="built_in">Object</span>],</span><br><span class="line">  loadavg: [<span class="built_in">Function</span>: loadavg],</span><br><span class="line">  networkInterfaces: [<span class="built_in">Function</span>: networkInterfaces],</span><br><span class="line">  platform: [<span class="built_in">Object</span>],</span><br><span class="line">  release: [<span class="built_in">Object</span>],</span><br><span class="line">  tmpdir: [<span class="built_in">Object</span>],</span><br><span class="line">  totalmem: [<span class="built_in">Object</span>],</span><br><span class="line">  type: [<span class="built_in">Object</span>],</span><br><span class="line">  userInfo: [<span class="built_in">Function</span>: getUserInfo],</span><br><span class="line">  uptime: [<span class="built_in">Object</span>],</span><br><span class="line">  getNetworkInterfaces: [<span class="built_in">Function</span>: deprecated],</span><br><span class="line">  tmpDir: [<span class="built_in">Function</span>: deprecated],</span><br><span class="line">  constants: [<span class="built_in">Object</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-0-基本使用"><a href="#2-0-基本使用" class="headerlink" title="2.0 基本使用"></a>2.0 基本使用</h4><p><code>OS模块</code>中的这些方法都不接受参数，全是获取(信息)型的方法，使用简单直接调用即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入模块</span></span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="comment">//002 迭代os对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> f <span class="keyword">in</span> os)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//003 获取os对象所有的方法并控制输出</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> os[f] === <span class="string">"function"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"当前方法名称："</span>,f);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"调用执行结果："</span>,os[f]());</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//004 获取os对象中所有的属性并输出名称</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"当前属性名称："</span>,f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"_____________"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用自己的电脑进行测试，执行上面的代码，打印OS模块中所有的方法名并调用这些方法输出结果，下面列出命令行执行JavaScript文件的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node os.js </span><br><span class="line">当前方法名称： arch</span><br><span class="line">调用执行结果： x64</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： cpus</span><br><span class="line">调用执行结果： [ &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 730600, nice: 0, sys: 570160, idle: 4650220, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 247120, nice: 0, sys: 137070, idle: 5566140, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 667530, nice: 0, sys: 377510, idle: 4905300, irq: 0 &#125; &#125;,</span><br><span class="line">  &#123; model: <span class="string">'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz'</span>,</span><br><span class="line">    speed: 2700,</span><br><span class="line">    <span class="built_in">times</span>: &#123; user: 256200, nice: 0, sys: 137540, idle: 5556590, irq: 0 &#125; &#125; ]</span><br><span class="line">_____________</span><br><span class="line">当前属性名称： EOL</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： endianness</span><br><span class="line">调用执行结果： LE</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： freemem</span><br><span class="line">调用执行结果： 159780864</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： homedir</span><br><span class="line">调用执行结果： /Users/文顶顶</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： hostname</span><br><span class="line">调用执行结果： wendingding.local</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： loadavg</span><br><span class="line">调用执行结果： [ 1.8583984375, 1.6640625, 1.6328125 ]</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： networkInterfaces</span><br><span class="line">调用执行结果： &#123; lo0: </span><br><span class="line">   [ &#123; address: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">       netmask: <span class="string">'255.0.0.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       internal: <span class="literal">true</span>,</span><br><span class="line">       cidr: <span class="string">'127.0.0.1/8'</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 0,</span><br><span class="line">       internal: <span class="literal">true</span>,</span><br><span class="line">       cidr: <span class="string">'::1/128'</span> &#125;</span><br><span class="line">       ···省略···</span><br><span class="line">   ]&#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： platform</span><br><span class="line">调用执行结果： darwin</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： release</span><br><span class="line">调用执行结果： 17.4.0</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： tmpdir</span><br><span class="line">调用执行结果： /var/folders/6t/83z6zbfn0w56l2dzc_c2y1wh0000gn/T</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： totalmem</span><br><span class="line">调用执行结果： 8589934592</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： <span class="built_in">type</span></span><br><span class="line">调用执行结果： Darwin</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： userInfo</span><br><span class="line">调用执行结果： &#123; uid: 501,</span><br><span class="line">  gid: 20,</span><br><span class="line">  username: <span class="string">'wendingding'</span>,</span><br><span class="line">  homedir: <span class="string">'/Users/文顶顶'</span>,</span><br><span class="line">  shell: <span class="string">'/bin/bash'</span> &#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： uptime</span><br><span class="line">调用执行结果： 8730</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： getNetworkInterfaces</span><br><span class="line">调用执行结果： &#123; lo0: </span><br><span class="line">   [ &#123; address: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">       netmask: <span class="string">'255.0.0.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       internal: <span class="literal">true</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 0,</span><br><span class="line">       internal: <span class="literal">true</span> &#125;,</span><br><span class="line">     &#123; address: <span class="string">'fe80::1'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 1,</span><br><span class="line">       internal: <span class="literal">true</span> &#125; ],</span><br><span class="line">  en0: </span><br><span class="line">   [ &#123; address: <span class="string">'192.168.51.245'</span>,</span><br><span class="line">       netmask: <span class="string">'255.255.255.0'</span>,</span><br><span class="line">       family: <span class="string">'IPv4'</span>,</span><br><span class="line">       mac: <span class="string">'a4:5e:60:e0:65:b1'</span>,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ],</span><br><span class="line">  awdl0: </span><br><span class="line">   [ &#123; address: <span class="string">'fe80::58c6:9eff:feb1:f896'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'5a:c6:9e:b1:f8:96'</span>,</span><br><span class="line">       scopeid: 8,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ],</span><br><span class="line">  utun0: </span><br><span class="line">   [ &#123; address: <span class="string">'fe80::18e0:16fa:bb6:ab15'</span>,</span><br><span class="line">       netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">       family: <span class="string">'IPv6'</span>,</span><br><span class="line">       mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">       scopeid: 12,</span><br><span class="line">       internal: <span class="literal">false</span> &#125; ] &#125;</span><br><span class="line">_____________</span><br><span class="line">当前方法名称： tmpDir</span><br><span class="line">调用执行结果： /var/folders/6t/83z6zbfn0w56l2dzc_c2y1wh0000gn/T</span><br><span class="line">_____________</span><br><span class="line">当前属性名称： constants</span><br><span class="line">_____________</span><br><span class="line">(node:2128) [DEP0023] DeprecationWarning: os.getNetworkInterfaces is deprecated.</span><br><span class="line">(node:2128) [DEP0022] DeprecationWarning: os.tmpDir() is deprecated.</span><br></pre></td></tr></table></figure><p><strong>整体结构</strong></p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_os.png?raw=true"></p><p>OS模块对象的EOL属性是一个字符串常量，该常量定义了相关操作系统的行末标志。如果是POSIX 系统，那么则对应的是<code>\n</code>符号，如果是Windows系统，那么对应的是<code>\r\n</code>符号。</p><p>现存的CPU架构可能存在：<code>&#39;arm&#39;, &#39;arm64&#39;, &#39;ia32&#39;, &#39;mips&#39;, &#39;mipsel&#39;, &#39;ppc&#39;, &#39;ppc64&#39;, &#39;s390&#39;, &#39;s390x&#39;, &#39;x32&#39;, &#39;x64&#39;</code>等情况。</p><p>二进制编译环境的字节顺序通常有两种：<code>&#39;BE&#39;</code>（大端模式）和<code>&#39;LE&#39;</code>（小端模式）</p><p>平均负载是系统活动的测量由操作系统自己计算得出，表达为一个分数. 通常理想的平均负载应该比系统的逻辑CPU的数目要少，平均负载是UNIX相关的概念，在Windows平台上，其返回值总是[0, 0, 0]。</p><p>关于OS常量和错误常量相关的信息，请参考<a href="https://nodejs.org/dist/latest-v10.x/docs/api/os.html#os_os_constants_1" target="_blank" rel="noopener">官方文档</a>。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-0-OS模块介绍&quot;&gt;&lt;a href=&quot;#1-0-OS模块介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 OS模块介绍&quot;&gt;&lt;/a&gt;1.0 OS模块介绍&lt;/h4&gt;&lt;p&gt; Node中的&lt;a href=&quot;http://nodejs.cn/api/o
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-Buffer</title>
    <link href="https://weibo.com/u/3800117445/2018/12/06/Node%E7%B3%BB%E5%88%97-Buffer/"/>
    <id>https://weibo.com/u/3800117445/2018/12/06/Node系列-Buffer/</id>
    <published>2018-12-06T15:20:13.000Z</published>
    <updated>2018-12-07T03:31:11.700Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-0-Buffer介绍"><a href="#1-0-Buffer介绍" class="headerlink" title="1.0 Buffer介绍"></a>1.0 Buffer介绍</h4><p><a href="http://nodejs.cn/api/buffer.html" target="_blank" rel="noopener">Buffer</a>是Node中特有的数据类型，它是Node作为运行时对JavaScript进行的拓展，专门用来处理二进制数据流。<a href="http://nodejs.cn/api/buffer.html" target="_blank" rel="noopener">Buffer</a>属于固有(<code>built-in</code>)类型的全局变量，在使用的时候无须使用require函数导入。</p><p>Buffer实例对象的结构和整数数组很像，但<code>Buffer的大小是固定的且在 V8 堆外分配物理内存</code>。<br>Buffer实例对象的大小在被创建时确定，且无法改变，实例对象的内容可以像操作数组一样修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(<span class="string">"Nice!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer=&gt;"</span>,buffer);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"length=&gt;"</span>,buffer.length);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer[1]=&gt;"</span>,buffer[<span class="number">1</span>]);</span><br><span class="line">buffer[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer=&gt;"</span>,buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//列出打印输出的结果</span></span><br><span class="line">buffer=&gt; &lt;Buffer 4e 69 63 65 21&gt;</span><br><span class="line">length=&gt; 5</span><br><span class="line">buffer[1]=&gt; 105</span><br><span class="line">buffer=&gt; &lt;Buffer 4e 64 63 65 21&gt;</span><br></pre></td></tr></table></figure><p>Buffer实例的元素为16进制的两位数，即<a href="">0~255</a>的数值(16的二次方)，可以像数组一样操作Buffer实例。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_buffer.png?raw=true"></p><p>Buffer是典型的JavaScript 和 C++ 结合的模块。<br>Buffer将性能相关的部分使用C++实现，非性能相关的部分使用JavaScript实现。</p><div class="titleX"><strong>为什么要使用 Buffer ?</strong></div><p>Node提供Buffer数据类型的主要原因是<code>基于性能方面的考虑</code>。</p><p>其实在文件I/O和网络传输过程中，不使用Buffer二进制数据也是可以的，但相较而言如果在进行I/O操作和网络数据传输之前预先把静态内容(<code>字符串</code> | <code>图片</code>等)转换为Buffer对象，那么可以有效的减少CPU的重复使用、节省服务器资源并大幅提升性能。</p><h4 id="2-0-Buffer实例的创建"><a href="#2-0-Buffer实例的创建" class="headerlink" title="2.0 Buffer实例的创建"></a>2.0 Buffer实例的创建</h4><p>Buffer实例的构建有多种方式，下面分别介绍。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>① 使用Buffer构造函数创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 使用构造函数来构建Buffer实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//new Buffer(size)</span></span><br><span class="line"><span class="comment">//new Buffer(array)</span></span><br><span class="line"><span class="comment">//new Buffer(buffer)</span></span><br><span class="line"><span class="comment">//new Buffer(string, [encoding])</span></span><br><span class="line"><span class="comment">//new Buffer(arrayBuffer, [byteOffset, [length]])</span></span><br><span class="line"><span class="comment">//001 创建指定缓冲区大小的实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf01 = <span class="keyword">new</span> Buffer(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 对创建好的实例对象执行初始化操作</span></span><br><span class="line"><span class="comment">//语法：buf.fill(value, [offset],[end]); </span></span><br><span class="line"><span class="comment">//作用：初始化缓冲区中的指定内容offset(开始位移) end(结束位移)</span></span><br><span class="line">buf01.fill(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(buf01);</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 根据数组来创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf02 = <span class="keyword">new</span> Buffer([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 根据另一个buffer对象来创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf03 = <span class="keyword">new</span> Buffer(buf01);</span><br><span class="line"><span class="built_in">console</span>.log(buf03);</span><br><span class="line"></span><br><span class="line"><span class="comment">//005 把字符串转换为buffer实例对象</span></span><br><span class="line"><span class="comment">//第一个参数：要转换的字符串</span></span><br><span class="line"><span class="comment">//第二个参数：在转换的是珍珠</span></span><br><span class="line"><span class="keyword">var</span> buf04 = <span class="keyword">new</span> Buffer(<span class="string">"Nice to meet u!"</span>);</span><br><span class="line"><span class="keyword">var</span> buf05 = <span class="keyword">new</span> Buffer(<span class="string">"刚好遇见你!"</span>,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf04);</span><br><span class="line"><span class="built_in">console</span>.log(buf05);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrM = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">2</span>);</span><br><span class="line">arrM[<span class="number">0</span>] = <span class="number">2000</span>;</span><br><span class="line">arrM[<span class="number">1</span>] = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> buf06 = <span class="keyword">new</span> Buffer(arrM.buffer)</span><br><span class="line"><span class="built_in">console</span>.log(buf06);</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：这里列出上面代码的命名行执行打印</span></span><br><span class="line">wendingding$ node index.js </span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>&gt;</span><br><span class="line">&lt;Buffer <span class="number">4</span>e <span class="number">69</span> <span class="number">63</span> <span class="number">65</span> <span class="number">20</span> <span class="number">74</span> <span class="number">6</span>f <span class="number">20</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">65</span> <span class="number">74</span> <span class="number">20</span> <span class="number">75</span> <span class="number">21</span>&gt;</span><br><span class="line">&lt;Buffer e5 <span class="number">88</span> <span class="number">9</span>a e5 a5 bd e9 <span class="number">81</span> <span class="number">87</span> e8 a7 <span class="number">81</span> e4 bd a0 <span class="number">21</span>&gt;</span><br><span class="line">&lt;Buffer d0 <span class="number">07</span> e8 <span class="number">03</span>&gt;</span><br></pre></td></tr></table></figure><p>上面的代码中列出了使用Buffer构造函数来创建实例对象的所有方法，我们发现new Buffer() 会根据参数类型的不同而提供不同的实现，而这种使用方式如果没有能够正确地校验传给 new Buffer() 的参数，那么就<a href="https://github.com/nodejs/node/issues/4660" target="_blank" rel="noopener">可能引起安全性与可靠性问题</a>。因此在6.0.0版本中这个构造对象的API已被废弃(<code>不推荐使用</code>)，在将来的版本中可能会被移除。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>② 使用Buffer.from（）创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001使用Buffer.from方法创建实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//Buffer.from(array)    返回一个包含传入字节数组拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(buffer)   返回一个包含传入的Buffer内容拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(string, [encoding])  返回一个包含传入的字符串拷贝的Buffer</span></span><br><span class="line"><span class="comment">//Buffer.from(object, [offsetOrEncoding, [length]])</span></span><br><span class="line"><span class="comment">//Buffer.from(arrayBuffer, [byteOffset, [length]]) 返回一个与传入的ArrayBuffer共享内存的Buffer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf01 = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);             </span><br><span class="line"><span class="comment">//&lt;Buffer 01 02 03 04&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf02 = Buffer.from(buf01);</span><br><span class="line"><span class="built_in">console</span>.log(buf02);</span><br><span class="line"><span class="comment">//&lt;Buffer 01 02 03 04&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf03 = Buffer.from(<span class="string">"Hi! wendingding"</span>,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf03);</span><br><span class="line"><span class="comment">//&lt;Buffer 48 69 21 20 77 65 6e 64 69 6e 67 64 69 6e 67&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf04 = Buffer.from(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'this is a Demo'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf04);</span><br><span class="line"><span class="comment">//&lt;Buffer 74 68 69 73 20 69 73 20 61 20 44 65 6d 6f&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrM = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">2</span>);</span><br><span class="line">arrM[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">arrM[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> buf05 = <span class="keyword">new</span> Buffer(arrM.buffer)</span><br><span class="line"><span class="built_in">console</span>.log(buf05);</span><br><span class="line"><span class="comment">//&lt;Buffer 14 00 0a 00&gt;</span></span><br></pre></td></tr></table></figure><p><code>Buffer.from方法</code>创建实例对象的方式和使用Buffer构造函数创建的方式非常相似，这些API均为<code>5.10.0</code>版本新增。相对而言，使用<code>Buffer.from方法</code>创建实例对象会更可靠。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>③ 使用Buffer.alloc（）创建</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 使用Buffer.alloc方法创建实例对象</span></span><br><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//Buffer.alloc(size, [fill, [encoding]])</span></span><br><span class="line"><span class="comment">//Buffer.allocUnsafe(size)</span></span><br><span class="line"><span class="comment">//Buffer.allocUnsafeSlow(size) 创建一个非内存池的 Buffer 并拷贝出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)Buffer.alloc(size, [fill, [encoding]])</span></span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象</span></span><br><span class="line"><span class="keyword">var</span> buf01 = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，并使用A字符来进行填充</span></span><br><span class="line"><span class="keyword">var</span> buf02 = Buffer.alloc(<span class="number">10</span>,<span class="string">"A"</span>);</span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，并进行初始化(指定内容和编码模式)</span></span><br><span class="line"><span class="keyword">var</span> buf03 = Buffer.alloc(<span class="number">7</span>,<span class="string">"bWlhb1hpYQ=="</span>,<span class="string">"base64"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf01);     <span class="comment">//&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;   </span></span><br><span class="line"><span class="built_in">console</span>.log(buf02);     <span class="comment">//&lt;Buffer 41 41 41 41 41 41 41 41 41 41&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf03);     <span class="comment">//&lt;Buffer 6d 69 61 6f 58 69 61&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf03.toString(<span class="string">"utf8"</span>));    <span class="comment">//miaoXia</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)Buffer.allocUnsafe(size)</span></span><br><span class="line"><span class="comment">//创建大小为10个字节长度的实例对象，未初始化</span></span><br><span class="line"><span class="keyword">var</span> buf04 = Buffer.allocUnsafe(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf04);             <span class="comment">//&lt;Buffer d8 da 84 02 01 00 00 00 01 00&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf04.fill(<span class="string">"A"</span>));   <span class="comment">//&lt;Buffer 41 41 41 41 41 41 41 41 41 41&gt;</span></span><br></pre></td></tr></table></figure><p><code>Buffer.alloc方法</code>用来创建一个指定长度的Buffer实例对象，在调用的时候可以指定<code>fill</code>初始化填充和<code>encoding</code>编码方式。如果指定了对应的参数，那么实例对象内部将调用fill方法，<code>Buffer.alloc方法</code>比 <code>Buffer.allocUnsafe方法</code>会慢一些。</p><p>当使用<code>Buffer.allocUnsafe</code>方法创建实例对象时，如果要分配的内存小于4KB，则会从一个预分配的Buffer中切割出来，这可以避免垃圾回收机制因创建太多独立的缓冲区(Buffer)而过度使用。当需要在内存池保留一小块内存时，可用<code>Buffer.allocUnsafeSlow</code>方法创建一个非内存池的Buffer并拷贝出来。</p><h4 id="3-0-Buffer和字符串的转换"><a href="#3-0-Buffer和字符串的转换" class="headerlink" title="3.0 Buffer和字符串的转换"></a>3.0 Buffer和字符串的转换</h4><p>开发中常见的需求就是Buffer对象和字符串的相互转换，而且很多情况往往需要先读取文件的内容(字符串)，然后把该内容转换为Buffer数据。这里简单介绍Buffer和字符串转换的基本方式。</p><p><strong>字符串 → Buffer</strong></p><p>如果要把字符串转换成Buffer对象，那么只需要使用Buffer.from方法即可(当然也可以直接使用Buffer构造函数来创建，但是并不推荐)，具体的语法形式为<code>Buffer.from(string, [encoding])</code>,其中第一个参数代表是要转换的字符串信息，而第二个可选的参数代表是转换时候采用的编码模式。</p><blockquote><p><strong>Node目前支持的字符编码类型</strong></p><p>❏  <span class="liYY"><strong>Hex</strong></span>  将每个字节编码成两个十六进制字符。<br>❏  <span class="liYY"><strong>Base64</strong></span>  Base64 编码。<br>❏  <span class="liYY"><strong>ASCII</strong></span>   仅支持 7 位 ASCII 数据。<br>❏  <span class="liYY"><strong>Binary</strong></span>  单字节编码的字符串，别名<code>Latin1</code>。<br>❏  <span class="liYY"><strong>UTF-8</strong></span>     多字节编码的 Unicode 字符。<br>❏  <span class="liYY"><strong>UTF-16LE</strong></span>  2或4个字节小端序编码的Unicode字符，别名<code>UCS-2</code>。</p></blockquote><p><strong>Buffer → 字符串</strong></p><p>如果要把Buffer对象转换为字符串，那么可以使用Buffer实例对象的<code>toString</code>方法，具体的语法形式为<code>buf.toString([encoding, [start, [end]]])</code> ，其中encoding参数代表的是编码模式，start和end参数用来指定开始解码和结束解码的偏移量，其中start参数的默认值为0，而end参数的默认值<code>buf.length</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strM = <span class="string">'Nice!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 把字符串转换为Buffer二进制数据</span></span><br><span class="line"><span class="comment">//var buf = new Buffer(strM)</span></span><br><span class="line"><span class="comment">//var buf = Buffer.from(strM);</span></span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(strM,<span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);                        <span class="comment">//&lt;Buffer 4e 69 63 65 21&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 把Buffer二进制数据转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> resultStr = buf.toString();</span><br><span class="line"><span class="built_in">console</span>.log(resultStr);                  <span class="comment">//Nice!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>));       <span class="comment">//Nice!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>,<span class="number">2</span>));     <span class="comment">//ce!</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>,<span class="number">2</span>,<span class="number">4</span>));   <span class="comment">//ce</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"base64"</span>));     <span class="comment">//TmljZSE=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入文件系统模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">//读取文件的内容，得到字符串数据</span></span><br><span class="line">fs.readFile(<span class="string">"./Hi.text"</span>,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相当于会隐式的来调用toString方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);  <span class="comment">//Hi! wendingding</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件的内容，得到二进制数据</span></span><br><span class="line">fs.readFile(<span class="string">"./Hi.text"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果在读取文件内容的时候，没有指定编码那么获取的是一个二进制数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);  </span><br><span class="line">    <span class="comment">//&lt;Buffer 48 69 21 20 77 65 6e 64 69 6e 67 64 69 6e 67&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString()); <span class="comment">//Hi! wendingding</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="titleX"><strong>Buffer 的拼接</strong></div><p>Buffer实例和字符串虽然可以转换，但在处理Buffer数据的时候却不能简单的像字符串一样简单的使用 <code>+</code> 来进行拼接，因为二进制数据流中的数据可能是宽字节编码的。先看一个简短的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer2string.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"Hi.text"</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data····"</span>,chunk.length);</span><br><span class="line">    data += chunk;</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data=&gt;"</span>,data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data.length=&gt;"</span>,data.length)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码中我们通过<code>createReadStream</code>方法来读取<code>Hi.text</code>文件的内容，<code>highWaterMark</code>配置项(字面意思是最高水位线)用来控制内部缓冲区最多能够容纳的字节数，如果超过那么就停止读取资源文件，默认值为<a href="">64KB</a>。</p><p>假设文件的内容大小为150KB，那么默认情况下在执行代码的时候将会每次从文件中读取64KB的数据，触发<code>data事件</code>，在<code>data事件</code>回调函数中chunk参数的大小就是<code>highWaterMark</code>的大小，即64KB。读取两次后(128KB)，接着读取剩下的32KB大小的数据，此时将第三次触发<code>data事件</code>，继而整个文件数据均读取结束，最后触发<code>end事件</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ cat Hi.text </span><br><span class="line">Hi! wendingding</span><br><span class="line">Hi! LiuY</span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 5</span><br><span class="line">data=&gt; Hi! wendingding</span><br><span class="line">Hi! LiuY</span><br><span class="line"></span><br><span class="line">data.length=&gt; 25</span><br><span class="line"></span><br><span class="line">wendingding$ cat Hi.text </span><br><span class="line">文顶顶：嗨，很高兴遇见你！</span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data···· 10</span><br><span class="line">data=&gt; 文顶顶���嗨，��高兴遇见你！</span><br><span class="line"></span><br><span class="line">data.length=&gt; 17</span><br></pre></td></tr></table></figure></p><p>设置<code>Hi.text</code>文件的内容，运行查看结果。如果文件的内容是全英文(字母)，那么这样拼接没有问题。可一旦文件中的存在中文，那么最后的结果中就可能会出现乱码。这是因为<code>data += chunk</code>这行代码在实际执行的时候，隐藏了调用toString()的操作，也就是说这行代码真正执行的时候其实是<code>data = data.toString() + chunk.toString()</code>这样的。</p><p>因为在<code>UTF-8</code>编码中一种中文汉字占三个字节，又因为设置了highWaterMark字段控制了每次读取的字节数，因此会出现截断，而剩下的部分则以乱码的方式显示。我们可以在<code>data事件</code>的回调函数中把每次读取的chunk都打印出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调整前文中buffer2string.js部分代码</span></span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data····"</span>,chunk);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"string····"</span>,chunk.toString());</span><br><span class="line">    data += chunk;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新运行查看打印输出</span></span><br><span class="line">data···· &lt;Buffer e6 <span class="number">96</span> <span class="number">87</span> e9 a1 b6 e9 a1 b6 ef&gt;</span><br><span class="line">string···· 文顶顶�</span><br><span class="line">data···· &lt;Buffer bc <span class="number">9</span>a e5 <span class="number">97</span> a8 ef bc <span class="number">8</span>c e5 be&gt;</span><br><span class="line">string···· ��嗨，�</span><br><span class="line">data···· &lt;Buffer <span class="number">88</span> e9 ab <span class="number">98</span> e5 <span class="number">85</span> b4 e9 <span class="number">81</span> <span class="number">87</span>&gt;</span><br><span class="line">string···· �高兴遇</span><br><span class="line">data···· &lt;Buffer e8 a7 <span class="number">81</span> e4 bd a0 ef bc <span class="number">81</span> <span class="number">0</span>a&gt;</span><br><span class="line">string···· 见你！</span><br></pre></td></tr></table></figure></p><p>通过观察可以发现，当chunk调用toString方法进行字符编码的时候，默认使用<code>UTF-8</code>模式中文每三位一组，在设置了<code>highWaterMark</code>值为10之后，就注定了会出现字符截断的情况。为了方便大家理解这个过程，下面尝试对转换和截断过程进行分析。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line"><span class="comment">//第一段</span></span><br><span class="line"><span class="comment">//截断方式 &lt;Buffer e6 96 87 e9 a1 b6 e9 a1 b6 截断① ef&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe6</span>,<span class="number">0x96</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xa1</span>,<span class="number">0xb6</span>,<span class="number">0xe9</span>,<span class="number">0xa1</span>,<span class="number">0xb6</span>]).toString();</span><br><span class="line"><span class="string">'文顶顶'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二段</span></span><br><span class="line"><span class="comment">//截断方式  &lt;Buffer bc 截断① 9a 截断② e5 97 a8 截断③ ef bc 8c 截断④ e5 be&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xbc</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0x9a</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe5</span>,<span class="number">0x97</span>,<span class="number">0xa8</span>]).toString();</span><br><span class="line"><span class="string">'嗨'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>,<span class="number">0xbc</span>,<span class="number">0x8c</span>]).toString();</span><br><span class="line"><span class="string">'，'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe5</span>,<span class="number">0xbe</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三段</span></span><br><span class="line"><span class="comment">//截断方式 &lt;Buffer 88 截断① e9 ab 98 e5 85 b4 e9 81 87&gt;</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0x88</span>]).toString();</span><br><span class="line"><span class="string">'�'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe9</span>,<span class="number">0xab</span>,<span class="number">0x98</span>,<span class="number">0xe5</span>,<span class="number">0x85</span>,<span class="number">0xb4</span>,<span class="number">0xe9</span>,<span class="number">0x81</span>,<span class="number">0x87</span>]).toString();</span><br><span class="line"><span class="string">'高兴遇'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第四段</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xe8</span>,<span class="number">0xa7</span>,<span class="number">0x81</span>,<span class="number">0xe4</span>,<span class="number">0xbd</span>,<span class="number">0xa0</span>]).toString();</span><br><span class="line"><span class="string">'见你'</span></span><br><span class="line">&gt; Buffer.from([<span class="number">0xef</span>,<span class="number">0xbc</span>,<span class="number">0x81</span>]).toString();</span><br><span class="line"><span class="string">'！'</span></span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> <code>createReadStream</code>函数中highWaterMark值的设置对Buffer内存的分配和使用有一定的影响，该值的大小与数据流的读取关系紧密(值越大，读取的速度越快)，如果这个值设置得很小可能会导致系统调用次数过多影响性能。理想的情况该值的大小应该和数据的大小等同。</div><p>如果需要在代码中对Buffer实例进行拼接，官方推荐的做法是使用<code>Buffer.concat方法</code>,该方法接收一个Buffer对象数组作为参数，返回拼接后的完整Buffer实例，下面给出简短示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer2string.js 文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"Hi.text"</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data..."</span>);</span><br><span class="line">    data.push(chunk);</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"end···"</span>);</span><br><span class="line">    <span class="keyword">var</span> buf = Buffer.concat(data);</span><br><span class="line">    <span class="built_in">console</span>.log(buf.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行细节</span></span><br><span class="line">wendingding$ node buffer2string.js </span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">data...</span><br><span class="line">end···</span><br><span class="line">文顶顶：嗨，很高兴遇见你！</span><br></pre></td></tr></table></figure></p><h4 id="4-0-Buffer的主要方法"><a href="#4-0-Buffer的主要方法" class="headerlink" title="4.0 Buffer的主要方法"></a>4.0 Buffer的主要方法</h4><p>Buffer还有很多其它可用方法，这些方法大致可以分成静态方法和实例方法。</p><blockquote><p>❏ <strong>静态方法</strong>  Buffer函数自身的方法(<code>ex Buffer.XXX</code>)<br>❏ <strong>实例方法</strong>  Buffer函数创建的实例对象的方法(<code>ex buf.XXX</code>)</p></blockquote><p>这里列出主要静态方法(类方法)，并给出简短代码示例。</p><ul><li><code>Buffer.isBuffer(obj)</code>                  检查是否是Buffer实例</li><li><code>Buffer.isEncoding(encoding)</code>           检查是否支持指定的字符编码模式</li><li><code>Buffer.byteLength(string[, encoding])</code> 获取字符串的实际字节长度</li><li><code>Buffer.compare(buf1, buf2)</code>            对Buffer实例进行排序(buf1和buf2)</li><li><code>Buffer.concat(list[, totalLength])</code>    合并list中的多个Buffer实例对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：buffer.js文件的内容</span></span><br><span class="line"><span class="comment">//001 测试Buffer.isBuffer(obj)方法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"wendingding"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">"Nice!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj是否是Buffer:"</span>,Buffer.isBuffer(obj));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buf是否是Buffer:"</span>,Buffer.isBuffer(buf));</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 测试Buffer.isEncoding(encoding)方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"是否支持Base64："</span>,Buffer.isEncoding(<span class="string">"Base64"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"是否支持GB2312："</span>,Buffer.isEncoding(<span class="string">"GB2312"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 获取字符串的实际字节长度</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"字符串的长度为："</span>,<span class="string">"Nice to meet u! 嘻嘻"</span>.length);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"实际字节长度为："</span>,Buffer.byteLength(<span class="string">"Nice to meet u! 嘻嘻"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节：</span></span><br><span class="line">wendingding$ node buffer.js </span><br><span class="line">obj是否是Buffer: <span class="literal">false</span></span><br><span class="line">buf是否是Buffer: <span class="literal">true</span></span><br><span class="line">是否支持Base64： <span class="literal">true</span></span><br><span class="line">是否支持GB2312： <span class="literal">false</span></span><br><span class="line">字符串的长度为： <span class="number">18</span></span><br><span class="line">实际字节长度为： <span class="number">22</span></span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-0-Buffer介绍&quot;&gt;&lt;a href=&quot;#1-0-Buffer介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 Buffer介绍&quot;&gt;&lt;/a&gt;1.0 Buffer介绍&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://nodejs.cn/api/
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-require</title>
    <link href="https://weibo.com/u/3800117445/2018/12/05/Node%E7%B3%BB%E5%88%97-require/"/>
    <id>https://weibo.com/u/3800117445/2018/12/05/Node系列-require/</id>
    <published>2018-12-05T15:20:13.000Z</published>
    <updated>2018-12-06T04:53:52.642Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文作为<a href="http://wendingding.com/2018/12/04/Node%E7%B3%BB%E5%88%97-global/" target="_blank" rel="noopener">Node系列-global</a>的拓展，主要介绍require对象(函数)的结构，使用方法和注意点，对模块和CommanJS规范等内容不进行展开。</div><h4 id="1-0-require函数"><a href="#1-0-require函数" class="headerlink" title="1.0 require函数"></a>1.0 require函数</h4><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_require.png?raw=true"></p><p>在Node中，所有的文件都被认为是一个模块。根据来源的不同，我们可以人为的把模块分为<code>Node内置模块(http)</code>、<code>NPM安装的第三方模块(jquery)</code>和<code>自定义模块</code>以及项目文件等。</p><p><code>require</code>函数的作用就是加载这些模块，<code>require</code>函数直接挂载在全局对象global上，在所有的模块内部均可以直接使用，下面简单列出该函数的内部结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; global.require</span><br><span class="line">&#123; [<span class="built_in">Function</span>: <span class="built_in">require</span>]</span><br><span class="line">  resolve: &#123; [<span class="built_in">Function</span>: resolve] paths: [<span class="built_in">Function</span>: paths] &#125;,</span><br><span class="line">  main: <span class="literal">undefined</span>,</span><br><span class="line">  extensions: &#123; <span class="string">'.js'</span>: [<span class="built_in">Function</span>], <span class="string">'.json'</span>: [<span class="built_in">Function</span>], <span class="string">'.node'</span>: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  cache: &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在使用<code>require</code>函数导入模块的时候用法非常简单，该函数接收一个参数，这个参数可以是带有完整路径的模块文件名(<code>自定义|文件模块</code>)，也可以是模块名(<code>内部模块</code>)。使用<code>require</code>加载模块的时候,可以省略文件的后缀名。对于文件模块，可以使用相对路径来进行加载，其中<code>./</code>代表的是当前路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：app.js文件的内容</span></span><br><span class="line"><span class="comment">//导入Node内置的模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"http"</span>,http.get);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入npm安装的第三方模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"express"</span>,express);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入自定义的模块</span></span><br><span class="line"><span class="comment">//var other = require("./other");</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other.js"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：other.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> Info = <span class="string">"测试的字符串信息！"</span>;</span><br><span class="line">exports.Info = Info;</span><br><span class="line">--------------------------------</span><br></pre></td></tr></table></figure><p>因为测试代码中需要使用到<code>express</code>模块，所以需要先在当前目录中通过命令行工具来进行安装，下面简单列出安装的具体命令以及app.js文件的执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//列出命令行执行细节</span><br><span class="line">wendingding:npm install express</span><br><span class="line">wendingding$ node app.js </span><br><span class="line">http <span class="keyword">function</span> get(options, cb) &#123;</span><br><span class="line">  var req = request(options, cb);</span><br><span class="line">  req.end();</span><br><span class="line">  <span class="built_in">return</span> req;</span><br><span class="line">&#125;</span><br><span class="line">express <span class="keyword">function</span> <span class="function"><span class="title">createApplication</span></span>() &#123;</span><br><span class="line">  var app = <span class="keyword">function</span>(req, res, next) &#123;</span><br><span class="line">    app.handle(req, res, next);</span><br><span class="line">  &#125;;</span><br><span class="line">  ···省略···</span><br><span class="line">  app.init();</span><br><span class="line">  <span class="built_in">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line">测试的字符串信息！</span><br></pre></td></tr></table></figure></p><p><strong>模块加载的寻径</strong></p><p>如果在<code>require</code>函数中只指定文件的名称，那么Node会将该文件视为<code>node_modules</code>目录下的文件(<code>文件的优先关系为 文件名 &gt; 文件名.js &gt; 文件名.json &gt; 文件名.node</code>)。在具体加载模块的时候，Node将会依次尝试加载下面路径中对应的文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">'/Users/文顶顶/Desktop/node/require/node_modules',</span><br><span class="line">'/Users/文顶顶/Desktop/node/node_modules',</span><br><span class="line">'/Users/文顶顶/Desktop/node_modules',</span><br><span class="line">'/Users/文顶顶/node_modules',</span><br><span class="line">'/Users/node_modules',</span><br><span class="line">'/node_modules'</span><br></pre></td></tr></table></figure><p><strong>注意</strong> <span style="color:red">使用require函数加载模块的时候会执行模块中的每行代码</span>，而引入的每行代码都将被封装到一个独立的函数中，以防止和Node环境产生冲突。该函数的结构基本如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 模块源码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="2-0-require函数的成员"><a href="#2-0-require函数的成员" class="headerlink" title="2.0 require函数的成员"></a>2.0 require函数的成员</h4><p>通过上文的结构图我们可以看到，<code>require</code>函数本身的结构相对简单，只有main、cache和resolve等几个成员，这里我们调整前文中用到的app.js文件的代码，在该文件(模块)内部打印<code>require</code>函数本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注 ： app.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：执行app.js文件的命令行操作细节</span></span><br><span class="line">wendingding$ node app.js </span><br><span class="line">测试的字符串信息！</span><br><span class="line">&#123; [<span class="built_in">Function</span>: <span class="built_in">require</span>]</span><br><span class="line">  resolve: &#123; [<span class="built_in">Function</span>: resolve] paths: [<span class="built_in">Function</span>: paths] &#125;,</span><br><span class="line">  main: </span><br><span class="line">   Module &#123;</span><br><span class="line">     id: <span class="string">'.'</span>,</span><br><span class="line">     exports: &#123;&#125;,</span><br><span class="line">     parent: <span class="literal">null</span>,</span><br><span class="line">     filename: <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>,</span><br><span class="line">     loaded: <span class="literal">false</span>,</span><br><span class="line">     children: [ [<span class="built_in">Object</span>] ],</span><br><span class="line">     paths: </span><br><span class="line">      [ <span class="string">'/Users/文顶顶/Desktop/node/require/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/Desktop/node/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/Desktop/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/文顶顶/node_modules'</span>,</span><br><span class="line">        <span class="string">'/Users/node_modules'</span>,</span><br><span class="line">        <span class="string">'/node_modules'</span> ] &#125;,</span><br><span class="line">  extensions: &#123; <span class="string">'.js'</span>: [<span class="built_in">Function</span>], <span class="string">'.json'</span>: [<span class="built_in">Function</span>], <span class="string">'.node'</span>: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  cache: </span><br><span class="line">   &#123; <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>: </span><br><span class="line">      Module &#123;</span><br><span class="line">        id: <span class="string">'.'</span>,</span><br><span class="line">        exports: &#123;&#125;,</span><br><span class="line">        parent: <span class="literal">null</span>,</span><br><span class="line">        filename: <span class="string">'/Users/文顶顶/Desktop/node/require/app.js'</span>,</span><br><span class="line">        loaded: <span class="literal">false</span>,</span><br><span class="line">        children: [<span class="built_in">Array</span>],</span><br><span class="line">        paths: [<span class="built_in">Array</span>] &#125;,</span><br><span class="line">     <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>: </span><br><span class="line">      Module &#123;</span><br><span class="line">        id: <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>,</span><br><span class="line">        exports: [<span class="built_in">Object</span>],</span><br><span class="line">        parent: [<span class="built_in">Object</span>],</span><br><span class="line">        filename: <span class="string">'/Users/文顶顶/Desktop/node/require/other.js'</span>,</span><br><span class="line">        loaded: <span class="literal">true</span>,</span><br><span class="line">        children: [],</span><br><span class="line">        paths: [<span class="built_in">Array</span>] &#125;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>函数的成员·说明</strong></p><p>❏  <span class="liYY"><strong>main</strong></span>  标识主模块<br>❏  <span class="liYY"><strong>cache</strong></span> 所有缓存好的模块<br>❏  <span class="liYY"><strong>resolve</strong></span> 解析一个模块名到它的绝对路径(不加载)<br>❏  <span class="liYY"><strong>extensions</strong></span>  根据不同的扩展名来处理对应的文件(已被废弃)</p></blockquote><p><code>main</code>变量用来标识主模块，包含了文件名称(filename)以及加载路径(path)等信息。</p><p><code>cache</code>对象保存缓存的模块，被引入的模块都会被缓存在这个对象中。如果从该对象象中删除指定的键值对，那么下一次require函数将重新加载被删除的模块。该对象中缓存模块的全路径作为对应的key,该模块的相关信息作为value值，在具体删除的时候可以使用<code>delete</code>关键字。</p><p><code>resolve</code>方法的作用是返回指定模块名对应的绝对路径，在实现的时候使用内部的加载机制查询模块的位置, 该操作只返回解析后的文件名，并不会加载该模块。此外，在<code>resolve</code>(对象)中的<code>paths</code>方法会返回包含解析加载模块过程中被查询的路径数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：app.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> other = <span class="built_in">require</span>(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(other.Info);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到模块的路径</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="built_in">require</span>.resolve(<span class="string">"./other"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"模块的路径："</span>,key);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>.resolve.paths(<span class="string">"./other"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除缓存中的模块</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache[key];</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：命令行执行细节</span></span><br><span class="line">wendingding$ node app.js </span><br><span class="line">other模块被执行----</span><br><span class="line">测试的字符串信息！</span><br><span class="line">模块的路径： /Users/文顶顶/Desktop/node/<span class="built_in">require</span>/other.js</span><br><span class="line">[ <span class="string">'/Users/文顶顶/Desktop/node/require'</span> ]</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文作为&lt;a href=&quot;http://wendingding.com/2018/12/04/Node%E7%B3%BB%E5%88%97-global/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node系列-global
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-global</title>
    <link href="https://weibo.com/u/3800117445/2018/12/04/Node%E7%B3%BB%E5%88%97-global/"/>
    <id>https://weibo.com/u/3800117445/2018/12/04/Node系列-global/</id>
    <published>2018-12-04T15:20:13.000Z</published>
    <updated>2018-12-06T01:52:31.846Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文介绍Node中的全局对象，包括global本身以及控制台输出对象Console、require函数、定时器相关方法以及__filename和__dirname等全局变量。</div><h4 id="1-0-global全局对象"><a href="#1-0-global全局对象" class="headerlink" title="1.0 global全局对象"></a>1.0 global全局对象</h4><p>在Node中定义了一个<code>global</code>对象，代表全局命名空间，所有的全局变量、函数或对象都作为<code>global全局对象</code>的成员。我们可以在<a href="http://wendingding.com/2018/11/27/Node%E7%B3%BB%E5%88%97-PRPL/" target="_blank" rel="noopener">REPL环境</a>中直接通过变量来进行查看，下面列出核心成员(细节有省略)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; global</span><br><span class="line">&#123; <span class="attr">console</span>: [Getter],</span><br><span class="line">  DTRACE_NET_SERVER_CONNECTION: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_NET_STREAM_END: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_HTTP_SERVER_REQUEST: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_HTTP_SERVER_RESPONSE: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_HTTP_CLIENT_REQUEST: [<span class="built_in">Function</span>],</span><br><span class="line">  DTRACE_HTTP_CLIENT_RESPONSE: [<span class="built_in">Function</span>],</span><br><span class="line">  global: [Circular],</span><br><span class="line">  process: </span><br><span class="line">    process &#123; ···省略··· &#125;,</span><br><span class="line">  Buffer: &#123; ···省略··· &#125;,</span><br><span class="line">  clearImmediate: [<span class="built_in">Function</span>],</span><br><span class="line">  clearInterval: [<span class="built_in">Function</span>],</span><br><span class="line">  clearTimeout: [<span class="built_in">Function</span>],</span><br><span class="line">  setImmediate: &#123; [<span class="built_in">Function</span>: setImmediate] [<span class="built_in">Symbol</span>(util.promisify.custom)]: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  setInterval: [<span class="built_in">Function</span>],</span><br><span class="line">  setTimeout: &#123; [<span class="built_in">Function</span>: setTimeout] [<span class="built_in">Symbol</span>(util.promisify.custom)]: [<span class="built_in">Function</span>] &#125;,</span><br><span class="line">  <span class="built_in">module</span>: </span><br><span class="line">    Module &#123; ···省略··· &#125;,</span><br><span class="line">  <span class="built_in">require</span>: &#123; ···省略··· &#125;</span><br></pre></td></tr></table></figure><p>通过打印输出我们发现，<code>global全局对象</code>中包含很多的成员，比如用于控制台输出的console对象、处理底层网络请求的一系列函数以及相对复杂的process对象等，这里先给出整体结构图然后再分别介绍。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_global.png?raw=true"></p><p>下面列出的是全局对象跟网络连接相关的一系列方法(这里不做深入)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DTRACE_NET_STREAM_END: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_NET_SERVER_CONNECTION: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_HTTP_SERVER_REQUEST: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_HTTP_SERVER_RESPONSE: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_HTTP_CLIENT_REQUEST: [<span class="built_in">Function</span>],</span><br><span class="line">DTRACE_HTTP_CLIENT_RESPONSE: [<span class="built_in">Function</span>],</span><br></pre></td></tr></table></figure></p><p>在<code>global全局对象</code>中有一个<code>global</code>属性，该属性指向的是自身，而且全局对象中所有的成员都可以直接通过成员的名称来进行访问(这点跟前端开发中的<code>window</code>对象类似)，下面给出简单示例代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; global.global == global</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; global == <span class="keyword">this</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; global.module</span><br><span class="line">Module &#123;</span><br><span class="line">  id: <span class="string">'&lt;repl&gt;'</span>,</span><br><span class="line">  exports: &#123;&#125;,</span><br><span class="line">  parent: <span class="literal">undefined</span>,</span><br><span class="line">  filename: <span class="literal">null</span>,</span><br><span class="line">  loaded: <span class="literal">false</span>,</span><br><span class="line">  children: [],</span><br><span class="line">  paths: </span><br><span class="line">   [ <span class="string">'/Users/文顶顶/Desktop/global/repl/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/Desktop/global/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/Desktop/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/node_modules'</span>,</span><br><span class="line">     <span class="string">'/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/.node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/文顶顶/.node_libraries'</span>,</span><br><span class="line">     <span class="string">'/usr/local/lib/node'</span> ] &#125;</span><br><span class="line">&gt; <span class="built_in">module</span>.id</span><br><span class="line"><span class="string">'&lt;repl&gt;'</span></span><br></pre></td></tr></table></figure></p><h4 id="2-0-Console控制台输出"><a href="#2-0-Console控制台输出" class="headerlink" title="2.0 Console控制台输出"></a>2.0 Console控制台输出</h4><p><code>Console</code>对象主要用于控制台输出，该对象中拥有诸多方法，作用各异但差别不大。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="built_in">console</span>)</span><br><span class="line">Console &#123;</span><br><span class="line">  log: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  info: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  warn: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  error: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  dir: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  time: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  timeEnd: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  clear: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  group: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  groupCollapsed: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  groupEnd: [<span class="built_in">Function</span>: bound consoleCall],</span><br><span class="line">  Console: [<span class="built_in">Function</span>: Console],</span><br><span class="line">  ···省略···</span><br><span class="line">  context: [<span class="built_in">Function</span>: context],</span><br><span class="line">  [<span class="built_in">Symbol</span>(counts)]: <span class="built_in">Map</span> &#123;&#125; &#125;</span><br></pre></td></tr></table></figure></p><p>我们在开发中使用控制台输出常用的是<code>Console.log</code>方法，该方法用于进行标准输出流的输出，也就是在控制台中打印和显示N行字符串信息，使用方式非常简单而且灵活。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"001 我是字符串"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"002 我是需要传递参数的字符串，参数为%s"</span>,<span class="string">" XXX"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"002 我是需要传递参数的字符串，参数为%s"</span>,<span class="string">" XXX"</span>,<span class="string">"and Other"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"003 控制输出数字=&gt; %d"</span>,<span class="number">10.123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"003 控制输出符号=&gt; %%"</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"004 控制输出简单计算的结果=&gt; "</span>,<span class="number">3</span> + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>,b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a == b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"005 我也是字符串"</span>);</span><br></pre></td></tr></table></figure></p><p>列出上面代码的输出。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node Console.js </span><br><span class="line">001 我是字符串</span><br><span class="line">002 我是需要传递参数的字符串，参数为 XXX</span><br><span class="line">002 我是需要传递参数的字符串，参数为 XXX and Other</span><br><span class="line">003 控制输出数字=&gt; 10.123</span><br><span class="line">003 控制输出符号=&gt; % 30</span><br><span class="line">004 控制输出简单计算的结果=&gt;  6</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">005 我也是字符串</span><br><span class="line">wendingding$ node Console.js &gt; log.text</span><br></pre></td></tr></table></figure></p><p><code>console</code>对象的<code>log、info、error、warn</code>方法在使用上几乎没有任何的差别，而且都支持对输出流进行重定向操作(<code>使用&gt;符号</code>)，而<code>dir</code>方法则可以查看并打印对象的详细内容，在需要查看对象或函数细节的时候会比较有用，下面给出简单示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法  console.dir(obj , [ options ] )</span></span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="comment">//obj               要打印的目标对象</span></span><br><span class="line"><span class="comment">//options           用来控制打印的可选配置对象，主要配置项如下</span></span><br><span class="line"><span class="comment">//[1]  colors:      布尔类型值，输出的信息是否有颜色</span></span><br><span class="line"><span class="comment">//[2]  depth:       告诉内部的util.inspect()格式化对象时要递归多少次，默认为2，null则无限递归</span></span><br><span class="line"><span class="comment">//[3]  showHidden   设置为true则显示不可枚举属性和 symbol 属性。</span></span><br><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"zs"</span>,<span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;&#125;;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; obj</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'zs'</span>, <span class="attr">show</span>: [<span class="built_in">Function</span>: show] &#125;</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">console</span>.dir(obj,&#123;<span class="attr">showHidden</span>:<span class="literal">true</span>,<span class="attr">depth</span>:<span class="number">1</span>&#125;)</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'zs'</span>,</span><br><span class="line">  show: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: show]</span><br><span class="line">     [length]: <span class="number">0</span>,</span><br><span class="line">     [name]: <span class="string">'show'</span>,</span><br><span class="line">     [<span class="built_in">arguments</span>]: <span class="literal">null</span>,</span><br><span class="line">     [caller]: <span class="literal">null</span>,</span><br><span class="line">     [prototype]: show &#123; [<span class="keyword">constructor</span>]: [Circular] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure></p><p><code>console.time()和console.endTime()</code>方法用以计算一个操作的持续时间，两个方法需要配对使用，它们接收同一个字符串作为参数以标记开始和结束时间线，下面给出简短示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始计时(任务标记为for-10000)</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"for-10000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10000</span>;i++)&#123;&#125;</span><br><span class="line"><span class="comment">//结束计时</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"for-10000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//REPL环境中执行代码：</span></span><br><span class="line">wendingding$ node Console.js </span><br><span class="line"><span class="keyword">for</span><span class="number">-10000</span>: <span class="number">0.209</span>ms</span><br></pre></td></tr></table></figure></p><p><code>console.group()和console.groupEnd()</code>方法用来设置后面的输出缩进增加或减少两个空格，在8.5.0版本中新增的<code>groupCollapsed</code>方法是<code>group</code>方法的别名，另外<code>clear</code>方法用来清空控制台消息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bogon:fs wendingding$ node</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(<span class="string">"参照字符串"</span>);</span><br><span class="line">参照字符串</span><br><span class="line">&gt; <span class="built_in">console</span>.group(<span class="string">"将后续行的缩进增加两个空格"</span>)</span><br><span class="line">将后续行的缩进增加两个空格</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(<span class="string">"参照字符串"</span>);</span><br><span class="line">  参照字符串</span><br><span class="line">&gt; <span class="built_in">console</span>.groupEnd(<span class="string">"将后续行的缩进减少两个空格"</span>)</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(<span class="string">"参照字符串"</span>);</span><br><span class="line">参照字符串</span><br><span class="line">&gt;<span class="built_in">console</span>.clear();</span><br></pre></td></tr></table></figure></p><p>除了全局的 console 实例外，console对象(模块)还在内部提供了<a href="http://nodejs.cn/api/console.html#console_new_console_options" target="_blank" rel="noopener">Console 类</a>可用来创建一个具有可配置的输出流的简单记录器，代码中通过<code>require(&quot;console&quot;).Console</code>或 <code>console.Console</code>使用，具体的使用方式请参考官方文档，这里简单列出该类的结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; <span class="built_in">console</span>.dir(<span class="built_in">console</span>.Console,&#123;<span class="attr">depth</span>:<span class="number">1</span>,<span class="attr">showHidden</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&#123; [<span class="built_in">Function</span>: Console]</span><br><span class="line">  [length]: <span class="number">2</span>,</span><br><span class="line">  [name]: <span class="string">'Console'</span>,</span><br><span class="line">  [prototype]: </span><br><span class="line">   Console &#123;</span><br><span class="line">     [<span class="keyword">constructor</span>]: [Circular],</span><br><span class="line">     log: [Object],</span><br><span class="line">     info: [Object],</span><br><span class="line">     warn: [Object],</span><br><span class="line">     error: [Object],</span><br><span class="line">     dir: [Object],</span><br><span class="line">     time: [Object],</span><br><span class="line">     timeEnd: [Object],</span><br><span class="line">     trace: [Object],</span><br><span class="line">     assert: [Object],</span><br><span class="line">     clear: [Object],</span><br><span class="line">     count: [Object],</span><br><span class="line">     countReset: [Object],</span><br><span class="line">     group: [Object],</span><br><span class="line">     groupCollapsed: [Object],</span><br><span class="line">     groupEnd: [Object] &#125; &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-0-定时器相关方法"><a href="#3-0-定时器相关方法" class="headerlink" title="3.0 定时器相关方法"></a>3.0 定时器相关方法</h4><p>Node中的<code>timer模块</code>提供了全局的定时器API，这些方法的作用和Web浏览器提供的定时器方法类似。<br><span style="color:red">在实现上，Node中的定时器方法基于Node事件循环来进行构建</span>。</p><blockquote><p><strong>定时器相关方法·语法介绍</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(callback[, ...args])            预定立即执行的回调函数，它在I/O事件回调之后被触发</span><br><span class="line">setInterval(callback, delay[, ...args])      每间隔固定时间就执行一次回调函数</span><br><span class="line">setTimeout(callback, delay[, ...args])       固定时间后执行一次回调函数</span><br><span class="line">clearImmediate(immediate)</span><br><span class="line">clearInterval(timeout)                       取消定时器</span><br><span class="line">clearTimeout(timeout)                        取消定时器</span><br></pre></td></tr></table></figure></p></blockquote><p>在上面列出的这些方法中，<code>callback</code>均表示回调函数，如果该参数不是函数类型，那么在执行代码的时候将抛出<a href="">TypeError</a>。<code>delay</code>表示时间(计量单位为毫秒)，需注意delay的取值范围为<a href="">1~2147483647</a>，如果超出该范围那么delay的值将会会被设为 1。<code>args</code>表示的是当调用回调函数时传递给回调函数的实际参数，需注意<code>args</code>的传参格式是参数列表而非数组。</p><p><code>clearxxx</code>系列方法均用来取消定时器，这些函数接收一个<code>timeout</code>类型的实例对象(该类型的实例对象是内部创建的，作为<code>setTimeout()</code> 或 <code>setInterval()</code> 的返回值)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 开启定时器</span></span><br><span class="line"><span class="comment">//2秒后执行回调函数，10和20作为回调函数的参数</span></span><br><span class="line"><span class="keyword">var</span> timer1 = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setTimeout方法=&gt;%d"</span>,(a +b));</span><br><span class="line">&#125;,<span class="number">2000</span>,<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 开启定时器</span></span><br><span class="line"><span class="comment">//每隔1秒就执行一次回调函数，Nice作为回调函数的参数</span></span><br><span class="line"><span class="keyword">var</span> timer2 = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setInterval=&gt;参数："</span>,param);</span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="string">"Nice!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 取消定时器</span></span><br><span class="line"><span class="comment">//5秒之后执行回调函数，取消time2定时器</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"取消定时器timer2"</span>);</span><br><span class="line">  clearInterval(timer2)</span><br><span class="line">&#125;,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//timer2.unref()</span></span><br><span class="line"><span class="comment">//当调用该方法时，活动的定时器对象对象不要求 Node.js 事件循环保持活动。 </span></span><br><span class="line"><span class="comment">//如果没有其他活动保持事件循环运行，则进程可能在定时器对象的回调函数被调用之前退出。</span></span><br><span class="line"><span class="comment">//注意：多次调用定时器对象的unref() 方法没有效果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//timer2.ref()</span></span><br><span class="line"><span class="comment">//当调用该方法时，只要定时器对象处于活动状态就要求Node事件循环不要退出。 </span></span><br><span class="line"><span class="comment">//注意：多次调用定时器对象的ref()方法没有效果。</span></span><br><span class="line"><span class="comment">//注意：默认所有的定时器对象都是"ref"的，通常不需要调用ref()方法，除非之前调用了unref()。</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong> 定时器对象的<code>unref</code>方法能够取消回调函数的调用。当指定定时器实例对象的回调函数被取消后，可以通过对应的<code>ref</code>方法来恢复调用，下面列出代码的执行情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node timer.js </span><br><span class="line">setInterval=&gt;参数： Nice!</span><br><span class="line">setTimeout方法=&gt;<span class="number">30</span></span><br><span class="line">setInterval=&gt;参数： Nice!</span><br><span class="line">setInterval=&gt;参数： Nice!</span><br><span class="line">setInterval=&gt;参数： Nice!</span><br><span class="line">取消定时器timer2</span><br></pre></td></tr></table></figure><h4 id="4-0-filename和-dirname"><a href="#4-0-filename和-dirname" class="headerlink" title="4.0 __filename和__dirname"></a>4.0 __filename和__dirname</h4><p><code>__filename</code>和<code>__dirname</code>是Node中预定义的两个变量，分别用来获取当前模块的文件名(全路径)以及当前的目录名，这两个变量在任何模块文件的内部均可使用。</p><blockquote><p>❏  <strong>__filename</strong> 获取当前模块文件的完整绝对路径(文件名)<br>❏  <strong>__dirname</strong>  获取当前模块所在目录的完整绝对路径(目录名)</p></blockquote><p>我们可以在JavaScript文件中打印<code>__filename</code>和<code>__dirname</code>变量，然后运行查看结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：在timer.js文件中打印变量</span></span><br><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"><span class="built_in">console</span>.log(__filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">//REPL环境执行timer.js文件结果</span></span><br><span class="line">wendingding$ node timer.js </span><br><span class="line">/Users/文顶顶/Desktop/fs</span><br><span class="line">/Users/文顶顶/Desktop/fs/timer.js</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文介绍Node中的全局对象，包括global本身以及控制台输出对象Console、require函数、定时器相关方法以及__filename和__dirname等全局变量。&lt;/div&gt;

&lt;h4 id=&quot;1-0-global全局对象&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-fs</title>
    <link href="https://weibo.com/u/3800117445/2018/12/01/Node%E7%B3%BB%E5%88%97-fs/"/>
    <id>https://weibo.com/u/3800117445/2018/12/01/Node系列-fs/</id>
    <published>2018-12-01T04:20:13.000Z</published>
    <updated>2018-12-04T09:51:17.894Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文对Node的内置模块fs进行介绍，包括模块的基本情况和简单使用。</div><h4 id="1-0-模块介绍"><a href="#1-0-模块介绍" class="headerlink" title="1.0 模块介绍"></a>1.0 模块介绍</h4><p><a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html" target="_blank" rel="noopener">fs文件模块(File System)</a>是Node的内置核心模块之一，代码中可以通过<code>var fs = require(&quot;fs&quot;)</code>直接加载和使用，该模块提供了操作文件系统的诸多API，且所有方法均提供了<strong>同步</strong>和<strong>异步</strong>操作两个版本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node </span><br><span class="line">&gt; fs</span><br><span class="line">&#123; <span class="attr">constants</span>: &#123; ··省略··· &#125;,</span><br><span class="line">  Stats: [<span class="built_in">Function</span>: Stats],</span><br><span class="line">  F_OK: <span class="number">0</span>,</span><br><span class="line">  R_OK: <span class="number">4</span>,</span><br><span class="line">  W_OK: <span class="number">2</span>,</span><br><span class="line">  X_OK: <span class="number">1</span>,</span><br><span class="line">  access: [<span class="built_in">Function</span>],</span><br><span class="line">  accessSync: [<span class="built_in">Function</span>],</span><br><span class="line">  exists: [<span class="built_in">Function</span>],</span><br><span class="line">  existsSync: [<span class="built_in">Function</span>],</span><br><span class="line">  readFile: [<span class="built_in">Function</span>],</span><br><span class="line">  readFileSync: [<span class="built_in">Function</span>],</span><br><span class="line">  close: [<span class="built_in">Function</span>],</span><br><span class="line">  closeSync: [<span class="built_in">Function</span>],</span><br><span class="line">  open: [<span class="built_in">Function</span>],</span><br><span class="line">  openSync: [<span class="built_in">Function</span>],</span><br><span class="line">  read: [<span class="built_in">Function</span>],</span><br><span class="line">  readSync: [<span class="built_in">Function</span>],</span><br><span class="line">  write: [<span class="built_in">Function</span>],</span><br><span class="line">  writeSync: [<span class="built_in">Function</span>],</span><br><span class="line">  rename: [<span class="built_in">Function</span>],</span><br><span class="line">  renameSync: [<span class="built_in">Function</span>],</span><br><span class="line">  truncate: [<span class="built_in">Function</span>],</span><br><span class="line">  truncateSync: [<span class="built_in">Function</span>],</span><br><span class="line">  ftruncate: [<span class="built_in">Function</span>],</span><br><span class="line">  ftruncateSync: [<span class="built_in">Function</span>],</span><br><span class="line">  rmdir: [<span class="built_in">Function</span>],</span><br><span class="line">  rmdirSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fdatasync: [<span class="built_in">Function</span>],</span><br><span class="line">  fdatasyncSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fsync: [<span class="built_in">Function</span>],</span><br><span class="line">  fsyncSync: [<span class="built_in">Function</span>],</span><br><span class="line">  mkdir: [<span class="built_in">Function</span>],</span><br><span class="line">  mkdirSync: [<span class="built_in">Function</span>],</span><br><span class="line">  readdir: [<span class="built_in">Function</span>],</span><br><span class="line">  readdirSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fstat: [<span class="built_in">Function</span>],</span><br><span class="line">  lstat: [<span class="built_in">Function</span>],</span><br><span class="line">  stat: [<span class="built_in">Function</span>],</span><br><span class="line">  fstatSync: [<span class="built_in">Function</span>],</span><br><span class="line">  lstatSync: [<span class="built_in">Function</span>],</span><br><span class="line">  statSync: [<span class="built_in">Function</span>],</span><br><span class="line">  readlink: [<span class="built_in">Function</span>],</span><br><span class="line">  readlinkSync: [<span class="built_in">Function</span>],</span><br><span class="line">  symlink: [<span class="built_in">Function</span>],</span><br><span class="line">  symlinkSync: [<span class="built_in">Function</span>],</span><br><span class="line">  link: [<span class="built_in">Function</span>],</span><br><span class="line">  linkSync: [<span class="built_in">Function</span>],</span><br><span class="line">  unlink: [<span class="built_in">Function</span>],</span><br><span class="line">  unlinkSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fchmod: [<span class="built_in">Function</span>],</span><br><span class="line">  fchmodSync: [<span class="built_in">Function</span>],</span><br><span class="line">  lchmod: [<span class="built_in">Function</span>],</span><br><span class="line">  lchmodSync: [<span class="built_in">Function</span>],</span><br><span class="line">  chmod: [<span class="built_in">Function</span>],</span><br><span class="line">  chmodSync: [<span class="built_in">Function</span>],</span><br><span class="line">  lchown: [<span class="built_in">Function</span>],</span><br><span class="line">  lchownSync: [<span class="built_in">Function</span>],</span><br><span class="line">  fchown: [<span class="built_in">Function</span>],</span><br><span class="line">  fchownSync: [<span class="built_in">Function</span>],</span><br><span class="line">  chown: [<span class="built_in">Function</span>],</span><br><span class="line">  chownSync: [<span class="built_in">Function</span>],</span><br><span class="line">  _toUnixTimestamp: [<span class="built_in">Function</span>: toUnixTimestamp],</span><br><span class="line">  utimes: [<span class="built_in">Function</span>],</span><br><span class="line">  utimesSync: [<span class="built_in">Function</span>],</span><br><span class="line">  futimes: [<span class="built_in">Function</span>],</span><br><span class="line">  futimesSync: [<span class="built_in">Function</span>],</span><br><span class="line">  writeFile: [<span class="built_in">Function</span>],</span><br><span class="line">  writeFileSync: [<span class="built_in">Function</span>],</span><br><span class="line">  appendFile: [<span class="built_in">Function</span>],</span><br><span class="line">  appendFileSync: [<span class="built_in">Function</span>],</span><br><span class="line">  watch: [<span class="built_in">Function</span>],</span><br><span class="line">  watchFile: [<span class="built_in">Function</span>],</span><br><span class="line">  unwatchFile: [<span class="built_in">Function</span>],</span><br><span class="line">  realpathSync: [<span class="built_in">Function</span>: realpathSync],</span><br><span class="line">  realpath: [<span class="built_in">Function</span>: realpath],</span><br><span class="line">  mkdtemp: [<span class="built_in">Function</span>],</span><br><span class="line">  mkdtempSync: [<span class="built_in">Function</span>],</span><br><span class="line">  copyFile: [<span class="built_in">Function</span>],</span><br><span class="line">  copyFileSync: [<span class="built_in">Function</span>],</span><br><span class="line">  createReadStream: [<span class="built_in">Function</span>],</span><br><span class="line">  ReadStream: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: ReadStream]</span><br><span class="line">     super_: </span><br><span class="line">      &#123; [<span class="built_in">Function</span>: Readable]</span><br><span class="line">        ReadableState: [<span class="built_in">Function</span>: ReadableState],</span><br><span class="line">        super_: [<span class="built_in">Object</span>],</span><br><span class="line">        _fromList: [<span class="built_in">Function</span>: fromList] &#125; &#125;,</span><br><span class="line">  FileReadStream: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: ReadStream]</span><br><span class="line">     super_: </span><br><span class="line">      &#123; [<span class="built_in">Function</span>: Readable]</span><br><span class="line">        ReadableState: [<span class="built_in">Function</span>: ReadableState],</span><br><span class="line">        super_: [<span class="built_in">Object</span>],</span><br><span class="line">        _fromList: [<span class="built_in">Function</span>: fromList] &#125; &#125;,</span><br><span class="line">  createWriteStream: [<span class="built_in">Function</span>],</span><br><span class="line">  WriteStream: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: WriteStream]</span><br><span class="line">     super_: &#123; [<span class="built_in">Function</span>: Writable] WritableState: [<span class="built_in">Function</span>: WritableState], </span><br><span class="line">     super_: [<span class="built_in">Object</span>] &#125; &#125;,</span><br><span class="line">  FileWriteStream: </span><br><span class="line">   &#123; [<span class="built_in">Function</span>: WriteStream]</span><br><span class="line">     super_: &#123; [<span class="built_in">Function</span>: Writable] WritableState: [<span class="built_in">Function</span>: WritableState],</span><br><span class="line">     super_: [<span class="built_in">Object</span>] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>在该模块中，所有的文件操作都提供了<code>同步</code>和<code>异步</code>两种方法(譬如：<code>readFile</code>和<code>readFileSync</code>方法)。这些方法在使用的时候，其使用方式和参数情况基本都是一致的。</p><p><strong>如果是异步方法</strong>，那么其语法形式总是为<code>function (err,callback)</code>，最后一个参数代表操作完成的回调函数，第一个参数通常是操作错误的异常(如果操作成功，该参数的值为<code>null</code>或<code>undefined</code>)，需注意异步方法不能保证执行顺序，如果对多个异步任务的执行顺序有要求，那么应该把后面的任务写在前面任务的回调函数中。</p><p><strong>如果是同步方法</strong>，那么任何异常都会立即抛出，可以使用<code>try/catch</code>结构来处理异常。同步方法总是按顺序从上向下执行，是阻塞的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入内置模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 演示同步方法的执行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//方法说明：追加数据到文件中，如果文件不存在那么就创建</span></span><br><span class="line">    fs.appendFileSync(<span class="string">'./Hi.text'</span>, <span class="string">'文本数据'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Success Info：创建文件成功!'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(err)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Error Info:'</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 演示异步方法的使用</span></span><br><span class="line"><span class="comment">//方法说明：对文件执行重命名操作</span></span><br><span class="line">fs.rename(<span class="string">'./Hi.text'</span>, <span class="string">'./Hello.text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success Info: 文件重命名成功！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法说明：查看重命名后的文件信息</span></span><br><span class="line">    <span class="comment">//依赖关系：需保证Hello.text文件已经存在</span></span><br><span class="line">    fs.stat(<span class="string">'./Hello.text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`File Info: \n <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(stats,<span class="literal">null</span>,<span class="number">4</span>)&#125;</span>`</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong> 上面给出了同步和异步方法使用的简单示例，代码中首先导入了fs模块，然后在当前目录中使用同步的方法(<code>appendFileSync</code>)来创建<code>Hi.text</code>文件并写入数据，随后调用异步方法(<code>rename</code>)来对文件执行重命名操作，继而打印(<code>stat</code>)该文件的信息。下面列出示例代码的执行细节。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node app.js </span><br><span class="line">Success Info：创建文件成功!</span><br><span class="line">Success Info: 文件重命名成功！</span><br><span class="line">File Info: </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"dev"</span>: 16777220,</span><br><span class="line">    <span class="string">"mode"</span>: 33188,</span><br><span class="line">    <span class="string">"nlink"</span>: 1,</span><br><span class="line">    <span class="string">"uid"</span>: 501,</span><br><span class="line">    <span class="string">"gid"</span>: 20,</span><br><span class="line">    <span class="string">"rdev"</span>: 0,</span><br><span class="line">    <span class="string">"blksize"</span>: 4194304,</span><br><span class="line">    <span class="string">"ino"</span>: 8601332359,</span><br><span class="line">    <span class="string">"size"</span>: 12,</span><br><span class="line">    <span class="string">"blocks"</span>: 8,</span><br><span class="line">    <span class="string">"atimeMs"</span>: 1543633694668.5117,</span><br><span class="line">    <span class="string">"mtimeMs"</span>: 1543633694669.2383,</span><br><span class="line">    <span class="string">"ctimeMs"</span>: 1543633694671.2622,</span><br><span class="line">    <span class="string">"birthtimeMs"</span>: 1543633694668.5117,</span><br><span class="line">    <span class="string">"atime"</span>: <span class="string">"2018-12-01T03:08:14.669Z"</span>,</span><br><span class="line">    <span class="string">"mtime"</span>: <span class="string">"2018-12-01T03:08:14.669Z"</span>,</span><br><span class="line">    <span class="string">"ctime"</span>: <span class="string">"2018-12-01T03:08:14.671Z"</span>,</span><br><span class="line">    <span class="string">"birthtime"</span>: <span class="string">"2018-12-01T03:08:14.669Z"</span></span><br><span class="line">&#125;</span><br><span class="line">wendingding$ cat Hello.text </span><br><span class="line">文本数据</span><br></pre></td></tr></table></figure></p><h4 id="2-0-核心方法"><a href="#2-0-核心方法" class="headerlink" title="2.0 核心方法"></a>2.0 核心方法</h4><p><a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html" target="_blank" rel="noopener">fs文件模块(File System)</a>中提供的方法很多，在具体介绍之前，为方便阅读我先简单列出这些方法并对它们进行功能性的区分。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span> 读取和写入文件</span><br><span class="line">open()       打开文件</span><br><span class="line">close()      关闭文件</span><br><span class="line">readFile()   读取文件的完整内容</span><br><span class="line">writeFile()  把完整内容写入文件</span><br><span class="line">read()       读取文件中指定部分的内容</span><br><span class="line">write()      写入指定部分的内容到文件</span><br><span class="line">appendFile() 追加数据到文件，如果文件不存在那么就创建</span><br><span class="line"></span><br><span class="line"><span class="number">002</span> 操作文件目录</span><br><span class="line">mkdir()      创建文件夹(目录)</span><br><span class="line">rmdir()      删除文件夹(目录)</span><br><span class="line">readdir()    读取文件夹(目录)</span><br><span class="line"></span><br><span class="line"><span class="number">003</span> 文件或目录的信息</span><br><span class="line"><span class="comment">//获取信息</span></span><br><span class="line">stat()       查看文件或目录信息</span><br><span class="line">fstat()      查询文件的信息(open方法打开文件后可用)</span><br><span class="line">lstat()      查看文件或目录信息(查看符号连接文件信息 only)</span><br><span class="line">exists()     检查文件或目录是否存在</span><br><span class="line">realpath()   获取文件或目录的绝对路径</span><br><span class="line">access()     检查指定目录或文件的用户权限</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改信息</span></span><br><span class="line">utimes()     修改文件的访问时间和修改时间</span><br><span class="line">futimes()    修改文件的访问时间和修改时间(open方法打开文件后可用)</span><br><span class="line">chmod()      修改文件或目录的读写权限</span><br><span class="line">fchmod()     修改文件或目录的读写权限(open方法打开文件后可用)</span><br><span class="line">rename()     修改文件的名称(重命名)</span><br><span class="line">truncate()   截断文件</span><br><span class="line">ftruncate()  截断文件(open方法打开文件后可用)</span><br><span class="line">watch()      监视文件</span><br><span class="line">watchFile()  监视文件</span><br></pre></td></tr></table></figure></p><div style="border:1px solid #000;padding:5px 5px;background:#666;color:#fff">① 读写文件</div><p><span style="border:1px solid #000;padding:5px 20px;background:#195;color:#fff"><strong>readFile 和 readFileSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)读取文件的内容。<br><strong>语法</strong> <code>fs.readFile( path ,[ options ], callback ) | fs.readFileSync( path ,[ options ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL | integer类型</code>) 指定文件名或文件描述符。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | string类型</code>) 指定编码和处理文件系统的<code>flag值</code>。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err, data</code>)，其中data是文件的内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span>    文件系统的flag</span><br><span class="line"><span class="string">'a'</span>    打开文件用于追加，如不存在则创建。</span><br><span class="line"><span class="string">'ax'</span>   类似 <span class="string">'a'</span>，但如果文件已存在则抛出异常。</span><br><span class="line"><span class="string">'a+'</span>   打开文件用于读取和追加，如不存在则创建。</span><br><span class="line"><span class="string">'ax+'</span>  类似 <span class="string">'a+'</span>，但如果文件已存在则抛出异常。</span><br><span class="line"><span class="string">'as'</span>   以同步模式打开文件用于追加，如不存在则创建。</span><br><span class="line"><span class="string">'as+'</span>  以同步模式打开文件用于读取和追加，如不存在则创建。</span><br><span class="line"></span><br><span class="line"><span class="string">'r'</span>    打开文件用于读取。如不存在则抛出异常。</span><br><span class="line"><span class="string">'r+'</span>   打开文件用于读取和写入。如不存在则抛出异常。</span><br><span class="line"><span class="string">'rs+'</span>  以同步模式打开文件用于读取和写入。指示操作系统绕开本地文件系统缓存(不建议使用)。</span><br><span class="line"></span><br><span class="line"><span class="string">'w'</span>    打开文件用于写入，不存在则创建，存在则截断。</span><br><span class="line"><span class="string">'wx'</span>   类似 <span class="string">'w'</span>，但如果文件已存在则抛出异常。</span><br><span class="line"><span class="string">'w+'</span>   打开文件用于读取和写入，不存在则创建，存在则截断。</span><br><span class="line"><span class="string">'wx+'</span>  类似 <span class="string">'w+'</span>，但如果文件已存在则抛出异常。</span><br><span class="line"></span><br><span class="line"><span class="number">002</span> 参数使用注意</span><br><span class="line">options参数可以接收对象对象，如&#123;<span class="string">"encoding"</span>:<span class="string">"utf8"</span>,<span class="attr">flag</span>:<span class="string">'r'</span>&#125;;</span><br><span class="line">options参数也可以接收字符串，如<span class="string">"utf8"</span>,表示读取文件使用utf编码模式。</span><br><span class="line">默认情况下encoding的值为<span class="literal">null</span>,flag的值为r表示读取文件。</span><br><span class="line"></span><br><span class="line"><span class="number">003</span> fs.readFile() 会缓存整个文件。 为了最小化内存占用，尽可能优先使用 fs.createReadStream()。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #000;padding:5px 20px;"><strong>writeFile 和 writeFileSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)写入文件。<br><strong>语法</strong> <code>fs.writeFile(file,data,[ options ],callback) | fs.writeFileSync(file,data,[ options])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> file</span> (<code>string | Buffer | URL | integer类型</code>) 指定完整路径的文件名或文件描述符。</li><li><span class="liX" style="width:100px"> data</span> (<code>string | Buffer | TypedArray | DataView类型</code>) 指定需要写入的内容。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | string类型</code>) 配置对象，可选项有<code>encoding、mode和flag</code>。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>),参数值为错误对象。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：readAndWrite.js文件内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">//001 读取文件内容(readFile)</span></span><br><span class="line">fs.readFile(<span class="string">"./Hello.text"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"001 第二个参数省略返回Buffer类型:\n"</span>,data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">"./Hello.text"</span>,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"002 第二个参数为字符编码:"</span>,data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">"./Hello.text"</span>,&#123;<span class="string">"encoding"</span>:<span class="string">"utf8"</span>,<span class="attr">flag</span>:<span class="string">'r'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"003 第二个参数为对象:"</span>,data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 写入文件内容(writeFile)</span></span><br><span class="line"><span class="keyword">var</span> fullPath = <span class="string">"./Hi.text"</span></span><br><span class="line">fs.writeFile(fullPath,<span class="string">"Beautiful"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="comment">//读取指定文件的内容</span></span><br><span class="line">  <span class="keyword">var</span> textContent = fs.readFileSync(fullPath,<span class="string">"utf8"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(textContent);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行和输出的结果为：</span></span><br><span class="line">wendingding$ node readAndWrite.js </span><br><span class="line"><span class="number">001</span> 第二个参数省略返回Buffer类型:</span><br><span class="line"> &lt;Buffer e6 <span class="number">96</span> <span class="number">87</span> e6 <span class="number">9</span>c ac <span class="number">3</span>a <span class="number">4</span>e <span class="number">69</span> <span class="number">63</span> <span class="number">65</span> <span class="number">20</span> <span class="number">74</span> <span class="number">6</span>f <span class="number">20</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">65</span> <span class="number">74</span> <span class="number">20</span> <span class="number">75</span> <span class="number">20</span>&gt;</span><br><span class="line">Beautiful</span><br><span class="line"><span class="number">002</span> 第二个参数为字符编码: 文本:Nice to meet u </span><br><span class="line"><span class="number">003</span> 第二个参数为对象: 文本:Nice to meet u</span><br></pre></td></tr></table></figure></p><p><strong>说明</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span> 方法说明</span><br><span class="line">在写数据到文件时候，如果文件不存在，则创建文件，如果文件已存在，则覆盖文件。</span><br><span class="line">如果 data 是一个 buffer，则忽略 encoding。</span><br><span class="line">options参数可以是对象，也可以是字符串，如果该参数是一个字符串，则用来指定字符编码。</span><br><span class="line"></span><br><span class="line"><span class="number">002</span> 对同一个文件多次使用 fs.writeFile() 且不等待回调，是不安全的。</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;background:#195;color:#fff"><strong>open 和 openSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)打开文件。<br><strong>语法</strong> <code>fs.open( path, flags , [ mode ], callback ) | fs.openSync( path, flags , [ mode ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> flags</span> (<code>integer类型</code>) 指定对文件的操作，具体取值参考文件系统的<code>flag</code>值。</li><li><span class="liX" style="width:100px"> mode</span> (<code>integer类型</code>) 指定文件的模式，仅在创建时有效(默认可读可写)。</li><li><span class="liX" style="width:100px"> callback</span> (<code>Function类型</code>) 执行完毕的回调函数(<code>err</code>,<code>fd</code>)。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>close 和 closeSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)关闭文件。<br><strong>语法</strong> <code>fs.close( fd, callback ) | fs.closeSync( fd )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> fd</span> (<code>integer类型</code>) 指定的文件描述符。</li><li><span class="liX" style="width:100px"> callback</span> (<code>Function类型</code>) 执行完毕的回调函数(<code>err</code>, <code>fd</code>)，参数值为错误对象。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>read 和 readSync </strong></span>  <span style="border:1px solid #000;padding:5px 20px;margin-left:20px"> <strong> write 和 writeSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)的<a href="">读取</a>或<a href="">写入</a>文件。<br><strong>语法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步 | 异步读取文件的内容。</span></span><br><span class="line">fs.readSync(fd, buffer, offset, length, position)</span><br><span class="line">fs.read(fd, buffer, offset, length, position, callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步 | 异步写入数据到文件中。</span></span><br><span class="line">fs.writeSync(fd, buffer, offset, length, position)</span><br><span class="line">fs.write(fd, buffer, offset, length, position, callback)</span><br></pre></td></tr></table></figure></p><p><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> fd</span> (<code>integer类型</code>) 通常为open方法回调中返回的文件描述符。</li><li><span class="liX" style="width:100px"> buffer</span> (<code>Buffer | TypedArray | DataView类型</code>)  指定将文件数据读取到哪个缓存区。</li><li><span class="liX" style="width:100px"> offset</span> (<code>integer类型</code>) 写入数据的开始位置(字节单位)。</li><li><span class="liX" style="width:100px"> length</span> (<code>integer类型</code>) 指定从文件读取的字节数。</li><li><span class="liX" style="width:100px"> position</span> (<code>integer类型</code>) 指定读取文件时的开始位置。</li><li><span class="liX" style="width:100px"> callback</span> (<code>Function类型</code>) 回调函数(<code>err</code>,<code>bytes(Read | Written)</code>,<code>buffer</code>)。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：openAndClose.js 文件的内容</span></span><br><span class="line"><span class="comment">//备注：在当前目录中先准备好Hi.text文件，内容为Nice !</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> fullPath = <span class="string">"./Hi.text"</span>;</span><br><span class="line"><span class="keyword">var</span> bufferWrite = <span class="keyword">new</span> Buffer(<span class="string">",请保持微笑 &gt;.&lt;"</span>);</span><br><span class="line"><span class="keyword">var</span> bufferRead = <span class="keyword">new</span> Buffer(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"000 打印文件的内容："</span>,fs.readFileSync(fullPath,<span class="string">"utf8"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 打开文件</span></span><br><span class="line"><span class="comment">//语法：fs.open( path, flags , [ mode ], callback ) </span></span><br><span class="line"><span class="comment">//参数：r+表示读取和写入文件，文件不存在则抛出异常</span></span><br><span class="line">fs.open(fullPath,<span class="string">"r+"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,fd</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"001 打开文件成功！"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//002 写入文件</span></span><br><span class="line">  <span class="comment">//语法：fs.write(fd, buffer, offset, length, position, callback)</span></span><br><span class="line">  fs.write(fd,bufferWrite,<span class="number">0</span>,bufferWrite.length,<span class="number">5</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,writtenBytes,bufferData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"002 写入的数据大小:"</span>,writtenBytes);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"002 写入的Buffer数据:"</span>,bufferData);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"002 写入的Buffer数据字符串:"</span>,bufferData.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 读取文件内容</span></span><br><span class="line">    <span class="comment">//fs.read(fd, buffer, offset, length, position, callback)</span></span><br><span class="line">    fs.read(fd,bufferRead,<span class="number">0</span>,bufferRead.length,<span class="number">0</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,readBytes,bufferData</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"003 读取的数据大小："</span>,readBytes);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"003 读取的Buffer数据:"</span>,bufferData);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"003 读取的Buffer数据字符串:"</span>,bufferData.toString());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//004 关闭文件</span></span><br><span class="line">      fs.close(fd,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"004 关闭文件成功！"</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节：</span></span><br><span class="line">wendingding$ node openAndClose.js </span><br><span class="line"><span class="number">000</span> 打印文件的内容： Nice !</span><br><span class="line"></span><br><span class="line"><span class="number">001</span> 打开文件成功！</span><br><span class="line"></span><br><span class="line"><span class="number">002</span> 写入的数据大小: <span class="number">20</span></span><br><span class="line"><span class="number">002</span> 写入的Buffer数据:</span><br><span class="line"> &lt;Buffer <span class="number">2</span>c e8 af b7 e4 bf <span class="number">9</span>d e6 <span class="number">8</span>c <span class="number">81</span> e5 be ae e7 ac <span class="number">91</span> <span class="number">20</span> <span class="number">3</span>e <span class="number">2</span>e <span class="number">3</span>c&gt;</span><br><span class="line"><span class="number">002</span> 写入的Buffer数据字符串: ,请保持微笑 &gt;.&lt;</span><br><span class="line"></span><br><span class="line"><span class="number">003</span> 读取的数据大小： <span class="number">25</span></span><br><span class="line"><span class="number">003</span> 读取的Buffer数据: </span><br><span class="line">&lt;Buffer <span class="number">4</span>e <span class="number">69</span> <span class="number">63</span> <span class="number">65</span> <span class="number">20</span> <span class="number">2</span>c e8 af b7 e4 bf <span class="number">9</span>d e6 <span class="number">8</span>c <span class="number">81</span> e5 be ae e7 ac <span class="number">91</span> <span class="number">20</span> <span class="number">3</span>e <span class="number">2</span>e <span class="number">3</span>c ···<span class="number">00</span>&gt;</span><br><span class="line"><span class="number">003</span> 读取的Buffer数据字符串: Nice ,请保持微笑 &gt;.&lt;</span><br><span class="line"></span><br><span class="line"><span class="number">004</span> 关闭文件成功！</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>appendFile 和 appendFileSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)追加数据到指定文件，如果文件不存在那么就先创建。<br><strong>语法</strong><br><code>fs.appendFileSync(path, data, [options])</code><br><code>fs.appendFile(path, data, [options], callback)</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> data</span> (<code>string | Buffer类型</code>) 追加的具体数据。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | string类型</code>) 配置<code>encoding、flag和mode</code>等字段。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>)，参数值为错误对象。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> filePath = <span class="string">"./Nice.text"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 同步追加数据到指定的文件(文件不存在)</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//语法：fs.appendFileSync(path, data, [options])</span></span><br><span class="line">  fs.appendFileSync(filePath,<span class="string">"妙：Nice!"</span>,&#123;<span class="attr">encoding</span>:<span class="string">"utf8"</span>&#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'创建文件，并追加数据到文件'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Error Info:"</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 异步方法追加数据</span></span><br><span class="line">fs.appendFile(filePath,<span class="string">" Best"</span>,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info: 追加数据成功！"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//003 读取文件的内容验证</span></span><br><span class="line">  <span class="keyword">var</span> resultData = fs.readFileSync(filePath,<span class="string">"utf8"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success resultData:"</span>,resultData);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节</span></span><br><span class="line">wendingding$ node appendFile.js </span><br><span class="line">创建文件，并追加数据到文件</span><br><span class="line">Success Info: 追加数据成功！</span><br><span class="line">Success resultData: 妙：Nice! Best</span><br><span class="line">wendingding$ cat Nice.text </span><br><span class="line">妙：Nice! Best</span><br></pre></td></tr></table></figure></p><p></p><p style="border:1px solid #000;padding:5px 5px;background:#666;color:#fff">② 目录操作</p><br><span style="border:1px solid #000;padding:5px 20px;"><strong>mkdir 和 mkdirSync</strong></span><p></p><p><strong>作用</strong> 异步(<code>同步</code>)创建文件夹(目录)。<br><strong>语法</strong> <code>fs.mkdir( path , [ options ], callback ) | fs.mkdirSync( path , [ options ] )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | integer类型</code>) 配置选项有<code>recursive</code>(是否创建父目录 10+)和<code>mode</code>。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>)，参数值为错误对象。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>readdir 和 readSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)读取文件夹(目录)。<br><strong>语法</strong> <code>fs.readdir( path , [ options ] , callback ) | fs.readdirSync( path , [ options ] )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> options</span> (<code>Object | integer类型</code>) 配置选项有<code>encoding</code>和<code>withFileTypes</code>。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>,<code>files</code>)，表示错误对象和目录数组。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Options配置项说明</span><br><span class="line"></span><br><span class="line">[1]字符串作为参数，用于指定字符编码。</span><br><span class="line">[2]对象类型作为参数</span><br><span class="line">  encoding字段设置字符编码，默认为utf8 , 如果 encoding 设为 'buffer'，则返回的文件名是 Buffer。</span><br><span class="line">  withFileTypes字段设置回调函数files数组的元素结构，设置为true则数组的元素是fs.Dirent，默认为false。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #000;padding:5px 20px;"><strong>rmdir 和 rmdirSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)移除文件夹(目录)。<br><strong>语法</strong> <code>fs.rmdir( path , callback ) | fs.rmdirSync( path )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)执行完的回调函数(<code>err</code>)，表示错误对象。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：file.js文件内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 创建文件目录</span></span><br><span class="line">fs.mkdir(<span class="string">"./test"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info: "</span>,<span class="string">"创建目录成功"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//002 读取目录</span></span><br><span class="line">  fs.readdir(<span class="string">"./nodefs"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,files</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success Info: "</span>,<span class="string">"读取目录成功"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"列出具体的内容:\n "</span>,files);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 删除目录</span></span><br><span class="line">    <span class="comment">// fs.rmdir("./test",function()&#123;</span></span><br><span class="line">    <span class="comment">//   if(error) throw error;</span></span><br><span class="line">    <span class="comment">//   console.log("Success Info: ","删除test目录成功")</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//003 删除目录(遍历删除nodefs下面所有的子目录)</span></span><br><span class="line">    files.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> fullPath = <span class="string">"./nodefs/"</span> + element;</span><br><span class="line">      <span class="built_in">console</span>.log(fullPath);</span><br><span class="line">      fs.rmdir(fullPath,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Success Info: "</span>,<span class="string">"删除"</span>+fullPath+<span class="string">"目录成功"</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行和输出的结果为：</span></span><br><span class="line">wendingding$ node file.js</span><br><span class="line">Success Info:  创建目录成功</span><br><span class="line">Success Info:  读取目录成功</span><br><span class="line">列出具体的内容:</span><br><span class="line">  [ <span class="string">'.DS_Store'</span>, <span class="string">'a'</span>, <span class="string">'b'</span> ]</span><br><span class="line">./nodefs/.DS_Store</span><br><span class="line">./nodefs/a</span><br><span class="line">./nodefs/b</span><br><span class="line">Success Info:  删除./nodefs/.DS_Store目录成功</span><br><span class="line">Success Info:  删除./nodefs/a目录成功</span><br><span class="line">Success Info:  删除./nodefs/b目录成功</span><br></pre></td></tr></table></figure></p><div style="border:1px solid #000;padding:5px 5px;background:#666;color:#fff">③ 文件信息</div><p><span style="border:1px solid #000;padding:5px 20px;"><strong>access 和 accessSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)检查指定文件或目录的用户权限。<br><strong>语法</strong> <code>fs.access( path, [ mode ], callback ) | fs.accessSync( path , [ mode ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> callBack</span> (<code>function类型</code>)执行检查完成的回调函数，如果失败则唯一的error参数有值。</li><li><span class="liX" style="width:100px"> mode</span> (<code>integer类型</code>)  默认值为<code>fs.constants.F_OK</code>   要执行的可访问性检查。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">001 文件的可访问性常量</span><br><span class="line">F_OK 文件可见 == 0</span><br><span class="line">R_OK 文件可读 == 4</span><br><span class="line">W_OK 文件可写 == 2</span><br><span class="line">X_OK 文件可执行(在 Windows上无效,效果同 fs.constants.F_OK) == 1</span><br><span class="line"></span><br><span class="line">002 使用建议</span><br><span class="line">不建议在调用 fs.open()、fs.readFile() 或 fs.writeFile() 之前使用 fs.access() 检查文件的可访问性。</span><br><span class="line">因为其他进程可能在两个调用的间隙改变文件的状态。 应该直接打开、读取或写入文件，当文件无法访问时再处理错误。</span><br></pre></td></tr></table></figure><p><span style="border:1px solid #000;padding:5px 20px;"><strong>stat 和 statSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)查看文件的属性。<br><strong>语法</strong> <code>fs.stat( path ,[ options ], callback) | fs.statSync( path )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> options</span> (<code>对象类型</code>)配置项bigint(布尔类型值)控制数值是否为 bigint 型。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)回调函数(<code>err</code>,<code>stats</code>)，<code>stats</code>保存文件信息对象。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：test.js 文件内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 stat方法说明：查看文件的属性</span></span><br><span class="line"><span class="comment">//不建议在调用 fs.open()、fs.readFile() 或 fs.writeFile() 之前使用 fs.stat() 检查文件是否存在。</span></span><br><span class="line"><span class="comment">//应该直接打开、读取或写入文件，当文件无效时再处理错误</span></span><br><span class="line">fs.stat(<span class="string">"./app.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,Info</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success Info:"</span>,Info);</span><br><span class="line">    <span class="comment">//查看是否为文件</span></span><br><span class="line">    <span class="built_in">console</span>.log(Info.isFile());</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 statSync方法说明：查看目录(文件夹)属性</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fileInfo = fs.statSync(<span class="string">"./nodefs"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info:"</span>,fileInfo);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Error Info: "</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行和输出的结果为：</span></span><br><span class="line">wendingding$ node test.js </span><br><span class="line">Success Info: Stats &#123;</span><br><span class="line">  dev: <span class="number">16777220</span>,</span><br><span class="line">  mode: <span class="number">16877</span>,</span><br><span class="line">  nlink: <span class="number">4</span>,</span><br><span class="line">  uid: <span class="number">501</span>,</span><br><span class="line">  gid: <span class="number">20</span>,</span><br><span class="line">  rdev: <span class="number">0</span>,</span><br><span class="line">  blksize: <span class="number">4194304</span>,</span><br><span class="line">  ino: <span class="number">8601434025</span>,</span><br><span class="line">  size: <span class="number">128</span>,</span><br><span class="line">  blocks: <span class="number">0</span>,</span><br><span class="line">  atimeMs: <span class="number">1543821747020.0398</span>,</span><br><span class="line">  mtimeMs: <span class="number">1543821696833.2778</span>,</span><br><span class="line">  ctimeMs: <span class="number">1543821701216.544</span>,</span><br><span class="line">  birthtimeMs: <span class="number">1543821692999.7283</span>,</span><br><span class="line">  atime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">22</span>:<span class="number">27.020</span>Z,</span><br><span class="line">  mtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">21</span>:<span class="number">36.833</span>Z,</span><br><span class="line">  ctime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">21</span>:<span class="number">41.217</span>Z,</span><br><span class="line">  birthtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">21</span>:<span class="number">33.000</span>Z &#125;</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">Success Info: Stats &#123;</span><br><span class="line">  dev: <span class="number">16777220</span>,</span><br><span class="line">  mode: <span class="number">33188</span>,</span><br><span class="line">  nlink: <span class="number">1</span>,</span><br><span class="line">  uid: <span class="number">501</span>,</span><br><span class="line">  gid: <span class="number">20</span>,</span><br><span class="line">  rdev: <span class="number">0</span>,</span><br><span class="line">  blksize: <span class="number">4194304</span>,</span><br><span class="line">  ino: <span class="number">8601330263</span>,</span><br><span class="line">  size: <span class="number">839</span>,</span><br><span class="line">  blocks: <span class="number">8</span>,</span><br><span class="line">  atimeMs: <span class="number">1543821852077.4976</span>,</span><br><span class="line">  mtimeMs: <span class="number">1543633822104.2488</span>,</span><br><span class="line">  ctimeMs: <span class="number">1543633822104.2488</span>,</span><br><span class="line">  birthtimeMs: <span class="number">1543632135491.0122</span>,</span><br><span class="line">  atime: <span class="number">2018</span><span class="number">-12</span><span class="number">-03</span>T07:<span class="number">24</span>:<span class="number">12.077</span>Z,</span><br><span class="line">  mtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span>T03:<span class="number">10</span>:<span class="number">22.104</span>Z,</span><br><span class="line">  ctime: <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span>T03:<span class="number">10</span>:<span class="number">22.104</span>Z,</span><br><span class="line">  birthtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span>T02:<span class="number">42</span>:<span class="number">15.491</span>Z &#125;</span><br><span class="line">bogon:fs wendingding$</span><br></pre></td></tr></table></figure></p><p>在上面代码中异步方法回调函数中的<code>Info</code>和同步方法的返回值<code>fileInfo</code>都是<code>fs.Stats</code>类型对象。</p><blockquote><p><strong><code>fs.Stats</code>对象核心成员</strong><br><span class="spaceX backColor">mode</span>  当前文件的权限标识。<br><span class="spaceX backColor">nlink</span>  当前文件的硬链接数量。<br><span class="spaceX backColor" style="background:#195;color:#fff"><strong>size</strong></span>   当前文件的大小(字节数)。<br><span class="spaceX backColor">atime</span>  当前文件的访问时间。<br><span class="spaceX backColor">mtime</span>  当前文件的修改时间。<br><span class="spaceX backColor">ctime</span>  最后改变文件状态的时间。<br><span class="spaceX backColor">birthtime</span>  创建文件的时间。<br><span class="spaceX backColor" style="width:180px">isFile（）</span>  是否是一个文件。<br><span class="spaceX backColor" style="width:180px">isDirectory（）</span> 是否是一个目录。<br><span class="spaceX backColor" style="width:180px">isSymbolicLink（）</span>  是否是符号链接文件。</p></blockquote><p><span style="border:1px solid #000;padding:5px 20px;"><strong>fstat 和 fstatSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)查看文件的属性。<br><strong>语法</strong> <code>fs.fstat(fd ,[ options ], callback) | fs.fstatSync(fd ,[ options ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> fd</span> (<code>integer类型</code>) 使用open方法打开后返回的文件描述符。</li><li><span class="liX" style="width:100px"> options</span> (<code>对象类型</code>)配置项bigint(布尔类型值)控制数值是否为长整型。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)回调函数(<code>err</code>,<code>stats</code>)，<code>stats</code>保存文件信息对象。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>realpath 和 realpathSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)计算文件路径，解析 .、.. 与符号链接。<br><strong>语法</strong> <code>fs.realpath(path ,[ options ], callback) | fs.realpathSync(path ,[ options ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> path</span> (<code>string | Buffer | URL类型</code>) 指定的文件或路径。</li><li><span class="liX" style="width:100px"> options</span> (<code>对象类型</code>)配置项encoding设置字符编码(默认为<code>utf8</code>)。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)回调函数(<code>err</code>,<code>resolvedPath</code>)，<code>resolvedPath</code>保存完整路径。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：fileInfo.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> fullPath = <span class="string">"./Hi.text"</span>;</span><br><span class="line"><span class="comment">//001 打开文件</span></span><br><span class="line">fs.open(fullPath,<span class="string">"r"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fd</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info: 打开文件成功！"</span>);</span><br><span class="line">  <span class="comment">//002 查看文件信息</span></span><br><span class="line">  <span class="comment">//语法：fs.fstat(fd ,[ options ], callback)</span></span><br><span class="line">  fs.fstat(fd,<span class="function"><span class="keyword">function</span>(<span class="params">err,fileInfo</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Success fileInfo:"</span>,fileInfo);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//003 打印文件的完整路径</span></span><br><span class="line">      fs.realpath(fullPath,<span class="function"><span class="keyword">function</span>(<span class="params">err,resultPath</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"Successs Info =&gt; "</span>,resultPath);</span><br><span class="line"></span><br><span class="line">          fs.close(fd,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Success Info: 关闭文件成功！"</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节</span></span><br><span class="line">wendingding$ node fileInfo.js </span><br><span class="line">Success Info: 打开文件成功！</span><br><span class="line">Success fileInfo: Stats &#123;</span><br><span class="line">  dev: <span class="number">16777220</span>,</span><br><span class="line">  mode: <span class="number">33188</span>,</span><br><span class="line">  nlink: <span class="number">1</span>,</span><br><span class="line">  uid: <span class="number">501</span>,</span><br><span class="line">  gid: <span class="number">20</span>,</span><br><span class="line">  rdev: <span class="number">0</span>,</span><br><span class="line">  blksize: <span class="number">4194304</span>,</span><br><span class="line">  ino: <span class="number">8601453682</span>,</span><br><span class="line">  size: <span class="number">25</span>,</span><br><span class="line">  blocks: <span class="number">8</span>,</span><br><span class="line">  atimeMs: <span class="number">1543894023563.2808</span>,</span><br><span class="line">  mtimeMs: <span class="number">1543894022418.2258</span>,</span><br><span class="line">  ctimeMs: <span class="number">1543894022418.2258</span>,</span><br><span class="line">  birthtimeMs: <span class="number">1543633825190.9485</span>,</span><br><span class="line">  atime: <span class="number">2018</span><span class="number">-12</span><span class="number">-04</span>T03:<span class="number">27</span>:<span class="number">03.563</span>Z,</span><br><span class="line">  mtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-04</span>T03:<span class="number">27</span>:<span class="number">02.418</span>Z,</span><br><span class="line">  ctime: <span class="number">2018</span><span class="number">-12</span><span class="number">-04</span>T03:<span class="number">27</span>:<span class="number">02.418</span>Z,</span><br><span class="line">  birthtime: <span class="number">2018</span><span class="number">-12</span><span class="number">-01</span>T03:<span class="number">10</span>:<span class="number">25.191</span>Z &#125;</span><br><span class="line">Successs Info =&gt;  <span class="regexp">/Users/</span>文顶顶/Desktop/fs/Hi.text</span><br><span class="line">Success Info: 关闭文件成功</span><br></pre></td></tr></table></figure></p><p><span style="border:1px solid #000;padding:5px 20px;;background:#195;color:#fff"><strong>rename 和 renameSync</strong></span></p><p><strong>作用</strong> 异步(<code>同步</code>)对文件进行重命名操作。<br><strong>语法</strong> <code>fs.rename( oldPath, newPath, callback ) | fs.renameSync( oldPath, newPath )</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> oldPath</span> (<code>string | Buffer | URL类型</code>)原来的文件全路径。</li><li><span class="liX" style="width:100px"> newPath</span> (<code>string | Buffer | URL类型</code>)目标文件全路径名称。</li><li><span class="liX" style="width:100px"> callback</span> (<code>function类型</code>)回调函数(<code>err</code>)，若文件已存在则覆盖。</li></ul><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：rename.js文件的内容</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> oldPath = <span class="string">"./Hi.text"</span>;</span><br><span class="line"><span class="keyword">var</span> newPath = <span class="string">"./newHi.text"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 执行重命名操作</span></span><br><span class="line">fs.rename(oldPath,newPath,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Success Info:文件重命名成功！"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//002 读取文件的内容</span></span><br><span class="line">  fs.readFile(newPath,<span class="string">"utf8"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fileData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success fileData:"</span>,fileData);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行执行细节</span></span><br><span class="line">wendingding$ node rename.js </span><br><span class="line">Success Info:文件重命名成功！</span><br><span class="line">Success fileData: Nice ,请保持微笑 &gt;.&lt;</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文对Node的内置模块fs进行介绍，包括模块的基本情况和简单使用。&lt;/div&gt;

&lt;h4 id=&quot;1-0-模块介绍&quot;&gt;&lt;a href=&quot;#1-0-模块介绍&quot; class=&quot;headerlink&quot; title=&quot;1.0 模块介绍&quot;&gt;&lt;/a&gt;1.0
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-http</title>
    <link href="https://weibo.com/u/3800117445/2018/11/28/Node%E7%B3%BB%E5%88%97-http/"/>
    <id>https://weibo.com/u/3800117445/2018/11/28/Node系列-http/</id>
    <published>2018-11-28T15:20:13.000Z</published>
    <updated>2018-12-04T09:50:37.573Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">本文对Node的内置模块http进行介绍，包括该模块的基本情况和简单使用。</div><h4 id="1-0-模块简介"><a href="#1-0-模块简介" class="headerlink" title="1.0 模块简介"></a>1.0 模块简介</h4><p><a href="">http</a>是Node的内置核心模块，包含了对HTTP处理的封装。</p><p>在Nodejs文件中可以直接在代码里通过<code>var http = require(&quot;http&quot;)</code>的方式来进行加载，该模块主要用来处理客户端HHTP请求以及服务器端的响应。在传统的HTTP服务器可能会使用<code>Apache</code>、<code>Nginx</code>或<code>IIS</code>之类的服务器端软件来处理，但在Node中并不需要这么复杂，我们使用它内置的http模块就可以非常方便的来构建服务器而且稳定可靠(<span style="color:#2c3e50"><strong>Node中的HTTP服务器继承自TCP服务器的<code>net</code>模块，它能够与多个客户端保持连接，因为其采用事件驱动的形式而并不会为每个连接都创建额外的线程，这保证了服务器的低内存占用率以实现高并发</strong></span>)。</p><p>我们可以非常方便的使用http模块来创建服务器或者是发起客户端网络请求。下面给代码示例：</p><blockquote><p><strong>创建Node服务器</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备注：文件名为server.js</span></span><br><span class="line"><span class="comment">//001 引入Node内置的http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 创建http服务器</span></span><br><span class="line"><span class="keyword">var</span> httpServer = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置响应头信息</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">"Content-type"</span>:<span class="string">"text/plain;charset=utf-8"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置具体的响应信息</span></span><br><span class="line">    response.write(<span class="string">"Hi! Nice to meet u ...\n\n"</span>);</span><br><span class="line">    response.write(<span class="string">"这是响应的信息01---\n"</span>);</span><br><span class="line">    response.write(<span class="string">"这是响应的信息02---\n"</span>);</span><br><span class="line">    response.write(<span class="string">"这是响应的信息03---\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//响应结束(end)</span></span><br><span class="line">    response.end(<span class="string">"这是响应的信息04---end"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//003 开启服务监听</span></span><br><span class="line">httpServer.listen(<span class="number">3000</span>,<span class="string">"127.0.0.1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"开启服务监听：3000端口"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行这段代码(<code>在命令中通过node server.js运行</code>)，终端打印<code>开启服务监听：3000端口</code>信息。<br>在浏览器中访问<a href="">http://127.0.0.1:3000/</a>页面将显示下面的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hi! Nice to meet u ...</span><br><span class="line"></span><br><span class="line">这是响应的信息01---</span><br><span class="line">这是响应的信息02---</span><br><span class="line">这是响应的信息03---</span><br><span class="line">这是响应的信息04---end</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>发起HTTP网络请求</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 声明变量(组织数据)</span></span><br><span class="line"><span class="keyword">var</span> responseData = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="string">"host"</span>:<span class="string">"127.0.0.1"</span>, <span class="comment">//请求的主机地址</span></span><br><span class="line">    <span class="string">"port"</span>:<span class="string">"3000"</span>,      <span class="comment">//请求的端口号</span></span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"get"</span>      <span class="comment">//请求的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//003 创建并发起Http网络Get请求</span></span><br><span class="line">http.request(options,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事件监听：接收服务器端返回的数据(响应数据)</span></span><br><span class="line">    response.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        responseData += data;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事件监听：如果接收完成那么就打印服务器返回的所有数据</span></span><br><span class="line">    response.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"服务器端响应完成，接收到的数据："</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(responseData);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).end();</span><br></pre></td></tr></table></figure><p>上面的代码通过http模块中的<code>http.request</code>方法创建并发起一个网络请求，并监听服务器的响应，当接收完服务器返回的响应数据之后打印并显示，给出执行情况。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wendingding:node wendingding$ node request.js </span><br><span class="line">服务器端响应完成，接收到的数据：</span><br><span class="line">Hi! Nice to meet u ...</span><br><span class="line"></span><br><span class="line">这是响应的信息01---</span><br><span class="line">这是响应的信息02---</span><br><span class="line">这是响应的信息03---</span><br><span class="line">这是响应的信息04---end</span><br></pre></td></tr></table></figure></p><h4 id="2-0-HTTP报文"><a href="#2-0-HTTP报文" class="headerlink" title="2.0 HTTP报文"></a>2.0 HTTP报文</h4><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_http.png?raw=true"></p><p>HTTP全称<code>HyperText Transfer Protocol</code>，即超文本传协议，属于应用层协议构建于TCP协议之上。</p><p>HTTP协议规定了客户端和服务器端之间应该如何进行通信。在<code>请求-响应模型</code>中，请求是客户端向服务器端索要数据或服务的过程，响应是服务器端把数据返回给客户端(为客户端提供服务)的过程，我们把它们在通信过程中的消息内容称为HTTP报文，下面简单介绍HTTP报文的结构(<a href="http://wendingding.com/2018/01/17/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%20%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8CHTTP%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">也可以参考这篇文章</a>)。</p><p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_http02.png?raw=true"></p><blockquote><p><strong>HTTP请求报文结构</strong><br><strong>❏</strong> <code>请求行</code>   请求的方法和协议等信息<br><strong>❏</strong> <code>请求头</code>   客户端以及请求本身的描述信息<br><strong>❏</strong> <code>请求体</code>  提交给服务器端的参数(GET请求没有请求体信息)</p></blockquote><p><div></div></p><blockquote><p><strong>HTTP响应报文结构</strong><br><strong>❏</strong> <code>状态行</code>   请求的状态码<br><strong>❏</strong> <code>响应头</code>   服务器端以及对响应本身的描述信息<br><strong>❏</strong> <code>响应体</code>   服务器返回给客户端的具体数据(<code>JSON/XML/Other</code>)。</p></blockquote><p>为了方便理解，这里我们使用命令行工具中的curl来发起网络请求并打印报文详情。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">wendingding:node wendingding$ curl -v 127.0.0.1:3000</span><br><span class="line">* Rebuilt URL to: 127.0.0.1:3000/</span><br><span class="line">*   Trying 127.0.0.1...</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 3000 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1:3000</span><br><span class="line">&gt; User-Agent: curl/7.49.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Content-type: text/plain;charset=utf-8</span><br><span class="line">&lt; Date: Thu, 29 Nov 2018 03:05:54 GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; </span><br><span class="line">* Connection <span class="comment">#0 to host 127.0.0.1 left intact</span></span><br><span class="line">Hi ! Nice to meet u ~</span><br></pre></td></tr></table></figure></p><p><strong>备注</strong> HTTP协议采用的是请求-响应模式，基本上以一问一答的方式来实现服务，需要注意虽然HTTP服务基于TCP会话实现但其本身却没有会话的特点且HTTP协议传递的消息都是明文的。</p><h4 id="3-0-服务端核心方法"><a href="#3-0-服务端核心方法" class="headerlink" title="3.0 服务端核心方法"></a>3.0 服务端核心方法</h4><p><span style="border:1px solid #000;padding:5px 20px;"><strong>createServer方法</strong></span></p><p><strong>作用</strong> 创建HTTP服务器。<br><strong>语法</strong> <code>var server = http.createServer([ RequsetListener ])</code><br><strong>参数</strong>  &nbsp;&nbsp;<span class="liX" style="width:150px"> RequsetListener</span>           可选的函数类型 | 用于指定当接收到客户端请求时执行的回调函数。<br><strong>展开</strong><br><span style="color:#607B8B"><strong>声明</strong></span><code>function RequsetListener(request,response){//...函数体}</code><br><span style="color:#607B8B"><strong>形参</strong></span></p><ul><li><div class="liX">request</div>   <strong>http.IncomingMessage</strong>对象 | 包含客户端请求信息。</li><li><div class="liX">response</div>  <strong>http.ServerResponse</strong>对象&nbsp;&nbsp;&nbsp;  | 包含服务器响应相关的信息和方法。</li></ul><blockquote><p><span style="color:#607B8B"><strong>第一个参数 → request的核心成员</strong></span> </p></blockquote><p><span class="spaceXX backColor">request.method</span> 请求方法。<br><span class="spaceXX backColor">request.url</span> 请求的路径。<br><span class="spaceXX backColor">request.headers</span> 请求头信息(对象)。<br><span class="spaceXX backColor">request.rawHeaders</span> 接收到的原始请求头信息。<br><span class="spaceXX backColor">request.httpVersion</span> 请求使用的HTTP协议版本。</p><blockquote><p><span style="color:#607B8B"><strong>第二个参数 → response的核心成员</strong></span> </p></blockquote><p><span class="spaceXX backColor ">response.finished</span> 响应是否已完成(默认<code>false</code>)。<br><span class="spaceXX backColor ">response.statusCode</span> 隐式响应头返回的状态码。<br><span class="spaceXX backColor ">response.statusMessage</span> 隐式响应头返回的状态信息。<br><span class="spaceXX backColor wMax">response.getHeaders()</span> 获取所有响应头信息(浅拷贝)。<br><span class="spaceXX backColor wMax">response.getHeader(name)</span> 读取指定的响应头信息。<br><span class="spaceXX backColor wMax">response.getHeaderNames()</span> 获取响应头信息字段数组。<br><span class="spaceXX backColor wMax">response.removeHeader(name)</span> 删除指定的响应头信息。<br><span class="spaceXX backColor wMax">response.setHeader(name, value)</span> 设置响应头信息同<code>writeHead</code>。<br><span class="spaceXX backColor wMax">response.setTimeout(msecs，[callback])</span> 设置 socket 的超时时间。<br><span class="spaceXX backColor wMax" style="background:#195;color:#fff">response.write(chunk,[encoding],[callback])</span> 设置响应体数据。<br><span class="spaceXX backColor wMax" style="background:#195;color:#fff">response.end([data],[encoding],[callback])</span> 设置响应体数据(结束)。<br><span class="spaceXX backColor wMax" style="background:#195;color:#fff">response.writeHead(statusCode,[msg],[headers])</span> 设置响应头信息，优先级更高。</p><p>在<code>createServer</code>回调函数中两个参数分别是请求对象和响应对象，其中请求对象封装了对TCP连接的读操作，而响应对象则封装了对底层连接的写操作。这里做深入的展开：</p><p>当接收到客户端发起的网络请求后，HTTP请求报文的头部将通过模块内的<code>http_parser</code>进行解析，在解析的过程中，请求行(第一行:<code>GET / HTTP/1.1</code>)被分解为<code>method(GET)、url(/)、httpVersion(1.1)</code>属性，而请求头中的信息被保存到<code>headers</code>属性。</p><p>如果客户端请求中存在请求体(参数)，那么可以通过<code>url</code>模块的parse方法来解析路径获取参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 引入Node内置的http模块</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 创建http服务器</span></span><br><span class="line"><span class="keyword">var</span> httpServer = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用url模块把请求路径解析为对象</span></span><br><span class="line">    <span class="keyword">var</span> urlObj = url.parse(request.url,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印请求对象中的核心属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"method "</span> + request.method); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"url "</span> + request.url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"query "</span>,urlObj.query);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"httpVersion "</span> + request.httpVersion); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"headers "</span>,request.headers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取客户端提交的参数(请求体信息)</span></span><br><span class="line">     <span class="comment">//设置响应头信息</span></span><br><span class="line">     response.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">"Content-type"</span>:<span class="string">"text/plain;"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置响应信息</span></span><br><span class="line">    response.end(<span class="string">"Hi! Nice to meet u ~"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;).listen(<span class="number">3000</span>,<span class="string">"127.0.0.1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"开启服务监听：3000端口"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在命令行窗口中通过<code>node</code>命令来执行，下面列出打印结果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wendingding:node wendingding$ node server.js </span><br><span class="line">开启服务监听：3000端口</span><br><span class="line">method GET</span><br><span class="line">url    /?username=wendingding&amp;password=123</span><br><span class="line">query  &#123; username: <span class="string">'wendingding'</span>, password: <span class="string">'123'</span> &#125;</span><br><span class="line">httpVersion 1.1</span><br><span class="line"></span><br><span class="line">headers  </span><br><span class="line">&#123; <span class="string">'host'</span>: <span class="string">'127.0.0.1:3000'</span>,</span><br><span class="line">  <span class="string">'connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">  <span class="string">'cache-control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line">  <span class="string">'upgrade-insecure-requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">  <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 AppleWebKit/537.36 Chrome/70.0.3538.102 Safari/537.36'</span>,</span><br><span class="line">  <span class="string">'accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/apng,*/*;q=0.8'</span>,</span><br><span class="line">  <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">  <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">  <span class="string">'cookie'</span>: <span class="string">'io=6oIwtImAumUxvtIvAACD'</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以通过响应对象（<code>response</code>）来设置响应头信息以及构建响应体。</p><p>响应对象的<code>setHeader</code>方法和<code>writeHead</code>方法都能够设置响应头信息，它们的区别在于<span style="color:#195"><strong>只有当调用writeHead方法后，通过setHeader设置(可以调用N次)的信息才会被写入到连接(响应头)中</strong></span>。</p><p>响应对象的<code>write</code>方法和<code>end</code>方法均能够用来构建响应体信息，它们的区别在于<code>end</code>方法执行的时候会先调用内部的<code>write</code>方法来发送数据，然后发送信号告知服务器本次响应结束，响应结束后，HTTP服务器可能会将当前连接直接用于后面的请求或者是关闭网络连接。</p><p><strong>注意点</strong> 设置响应头信息需要在write和end方法前，响应结束后应该调用end方法结束请求，否则客户端将一直处于等待状态。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>listen方法</strong></span></p><p><strong>作用</strong> 开启服务器监听。<br><strong>语法</strong> <code>http.createServer().listen(port,[host],[backlog],[callBack])</code><br><strong>参数</strong>  </p><ul><li><span class="liX" style="width:100px"> port</span> 指定需要监听的端口号。</li><li><span class="liX" style="width:100px"> host</span> 指定需要监听的地址，省略表示监听所有的客户端连接。</li><li><span class="liX" style="width:100px"> backlog</span> 指定允许客户端连接的最大数量，默认511。</li><li><span class="liX" style="width:100px"> callBack</span> 指定<code>listening</code>事件触发的回调函数(没有任何参数)。</li></ul><p><span style="border:1px solid #000;padding:5px 20px;"><strong>writeHead方法</strong></span></p><p><strong>作用</strong> 设置响应头信息。<br><strong>语法</strong> <code>response.writeHead(statusCode,[msg],[headers])</code><br><strong>参数</strong>  </p><ul><li><span class="liX" style="width:100px"> statusCode</span> 响应状态吗，譬如200。</li><li><span class="liX" style="width:100px"> msg</span> 响应状态信息，譬如<code>Not found</code>。</li><li><span class="liX" style="width:100px"> headers</span> 具体的响应头信息(<code>以key:value</code>组织成对象)。</li></ul><h4 id="4-0-客户端核心方法"><a href="#4-0-客户端核心方法" class="headerlink" title="4.0 客户端核心方法"></a>4.0 客户端核心方法</h4><p>HTTP客户端的处理方式同服务器端的处理方式几乎一致，不同在于服务器端主要设置响应头和构建响应体信息，而客户端主要设置请求信息(请求头和请求体)，它本身其实就是服务器端服务模型的另一部分。我们可以使用<code>request</code>方法来发起一个网络请求，或者也可以直接使用<code>get</code>方法来快速的发起一个get请求，其结构同Ajax异步发送网络请求基本一致。</p><p><span style="border:1px solid #000;padding:5px 20px;"><strong>request方法</strong></span></p><p><strong>作用</strong> 创建并发送网络请求。<br><strong>语法</strong> <code>http.request(url,[ options ],[ callBack ]) | http.request(options,[ callBack ])</code><br><strong>参数</strong> </p><ul><li><span class="liX" style="width:100px"> options</span> 请求的配置对象。</li><li><span class="liX" style="width:100px"> callBack</span> 获取服务器端响应时执行的函数，参数为响应对象。</li></ul><blockquote><p><strong>Options主要配置项</strong><br><strong>❏</strong> <span class="liYY">host</span>        服务器的域名或IP地址，默认为<code>localhost</code>。<br><strong>❏</strong> <span class="liYY">hostname</span>    服务器的名称。<br><strong>❏</strong> <span class="liYY">port</span>         服务器端口，默认为<code>80</code>。<br><strong>❏</strong> <span class="liYY">method</span>       请求方法，默认为<code>GET</code>。<br><strong>❏</strong> <span class="liYY">path</span>         请求路径，默认为<code>/</code>。<br><strong>❏</strong> <span class="liYY">agent</span>      用于指定HTTP代理。<br><strong>❏</strong> <span class="liYY">headers</span>      用于指定客户端的请求头信息。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//001 导入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//002 创建并发起Http网络Get请求</span></span><br><span class="line"><span class="keyword">var</span> httpRequest = http.request(&#123;</span><br><span class="line">    <span class="string">"host"</span>:<span class="string">"127.0.0.1"</span>, <span class="comment">//请求的主机地址</span></span><br><span class="line">    <span class="string">"port"</span>:<span class="string">"3000"</span>,      <span class="comment">//请求的端口号</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取响应对象中的信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"statusCode "</span>,res.statusCode);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"响应头信息 "</span>,res.headers);</span><br><span class="line">    res.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"响应体数据 ==&gt; "</span>,data.toString(<span class="string">"utf8"</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 结束请求</span></span><br><span class="line">httpRequest.end();</span><br></pre></td></tr></table></figure><p>在命令行工具中通过<code>node</code>命令来发起网络请求，并打印服务器返回的响应信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wendingding:node wendingding$ node request.js </span><br><span class="line">statusCode  200</span><br><span class="line">响应头信息  &#123; <span class="string">'content-type'</span>: <span class="string">'text/plain;'</span>,</span><br><span class="line">  date: <span class="string">'Thu, 29 Nov 2018 07:53:36 GMT'</span>,</span><br><span class="line">  connection: <span class="string">'close'</span>,</span><br><span class="line">  <span class="string">'transfer-encoding'</span>: <span class="string">'chunked'</span> &#125;</span><br><span class="line">响应体数据 ==&gt;  Hi! Nice to meet u ~</span><br></pre></td></tr></table></figure><h4 id="5-0-事件"><a href="#5-0-事件" class="headerlink" title="5.0 事件"></a>5.0 事件</h4><p>为了方便应用层的使用，HTTP服务器和客户端都抽象了一些事件，这些事件都能够使用<code>on</code>方法来进行监听，不同的事件对应请求或响应的不同阶段。</p><blockquote><p><strong>HTTP服务事件</strong> </p></blockquote><p><span class="prop"><strong>connection</strong></span>  当客户端和服务器建立连接的时候触发。<br><span class="prop" style="background:#e96900;color:#fff"><strong>request</strong></span>  在请求发送到服务器端并解析出请求头后触发。<br><span class="prop"><strong>close</strong></span>  当调用close方法停止接受新连接已有连接都断开的时候触发。<br><span class="prop"><strong>connect</strong></span>  当客户端发起CONNECT请求(代理)的时候触发。<br><span class="prop"><strong>timeout</strong></span>  当服务器超时的时候触发(可以通过<code>server.setTimeOut</code>来设置)。</p><blockquote><p><strong>HTTP请求事件</strong> </p></blockquote><p><span class="spaceX"><strong>timeout</strong></span> 当客户端请求超时的触发。<br><span class="spaceX" style="background:#195;color:#fff"><strong>abort</strong></span>  当请求已被客户端终止时触发。<br><span class="spaceX" style="background:#195;color:#fff"><strong>response</strong></span>  当接收到服务器响应的时候触发。<br><span class="spaceX"><strong>socket</strong></span>  当底层连接池中建立的连接分配给当前请丢对象时触发。<br><span class="spaceX"><strong>connect</strong></span>  当客户端发起CONNECT请求时，如果服务器端返回200则触发。</p><p>http模块中事件的监听和触发比较恶心，这里简单在下面列出具体的情况。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">如果请求成功，则以下事件会被依次触发：</span><br><span class="line">    ① 'socket' 事件。</span><br><span class="line">    ② 'response' 事件。</span><br><span class="line">        [1] res 对象的 'data' 事件（多次，若响应体为空，则不触发）。</span><br><span class="line">        [2] res 对象的 'end' 事件。</span><br><span class="line">    ③ 'close' 事件。</span><br><span class="line"></span><br><span class="line">如果连接出错，则以下事件会被依次触发：</span><br><span class="line">    ① 'socket' 事件。</span><br><span class="line">    ② 'error'  事件。</span><br><span class="line">    ③ 'close'  事件。</span><br><span class="line"></span><br><span class="line">如果连接成功之前调用 req.abort()，则以下事件会被依次触发：</span><br><span class="line">    ① 'socket' 事件。</span><br><span class="line">        (此时调用 req.abort())</span><br><span class="line">    ② 'abort' 事件。</span><br><span class="line">    ③ 'close' 事件。</span><br><span class="line">    ④ 'error' 事件并带上错误信息 'Error: socket hang up' 和错误码 'ECONNRESET'。</span><br><span class="line"></span><br><span class="line">如果响应接收到之后调用 req.abort()，则以下事件会被依次触发：</span><br><span class="line">    ① 'socket' 事件。</span><br><span class="line">    ② 'response' 事件。</span><br><span class="line">        [1] res 对象的 'data' 事件（多次）。</span><br><span class="line">        (此时调用 req.abort())</span><br><span class="line">    ③ 'abort' 事件。</span><br><span class="line">    ④ 'close' 事件。</span><br><span class="line">        res 对象的 'aborted' 事件。</span><br><span class="line">        res 对象的 'end' 事件。</span><br><span class="line">        res 对象的 'close' 事件。</span><br></pre></td></tr></table></figure></p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;tip&quot;&gt;本文对Node的内置模块http进行介绍，包括该模块的基本情况和简单使用。&lt;/div&gt;

&lt;h4 id=&quot;1-0-模块简介&quot;&gt;&lt;a href=&quot;#1-0-模块简介&quot; class=&quot;headerlink&quot; title=&quot;1.0 模块简介&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-REPL</title>
    <link href="https://weibo.com/u/3800117445/2018/11/27/Node%E7%B3%BB%E5%88%97-PRPL/"/>
    <id>https://weibo.com/u/3800117445/2018/11/27/Node系列-PRPL/</id>
    <published>2018-11-26T16:22:13.000Z</published>
    <updated>2018-11-28T03:56:35.752Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/flowerField/Source/blob/master/Blog/node_repl.png?raw=true"></p><div class="tip">本文主要介绍Node提供的交互式运行环境REPL，包括常见操作以及基础命令等内容。</div><h4 id="1-0-REPL介绍"><a href="#1-0-REPL介绍" class="headerlink" title="1.0 REPL介绍"></a>1.0 REPL介绍</h4><p>在Node.js中，提供了一个交互式的运行环境-REPL(<strong><code>Read-Eval-Print-Loop</code></strong>)。</p><div><br><span style="border:1px solid #000;padding:5px"><strong>REPL解释器执行任务的方式</strong></span><br><br>❏  <div class="liYY"><strong>Read</strong></div>  <strong>读取</strong>用户输入并存储。<br>❏  <div class="liYY"><strong>Eval</strong></div>  <strong>执行</strong>用户输入的代码。<br>❏  <div class="liYY"><strong>Print</strong></div> <strong>输出</strong>代码的执行结果。<br>❏  <div class="liYY"><strong>Loop</strong></div>  <strong>循环</strong>执行以上步骤，直到退出。<br></div><p>在REPL环境中我们可以<strong>操作变量</strong>、<strong>执行JavaScript文件</strong>、<strong>访问和使用Node内置的模块</strong>、<strong>声明和调用函数</strong>甚至<strong>开启服务器</strong>，在该环境中可以方便的对JavaScript代码进行调试操作。</p><h4 id="2-0-基本操作"><a href="#2-0-基本操作" class="headerlink" title="2.0 基本操作"></a>2.0 基本操作</h4><p>在安装好Node.js之后，打开命令行窗口输入<code>node</code>指令即可进入到REPL环境。此时，命令行窗口中将会显示REPL运行环境的提示符<code>&gt;</code></p><p><span style="border:1px solid #000;padding:5px"><strong>操作变量</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wendingding$ node</span><br><span class="line">&gt; name = <span class="string">"wendingding"</span></span><br><span class="line"><span class="string">'wendingding'</span></span><br><span class="line">&gt; age = <span class="number">18</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">"姓名："</span>+name,<span class="string">"年龄："</span>+age)</span><br><span class="line">姓名：wendingding 年龄：<span class="number">18</span></span><br><span class="line"></span><br><span class="line">&gt; obj = &#123;<span class="attr">className</span>:<span class="string">"太乙金仙"</span>,<span class="attr">id</span>:<span class="number">01</span>&#125;;</span><br><span class="line">&#123; <span class="attr">className</span>: <span class="string">'太乙金仙'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;</span><br><span class="line">&gt; obj.className</span><br><span class="line"><span class="string">'太乙金仙'</span></span><br><span class="line">&gt; obj.id</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>上面的命令行中我们直接把字符串赋值给<code>name</code>，把数字18赋值给<code>age</code>。此外，还以字面量的方式创建了<code>obj对象</code>，而且通常观察发现REPL环境对JavaScript代码的支持还是比较好的。上面命令行在演示操作变量的时候，并没有使用<code>var</code>关键字，需要注意的是在REPL环境中如果<span style="color:#666"><strong>把表达式赋值给var 关键字声明的变量，那么回车之后得到的结果将是undefined</strong></span>。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wendingding:JQuery wendingding$ node</span><br><span class="line">&gt; <span class="keyword">var</span> name = <span class="string">"LiuY"</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; name</span><br><span class="line"><span class="string">'LiuY'</span></span><br><span class="line">&gt; <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"LiuY"</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">birthday</span>:<span class="string">"1993-08-22"</span>&#125;;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; obj</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">birthday</span>: <span class="string">'1993-08-22'</span> &#125;</span><br><span class="line">&gt; obj.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) &#125;</span><br><span class="line">[<span class="built_in">Function</span>]</span><br><span class="line">&gt; obj.showName</span><br><span class="line">[<span class="built_in">Function</span>]</span><br><span class="line">&gt; obj.showName();</span><br><span class="line">LiuY</span><br></pre></td></tr></table></figure><div class="titleX"> <span style="color:#666">★</span> 为什么输出的是undefined而不是具体的值？</div><p>变量是否使用var声明其结果截然不同，是因为<code>REPL环境内部使用eval函数来评估表达式的执行结果</code>。</p><p>eval函数的作用主要是把字符串转换为JavaScript的代码并且马上执行，在早期开发中常用来处理JSON数据的反序列化处理(具体的详情可以参考<a href="http://wendingding.com/2018/04/16/javaScript%E7%B3%BB%E5%88%97%20[05]-javaScript%E5%92%8CJSON/" target="_blank" rel="noopener">JSON数据解析</a>)，但因为eval函数的使用存在严重的安全隐患问题且会破坏JavaScript代码本身的词法作用域影响性能，所以不建议使用(在严格模式下禁用)。我们可以通过执行下面的代码来进行比较和验证。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">"name='wendingding'"</span>));</span><br><span class="line">wendingding</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">"var newName='wendingding'"</span>));</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure></p><p><strong>备注</strong> 在REPL环境中访问对象方法(函数)的时候，并不会完整的打印整个函数的内容而总是简单的显示和输出<code>[Function]</code>，这是因为函数内容可能又臭又长，做人做事呐还是简单点好 <span style="color:#195"> <strong>：）</strong></span></p><p><span style="border:1px solid #000;padding:5px"><strong>下划线字符</strong></span></p><p>在REPL环境中，我们可以通过下划线字符(<code>_</code>)来访问最近使用的表达式。您可以通过(<code>_</code>)来访问最近的变量，对象甚至是对象的属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wendingding:JQuery wendingding$ node</span><br><span class="line">&gt; index = <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; _ + <span class="number">4</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">&gt;  obj = &#123;<span class="attr">name</span>:<span class="string">"LiuY"</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age)&#125;&#125;</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'LiuY'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">show</span>: [<span class="built_in">Function</span>: show] &#125;</span><br><span class="line">&gt; obj.name</span><br><span class="line"><span class="string">'LiuY'</span></span><br><span class="line">&gt; _</span><br><span class="line"><span class="string">'LiuY'</span></span><br><span class="line">&gt; obj.show</span><br><span class="line">[<span class="built_in">Function</span>: show]</span><br><span class="line">&gt; _</span><br><span class="line">[<span class="built_in">Function</span>: show]</span><br></pre></td></tr></table></figure><div class="tip"><strong>注意</strong> 在使用下划线字符(<code>_</code>)访问最近表达式的时候并不能修改变量的值。</div><p><span style="border:1px solid #000;padding:5px"><strong>多行输入</strong></span></p><p>在REPL环境中支持输入多行代码，如果需要在REPL环境中声明和执行函数而且函数体较长，那么可以将函数分成多行来书写(直接回车即可)，当该表达式还没有完成的时候，REPL环境将为每一行添加<code>···</code>符号，下面给出简单的使用示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wendingding:JQuery wendingding$ node</span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">... var result = a + b;</span><br><span class="line">... console.log(result);</span><br><span class="line">... return result;</span><br><span class="line">... &#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><h4 id="3-0-基础命令"><a href="#3-0-基础命令" class="headerlink" title="3.0 基础命令"></a>3.0 基础命令</h4><p><span class="spaceX">.break </span> 返回命令提示符的起点，常用于重写代码(调整)。<br><span class="spaceX">.clear </span> 返回命令提示符的起点，同<code>.break</code>命令。<br><span class="spaceX">.exit </span>  退出当前的REPL运行环境。<br><span class="spaceX">.help</span>  显示REPL环境中所有的基础命令。<br><span class="spaceX">.save </span>  把REPL环境中输入的所有表达式保存到文件。<br><span class="spaceX">.load </span>  把指定文件中的所有表达式依次加载到当前的REPL运行环境。</p><p><strong><code>说明</code></strong> 在Node.js中提供了一些基础命令来帮助我们更好的使用REPL运行环境，这些基础命令都以点(<code>.</code>)开始，下面给出简单示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">wendingding:JQuery wendingding$ cd /Users/文顶顶/Desktop/node </span><br><span class="line">wendingding:node wendingding$ touch index.js</span><br><span class="line">wendingding:node wendingding$ vim index.js </span><br><span class="line">wendingding:node wendingding$ cat index.js </span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"文顶顶"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name:<span class="string">"zs"</span>,</span><br><span class="line">class:"Node",</span><br><span class="line">show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name+<span class="string">" 班级："</span>+ <span class="keyword">this</span>.class)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//001 测试.load命令</span></span><br><span class="line">wendingding:node wendingding$ node</span><br><span class="line">&gt; .load ./index.js</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"文顶顶"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name:<span class="string">"zs"</span>,</span><br><span class="line">class:"Node",</span><br><span class="line">show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name+<span class="string">" 班级："</span>+ <span class="keyword">this</span>.class)</span><br><span class="line">&#125;        </span><br><span class="line">&#125;        </span><br><span class="line">&gt; obj.name</span><br><span class="line"><span class="string">'zs'</span></span><br><span class="line">&gt; name</span><br><span class="line"><span class="string">'文顶顶'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//002 测试.help命令</span></span><br><span class="line">&gt; .help</span><br><span class="line">.break    Sometimes you get stuck, <span class="keyword">this</span> gets you out</span><br><span class="line">.clear    Alias <span class="keyword">for</span> .break</span><br><span class="line">.editor   Enter editor mode</span><br><span class="line">.exit     Exit the repl</span><br><span class="line">.help     Print <span class="keyword">this</span> help message</span><br><span class="line">.load     Load JS <span class="keyword">from</span> a file into the REPL session</span><br><span class="line">.save     Save all evaluated commands <span class="keyword">in</span> <span class="keyword">this</span> REPL session to a file</span><br><span class="line">&gt; index = <span class="string">"我是测试的内容"</span>;</span><br><span class="line"><span class="string">'我是测试的内容'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//003 测试.save命令</span></span><br><span class="line">&gt; .save ./save.js</span><br><span class="line">Session saved to:./save.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//004 测试.exit命令</span></span><br><span class="line">&gt; .exit</span><br><span class="line">wendingding:node wendingding$ cat save.js </span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"文顶顶"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name:<span class="string">"zs"</span>,</span><br><span class="line">class:"Node",</span><br><span class="line">show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name+<span class="string">" 班级："</span>+ <span class="keyword">this</span>.class)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.name</span><br><span class="line">name</span><br><span class="line">index = <span class="string">"我是测试的内容"</span>;</span><br></pre></td></tr></table></figure><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a> | <a href="http://wendingding.com" target="_blank" rel="noopener">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles" target="_blank" rel="noopener">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&amp;mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">文顶顶</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/node_repl.png?raw=true&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;本文主要介绍Node提供的交互式运行环境REPL，包
      
    
    </summary>
    
    
      <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
